// Generated by Haxe 4.1.5
#ifndef INCLUDED_meta_data_Timings
#define INCLUDED_meta_data_Timings

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS1(flixel,FlxBasic)
HX_DECLARE_CLASS1(flixel,FlxObject)
HX_DECLARE_CLASS1(flixel,FlxSprite)
HX_DECLARE_CLASS2(flixel,util,IFlxDestroyable)
HX_DECLARE_CLASS3(gameObjects,userInterface,notes,Note)
HX_DECLARE_CLASS1(haxe,IMap)
HX_DECLARE_CLASS2(haxe,ds,StringMap)
HX_DECLARE_CLASS2(meta,data,Timings)
HX_DECLARE_CLASS3(meta,data,dependency,FNFSprite)

namespace meta{
namespace data{


class HXCPP_CLASS_ATTRIBUTES Timings_obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef Timings_obj OBJ_;
		Timings_obj();

	public:
		enum { _hx_ClassId = 0x5a68bdba };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="meta.data.Timings")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,false,"meta.data.Timings"); }

		inline static ::hx::ObjectPtr< Timings_obj > __new() {
			::hx::ObjectPtr< Timings_obj > __this = new Timings_obj();
			__this->__construct();
			return __this;
		}

		inline static ::hx::ObjectPtr< Timings_obj > __alloc(::hx::Ctx *_hx_ctx) {
			Timings_obj *__this = (Timings_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(Timings_obj), false, "meta.data.Timings"));
			*(void **)__this = Timings_obj::_hx_vtable;
			return __this;
		}

		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~Timings_obj();

		HX_DO_RTTI_ALL;
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, ::hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, ::hx::PropertyAccess inCallProp);
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("Timings",89,4e,ec,a8); }

		static void __boot();
		static Float accuracy;
		static Float trueAccuracy;
		static ::Array< Float > judgementRates;
		static  ::haxe::ds::StringMap judgementsMap;
		static Float msThreshold;
		static  ::haxe::ds::StringMap scoreRating;
		static ::String ratingFinal;
		static int notesHit;
		static ::String comboDisplay;
		static int notesHitNoSus;
		static  ::haxe::ds::StringMap gottenJudgements;
		static ::String smallestRating;
		static void callAccuracy();
		static ::Dynamic callAccuracy_dyn();

		static void accuracyMaxCalculation(::Array< ::Dynamic> realNotes);
		static ::Dynamic accuracyMaxCalculation_dyn();

		static void updateAccuracy(int judgement,::hx::Null< bool >  isSustain);
		static ::Dynamic updateAccuracy_dyn();

		static void updateFCDisplay();
		static ::Dynamic updateFCDisplay_dyn();

		static Float getAccuracy();
		static ::Dynamic getAccuracy_dyn();

		static void updateScoreRating();
		static ::Dynamic updateScoreRating_dyn();

		static ::String returnScoreRating();
		static ::Dynamic returnScoreRating_dyn();

};

} // end namespace meta
} // end namespace data

#endif /* INCLUDED_meta_data_Timings */ 

// Generated by Haxe 4.1.5
#ifndef INCLUDED_meta_data_dependency_Discord
#define INCLUDED_meta_data_dependency_Discord

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS3(meta,data,dependency,Discord)

namespace meta{
namespace data{
namespace dependency{


class HXCPP_CLASS_ATTRIBUTES Discord_obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef Discord_obj OBJ_;
		Discord_obj();

	public:
		enum { _hx_ClassId = 0x19dc88a6 };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="meta.data.dependency.Discord")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,false,"meta.data.dependency.Discord"); }

		inline static ::hx::ObjectPtr< Discord_obj > __new() {
			::hx::ObjectPtr< Discord_obj > __this = new Discord_obj();
			__this->__construct();
			return __this;
		}

		inline static ::hx::ObjectPtr< Discord_obj > __alloc(::hx::Ctx *_hx_ctx) {
			Discord_obj *__this = (Discord_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(Discord_obj), false, "meta.data.dependency.Discord"));
			*(void **)__this = Discord_obj::_hx_vtable;
			return __this;
		}

		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~Discord_obj();

		HX_DO_RTTI_ALL;
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, ::hx::PropertyAccess inCallProp);
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("Discord",8c,e1,05,80); }

		static void initializeRPC();
		static ::Dynamic initializeRPC_dyn();

		static void onReady();
		static ::Dynamic onReady_dyn();

		static void onError(int _code,::String _message);
		static ::Dynamic onError_dyn();

		static void onDisconnected(int _code,::String _message);
		static ::Dynamic onDisconnected_dyn();

		static void changePresence(::String details,::String state,::String smallImageKey, ::Dynamic hasStartTimestamp, ::Dynamic endTimestamp);
		static ::Dynamic changePresence_dyn();

		static void shutdownRPC();
		static ::Dynamic shutdownRPC_dyn();

};

} // end namespace meta
} // end namespace data
} // end namespace dependency

#endif /* INCLUDED_meta_data_dependency_Discord */ 

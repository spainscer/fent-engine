// Generated by Haxe 4.1.5
#ifndef INCLUDED_meta_data_dependency_FNFTransition
#define INCLUDED_meta_data_dependency_FNFTransition

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_flixel_addons_transition_Transition
#include <flixel/addons/transition/Transition.h>
#endif
HX_DECLARE_CLASS1(flixel,FlxBasic)
HX_DECLARE_CLASS1(flixel,FlxObject)
HX_DECLARE_CLASS1(flixel,FlxSprite)
HX_DECLARE_CLASS1(flixel,FlxState)
HX_DECLARE_CLASS1(flixel,FlxSubState)
HX_DECLARE_CLASS3(flixel,addons,transition,Transition)
HX_DECLARE_CLASS3(flixel,addons,transition,TransitionData)
HX_DECLARE_CLASS2(flixel,group,FlxTypedGroup)
HX_DECLARE_CLASS2(flixel,util,IFlxDestroyable)
HX_DECLARE_CLASS3(meta,data,dependency,FNFTransition)

namespace meta{
namespace data{
namespace dependency{


class HXCPP_CLASS_ATTRIBUTES FNFTransition_obj : public  ::flixel::addons::transition::Transition_obj
{
	public:
		typedef  ::flixel::addons::transition::Transition_obj super;
		typedef FNFTransition_obj OBJ_;
		FNFTransition_obj();

	public:
		enum { _hx_ClassId = 0x71440779 };

		void __construct( ::flixel::addons::transition::TransitionData data);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="meta.data.dependency.FNFTransition")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"meta.data.dependency.FNFTransition"); }
		static ::hx::ObjectPtr< FNFTransition_obj > __new( ::flixel::addons::transition::TransitionData data);
		static ::hx::ObjectPtr< FNFTransition_obj > __alloc(::hx::Ctx *_hx_ctx, ::flixel::addons::transition::TransitionData data);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~FNFTransition_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("FNFTransition",33,9d,27,a7); }

		 ::flixel::FlxSprite back;
		bool camStarted;
		void update(Float gameTime);

};

} // end namespace meta
} // end namespace data
} // end namespace dependency

#endif /* INCLUDED_meta_data_dependency_FNFTransition */ 

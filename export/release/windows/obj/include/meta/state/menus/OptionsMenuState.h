// Generated by Haxe 4.1.5
#ifndef INCLUDED_meta_state_menus_OptionsMenuState
#define INCLUDED_meta_state_menus_OptionsMenuState

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_meta_MusicBeatState
#include <meta/MusicBeatState.h>
#endif
HX_DECLARE_CLASS1(flixel,FlxBasic)
HX_DECLARE_CLASS1(flixel,FlxObject)
HX_DECLARE_CLASS1(flixel,FlxSprite)
HX_DECLARE_CLASS1(flixel,FlxState)
HX_DECLARE_CLASS3(flixel,addons,transition,FlxTransitionableState)
HX_DECLARE_CLASS3(flixel,addons,transition,TransitionData)
HX_DECLARE_CLASS3(flixel,addons,ui,FlxUIState)
HX_DECLARE_CLASS4(flixel,addons,ui,interfaces,IEventGetter)
HX_DECLARE_CLASS4(flixel,addons,ui,interfaces,IFlxUIState)
HX_DECLARE_CLASS2(flixel,group,FlxTypedGroup)
HX_DECLARE_CLASS2(flixel,group,FlxTypedSpriteGroup)
HX_DECLARE_CLASS2(flixel,text,FlxText)
HX_DECLARE_CLASS2(flixel,util,FlxTimer)
HX_DECLARE_CLASS2(flixel,util,IFlxDestroyable)
HX_DECLARE_CLASS3(gameObjects,userInterface,menu,Selector)
HX_DECLARE_CLASS1(haxe,IMap)
HX_DECLARE_CLASS2(haxe,ds,ObjectMap)
HX_DECLARE_CLASS2(haxe,ds,StringMap)
HX_DECLARE_CLASS1(meta,MusicBeatState)
HX_DECLARE_CLASS3(meta,data,dependency,FNFSprite)
HX_DECLARE_CLASS3(meta,data,dependency,FNFUIState)
HX_DECLARE_CLASS3(meta,state,menus,OptionsMenuState)

namespace meta{
namespace state{
namespace menus{


class HXCPP_CLASS_ATTRIBUTES OptionsMenuState_obj : public  ::meta::MusicBeatState_obj
{
	public:
		typedef  ::meta::MusicBeatState_obj super;
		typedef OptionsMenuState_obj OBJ_;
		OptionsMenuState_obj();

	public:
		enum { _hx_ClassId = 0x34f32d40 };

		void __construct( ::flixel::addons::transition::TransitionData TransIn, ::flixel::addons::transition::TransitionData TransOut);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="meta.state.menus.OptionsMenuState")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"meta.state.menus.OptionsMenuState"); }
		static ::hx::ObjectPtr< OptionsMenuState_obj > __new( ::flixel::addons::transition::TransitionData TransIn, ::flixel::addons::transition::TransitionData TransOut);
		static ::hx::ObjectPtr< OptionsMenuState_obj > __alloc(::hx::Ctx *_hx_ctx, ::flixel::addons::transition::TransitionData TransIn, ::flixel::addons::transition::TransitionData TransOut);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~OptionsMenuState_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("OptionsMenuState",d4,0c,2d,7c); }

		 ::haxe::ds::StringMap categoryMap;
		 ::flixel::group::FlxTypedGroup activeSubgroup;
		 ::flixel::group::FlxTypedGroup attachments;
		int curSelection;
		 ::Dynamic curSelectedScript;
		Dynamic curSelectedScript_dyn() { return curSelectedScript;}
		::String curCategory;
		bool lockedMovement;
		void create();

		 ::haxe::ds::ObjectMap currentAttachmentMap;
		void loadSubgroup(::String subgroupName);
		::Dynamic loadSubgroup_dyn();

		void selectOption(int newSelection,::hx::Null< bool >  playSound);
		::Dynamic selectOption_dyn();

		void setAttachmentAlpha( ::flixel::FlxSprite attachment,Float newAlpha);
		::Dynamic setAttachmentAlpha_dyn();

		 ::flixel::text::FlxText infoText;
		::String finalText;
		::String textValue;
		 ::flixel::util::FlxTimer infoTimer;
		void update(Float elapsed);

		void regenInfoText();
		::Dynamic regenInfoText_dyn();

		void updateSelections();
		::Dynamic updateSelections_dyn();

		 ::flixel::group::FlxTypedGroup returnSubgroup(::String groupName);
		::Dynamic returnSubgroup_dyn();

		 ::haxe::ds::ObjectMap returnExtrasMap( ::flixel::group::FlxTypedGroup alphabetGroup);
		::Dynamic returnExtrasMap_dyn();

		void getFromOption();
		::Dynamic getFromOption_dyn();

		void updateCheckmark( ::meta::data::dependency::FNFSprite checkmark,bool animation);
		::Dynamic updateCheckmark_dyn();

		void updateSelector( ::gameObjects::userInterface::menu::Selector selector,int updateBy);
		::Dynamic updateSelector_dyn();

		void callNewGroup();
		::Dynamic callNewGroup_dyn();

		void openControlmenu();
		::Dynamic openControlmenu_dyn();

		void exitMenu();
		::Dynamic exitMenu_dyn();

};

} // end namespace meta
} // end namespace state
} // end namespace menus

#endif /* INCLUDED_meta_state_menus_OptionsMenuState */ 

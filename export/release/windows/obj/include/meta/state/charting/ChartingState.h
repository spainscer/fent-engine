// Generated by Haxe 4.1.5
#ifndef INCLUDED_meta_state_charting_ChartingState
#define INCLUDED_meta_state_charting_ChartingState

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_meta_MusicBeatState
#include <meta/MusicBeatState.h>
#endif
HX_DECLARE_CLASS1(flixel,FlxBasic)
HX_DECLARE_CLASS1(flixel,FlxCamera)
HX_DECLARE_CLASS1(flixel,FlxObject)
HX_DECLARE_CLASS1(flixel,FlxSprite)
HX_DECLARE_CLASS1(flixel,FlxState)
HX_DECLARE_CLASS1(flixel,FlxStrip)
HX_DECLARE_CLASS3(flixel,addons,display,FlxBackdrop)
HX_DECLARE_CLASS3(flixel,addons,display,FlxTiledSprite)
HX_DECLARE_CLASS3(flixel,addons,transition,FlxTransitionableState)
HX_DECLARE_CLASS3(flixel,addons,transition,TransitionData)
HX_DECLARE_CLASS3(flixel,addons,ui,FlxUIState)
HX_DECLARE_CLASS4(flixel,addons,ui,interfaces,IEventGetter)
HX_DECLARE_CLASS4(flixel,addons,ui,interfaces,IFlxUIState)
HX_DECLARE_CLASS2(flixel,graphics,FlxGraphic)
HX_DECLARE_CLASS2(flixel,group,FlxTypedGroup)
HX_DECLARE_CLASS2(flixel,group,FlxTypedSpriteGroup)
HX_DECLARE_CLASS2(flixel,_hx_system,FlxSound)
HX_DECLARE_CLASS2(flixel,util,IFlxDestroyable)
HX_DECLARE_CLASS3(gameObjects,userInterface,notes,Note)
HX_DECLARE_CLASS1(meta,MusicBeatState)
HX_DECLARE_CLASS3(meta,data,dependency,FNFSprite)
HX_DECLARE_CLASS3(meta,data,dependency,FNFUIState)
HX_DECLARE_CLASS3(meta,state,charting,ChartingState)

namespace meta{
namespace state{
namespace charting{


class HXCPP_CLASS_ATTRIBUTES ChartingState_obj : public  ::meta::MusicBeatState_obj
{
	public:
		typedef  ::meta::MusicBeatState_obj super;
		typedef ChartingState_obj OBJ_;
		ChartingState_obj();

	public:
		enum { _hx_ClassId = 0x66451e41 };

		void __construct( ::flixel::addons::transition::TransitionData TransIn, ::flixel::addons::transition::TransitionData TransOut);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="meta.state.charting.ChartingState")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"meta.state.charting.ChartingState"); }
		static ::hx::ObjectPtr< ChartingState_obj > __new( ::flixel::addons::transition::TransitionData TransIn, ::flixel::addons::transition::TransitionData TransOut);
		static ::hx::ObjectPtr< ChartingState_obj > __alloc(::hx::Ctx *_hx_ctx, ::flixel::addons::transition::TransitionData TransIn, ::flixel::addons::transition::TransitionData TransOut);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~ChartingState_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("ChartingState",8d,e0,dd,9b); }

		static void __boot();
		static Float songPosition;
		static  ::Dynamic curSong;
		static int gridSize;
		 ::Dynamic _song;
		 ::flixel::_hx_system::FlxSound songMusic;
		 ::flixel::_hx_system::FlxSound vocals;
		int keysTotal;
		 ::flixel::FlxSprite strumLine;
		 ::flixel::FlxCamera camHUD;
		 ::flixel::FlxCamera camGame;
		 ::flixel::FlxObject strumLineCam;
		 ::flixel::FlxSprite dummyArrow;
		 ::flixel::group::FlxTypedGroup curRenderedNotes;
		 ::flixel::group::FlxTypedGroup curRenderedSustains;
		 ::flixel::group::FlxTypedGroup curRenderedSections;
		 ::flixel::group::FlxTypedSpriteGroup arrowGroup;
		void create();

		::Array< ::Dynamic> hitSoundsPlayed;
		void update(Float elapsed);

		void stepHit();

		Float getStrumTime(Float yPos);
		::Dynamic getStrumTime_dyn();

		Float getYfromStrum(Float strumTime);
		::Dynamic getYfromStrum_dyn();

		 ::flixel::addons::display::FlxTiledSprite fullGrid;
		void generateGrid();
		::Dynamic generateGrid_dyn();

		 ::flixel::graphics::FlxGraphic sectionLineGraphic;
		 ::flixel::graphics::FlxGraphic sectionCameraGraphic;
		 ::flixel::graphics::FlxGraphic sectionStepGraphic;
		void regenerateSection(int section,Float placement);
		::Dynamic regenerateSection_dyn();

		int sectionsMax;
		void generateNotes();
		::Dynamic generateNotes_dyn();

		int extraSize;
		void generateSection();
		::Dynamic generateSection_dyn();

		void loadSong(::String daSong);
		::Dynamic loadSong_dyn();

		void generateChartNote(int daNoteInfo,Float daStrumTime,Float daSus,Float daNoteAlt,int noteSection);
		::Dynamic generateChartNote_dyn();

		void generateSustain(::hx::Null< Float >  daStrumTime,::hx::Null< int >  daNoteInfo,::hx::Null< Float >  daSus,::hx::Null< Float >  daNoteAlt, ::gameObjects::userInterface::notes::Note note);
		::Dynamic generateSustain_dyn();

		 ::flixel::addons::display::FlxBackdrop coolGrid;
		 ::flixel::FlxSprite coolGradient;
		void generateBackground();
		::Dynamic generateBackground_dyn();

		int adjustSide(int noteData,bool sectionTemp);
		::Dynamic adjustSide_dyn();

		void pauseMusic();
		::Dynamic pauseMusic_dyn();

		void resyncVocals();
		::Dynamic resyncVocals_dyn();

};

} // end namespace meta
} // end namespace state
} // end namespace charting

#endif /* INCLUDED_meta_state_charting_ChartingState */ 

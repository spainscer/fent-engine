// Generated by Haxe 4.1.5
#ifndef INCLUDED_meta_InfoHud
#define INCLUDED_meta_InfoHud

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_openfl_text_TextField
#include <openfl/text/TextField.h>
#endif
HX_DECLARE_CLASS1(meta,InfoHud)
HX_DECLARE_CLASS2(openfl,display,DisplayObject)
HX_DECLARE_CLASS2(openfl,display,IBitmapDrawable)
HX_DECLARE_CLASS2(openfl,display,InteractiveObject)
HX_DECLARE_CLASS2(openfl,events,EventDispatcher)
HX_DECLARE_CLASS2(openfl,events,IEventDispatcher)
HX_DECLARE_CLASS2(openfl,text,TextField)

namespace meta{


class HXCPP_CLASS_ATTRIBUTES InfoHud_obj : public  ::openfl::text::TextField_obj
{
	public:
		typedef  ::openfl::text::TextField_obj super;
		typedef InfoHud_obj OBJ_;
		InfoHud_obj();

	public:
		enum { _hx_ClassId = 0x5c37dfe4 };

		void __construct(::hx::Null< Float >  __o_x,::hx::Null< Float >  __o_y,::hx::Null< int >  __o_color,::hx::Null< bool >  __o_hudDisplay);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="meta.InfoHud")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"meta.InfoHud"); }
		static ::hx::ObjectPtr< InfoHud_obj > __new(::hx::Null< Float >  __o_x,::hx::Null< Float >  __o_y,::hx::Null< int >  __o_color,::hx::Null< bool >  __o_hudDisplay);
		static ::hx::ObjectPtr< InfoHud_obj > __alloc(::hx::Ctx *_hx_ctx,::hx::Null< Float >  __o_x,::hx::Null< Float >  __o_y,::hx::Null< int >  __o_color,::hx::Null< bool >  __o_hudDisplay);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~InfoHud_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("InfoHud",c9,70,55,db); }

		static void __boot();
		static int currentFPS;
		static Float memoryUsage;
		static bool displayFps;
		static bool displayMemory;
		static bool displayExtra;
		static Float getFrames();
		static ::Dynamic getFrames_dyn();

		static Float getMemoryUsage();
		static ::Dynamic getMemoryUsage_dyn();

		static void updateDisplayInfo(bool shouldDisplayFps,bool shouldDisplayExtra,bool shouldDisplayMemory);
		static ::Dynamic updateDisplayInfo_dyn();

		int cacheCount;
		Float currentTime;
		::Array< Float > times;
		bool display;
		void _hx___enterFrame(int _tmp_deltaTime);

};

} // end namespace meta

#endif /* INCLUDED_meta_InfoHud */ 

// Generated by Haxe 4.1.5
#ifndef INCLUDED_Init
#define INCLUDED_Init

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
HX_DECLARE_CLASS0(Init)
HX_DECLARE_CLASS1(flixel,FlxBasic)
HX_DECLARE_CLASS1(flixel,FlxState)
HX_DECLARE_CLASS2(flixel,group,FlxTypedGroup)
HX_DECLARE_CLASS2(flixel,util,IFlxDestroyable)
HX_DECLARE_CLASS1(haxe,IMap)
HX_DECLARE_CLASS2(haxe,ds,StringMap)
HX_DECLARE_CLASS2(openfl,filters,BitmapFilter)



class HXCPP_CLASS_ATTRIBUTES Init_obj : public  ::flixel::FlxState_obj
{
	public:
		typedef  ::flixel::FlxState_obj super;
		typedef Init_obj OBJ_;
		Init_obj();

	public:
		enum { _hx_ClassId = 0x04e75d54 };

		void __construct( ::Dynamic MaxSize);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="Init")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"Init"); }
		static ::hx::ObjectPtr< Init_obj > __new( ::Dynamic MaxSize);
		static ::hx::ObjectPtr< Init_obj > __alloc(::hx::Ctx *_hx_ctx, ::Dynamic MaxSize);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~Init_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, ::hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, ::hx::PropertyAccess inCallProp);
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("Init",30,67,94,30); }

		static void __boot();
		static ::String FORCED;
		static ::String NOT_FORCED;
		static  ::haxe::ds::StringMap gameSettings;
		static  ::haxe::ds::StringMap trueSettings;
		static  ::haxe::ds::StringMap settingsDescriptions;
		static  ::haxe::ds::StringMap gameControls;
		static ::Array< ::Dynamic> filters;
		static  ::haxe::ds::StringMap gameFilters;
		static void loadSettings();
		static ::Dynamic loadSettings_dyn();

		static void loadControls();
		static ::Dynamic loadControls_dyn();

		static void saveSettings();
		static ::Dynamic saveSettings_dyn();

		static void saveControls();
		static ::Dynamic saveControls_dyn();

		static void updateAll();
		static ::Dynamic updateAll_dyn();

		void create();

		void gotoTitleScreen();
		::Dynamic gotoTitleScreen_dyn();

};


#endif /* INCLUDED_Init */ 

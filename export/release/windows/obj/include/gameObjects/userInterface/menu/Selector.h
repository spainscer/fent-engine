// Generated by Haxe 4.1.5
#ifndef INCLUDED_gameObjects_userInterface_menu_Selector
#define INCLUDED_gameObjects_userInterface_menu_Selector

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_flixel_group_FlxTypedSpriteGroup
#include <flixel/group/FlxTypedSpriteGroup.h>
#endif
HX_DECLARE_CLASS1(flixel,FlxBasic)
HX_DECLARE_CLASS1(flixel,FlxObject)
HX_DECLARE_CLASS1(flixel,FlxSprite)
HX_DECLARE_CLASS2(flixel,group,FlxTypedSpriteGroup)
HX_DECLARE_CLASS2(flixel,util,IFlxDestroyable)
HX_DECLARE_CLASS3(gameObjects,userInterface,menu,Selector)
HX_DECLARE_CLASS3(meta,data,dependency,FNFSprite)
HX_DECLARE_CLASS3(meta,data,font,Alphabet)

namespace gameObjects{
namespace userInterface{
namespace menu{


class HXCPP_CLASS_ATTRIBUTES Selector_obj : public  ::flixel::group::FlxTypedSpriteGroup_obj
{
	public:
		typedef  ::flixel::group::FlxTypedSpriteGroup_obj super;
		typedef Selector_obj OBJ_;
		Selector_obj();

	public:
		enum { _hx_ClassId = 0x54881eae };

		void __construct(::hx::Null< Float >  __o_x,::hx::Null< Float >  __o_y,::String word,::Array< ::String > options,::hx::Null< bool >  __o_fpsCap,::hx::Null< bool >  __o_darkBG);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="gameObjects.userInterface.menu.Selector")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"gameObjects.userInterface.menu.Selector"); }
		static ::hx::ObjectPtr< Selector_obj > __new(::hx::Null< Float >  __o_x,::hx::Null< Float >  __o_y,::String word,::Array< ::String > options,::hx::Null< bool >  __o_fpsCap,::hx::Null< bool >  __o_darkBG);
		static ::hx::ObjectPtr< Selector_obj > __alloc(::hx::Ctx *_hx_ctx,::hx::Null< Float >  __o_x,::hx::Null< Float >  __o_y,::String word,::Array< ::String > options,::hx::Null< bool >  __o_fpsCap,::hx::Null< bool >  __o_darkBG);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~Selector_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("Selector",3f,ef,1e,8b); }

		 ::meta::data::dependency::FNFSprite leftSelector;
		 ::meta::data::dependency::FNFSprite rightSelector;
		 ::meta::data::font::Alphabet optionChosen;
		::String chosenOptionString;
		::Array< ::String > options;
		bool fpsCap;
		bool darkBG;
		 ::meta::data::dependency::FNFSprite createSelector(::hx::Null< Float >  objectX,::hx::Null< Float >  objectY,::String word,::String dir);
		::Dynamic createSelector_dyn();

		void update(Float elapsed);

		void selectorPlay(::String whichSelector,::String animPlayed);
		::Dynamic selectorPlay_dyn();

		::Array< ::Dynamic> objectArray;
		::Array< ::Dynamic> positionLog;
		 ::Dynamic add( ::Dynamic _tmp_object);

};

} // end namespace gameObjects
} // end namespace userInterface
} // end namespace menu

#endif /* INCLUDED_gameObjects_userInterface_menu_Selector */ 

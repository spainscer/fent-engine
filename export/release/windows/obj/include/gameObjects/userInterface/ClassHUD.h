// Generated by Haxe 4.1.5
#ifndef INCLUDED_gameObjects_userInterface_ClassHUD
#define INCLUDED_gameObjects_userInterface_ClassHUD

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
HX_DECLARE_CLASS1(flixel,FlxBasic)
HX_DECLARE_CLASS1(flixel,FlxObject)
HX_DECLARE_CLASS1(flixel,FlxSprite)
HX_DECLARE_CLASS2(flixel,group,FlxTypedGroup)
HX_DECLARE_CLASS2(flixel,text,FlxText)
HX_DECLARE_CLASS2(flixel,ui,FlxBar)
HX_DECLARE_CLASS2(flixel,util,IFlxDestroyable)
HX_DECLARE_CLASS2(gameObjects,userInterface,ClassHUD)
HX_DECLARE_CLASS2(gameObjects,userInterface,HealthIcon)

namespace gameObjects{
namespace userInterface{


class HXCPP_CLASS_ATTRIBUTES ClassHUD_obj : public  ::flixel::group::FlxTypedGroup_obj
{
	public:
		typedef  ::flixel::group::FlxTypedGroup_obj super;
		typedef ClassHUD_obj OBJ_;
		ClassHUD_obj();

	public:
		enum { _hx_ClassId = 0x6bdf2e6b };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="gameObjects.userInterface.ClassHUD")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"gameObjects.userInterface.ClassHUD"); }
		static ::hx::ObjectPtr< ClassHUD_obj > __new();
		static ::hx::ObjectPtr< ClassHUD_obj > __alloc(::hx::Ctx *_hx_ctx);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~ClassHUD_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("ClassHUD",7f,23,2f,cf); }

		 ::flixel::text::FlxText infoBar;
		 ::flixel::text::FlxText scoreBar;
		Float scoreLast;
		::String scoreDisplay;
		 ::flixel::FlxSprite healthBarBG;
		 ::flixel::ui::FlxBar healthBar;
		 ::Dynamic SONG;
		 ::gameObjects::userInterface::HealthIcon iconP1;
		 ::gameObjects::userInterface::HealthIcon iconP2;
		Float stupidHealth;
		void update(Float elapsed);

		::String divider;
		void updateScoreText();
		::Dynamic updateScoreText_dyn();

		void beatHit();
		::Dynamic beatHit_dyn();

};

} // end namespace gameObjects
} // end namespace userInterface

#endif /* INCLUDED_gameObjects_userInterface_ClassHUD */ 

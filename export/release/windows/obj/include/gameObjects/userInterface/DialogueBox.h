// Generated by Haxe 4.1.5
#ifndef INCLUDED_gameObjects_userInterface_DialogueBox
#define INCLUDED_gameObjects_userInterface_DialogueBox

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_flixel_group_FlxTypedSpriteGroup
#include <flixel/group/FlxTypedSpriteGroup.h>
#endif
HX_DECLARE_CLASS1(flixel,FlxBasic)
HX_DECLARE_CLASS1(flixel,FlxObject)
HX_DECLARE_CLASS1(flixel,FlxSprite)
HX_DECLARE_CLASS2(flixel,group,FlxTypedSpriteGroup)
HX_DECLARE_CLASS2(flixel,text,FlxText)
HX_DECLARE_CLASS2(flixel,util,IFlxDestroyable)
HX_DECLARE_CLASS2(gameObjects,userInterface,DialogueBox)
HX_DECLARE_CLASS3(meta,data,dependency,FNFSprite)
HX_DECLARE_CLASS3(meta,data,font,Alphabet)

namespace gameObjects{
namespace userInterface{


class HXCPP_CLASS_ATTRIBUTES DialogueBox_obj : public  ::flixel::group::FlxTypedSpriteGroup_obj
{
	public:
		typedef  ::flixel::group::FlxTypedSpriteGroup_obj super;
		typedef DialogueBox_obj OBJ_;
		DialogueBox_obj();

	public:
		enum { _hx_ClassId = 0x23417363 };

		void __construct( ::Dynamic __o_talkingRight,::String daDialogue);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="gameObjects.userInterface.DialogueBox")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"gameObjects.userInterface.DialogueBox"); }
		static ::hx::ObjectPtr< DialogueBox_obj > __new( ::Dynamic __o_talkingRight,::String daDialogue);
		static ::hx::ObjectPtr< DialogueBox_obj > __alloc(::hx::Ctx *_hx_ctx, ::Dynamic __o_talkingRight,::String daDialogue);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~DialogueBox_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("DialogueBox",b3,1f,c8,ff); }

		static  ::gameObjects::userInterface::DialogueBox createDialogue(::String thisDialogue);
		static ::Dynamic createDialogue_dyn();

		 ::meta::data::dependency::FNFSprite box;
		 ::flixel::FlxSprite bgFade;
		 ::meta::data::dependency::FNFSprite portrait;
		 ::flixel::text::FlxText text;
		 ::meta::data::font::Alphabet alphabetText;
		 ::Dynamic dialogueData;
		 ::Dynamic portraitData;
		 ::Dynamic boxData;
		int curPage;
		::String curCharacter;
		::String curExpression;
		::String curBoxState;
		 ::flixel::FlxSprite eventImage;
		 ::Dynamic whenDaFinish;
		Dynamic whenDaFinish_dyn() { return whenDaFinish;}
		bool textStarted;
		::String dialoguePath(::String file);
		::Dynamic dialoguePath_dyn();

		void updateDialog(::hx::Null< bool >  force);
		::Dynamic updateDialog_dyn();

		void updateTextBox(::hx::Null< bool >  force);
		::Dynamic updateTextBox_dyn();

		void updatePortrait(::hx::Null< bool >  force);
		::Dynamic updatePortrait_dyn();

		void runEvent(::cpp::VirtualArray eventArray);
		::Dynamic runEvent_dyn();

		void updateEvents(::hx::Null< bool >  force);
		::Dynamic updateEvents_dyn();

		void closeDialog();
		::Dynamic closeDialog_dyn();

		void dialogDataCheck();
		::Dynamic dialogDataCheck_dyn();

		void update(Float elapsed);

};

} // end namespace gameObjects
} // end namespace userInterface

#endif /* INCLUDED_gameObjects_userInterface_DialogueBox */ 

// Generated by Haxe 4.1.5
#ifndef INCLUDED_gameObjects_userInterface_notes_Strumline
#define INCLUDED_gameObjects_userInterface_notes_Strumline

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
HX_DECLARE_CLASS1(flixel,FlxBasic)
HX_DECLARE_CLASS1(flixel,FlxObject)
HX_DECLARE_CLASS1(flixel,FlxSprite)
HX_DECLARE_CLASS1(flixel,FlxState)
HX_DECLARE_CLASS3(flixel,addons,transition,FlxTransitionableState)
HX_DECLARE_CLASS3(flixel,addons,ui,FlxUIState)
HX_DECLARE_CLASS4(flixel,addons,ui,interfaces,IEventGetter)
HX_DECLARE_CLASS4(flixel,addons,ui,interfaces,IFlxUIState)
HX_DECLARE_CLASS2(flixel,group,FlxTypedGroup)
HX_DECLARE_CLASS2(flixel,util,IFlxDestroyable)
HX_DECLARE_CLASS1(gameObjects,Character)
HX_DECLARE_CLASS3(gameObjects,userInterface,notes,Note)
HX_DECLARE_CLASS3(gameObjects,userInterface,notes,Strumline)
HX_DECLARE_CLASS1(meta,MusicBeatState)
HX_DECLARE_CLASS3(meta,data,dependency,FNFSprite)
HX_DECLARE_CLASS3(meta,data,dependency,FNFUIState)
HX_DECLARE_CLASS2(meta,state,PlayState)

namespace gameObjects{
namespace userInterface{
namespace notes{


class HXCPP_CLASS_ATTRIBUTES Strumline_obj : public  ::flixel::group::FlxTypedGroup_obj
{
	public:
		typedef  ::flixel::group::FlxTypedGroup_obj super;
		typedef Strumline_obj OBJ_;
		Strumline_obj();

	public:
		enum { _hx_ClassId = 0x7355e1f0 };

		void __construct(::hx::Null< Float >  __o_x, ::meta::state::PlayState playState, ::gameObjects::Character character, ::Dynamic __o_displayJudgements, ::Dynamic __o_autoplay, ::Dynamic __o_noteSplashes, ::Dynamic __o_keyAmount, ::Dynamic __o_downscroll, ::gameObjects::userInterface::notes::Strumline parent);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="gameObjects.userInterface.notes.Strumline")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"gameObjects.userInterface.notes.Strumline"); }
		static ::hx::ObjectPtr< Strumline_obj > __new(::hx::Null< Float >  __o_x, ::meta::state::PlayState playState, ::gameObjects::Character character, ::Dynamic __o_displayJudgements, ::Dynamic __o_autoplay, ::Dynamic __o_noteSplashes, ::Dynamic __o_keyAmount, ::Dynamic __o_downscroll, ::gameObjects::userInterface::notes::Strumline parent);
		static ::hx::ObjectPtr< Strumline_obj > __alloc(::hx::Ctx *_hx_ctx,::hx::Null< Float >  __o_x, ::meta::state::PlayState playState, ::gameObjects::Character character, ::Dynamic __o_displayJudgements, ::Dynamic __o_autoplay, ::Dynamic __o_noteSplashes, ::Dynamic __o_keyAmount, ::Dynamic __o_downscroll, ::gameObjects::userInterface::notes::Strumline parent);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~Strumline_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("Strumline",9d,2d,d1,a5); }

		 ::flixel::group::FlxTypedGroup receptors;
		 ::flixel::group::FlxTypedGroup splashNotes;
		 ::flixel::group::FlxTypedGroup notesGroup;
		bool autoplay;
		 ::gameObjects::Character character;
		 ::meta::state::PlayState playState;
		bool displayJudgements;
		void createSplash( ::gameObjects::userInterface::notes::Note coolNote);
		::Dynamic createSplash_dyn();

		void push( ::gameObjects::userInterface::notes::Note newNote);
		::Dynamic push_dyn();

};

} // end namespace gameObjects
} // end namespace userInterface
} // end namespace notes

#endif /* INCLUDED_gameObjects_userInterface_notes_Strumline */ 

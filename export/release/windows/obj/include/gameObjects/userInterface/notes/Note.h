// Generated by Haxe 4.1.5
#ifndef INCLUDED_gameObjects_userInterface_notes_Note
#define INCLUDED_gameObjects_userInterface_notes_Note

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_meta_data_dependency_FNFSprite
#include <meta/data/dependency/FNFSprite.h>
#endif
HX_DECLARE_CLASS1(flixel,FlxBasic)
HX_DECLARE_CLASS1(flixel,FlxObject)
HX_DECLARE_CLASS1(flixel,FlxSprite)
HX_DECLARE_CLASS2(flixel,util,IFlxDestroyable)
HX_DECLARE_CLASS3(gameObjects,userInterface,notes,Note)
HX_DECLARE_CLASS3(meta,data,dependency,FNFSprite)

namespace gameObjects{
namespace userInterface{
namespace notes{


class HXCPP_CLASS_ATTRIBUTES Note_obj : public  ::meta::data::dependency::FNFSprite_obj
{
	public:
		typedef  ::meta::data::dependency::FNFSprite_obj super;
		typedef Note_obj OBJ_;
		Note_obj();

	public:
		enum { _hx_ClassId = 0x078f6a67 };

		void __construct(Float strumTime,int noteData,Float noteAlt, ::gameObjects::userInterface::notes::Note prevNote, ::Dynamic __o_sustainNote);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="gameObjects.userInterface.notes.Note")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"gameObjects.userInterface.notes.Note"); }
		static ::hx::ObjectPtr< Note_obj > __new(Float strumTime,int noteData,Float noteAlt, ::gameObjects::userInterface::notes::Note prevNote, ::Dynamic __o_sustainNote);
		static ::hx::ObjectPtr< Note_obj > __alloc(::hx::Ctx *_hx_ctx,Float strumTime,int noteData,Float noteAlt, ::gameObjects::userInterface::notes::Note prevNote, ::Dynamic __o_sustainNote);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~Note_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("Note",12,44,e3,33); }

		static void __boot();
		static Float swagWidth;
		static  ::gameObjects::userInterface::notes::Note returnDefaultNote(::String assetModifier,Float strumTime,int noteData,int noteType,Float noteAlt, ::Dynamic isSustainNote, ::gameObjects::userInterface::notes::Note prevNote);
		static ::Dynamic returnDefaultNote_dyn();

		static  ::gameObjects::userInterface::notes::Note returnQuantNote(::String assetModifier,Float strumTime,int noteData,int noteType,Float noteAlt, ::Dynamic isSustainNote, ::gameObjects::userInterface::notes::Note prevNote);
		static ::Dynamic returnQuantNote_dyn();

		Float strumTime;
		bool mustPress;
		int noteData;
		Float noteAlt;
		Float noteType;
		::String noteString;
		bool canBeHit;
		bool tooLate;
		bool wasGoodHit;
		 ::gameObjects::userInterface::notes::Note prevNote;
		Float sustainLength;
		bool isSustainNote;
		 ::flixel::FlxSprite chartSustain;
		int rawNoteData;
		int noteQuant;
		Float noteVisualOffset;
		Float noteSpeed;
		Float noteDirection;
		void update(Float elapsed);

};

} // end namespace gameObjects
} // end namespace userInterface
} // end namespace notes

#endif /* INCLUDED_gameObjects_userInterface_notes_Note */ 

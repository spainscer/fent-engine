// Generated by Haxe 4.1.5
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Date
#include <Date.h>
#endif
#ifndef INCLUDED_Init
#include <Init.h>
#endif
#ifndef INCLUDED_Main
#include <Main.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_StringTools
#include <StringTools.h>
#endif
#ifndef INCLUDED_Sys
#include <Sys.h>
#endif
#ifndef INCLUDED_Type
#include <Type.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxGame
#include <flixel/FlxGame.h>
#endif
#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
#ifndef INCLUDED_flixel_graphics_FlxGraphic
#include <flixel/graphics/FlxGraphic.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_BitmapFrontEnd
#include <flixel/system/frontEnds/BitmapFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util__FlxColor_FlxColor_Impl_
#include <flixel/util/_FlxColor/FlxColor_Impl_.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_StackItem
#include <haxe/StackItem.h>
#endif
#ifndef INCLUDED_haxe__CallStack_CallStack_Impl_
#include <haxe/_CallStack/CallStack_Impl_.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_haxe_io_Path
#include <haxe/io/Path.h>
#endif
#ifndef INCLUDED_lime_app_Application
#include <lime/app/Application.h>
#endif
#ifndef INCLUDED_lime_app_IModule
#include <lime/app/IModule.h>
#endif
#ifndef INCLUDED_lime_app_Module
#include <lime/app/Module.h>
#endif
#ifndef INCLUDED_lime_ui_Window
#include <lime/ui/Window.h>
#endif
#ifndef INCLUDED_meta_InfoHud
#include <meta/InfoHud.h>
#endif
#ifndef INCLUDED_meta_data_PlayerSettings
#include <meta/data/PlayerSettings.h>
#endif
#ifndef INCLUDED_meta_data_dependency_Discord
#include <meta/data/dependency/Discord.h>
#endif
#ifndef INCLUDED_openfl_Lib
#include <openfl/Lib.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_LoaderInfo
#include <openfl/display/LoaderInfo.h>
#endif
#ifndef INCLUDED_openfl_display_MovieClip
#include <openfl/display/MovieClip.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_display_Stage
#include <openfl/display/Stage.h>
#endif
#ifndef INCLUDED_openfl_events_ErrorEvent
#include <openfl/events/ErrorEvent.h>
#endif
#ifndef INCLUDED_openfl_events_Event
#include <openfl/events/Event.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_TextEvent
#include <openfl/events/TextEvent.h>
#endif
#ifndef INCLUDED_openfl_events_UncaughtErrorEvent
#include <openfl/events/UncaughtErrorEvent.h>
#endif
#ifndef INCLUDED_openfl_events_UncaughtErrorEvents
#include <openfl/events/UncaughtErrorEvents.h>
#endif
#ifndef INCLUDED_openfl_text_TextField
#include <openfl/text/TextField.h>
#endif
#ifndef INCLUDED_openfl_utils_Assets
#include <openfl/utils/Assets.h>
#endif
#ifndef INCLUDED_openfl_utils_IAssetCache
#include <openfl/utils/IAssetCache.h>
#endif
#ifndef INCLUDED_sys_FileSystem
#include <sys/FileSystem.h>
#endif
#ifndef INCLUDED_sys_io_File
#include <sys/io/File.h>
#endif
#ifndef INCLUDED_sys_io_Process
#include <sys/io/Process.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_e47a9afac0942eb9_29_new,"Main","new",0x6616a5cb,"Main.new","Main.hx",29,0x087e5c05)
HX_LOCAL_STACK_FRAME(_hx_pos_e47a9afac0942eb9_254_onCrash,"Main","onCrash",0x46bec533,"Main.onCrash","Main.hx",254,0x087e5c05)
HX_LOCAL_STACK_FRAME(_hx_pos_e47a9afac0942eb9_131_main,"Main","main",0xed0e206e,"Main.main","Main.hx",131,0x087e5c05)
HX_LOCAL_STACK_FRAME(_hx_pos_e47a9afac0942eb9_196_framerateAdjust,"Main","framerateAdjust",0x5b6917e7,"Main.framerateAdjust","Main.hx",196,0x087e5c05)
HX_LOCAL_STACK_FRAME(_hx_pos_e47a9afac0942eb9_205_switchState,"Main","switchState",0x7691bfe8,"Main.switchState","Main.hx",205,0x087e5c05)
HX_LOCAL_STACK_FRAME(_hx_pos_e47a9afac0942eb9_222_updateFramerate,"Main","updateFramerate",0xee79802f,"Main.updateFramerate","Main.hx",222,0x087e5c05)
HX_LOCAL_STACK_FRAME(_hx_pos_e47a9afac0942eb9_235_dumpCache,"Main","dumpCache",0xbbc26819,"Main.dumpCache","Main.hx",235,0x087e5c05)
HX_LOCAL_STACK_FRAME(_hx_pos_e47a9afac0942eb9_65_boot,"Main","boot",0xe5d36c67,"Main.boot","Main.hx",65,0x087e5c05)
HX_LOCAL_STACK_FRAME(_hx_pos_e47a9afac0942eb9_66_boot,"Main","boot",0xe5d36c67,"Main.boot","Main.hx",66,0x087e5c05)
HX_LOCAL_STACK_FRAME(_hx_pos_e47a9afac0942eb9_68_boot,"Main","boot",0xe5d36c67,"Main.boot","Main.hx",68,0x087e5c05)
HX_LOCAL_STACK_FRAME(_hx_pos_e47a9afac0942eb9_69_boot,"Main","boot",0xe5d36c67,"Main.boot","Main.hx",69,0x087e5c05)
HX_LOCAL_STACK_FRAME(_hx_pos_e47a9afac0942eb9_71_boot,"Main","boot",0xe5d36c67,"Main.boot","Main.hx",71,0x087e5c05)
HX_LOCAL_STACK_FRAME(_hx_pos_e47a9afac0942eb9_86_boot,"Main","boot",0xe5d36c67,"Main.boot","Main.hx",86,0x087e5c05)

void Main_obj::__construct(){
            	HX_GC_STACKFRAME(&_hx_pos_e47a9afac0942eb9_29_new)
HXLINE(  74)		this->skipSplash = true;
HXLINE(  73)		this->zoom = ((Float)-1);
HXLINE( 137)		super::__construct();
HXLINE( 146)		::openfl::Lib_obj::get_current()->get_loaderInfo()->uncaughtErrorEvents->addEventListener(HX_("uncaughtError",f3,98,8b,8b),this->onCrash_dyn(),null(),null(),null());
HXLINE( 156)		int stageWidth = ::openfl::Lib_obj::get_current()->stage->stageWidth;
HXLINE( 157)		int stageHeight = ::openfl::Lib_obj::get_current()->stage->stageHeight;
HXLINE( 159)		if ((this->zoom == -1)) {
HXLINE( 161)			Float ratioX = (( (Float)(stageWidth) ) / ( (Float)(::Main_obj::gameWidth) ));
HXLINE( 162)			Float ratioY = (( (Float)(stageHeight) ) / ( (Float)(::Main_obj::gameHeight) ));
HXLINE( 163)			this->zoom = ::Math_obj::min(ratioX,ratioY);
HXLINE( 164)			::Main_obj::gameWidth = ::Math_obj::ceil((( (Float)(stageWidth) ) / this->zoom));
HXLINE( 165)			::Main_obj::gameHeight = ::Math_obj::ceil((( (Float)(stageHeight) ) / this->zoom));
            		}
HXLINE( 171)		 ::flixel::FlxGame gameCreate =  ::flixel::FlxGame_obj::__alloc( HX_CTX ,::Main_obj::gameWidth,::Main_obj::gameHeight,::Main_obj::mainClassState,this->zoom,::Main_obj::framerate,::Main_obj::framerate,this->skipSplash,null());
HXLINE( 173)		this->addChild(gameCreate);
HXLINE( 180)		::meta::data::dependency::Discord_obj::initializeRPC();
HXLINE( 181)		::meta::data::dependency::Discord_obj::changePresence(HX_("",00,00,00,00),null(),null(),null(),null());
HXLINE( 185)		::meta::data::PlayerSettings_obj::init();
HXLINE( 190)		this->infoCounter =  ::meta::InfoHud_obj::__alloc( HX_CTX ,10,3,16777215,true);
HXLINE( 191)		this->addChild(this->infoCounter);
            	}

Dynamic Main_obj::__CreateEmpty() { return new Main_obj; }

void *Main_obj::_hx_vtable = 0;

Dynamic Main_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< Main_obj > _hx_result = new Main_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Main_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x0c89e854) {
		if (inClassId<=(int)0x07825a7d) {
			if (inClassId<=(int)0x0330636f) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x0330636f;
			} else {
				return inClassId==(int)0x07825a7d;
			}
		} else {
			return inClassId==(int)0x0c89e854;
		}
	} else {
		if (inClassId<=(int)0x4af7dd8e) {
			return inClassId==(int)0x1f4df417 || inClassId==(int)0x4af7dd8e;
		} else {
			return inClassId==(int)0x6b353933;
		}
	}
}

void Main_obj::onCrash( ::openfl::events::UncaughtErrorEvent e){
            	HX_GC_STACKFRAME(&_hx_pos_e47a9afac0942eb9_254_onCrash)
HXLINE( 255)		::String errMsg = HX_("",00,00,00,00);
HXLINE( 257)		::Array< ::Dynamic> callStack = ::haxe::_CallStack::CallStack_Impl__obj::exceptionStack(true);
HXLINE( 258)		::String dateNow = ::Date_obj::now()->toString();
HXLINE( 260)		dateNow = ::StringTools_obj::replace(dateNow,HX_(" ",20,00,00,00),HX_("_",5f,00,00,00));
HXLINE( 261)		dateNow = ::StringTools_obj::replace(dateNow,HX_(":",3a,00,00,00),HX_("'",27,00,00,00));
HXLINE( 256)		::String path = (((HX_("./crash/",69,79,f9,62) + HX_("FE_",40,5a,35,00)) + dateNow) + HX_(".txt",02,3f,c0,1e));
HXLINE( 265)		{
HXLINE( 265)			int _g = 0;
HXDLIN( 265)			while((_g < callStack->length)){
HXLINE( 265)				 ::haxe::StackItem stackItem = callStack->__get(_g).StaticCast<  ::haxe::StackItem >();
HXDLIN( 265)				_g = (_g + 1);
HXLINE( 267)				if ((stackItem->_hx_getIndex() == 2)) {
HXLINE( 269)					 ::Dynamic column = stackItem->_hx_getObject(3);
HXDLIN( 269)					int line = stackItem->_hx_getInt(2);
HXDLIN( 269)					::String file = stackItem->_hx_getString(1);
HXDLIN( 269)					 ::haxe::StackItem s = stackItem->_hx_getObject(0).StaticCast<  ::haxe::StackItem >();
HXLINE( 270)					errMsg = (errMsg + (((file + HX_(" (line ",a4,24,f7,a5)) + line) + HX_(")\n",c1,23,00,00)));
            				}
            				else {
HXLINE( 272)					::Sys_obj::println(stackItem);
            				}
            			}
            		}
HXLINE( 276)		errMsg = (errMsg + ((HX_("\nUncaught Error: ",ed,bf,e1,72) + ::Std_obj::string(e->error)) + HX_("\nPlease report this error to the GitHub page: https://github.com/Yoshubs/Forever-Engine",ee,e6,b1,27)));
HXLINE( 278)		if (!(::sys::FileSystem_obj::exists(HX_("./crash/",69,79,f9,62)))) {
HXLINE( 279)			::sys::FileSystem_obj::createDirectory(HX_("./crash/",69,79,f9,62));
            		}
HXLINE( 281)		::sys::io::File_obj::saveContent(path,(errMsg + HX_("\n",0a,00,00,00)));
HXLINE( 283)		::Sys_obj::println(errMsg);
HXLINE( 284)		::Sys_obj::println((HX_("Crash dump saved in ",cf,9c,69,5d) + ::haxe::io::Path_obj::normalize(path)));
HXLINE( 286)		::String crashDialoguePath = HX_("FE-CrashDialog",a1,1c,ee,5b);
HXLINE( 289)		crashDialoguePath = (crashDialoguePath + HX_(".exe",24,dd,b4,1e));
HXLINE( 292)		if (::sys::FileSystem_obj::exists((HX_("./",41,28,00,00) + crashDialoguePath))) {
HXLINE( 294)			::Sys_obj::println((HX_("Found crash dialog: ",05,e1,18,95) + crashDialoguePath));
HXLINE( 299)			 ::sys::io::Process_obj::__alloc( HX_CTX ,crashDialoguePath,::Array_obj< ::String >::__new(1)->init(0,path),null());
            		}
            		else {
HXLINE( 303)			::Sys_obj::println(HX_("No crash dialog found! Making a simple alert instead...",cb,64,5e,20));
HXLINE( 304)			::lime::app::Application_obj::current->_hx___window->alert(errMsg,HX_("Error!",79,f7,fc,85));
            		}
HXLINE( 307)		::Sys_obj::exit(1);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Main_obj,onCrash,(void))

int Main_obj::gameWidth;

int Main_obj::gameHeight;

::hx::Class Main_obj::mainClassState;

int Main_obj::framerate;

::String Main_obj::gameVersion;

::cpp::VirtualArray Main_obj::gameWeeks;

void Main_obj::main(){
            	HX_GC_STACKFRAME(&_hx_pos_e47a9afac0942eb9_131_main)
HXDLIN( 131)		 ::openfl::display::MovieClip _hx_tmp = ::openfl::Lib_obj::get_current();
HXDLIN( 131)		_hx_tmp->addChild( ::Main_obj::__alloc( HX_CTX ));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Main_obj,main,(void))

Float Main_obj::framerateAdjust(Float input){
            	HX_STACKFRAME(&_hx_pos_e47a9afac0942eb9_196_framerateAdjust)
HXDLIN( 196)		return (input * (( (Float)(60) ) / ( (Float)(::flixel::FlxG_obj::drawFramerate) )));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Main_obj,framerateAdjust,return )

 ::flixel::FlxState Main_obj::lastState;

void Main_obj::switchState( ::flixel::FlxState curState, ::flixel::FlxState target){
            	HX_STACKFRAME(&_hx_pos_e47a9afac0942eb9_205_switchState)
HXLINE( 210)		::Main_obj::lastState = curState;
HXLINE( 213)		::Main_obj::mainClassState = ::Type_obj::getClass(target);
HXLINE( 216)		if (::flixel::FlxG_obj::game->_state->switchTo(target)) {
HXLINE( 216)			::flixel::FlxG_obj::game->_requestedState = target;
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Main_obj,switchState,(void))

void Main_obj::updateFramerate(int newFramerate){
            	HX_STACKFRAME(&_hx_pos_e47a9afac0942eb9_222_updateFramerate)
HXDLIN( 222)		if ((newFramerate > ::flixel::FlxG_obj::updateFramerate)) {
HXLINE( 224)			::flixel::FlxG_obj::set_updateFramerate(newFramerate);
HXLINE( 225)			::flixel::FlxG_obj::set_drawFramerate(newFramerate);
            		}
            		else {
HXLINE( 229)			::flixel::FlxG_obj::set_drawFramerate(newFramerate);
HXLINE( 230)			::flixel::FlxG_obj::set_updateFramerate(newFramerate);
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Main_obj,updateFramerate,(void))

void Main_obj::dumpCache(){
            	HX_STACKFRAME(&_hx_pos_e47a9afac0942eb9_235_dumpCache)
HXLINE( 238)		{
HXLINE( 238)			 ::Dynamic key = ::flixel::FlxG_obj::bitmap->_cache->keys();
HXDLIN( 238)			while(( (bool)(key->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXLINE( 238)				::String key1 = ( (::String)(key->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXLINE( 240)				 ::flixel::graphics::FlxGraphic obj = ( ( ::flixel::graphics::FlxGraphic)(::flixel::FlxG_obj::bitmap->_cache->get(key1)) );
HXLINE( 241)				if (::hx::IsNotNull( obj )) {
HXLINE( 243)					::openfl::utils::IAssetCache_obj::removeBitmapData(::openfl::utils::Assets_obj::cache,key1);
HXLINE( 244)					::flixel::FlxG_obj::bitmap->_cache->remove(key1);
HXLINE( 245)					obj->destroy();
            				}
            			}
            		}
HXLINE( 248)		::openfl::utils::IAssetCache_obj::clear(::openfl::utils::Assets_obj::cache,HX_("songs",fe,36,c7,80));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Main_obj,dumpCache,(void))


::hx::ObjectPtr< Main_obj > Main_obj::__new() {
	::hx::ObjectPtr< Main_obj > __this = new Main_obj();
	__this->__construct();
	return __this;
}

::hx::ObjectPtr< Main_obj > Main_obj::__alloc(::hx::Ctx *_hx_ctx) {
	Main_obj *__this = (Main_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(Main_obj), true, "Main"));
	*(void **)__this = Main_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

Main_obj::Main_obj()
{
}

void Main_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Main);
	HX_MARK_MEMBER_NAME(zoom,"zoom");
	HX_MARK_MEMBER_NAME(skipSplash,"skipSplash");
	HX_MARK_MEMBER_NAME(infoCounter,"infoCounter");
	 ::openfl::display::Sprite_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void Main_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(zoom,"zoom");
	HX_VISIT_MEMBER_NAME(skipSplash,"skipSplash");
	HX_VISIT_MEMBER_NAME(infoCounter,"infoCounter");
	 ::openfl::display::Sprite_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val Main_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"zoom") ) { return ::hx::Val( zoom ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"onCrash") ) { return ::hx::Val( onCrash_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"skipSplash") ) { return ::hx::Val( skipSplash ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"infoCounter") ) { return ::hx::Val( infoCounter ); }
	}
	return super::__Field(inName,inCallProp);
}

bool Main_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"main") ) { outValue = main_dyn(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"gameWidth") ) { outValue = ( gameWidth ); return true; }
		if (HX_FIELD_EQ(inName,"framerate") ) { outValue = ( framerate ); return true; }
		if (HX_FIELD_EQ(inName,"gameWeeks") ) { outValue = ( gameWeeks ); return true; }
		if (HX_FIELD_EQ(inName,"lastState") ) { outValue = ( lastState ); return true; }
		if (HX_FIELD_EQ(inName,"dumpCache") ) { outValue = dumpCache_dyn(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"gameHeight") ) { outValue = ( gameHeight ); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"gameVersion") ) { outValue = ( gameVersion ); return true; }
		if (HX_FIELD_EQ(inName,"switchState") ) { outValue = switchState_dyn(); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"mainClassState") ) { outValue = ( mainClassState ); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"framerateAdjust") ) { outValue = framerateAdjust_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"updateFramerate") ) { outValue = updateFramerate_dyn(); return true; }
	}
	return false;
}

::hx::Val Main_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"zoom") ) { zoom=inValue.Cast< Float >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"skipSplash") ) { skipSplash=inValue.Cast< bool >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"infoCounter") ) { infoCounter=inValue.Cast<  ::meta::InfoHud >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool Main_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 9:
		if (HX_FIELD_EQ(inName,"gameWidth") ) { gameWidth=ioValue.Cast< int >(); return true; }
		if (HX_FIELD_EQ(inName,"framerate") ) { framerate=ioValue.Cast< int >(); return true; }
		if (HX_FIELD_EQ(inName,"gameWeeks") ) { gameWeeks=ioValue.Cast< ::cpp::VirtualArray >(); return true; }
		if (HX_FIELD_EQ(inName,"lastState") ) { lastState=ioValue.Cast<  ::flixel::FlxState >(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"gameHeight") ) { gameHeight=ioValue.Cast< int >(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"gameVersion") ) { gameVersion=ioValue.Cast< ::String >(); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"mainClassState") ) { mainClassState=ioValue.Cast< ::hx::Class >(); return true; }
	}
	return false;
}

void Main_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("zoom",13,a3,f8,50));
	outFields->push(HX_("skipSplash",46,75,9c,27));
	outFields->push(HX_("infoCounter",2e,a8,f3,3e));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo Main_obj_sMemberStorageInfo[] = {
	{::hx::fsFloat,(int)offsetof(Main_obj,zoom),HX_("zoom",13,a3,f8,50)},
	{::hx::fsBool,(int)offsetof(Main_obj,skipSplash),HX_("skipSplash",46,75,9c,27)},
	{::hx::fsObject /*  ::meta::InfoHud */ ,(int)offsetof(Main_obj,infoCounter),HX_("infoCounter",2e,a8,f3,3e)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo Main_obj_sStaticStorageInfo[] = {
	{::hx::fsInt,(void *) &Main_obj::gameWidth,HX_("gameWidth",b4,a4,7d,ff)},
	{::hx::fsInt,(void *) &Main_obj::gameHeight,HX_("gameHeight",79,f1,c1,44)},
	{::hx::fsObject /* ::hx::Class */ ,(void *) &Main_obj::mainClassState,HX_("mainClassState",52,c0,ac,66)},
	{::hx::fsInt,(void *) &Main_obj::framerate,HX_("framerate",8d,e5,4b,4e)},
	{::hx::fsString,(void *) &Main_obj::gameVersion,HX_("gameVersion",46,5d,a8,61)},
	{::hx::fsObject /* ::cpp::VirtualArray */ ,(void *) &Main_obj::gameWeeks,HX_("gameWeeks",ad,84,d9,fc)},
	{::hx::fsObject /*  ::flixel::FlxState */ ,(void *) &Main_obj::lastState,HX_("lastState",db,a3,b8,d0)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static ::String Main_obj_sMemberFields[] = {
	HX_("zoom",13,a3,f8,50),
	HX_("skipSplash",46,75,9c,27),
	HX_("infoCounter",2e,a8,f3,3e),
	HX_("onCrash",48,5e,8d,e2),
	::String(null()) };

static void Main_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Main_obj::gameWidth,"gameWidth");
	HX_MARK_MEMBER_NAME(Main_obj::gameHeight,"gameHeight");
	HX_MARK_MEMBER_NAME(Main_obj::mainClassState,"mainClassState");
	HX_MARK_MEMBER_NAME(Main_obj::framerate,"framerate");
	HX_MARK_MEMBER_NAME(Main_obj::gameVersion,"gameVersion");
	HX_MARK_MEMBER_NAME(Main_obj::gameWeeks,"gameWeeks");
	HX_MARK_MEMBER_NAME(Main_obj::lastState,"lastState");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Main_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Main_obj::gameWidth,"gameWidth");
	HX_VISIT_MEMBER_NAME(Main_obj::gameHeight,"gameHeight");
	HX_VISIT_MEMBER_NAME(Main_obj::mainClassState,"mainClassState");
	HX_VISIT_MEMBER_NAME(Main_obj::framerate,"framerate");
	HX_VISIT_MEMBER_NAME(Main_obj::gameVersion,"gameVersion");
	HX_VISIT_MEMBER_NAME(Main_obj::gameWeeks,"gameWeeks");
	HX_VISIT_MEMBER_NAME(Main_obj::lastState,"lastState");
};

#endif

::hx::Class Main_obj::__mClass;

static ::String Main_obj_sStaticFields[] = {
	HX_("gameWidth",b4,a4,7d,ff),
	HX_("gameHeight",79,f1,c1,44),
	HX_("mainClassState",52,c0,ac,66),
	HX_("framerate",8d,e5,4b,4e),
	HX_("gameVersion",46,5d,a8,61),
	HX_("gameWeeks",ad,84,d9,fc),
	HX_("main",39,38,56,48),
	HX_("framerateAdjust",fc,4d,c6,0a),
	HX_("lastState",db,a3,b8,d0),
	HX_("switchState",7d,07,8b,77),
	HX_("updateFramerate",44,b6,d6,9d),
	HX_("dumpCache",6e,30,39,db),
	::String(null())
};

void Main_obj::__register()
{
	Main_obj _hx_dummy;
	Main_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("Main",59,64,2f,33);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Main_obj::__GetStatic;
	__mClass->mSetStaticField = &Main_obj::__SetStatic;
	__mClass->mMarkFunc = Main_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(Main_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(Main_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< Main_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Main_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Main_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Main_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void Main_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_e47a9afac0942eb9_65_boot)
HXDLIN(  65)		gameWidth = 1280;
            	}
{
            	HX_STACKFRAME(&_hx_pos_e47a9afac0942eb9_66_boot)
HXDLIN(  66)		gameHeight = 720;
            	}
{
            	HX_STACKFRAME(&_hx_pos_e47a9afac0942eb9_68_boot)
HXDLIN(  68)		mainClassState = ::hx::ClassOf< ::Init >();
            	}
{
            	HX_STACKFRAME(&_hx_pos_e47a9afac0942eb9_69_boot)
HXDLIN(  69)		framerate = 120;
            	}
{
            	HX_STACKFRAME(&_hx_pos_e47a9afac0942eb9_71_boot)
HXDLIN(  71)		gameVersion = HX_("0.2.4.2",7e,4c,09,19);
            	}
{
            		HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_0) HXARGC(0)
            		::cpp::VirtualArray _hx_run(){
            			HX_STACKFRAME(&_hx_pos_e47a9afac0942eb9_86_boot)
HXLINE(  87)			int Alpha = 255;
HXDLIN(  87)			int color = ::flixel::util::_FlxColor::FlxColor_Impl__obj::_new(null());
HXDLIN(  87)			{
HXLINE(  87)				color = (color & -16711681);
HXDLIN(  87)				color = (color | 8454144);
            			}
HXDLIN(  87)			{
HXLINE(  87)				color = (color & -65281);
HXDLIN(  87)				color = (color | 25600);
            			}
HXDLIN(  87)			{
HXLINE(  87)				color = (color & -256);
HXDLIN(  87)				color = (color | 223);
            			}
HXDLIN(  87)			{
HXLINE(  87)				color = (color & 16777215);
HXDLIN(  87)				int color1;
HXDLIN(  87)				if ((Alpha > 255)) {
HXLINE(  87)					color1 = 255;
            				}
            				else {
HXLINE(  87)					if ((Alpha < 0)) {
HXLINE(  87)						color1 = 0;
            					}
            					else {
HXLINE(  87)						color1 = Alpha;
            					}
            				}
HXDLIN(  87)				color = (color | (color1 << 24));
            			}
HXLINE(  91)			int Alpha1 = 255;
HXDLIN(  91)			int color2 = ::flixel::util::_FlxColor::FlxColor_Impl__obj::_new(null());
HXDLIN(  91)			{
HXLINE(  91)				color2 = (color2 & -16711681);
HXDLIN(  91)				color2 = (color2 | 8454144);
            			}
HXDLIN(  91)			{
HXLINE(  91)				color2 = (color2 & -65281);
HXDLIN(  91)				color2 = (color2 | 25600);
            			}
HXDLIN(  91)			{
HXLINE(  91)				color2 = (color2 & -256);
HXDLIN(  91)				color2 = (color2 | 223);
            			}
HXDLIN(  91)			{
HXLINE(  91)				color2 = (color2 & 16777215);
HXDLIN(  91)				int color3;
HXDLIN(  91)				if ((Alpha1 > 255)) {
HXLINE(  91)					color3 = 255;
            				}
            				else {
HXLINE(  91)					if ((Alpha1 < 0)) {
HXLINE(  91)						color3 = 0;
            					}
            					else {
HXLINE(  91)						color3 = Alpha1;
            					}
            				}
HXDLIN(  91)				color2 = (color2 | (color3 << 24));
            			}
HXLINE(  97)			int Alpha2 = 255;
HXDLIN(  97)			int color4 = ::flixel::util::_FlxColor::FlxColor_Impl__obj::_new(null());
HXDLIN(  97)			{
HXLINE(  97)				color4 = (color4 & -16711681);
HXDLIN(  97)				color4 = (color4 | 1966080);
            			}
HXDLIN(  97)			{
HXLINE(  97)				color4 = (color4 & -65281);
HXDLIN(  97)				color4 = (color4 | 11520);
            			}
HXDLIN(  97)			{
HXLINE(  97)				color4 = (color4 & -256);
HXDLIN(  97)				color4 = (color4 | 60);
            			}
HXDLIN(  97)			{
HXLINE(  97)				color4 = (color4 & 16777215);
HXDLIN(  97)				int color5;
HXDLIN(  97)				if ((Alpha2 > 255)) {
HXLINE(  97)					color5 = 255;
            				}
            				else {
HXLINE(  97)					if ((Alpha2 < 0)) {
HXLINE(  97)						color5 = 0;
            					}
            					else {
HXLINE(  97)						color5 = Alpha2;
            					}
            				}
HXDLIN(  97)				color4 = (color4 | (color5 << 24));
            			}
HXLINE( 103)			int Alpha3 = 255;
HXDLIN( 103)			int color6 = ::flixel::util::_FlxColor::FlxColor_Impl__obj::_new(null());
HXDLIN( 103)			{
HXLINE( 103)				color6 = (color6 & -16711681);
HXDLIN( 103)				color6 = (color6 | 7274496);
            			}
HXDLIN( 103)			{
HXLINE( 103)				color6 = (color6 & -65281);
HXDLIN( 103)				color6 = (color6 | 4864);
            			}
HXDLIN( 103)			{
HXLINE( 103)				color6 = (color6 & -256);
HXDLIN( 103)				color6 = (color6 | 60);
            			}
HXDLIN( 103)			{
HXLINE( 103)				color6 = (color6 & 16777215);
HXDLIN( 103)				int color7;
HXDLIN( 103)				if ((Alpha3 > 255)) {
HXLINE( 103)					color7 = 255;
            				}
            				else {
HXLINE( 103)					if ((Alpha3 < 0)) {
HXLINE( 103)						color7 = 0;
            					}
            					else {
HXLINE( 103)						color7 = Alpha3;
            					}
            				}
HXDLIN( 103)				color6 = (color6 | (color7 << 24));
            			}
HXLINE( 109)			int Alpha4 = 255;
HXDLIN( 109)			int color8 = ::flixel::util::_FlxColor::FlxColor_Impl__obj::_new(null());
HXDLIN( 109)			{
HXLINE( 109)				color8 = (color8 & -16711681);
HXDLIN( 109)				color8 = (color8 | 13303808);
            			}
HXDLIN( 109)			{
HXLINE( 109)				color8 = (color8 & -65281);
HXDLIN( 109)				color8 = (color8 | 28928);
            			}
HXDLIN( 109)			{
HXLINE( 109)				color8 = (color8 & -256);
HXDLIN( 109)				color8 = (color8 | 170);
            			}
HXDLIN( 109)			{
HXLINE( 109)				color8 = (color8 & 16777215);
HXDLIN( 109)				int color9;
HXDLIN( 109)				if ((Alpha4 > 255)) {
HXLINE( 109)					color9 = 255;
            				}
            				else {
HXLINE( 109)					if ((Alpha4 < 0)) {
HXLINE( 109)						color9 = 0;
            					}
            					else {
HXLINE( 109)						color9 = Alpha4;
            					}
            				}
HXDLIN( 109)				color8 = (color8 | (color9 << 24));
            			}
HXLINE( 115)			int Alpha5 = 255;
HXDLIN( 115)			int color10 = ::flixel::util::_FlxColor::FlxColor_Impl__obj::_new(null());
HXDLIN( 115)			{
HXLINE( 115)				color10 = (color10 & -16711681);
HXDLIN( 115)				color10 = (color10 | 9240576);
            			}
HXDLIN( 115)			{
HXLINE( 115)				color10 = (color10 & -65281);
HXDLIN( 115)				color10 = (color10 | 42240);
            			}
HXDLIN( 115)			{
HXLINE( 115)				color10 = (color10 & -256);
HXDLIN( 115)				color10 = (color10 | 206);
            			}
HXDLIN( 115)			{
HXLINE( 115)				color10 = (color10 & 16777215);
HXDLIN( 115)				int color11;
HXDLIN( 115)				if ((Alpha5 > 255)) {
HXLINE( 115)					color11 = 255;
            				}
            				else {
HXLINE( 115)					if ((Alpha5 < 0)) {
HXLINE( 115)						color11 = 0;
            					}
            					else {
HXLINE( 115)						color11 = Alpha5;
            					}
            				}
HXDLIN( 115)				color10 = (color10 | (color11 << 24));
            			}
HXLINE( 121)			int Alpha6 = 255;
HXDLIN( 121)			int color12 = ::flixel::util::_FlxColor::FlxColor_Impl__obj::_new(null());
HXDLIN( 121)			{
HXLINE( 121)				color12 = (color12 & -16711681);
HXDLIN( 121)				color12 = (color12 | 13500416);
            			}
HXDLIN( 121)			{
HXLINE( 121)				color12 = (color12 & -65281);
HXDLIN( 121)				color12 = (color12 | 27136);
            			}
HXDLIN( 121)			{
HXLINE( 121)				color12 = (color12 & -256);
HXDLIN( 121)				color12 = (color12 | 169);
            			}
HXDLIN( 121)			{
HXLINE( 121)				color12 = (color12 & 16777215);
HXDLIN( 121)				int color13;
HXDLIN( 121)				if ((Alpha6 > 255)) {
HXLINE( 121)					color13 = 255;
            				}
            				else {
HXLINE( 121)					if ((Alpha6 < 0)) {
HXLINE( 121)						color13 = 0;
            					}
            					else {
HXLINE( 121)						color13 = Alpha6;
            					}
            				}
HXDLIN( 121)				color12 = (color12 | (color13 << 24));
            			}
HXLINE(  86)			return ::cpp::VirtualArray_obj::__new(7)->init(0,::cpp::VirtualArray_obj::__new(4)->init(0,::cpp::VirtualArray_obj::__new(1)->init(0,HX_("Tutorial",be,4b,67,5c)))->init(1,::cpp::VirtualArray_obj::__new(1)->init(0,HX_("gf",1f,5a,00,00)))->init(2,::cpp::VirtualArray_obj::__new(1)->init(0,color))->init(3,HX_("Funky Beginnings",c9,6f,7d,00)))->init(1,::cpp::VirtualArray_obj::__new(4)->init(0,::cpp::VirtualArray_obj::__new(3)->init(0,HX_("Bopeebo",90,29,16,da))->init(1,HX_("Fresh",4e,f6,b3,99))->init(2,HX_("Dadbattle",9f,4a,7c,48)))->init(1,::cpp::VirtualArray_obj::__new(3)->init(0,HX_("dad",47,36,4c,00))->init(1,HX_("dad",47,36,4c,00))->init(2,HX_("dad",47,36,4c,00)))->init(2,::cpp::VirtualArray_obj::__new(1)->init(0,color2))->init(3,HX_("vs. DADDY DEAREST",01,f4,81,3b)))->init(2,::cpp::VirtualArray_obj::__new(4)->init(0,::cpp::VirtualArray_obj::__new(3)->init(0,HX_("Spookeez",2c,36,dd,4e))->init(1,HX_("South",ed,01,fa,13))->init(2,HX_("Monster",fa,7b,01,86)))->init(1,::cpp::VirtualArray_obj::__new(3)->init(0,HX_("spooky",eb,bd,9e,c1))->init(1,HX_("spooky",eb,bd,9e,c1))->init(2,HX_("monster",1a,54,b0,b8)))->init(2,::cpp::VirtualArray_obj::__new(1)->init(0,color4))->init(3,HX_("Spooky Month",4b,8f,09,84)))->init(3,::cpp::VirtualArray_obj::__new(4)->init(0,::cpp::VirtualArray_obj::__new(3)->init(0,HX_("Pico",05,15,31,35))->init(1,HX_("Philly-Nice",22,f2,31,13))->init(2,HX_("Blammed",76,2a,51,09)))->init(1,::cpp::VirtualArray_obj::__new(1)->init(0,HX_("pico",e5,e8,57,4a)))->init(2,::cpp::VirtualArray_obj::__new(1)->init(0,color6))->init(3,HX_("vs. Pico",34,31,d3,11)))->init(4,::cpp::VirtualArray_obj::__new(4)->init(0,::cpp::VirtualArray_obj::__new(3)->init(0,HX_("Satin-Panties",be,dc,41,e6))->init(1,HX_("High",82,63,e7,2f))->init(2,HX_("Milf",f6,78,35,33)))->init(1,::cpp::VirtualArray_obj::__new(1)->init(0,HX_("mom",cb,16,53,00)))->init(2,::cpp::VirtualArray_obj::__new(1)->init(0,color8))->init(3,HX_("MOMMY MUST MURDER",75,22,f0,98)))->init(5,::cpp::VirtualArray_obj::__new(4)->init(0,::cpp::VirtualArray_obj::__new(3)->init(0,HX_("Cocoa",e9,0c,83,dd))->init(1,HX_("Eggnog",81,78,4e,29))->init(2,HX_("Winter-Horrorland",9d,fd,2a,b7)))->init(1,::cpp::VirtualArray_obj::__new(3)->init(0,HX_("parents-christmas",fe,94,c5,32))->init(1,HX_("parents-christmas",fe,94,c5,32))->init(2,HX_("monster-christmas",4f,88,85,27)))->init(2,::cpp::VirtualArray_obj::__new(1)->init(0,color10))->init(3,HX_("RED SNOW",d2,d3,a0,5b)))->init(6,::cpp::VirtualArray_obj::__new(4)->init(0,::cpp::VirtualArray_obj::__new(3)->init(0,HX_("Senpai",5c,53,22,a0))->init(1,HX_("Roses",e4,db,91,80))->init(2,HX_("Thorns",bc,33,5c,c1)))->init(1,::cpp::VirtualArray_obj::__new(3)->init(0,HX_("senpai",3c,df,8d,6b))->init(1,HX_("senpai",3c,df,8d,6b))->init(2,HX_("spirit",31,bb,a9,bd)))->init(2,::cpp::VirtualArray_obj::__new(1)->init(0,color12))->init(3,HX_("hating simulator ft. moawling",03,af,db,4f)));
            		}
            		HX_END_LOCAL_FUNC0(return)

            	HX_STACKFRAME(&_hx_pos_e47a9afac0942eb9_86_boot)
HXDLIN(  86)		gameWeeks = ( (::cpp::VirtualArray)( ::Dynamic(new _hx_Closure_0())()) );
            	}
}


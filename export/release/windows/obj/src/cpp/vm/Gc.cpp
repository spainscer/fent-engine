// Generated by Haxe 4.1.5
#include <hxcpp.h>

#ifndef INCLUDED_cpp_vm_Gc
#include <cpp/vm/Gc.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_f36443b6199da11a_47_memInfo64,"cpp.vm.Gc","memInfo64",0xad2b54bb,"cpp.vm.Gc.memInfo64","C:\\HaxeToolkit\\haxe\\std/cpp/vm/Gc.hx",47,0xeed1f8ef)
namespace cpp{
namespace vm{

void Gc_obj::__construct() { }

Dynamic Gc_obj::__CreateEmpty() { return new Gc_obj; }

void *Gc_obj::_hx_vtable = 0;

Dynamic Gc_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< Gc_obj > _hx_result = new Gc_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Gc_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x6bc853d6;
}

Float Gc_obj::memInfo64(int inWhatInfo){
            	HX_STACKFRAME(&_hx_pos_f36443b6199da11a_47_memInfo64)
HXDLIN(  47)		return __hxcpp_gc_mem_info(inWhatInfo);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Gc_obj,memInfo64,return )


Gc_obj::Gc_obj()
{
}

bool Gc_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 9:
		if (HX_FIELD_EQ(inName,"memInfo64") ) { outValue = memInfo64_dyn(); return true; }
	}
	return false;
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *Gc_obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo *Gc_obj_sStaticStorageInfo = 0;
#endif

::hx::Class Gc_obj::__mClass;

static ::String Gc_obj_sStaticFields[] = {
	HX_("memInfo64",21,9f,35,e0),
	::String(null())
};

void Gc_obj::__register()
{
	Gc_obj _hx_dummy;
	Gc_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("cpp.vm.Gc",88,f1,b3,68);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Gc_obj::__GetStatic;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(Gc_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = ::hx::TCanCast< Gc_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Gc_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Gc_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace cpp
} // end namespace vm

// Generated by Haxe 4.1.5
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Main
#include <Main.h>
#endif
#ifndef INCLUDED_Paths
#include <Paths.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
#ifndef INCLUDED_flixel_addons_transition_FlxTransitionableState
#include <flixel/addons/transition/FlxTransitionableState.h>
#endif
#ifndef INCLUDED_flixel_addons_transition_TransitionData
#include <flixel/addons/transition/TransitionData.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUIState
#include <flixel/addons/ui/FlxUIState.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IEventGetter
#include <flixel/addons/ui/interfaces/IEventGetter.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IFlxUIState
#include <flixel/addons/ui/interfaces/IFlxUIState.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedSpriteGroup
#include <flixel/group/FlxTypedSpriteGroup.h>
#endif
#ifndef INCLUDED_flixel_input_actions_FlxAction
#include <flixel/input/actions/FlxAction.h>
#endif
#ifndef INCLUDED_flixel_input_actions_FlxActionDigital
#include <flixel/input/actions/FlxActionDigital.h>
#endif
#ifndef INCLUDED_flixel_input_actions_FlxActionSet
#include <flixel/input/actions/FlxActionSet.h>
#endif
#ifndef INCLUDED_flixel_math_FlxPoint
#include <flixel/math/FlxPoint.h>
#endif
#ifndef INCLUDED_flixel_system_FlxSound
#include <flixel/system/FlxSound.h>
#endif
#ifndef INCLUDED_flixel_system_FlxSoundGroup
#include <flixel/system/FlxSoundGroup.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_SoundFrontEnd
#include <flixel/system/frontEnds/SoundFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_text_FlxText
#include <flixel/text/FlxText.h>
#endif
#ifndef INCLUDED_flixel_text_FlxTextBorderStyle
#include <flixel/text/FlxTextBorderStyle.h>
#endif
#ifndef INCLUDED_flixel_tweens_FlxTween
#include <flixel/tweens/FlxTween.h>
#endif
#ifndef INCLUDED_flixel_tweens_misc_ColorTween
#include <flixel/tweens/misc/ColorTween.h>
#endif
#ifndef INCLUDED_flixel_tweens_misc_NumTween
#include <flixel/tweens/misc/NumTween.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif
#ifndef INCLUDED_gameObjects_userInterface_HealthIcon
#include <gameObjects/userInterface/HealthIcon.h>
#endif
#ifndef INCLUDED_haxe_Log
#include <haxe/Log.h>
#endif
#ifndef INCLUDED_meta_Controls
#include <meta/Controls.h>
#endif
#ifndef INCLUDED_meta_CoolUtil
#include <meta/CoolUtil.h>
#endif
#ifndef INCLUDED_meta_MusicBeatState
#include <meta/MusicBeatState.h>
#endif
#ifndef INCLUDED_meta_data_Highscore
#include <meta/data/Highscore.h>
#endif
#ifndef INCLUDED_meta_data_PlayerSettings
#include <meta/data/PlayerSettings.h>
#endif
#ifndef INCLUDED_meta_data_Song
#include <meta/data/Song.h>
#endif
#ifndef INCLUDED_meta_data_dependency_Discord
#include <meta/data/dependency/Discord.h>
#endif
#ifndef INCLUDED_meta_data_dependency_FNFUIState
#include <meta/data/dependency/FNFUIState.h>
#endif
#ifndef INCLUDED_meta_data_font_Alphabet
#include <meta/data/font/Alphabet.h>
#endif
#ifndef INCLUDED_meta_state_PlayState
#include <meta/state/PlayState.h>
#endif
#ifndef INCLUDED_meta_state_menus_FreeplayState
#include <meta/state/menus/FreeplayState.h>
#endif
#ifndef INCLUDED_meta_state_menus_MainMenuState
#include <meta/state/menus/MainMenuState.h>
#endif
#ifndef INCLUDED_meta_state_menus_SongMetadata
#include <meta/state/menus/SongMetadata.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_media_Sound
#include <openfl/media/Sound.h>
#endif
#ifndef INCLUDED_openfl_media_SoundChannel
#include <openfl/media/SoundChannel.h>
#endif
#ifndef INCLUDED_sys_FileSystem
#include <sys/FileSystem.h>
#endif
#ifndef INCLUDED_sys_thread__Thread_Thread_Impl_
#include <sys/thread/_Thread/Thread_Impl_.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_6d07d424410e0488_28_new,"meta.state.menus.FreeplayState","new",0x7cc146e3,"meta.state.menus.FreeplayState.new","meta/state/menus/FreeplayState.hx",28,0xef6a5030)
HX_LOCAL_STACK_FRAME(_hx_pos_6d07d424410e0488_59_create,"meta.state.menus.FreeplayState","create",0x1786a459,"meta.state.menus.FreeplayState.create","meta/state/menus/FreeplayState.hx",59,0xef6a5030)
HX_LOCAL_STACK_FRAME(_hx_pos_6d07d424410e0488_157_addSong,"meta.state.menus.FreeplayState","addSong",0xf573da99,"meta.state.menus.FreeplayState.addSong","meta/state/menus/FreeplayState.hx",157,0xef6a5030)
HX_LOCAL_STACK_FRAME(_hx_pos_6d07d424410e0488_173_addWeek,"meta.state.menus.FreeplayState","addWeek",0xf81116b8,"meta.state.menus.FreeplayState.addWeek","meta/state/menus/FreeplayState.hx",173,0xef6a5030)
static const ::String _hx_array_data_7c7d9971_10[] = {
	HX_("bf",c4,55,00,00),
};
static const int _hx_array_data_7c7d9971_11[] = {
	(int)-1,
};
HX_LOCAL_STACK_FRAME(_hx_pos_6d07d424410e0488_192_update,"meta.state.menus.FreeplayState","update",0x227cc366,"meta.state.menus.FreeplayState.update","meta/state/menus/FreeplayState.hx",192,0xef6a5030)
HX_LOCAL_STACK_FRAME(_hx_pos_6d07d424410e0488_254_changeDiff,"meta.state.menus.FreeplayState","changeDiff",0x3d504172,"meta.state.menus.FreeplayState.changeDiff","meta/state/menus/FreeplayState.hx",254,0xef6a5030)
HX_LOCAL_STACK_FRAME(_hx_pos_6d07d424410e0488_272_changeSelection,"meta.state.menus.FreeplayState","changeSelection",0x9ffc47bf,"meta.state.menus.FreeplayState.changeSelection","meta/state/menus/FreeplayState.hx",272,0xef6a5030)
HX_LOCAL_STACK_FRAME(_hx_pos_6d07d424410e0488_323_changeSongPlaying,"meta.state.menus.FreeplayState","changeSongPlaying",0x8b0eba4c,"meta.state.menus.FreeplayState.changeSongPlaying","meta/state/menus/FreeplayState.hx",323,0xef6a5030)
HX_LOCAL_STACK_FRAME(_hx_pos_6d07d424410e0488_328_changeSongPlaying,"meta.state.menus.FreeplayState","changeSongPlaying",0x8b0eba4c,"meta.state.menus.FreeplayState.changeSongPlaying","meta/state/menus/FreeplayState.hx",328,0xef6a5030)
namespace meta{
namespace state{
namespace menus{

void FreeplayState_obj::__construct( ::flixel::addons::transition::TransitionData TransIn, ::flixel::addons::transition::TransitionData TransOut){
            	HX_STACKFRAME(&_hx_pos_6d07d424410e0488_28_new)
HXLINE( 370)		this->playingSongs = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(  56)		this->existingDifficulties = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(  55)		this->existingSongs = ::Array_obj< ::String >::__new(0);
HXLINE(  51)		this->mainColor = -1;
HXLINE(  49)		this->iconArray = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(  47)		this->curPlaying = false;
HXLINE(  44)		this->threadActive = true;
HXLINE(  41)		this->intendedScore = 0;
HXLINE(  40)		this->lerpScore = 0;
HXLINE(  36)		this->curDifficulty = 1;
HXLINE(  35)		this->curSongPlaying = -1;
HXLINE(  34)		this->curSelected = 0;
HXLINE(  31)		this->songs = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(  28)		super::__construct(TransIn,TransOut);
            	}

Dynamic FreeplayState_obj::__CreateEmpty() { return new FreeplayState_obj; }

void *FreeplayState_obj::_hx_vtable = 0;

Dynamic FreeplayState_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< FreeplayState_obj > _hx_result = new FreeplayState_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool FreeplayState_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x2f064378) {
		if (inClassId<=(int)0x0f8d4977) {
			if (inClassId<=(int)0x0225b2d9) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x0225b2d9;
			} else {
				return inClassId==(int)0x0f8d4977;
			}
		} else {
			return inClassId==(int)0x23a57bae || inClassId==(int)0x2f064378;
		}
	} else {
		if (inClassId<=(int)0x7c795c9f) {
			if (inClassId<=(int)0x62817b24) {
				return inClassId==(int)0x315a4b61 || inClassId==(int)0x62817b24;
			} else {
				return inClassId==(int)0x7c795c9f;
			}
		} else {
			return inClassId==(int)0x7ccf8994;
		}
	}
}

void FreeplayState_obj::create(){
            	HX_GC_STACKFRAME(&_hx_pos_6d07d424410e0488_59_create)
HXLINE(  60)		this->super::create();
HXLINE(  68)		::Array< ::String > folderSongs = ::meta::CoolUtil_obj::returnAssetsLibrary(HX_("songs",fe,36,c7,80),HX_("assets",83,48,03,4c));
HXLINE(  71)		{
HXLINE(  71)			int _g = 0;
HXDLIN(  71)			int _g1 = ::Main_obj::gameWeeks->get_length();
HXDLIN(  71)			while((_g < _g1)){
HXLINE(  71)				_g = (_g + 1);
HXDLIN(  71)				int i = (_g - 1);
HXLINE(  73)				this->addWeek(( (::Array< ::String >)(::Main_obj::gameWeeks->__get(i)->__GetItem(0)) ),i,( (::Array< ::String >)(::Main_obj::gameWeeks->__get(i)->__GetItem(1)) ),( (::Array< int >)(::Main_obj::gameWeeks->__get(i)->__GetItem(2)) ));
HXLINE(  74)				{
HXLINE(  74)					int _g1 = 0;
HXDLIN(  74)					::cpp::VirtualArray _g2 = ::hx::TCast< ::cpp::VirtualArray >::cast(::Main_obj::gameWeeks->__get(i)->__GetItem(0));
HXDLIN(  74)					while((_g1 < _g2->get_length())){
HXLINE(  74)						 ::Dynamic j = _g2->__get(_g1);
HXDLIN(  74)						_g1 = (_g1 + 1);
HXLINE(  75)						::Array< ::String > _hx_tmp = this->existingSongs;
HXDLIN(  75)						_hx_tmp->push(j->__Field(HX_("toLowerCase",56,4c,64,b8),::hx::paccDynamic)());
            					}
            				}
            			}
            		}
HXLINE(  80)		{
HXLINE(  80)			int _g2 = 0;
HXDLIN(  80)			while((_g2 < folderSongs->length)){
HXLINE(  80)				::String i = folderSongs->__get(_g2);
HXDLIN(  80)				_g2 = (_g2 + 1);
HXLINE(  82)				::Array< ::String > _hx_tmp = this->existingSongs;
HXDLIN(  82)				if (!(_hx_tmp->contains(i.toLowerCase()))) {
HXLINE(  84)					::String icon = HX_("gf",1f,5a,00,00);
HXLINE(  85)					::String library = null();
HXDLIN(  85)					::String chartExists = ((HX_("songs/",71,e7,88,2d) + i.toLowerCase()) + HX_("/",2f,00,00,00));
HXDLIN(  85)					bool chartExists1 = ::sys::FileSystem_obj::exists(::Paths_obj::getPath(((chartExists + i.toLowerCase()) + HX_(".json",56,f1,d6,c2)),HX_("TEXT",ad,94,ba,37),library));
HXLINE(  86)					if (chartExists1) {
HXLINE(  88)						 ::Dynamic castSong = ::meta::data::Song_obj::loadFromJson(i,i);
HXLINE(  89)						if (::hx::IsNotNull( castSong )) {
HXLINE(  89)							icon = ( (::String)(castSong->__Field(HX_("player2",b1,09,15,8a),::hx::paccDynamic)) );
            						}
            						else {
HXLINE(  89)							icon = HX_("gf",1f,5a,00,00);
            						}
HXLINE(  90)						this->addSong(::meta::CoolUtil_obj::spaceToDash(( (::String)(castSong->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic)) )),1,icon,-1);
            					}
            				}
            			}
            		}
HXLINE(  99)		::meta::data::dependency::Discord_obj::changePresence(HX_("FREEPLAY MENU",1f,39,06,5d),HX_("Main Menu",e6,3a,4e,c8),null(),null(),null());
HXLINE( 104)		 ::flixel::FlxSprite _hx_tmp =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,null(),null(),null());
HXDLIN( 104)		::String library = null();
HXDLIN( 104)		this->bg = _hx_tmp->loadGraphic(::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("menus/base/menuDesat",63,1b,f0,40)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),library),null(),null(),null(),null(),null());
HXLINE( 105)		this->add(this->bg);
HXLINE( 107)		this->grpSongs =  ::flixel::group::FlxTypedGroup_obj::__alloc( HX_CTX ,null());
HXLINE( 108)		this->add(this->grpSongs);
HXLINE( 110)		{
HXLINE( 110)			int _g3 = 0;
HXDLIN( 110)			int _g4 = this->songs->length;
HXDLIN( 110)			while((_g3 < _g4)){
HXLINE( 110)				_g3 = (_g3 + 1);
HXDLIN( 110)				int i = (_g3 - 1);
HXLINE( 112)				 ::meta::data::font::Alphabet songText =  ::meta::data::font::Alphabet_obj::__alloc( HX_CTX ,( (Float)(0) ),( (Float)(((70 * i) + 30)) ),this->songs->__get(i).StaticCast<  ::meta::state::menus::SongMetadata >()->songName,true,false,null());
HXLINE( 113)				songText->isMenuItem = true;
HXLINE( 114)				songText->targetY = ( (Float)(i) );
HXLINE( 115)				this->grpSongs->add(songText).StaticCast<  ::meta::data::font::Alphabet >();
HXLINE( 117)				 ::gameObjects::userInterface::HealthIcon icon =  ::gameObjects::userInterface::HealthIcon_obj::__alloc( HX_CTX ,this->songs->__get(i).StaticCast<  ::meta::state::menus::SongMetadata >()->songCharacter,null());
HXLINE( 118)				icon->sprTracker = songText;
HXLINE( 121)				this->iconArray->push(icon);
HXLINE( 122)				this->add(icon);
            			}
            		}
HXLINE( 129)		this->scoreText =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,(( (Float)(::flixel::FlxG_obj::width) ) * ((Float)0.7)),5,0,HX_("",00,00,00,00),32,null());
HXLINE( 130)		this->scoreText->setFormat((HX_("assets/fonts/",37,ff,a5,9c) + HX_("vcr.ttf",9d,d2,a7,82)),32,-1,HX_("right",dc,0b,64,e9),null(),null(),null());
HXLINE( 132)		Float _hx_tmp1 = this->scoreText->x;
HXDLIN( 132)		 ::flixel::FlxSprite _hx_tmp2 =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,(_hx_tmp1 - this->scoreText->get_width()),0,null());
HXDLIN( 132)		this->scoreBG = _hx_tmp2->makeGraphic(::Std_obj::_hx_int((( (Float)(::flixel::FlxG_obj::width) ) * ((Float)0.35))),66,-16777216,null(),null());
HXLINE( 133)		this->scoreBG->set_alpha(((Float)0.6));
HXLINE( 134)		this->add(this->scoreBG);
HXLINE( 136)		this->diffText =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,this->scoreText->x,(this->scoreText->y + 36),0,HX_("",00,00,00,00),24,null());
HXLINE( 137)		this->diffText->set_alignment(HX_("center",d5,25,db,05));
HXLINE( 138)		this->diffText->set_font(this->scoreText->_font);
HXLINE( 139)		 ::flixel::text::FlxText _hx_tmp3 = this->diffText;
HXDLIN( 139)		_hx_tmp3->set_x(this->scoreBG->getGraphicMidpoint(null())->x);
HXLINE( 140)		this->add(this->diffText);
HXLINE( 142)		this->add(this->scoreText);
HXLINE( 144)		this->changeSelection(null());
HXLINE( 145)		this->changeDiff(null());
HXLINE( 149)		this->selector =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
HXLINE( 151)		this->selector->set_size(40);
HXLINE( 152)		this->selector->set_text(HX_(">",3e,00,00,00));
            	}


void FreeplayState_obj::addSong(::String songName,int weekNum,::String songCharacter,int songColor){
            	HX_GC_STACKFRAME(&_hx_pos_6d07d424410e0488_157_addSong)
HXLINE( 159)		::Array< ::String > coolDifficultyArray = ::Array_obj< ::String >::__new(0);
HXLINE( 160)		{
HXLINE( 160)			int _g = 0;
HXDLIN( 160)			::Array< ::String > _g1 = ::meta::CoolUtil_obj::difficultyArray;
HXDLIN( 160)			while((_g < _g1->length)){
HXLINE( 160)				::String i = _g1->__get(_g);
HXDLIN( 160)				_g = (_g + 1);
HXLINE( 161)				bool _hx_tmp;
HXDLIN( 161)				::String library = null();
HXDLIN( 161)				::String _hx_tmp1 = ((HX_("songs/",71,e7,88,2d) + songName.toLowerCase()) + HX_("/",2f,00,00,00));
HXDLIN( 161)				if (!(::sys::FileSystem_obj::exists(::Paths_obj::getPath(((_hx_tmp1 + ((songName + HX_("-",2d,00,00,00)) + i).toLowerCase()) + HX_(".json",56,f1,d6,c2)),HX_("TEXT",ad,94,ba,37),library)))) {
HXLINE( 162)					::String library = null();
HXDLIN( 162)					::String _hx_tmp1 = ((HX_("songs/",71,e7,88,2d) + songName.toLowerCase()) + HX_("/",2f,00,00,00));
HXDLIN( 162)					if (::sys::FileSystem_obj::exists(::Paths_obj::getPath(((_hx_tmp1 + songName.toLowerCase()) + HX_(".json",56,f1,d6,c2)),HX_("TEXT",ad,94,ba,37),library))) {
HXLINE( 161)						_hx_tmp = (i == HX_("NORMAL",27,1e,ec,e2));
            					}
            					else {
HXLINE( 161)						_hx_tmp = false;
            					}
            				}
            				else {
HXLINE( 161)					_hx_tmp = true;
            				}
HXDLIN( 161)				if (_hx_tmp) {
HXLINE( 163)					coolDifficultyArray->push(i);
            				}
            			}
            		}
HXLINE( 165)		if ((coolDifficultyArray->length > 0)) {
HXLINE( 167)			::Array< ::Dynamic> _hx_tmp = this->songs;
HXDLIN( 167)			_hx_tmp->push( ::meta::state::menus::SongMetadata_obj::__alloc( HX_CTX ,songName,weekNum,songCharacter,songColor));
HXLINE( 168)			this->existingDifficulties->push(coolDifficultyArray);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC4(FreeplayState_obj,addSong,(void))

void FreeplayState_obj::addWeek(::Array< ::String > songs,int weekNum,::Array< ::String > songCharacters,::Array< int > songColor){
            	HX_STACKFRAME(&_hx_pos_6d07d424410e0488_173_addWeek)
HXLINE( 174)		if (::hx::IsNull( songCharacters )) {
HXLINE( 175)			songCharacters = ::Array_obj< ::String >::fromData( _hx_array_data_7c7d9971_10,1);
            		}
HXLINE( 176)		if (::hx::IsNull( songColor )) {
HXLINE( 177)			songColor = ::Array_obj< int >::fromData( _hx_array_data_7c7d9971_11,1);
            		}
HXLINE( 179)		int num_0 = 0;
HXDLIN( 179)		int num_1 = 0;
HXLINE( 180)		{
HXLINE( 180)			int _g = 0;
HXDLIN( 180)			while((_g < songs->length)){
HXLINE( 180)				::String song = songs->__get(_g);
HXDLIN( 180)				_g = (_g + 1);
HXLINE( 182)				this->addSong(song,weekNum,songCharacters->__get(num_0),songColor->__get(num_1));
HXLINE( 184)				if ((songCharacters->length != 1)) {
HXLINE( 185)					num_0 = (num_0 + 1);
            				}
HXLINE( 186)				if ((songColor->length != 1)) {
HXLINE( 187)					num_1 = (num_1 + 1);
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC4(FreeplayState_obj,addWeek,(void))

void FreeplayState_obj::update(Float elapsed){
            	HX_GC_STACKFRAME(&_hx_pos_6d07d424410e0488_192_update)
HXLINE( 193)		this->super::update(elapsed);
HXLINE( 195)		::flixel::tweens::FlxTween_obj::color(this->bg,((Float)0.35),this->bg->color,this->mainColor,null());
HXLINE( 197)		Float lerpVal = ::Main_obj::framerateAdjust(((Float)0.1));
HXLINE( 198)		Float a = ( (Float)(this->lerpScore) );
HXDLIN( 198)		this->lerpScore = ::Math_obj::floor((a + (lerpVal * (( (Float)(this->intendedScore) ) - a))));
HXLINE( 200)		if ((::Math_obj::abs(( (Float)((this->lerpScore - this->intendedScore)) )) <= 10)) {
HXLINE( 201)			this->lerpScore = this->intendedScore;
            		}
HXLINE( 203)		bool upP = ::meta::data::PlayerSettings_obj::player1->controls->_upP->check();
HXLINE( 204)		bool downP = ::meta::data::PlayerSettings_obj::player1->controls->_downP->check();
HXLINE( 205)		bool accepted = ::meta::data::PlayerSettings_obj::player1->controls->_accept->check();
HXLINE( 207)		if (upP) {
HXLINE( 208)			this->changeSelection(-1);
            		}
            		else {
HXLINE( 209)			if (downP) {
HXLINE( 210)				this->changeSelection(1);
            			}
            		}
HXLINE( 212)		if (::meta::data::PlayerSettings_obj::player1->controls->_leftP->check()) {
HXLINE( 213)			this->changeDiff(-1);
            		}
HXLINE( 214)		if (::meta::data::PlayerSettings_obj::player1->controls->_rightP->check()) {
HXLINE( 215)			this->changeDiff(1);
            		}
HXLINE( 217)		if (::meta::data::PlayerSettings_obj::player1->controls->_back->check()) {
HXLINE( 219)			this->threadActive = false;
HXLINE( 220)			::Main_obj::switchState(::hx::ObjectPtr<OBJ_>(this), ::meta::state::menus::MainMenuState_obj::__alloc( HX_CTX ,null(),null()));
            		}
HXLINE( 223)		if (accepted) {
HXLINE( 225)			::String poop = this->songs->__get(this->curSelected).StaticCast<  ::meta::state::menus::SongMetadata >()->songName.toLowerCase();
HXDLIN( 225)			::String poop1 = ::meta::data::Highscore_obj::formatSong(poop,::meta::CoolUtil_obj::difficultyArray->indexOf(this->existingDifficulties->__get(this->curSelected).StaticCast< ::Array< ::String > >()->__get(this->curDifficulty),null()));
HXLINE( 228)			::meta::state::PlayState_obj::SONG = ::meta::data::Song_obj::loadFromJson(poop1,this->songs->__get(this->curSelected).StaticCast<  ::meta::state::menus::SongMetadata >()->songName.toLowerCase());
HXLINE( 229)			::meta::state::PlayState_obj::isStoryMode = false;
HXLINE( 230)			::meta::state::PlayState_obj::storyDifficulty = this->curDifficulty;
HXLINE( 232)			::meta::state::PlayState_obj::storyWeek = this->songs->__get(this->curSelected).StaticCast<  ::meta::state::menus::SongMetadata >()->week;
HXLINE( 233)			::haxe::Log_obj::trace((HX_("CUR WEEK",b4,9a,a0,36) + ::meta::state::PlayState_obj::storyWeek),::hx::SourceInfo(HX_("source/meta/state/menus/FreeplayState.hx",bc,06,c4,eb),233,HX_("meta.state.menus.FreeplayState",71,99,7d,7c),HX_("update",09,86,05,87)));
HXLINE( 235)			if (::hx::IsNotNull( ::flixel::FlxG_obj::sound->music )) {
HXLINE( 236)				 ::flixel::_hx_system::FlxSound _this = ::flixel::FlxG_obj::sound->music;
HXDLIN( 236)				_this->cleanup(_this->autoDestroy,true);
            			}
HXLINE( 238)			this->threadActive = false;
HXLINE( 240)			::Main_obj::switchState(::hx::ObjectPtr<OBJ_>(this), ::meta::state::PlayState_obj::__alloc( HX_CTX ,null(),null()));
            		}
HXLINE( 244)		this->scoreText->set_text((HX_("PERSONAL BEST:",36,ce,e9,ee) + this->lerpScore));
HXLINE( 245)		 ::flixel::text::FlxText _hx_tmp = this->scoreText;
HXDLIN( 245)		int _hx_tmp1 = ::flixel::FlxG_obj::width;
HXDLIN( 245)		_hx_tmp->set_x(((( (Float)(_hx_tmp1) ) - this->scoreText->get_width()) - ( (Float)(5) )));
HXLINE( 246)		 ::flixel::FlxSprite _hx_tmp2 = this->scoreBG;
HXDLIN( 246)		_hx_tmp2->set_width((this->scoreText->get_width() + 8));
HXLINE( 247)		 ::flixel::FlxSprite _hx_tmp3 = this->scoreBG;
HXDLIN( 247)		int _hx_tmp4 = ::flixel::FlxG_obj::width;
HXDLIN( 247)		_hx_tmp3->set_x((( (Float)(_hx_tmp4) ) - this->scoreBG->get_width()));
HXLINE( 248)		 ::flixel::text::FlxText _hx_tmp5 = this->diffText;
HXDLIN( 248)		Float _hx_tmp6 = this->scoreBG->x;
HXDLIN( 248)		Float _hx_tmp7 = (_hx_tmp6 + (this->scoreBG->get_width() / ( (Float)(2) )));
HXDLIN( 248)		_hx_tmp5->set_x((_hx_tmp7 - (this->diffText->get_width() / ( (Float)(2) ))));
            	}


void FreeplayState_obj::changeDiff(::hx::Null< int >  __o_change){
            		int change = __o_change.Default(0);
            	HX_STACKFRAME(&_hx_pos_6d07d424410e0488_254_changeDiff)
HXLINE( 255)		 ::meta::state::menus::FreeplayState _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 255)		_hx_tmp->curDifficulty = (_hx_tmp->curDifficulty + change);
HXLINE( 256)		bool _hx_tmp1;
HXDLIN( 256)		if (::hx::IsNotNull( this->lastDifficulty )) {
HXLINE( 256)			_hx_tmp1 = (change != 0);
            		}
            		else {
HXLINE( 256)			_hx_tmp1 = false;
            		}
HXDLIN( 256)		if (_hx_tmp1) {
HXLINE( 257)			while((this->existingDifficulties->__get(this->curSelected).StaticCast< ::Array< ::String > >()->__get(this->curDifficulty) == this->lastDifficulty)){
HXLINE( 258)				 ::meta::state::menus::FreeplayState _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 258)				_hx_tmp->curDifficulty = (_hx_tmp->curDifficulty + change);
            			}
            		}
HXLINE( 260)		if ((this->curDifficulty < 0)) {
HXLINE( 261)			this->curDifficulty = (this->existingDifficulties->__get(this->curSelected).StaticCast< ::Array< ::String > >()->length - 1);
            		}
HXLINE( 262)		if ((this->curDifficulty > (this->existingDifficulties->__get(this->curSelected).StaticCast< ::Array< ::String > >()->length - 1))) {
HXLINE( 263)			this->curDifficulty = 0;
            		}
HXLINE( 265)		this->intendedScore = ::meta::data::Highscore_obj::getScore(this->songs->__get(this->curSelected).StaticCast<  ::meta::state::menus::SongMetadata >()->songName,this->curDifficulty);
HXLINE( 267)		this->diffText->set_text(((HX_("< ",64,34,00,00) + this->existingDifficulties->__get(this->curSelected).StaticCast< ::Array< ::String > >()->__get(this->curDifficulty)) + HX_(" >",1e,1c,00,00)));
HXLINE( 268)		this->lastDifficulty = this->existingDifficulties->__get(this->curSelected).StaticCast< ::Array< ::String > >()->__get(this->curDifficulty);
            	}


HX_DEFINE_DYNAMIC_FUNC1(FreeplayState_obj,changeDiff,(void))

void FreeplayState_obj::changeSelection(::hx::Null< int >  __o_change){
            		int change = __o_change.Default(0);
            	HX_STACKFRAME(&_hx_pos_6d07d424410e0488_272_changeSelection)
HXLINE( 273)		 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp = ::flixel::FlxG_obj::sound;
HXDLIN( 273)		_hx_tmp->play(::Paths_obj::sound(HX_("scrollMenu",4c,d4,18,06),null()),((Float)0.4),null(),null(),null(),null());
HXLINE( 275)		 ::meta::state::menus::FreeplayState _hx_tmp1 = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 275)		_hx_tmp1->curSelected = (_hx_tmp1->curSelected + change);
HXLINE( 277)		if ((this->curSelected < 0)) {
HXLINE( 278)			this->curSelected = (this->songs->length - 1);
            		}
HXLINE( 279)		if ((this->curSelected >= this->songs->length)) {
HXLINE( 280)			this->curSelected = 0;
            		}
HXLINE( 284)		this->intendedScore = ::meta::data::Highscore_obj::getScore(this->songs->__get(this->curSelected).StaticCast<  ::meta::state::menus::SongMetadata >()->songName,this->curDifficulty);
HXLINE( 287)		this->mainColor = this->songs->__get(this->curSelected).StaticCast<  ::meta::state::menus::SongMetadata >()->songColor;
HXLINE( 291)		int bullShit = 0;
HXLINE( 293)		{
HXLINE( 293)			int _g = 0;
HXDLIN( 293)			int _g1 = this->iconArray->length;
HXDLIN( 293)			while((_g < _g1)){
HXLINE( 293)				_g = (_g + 1);
HXDLIN( 293)				int i = (_g - 1);
HXLINE( 295)				this->iconArray->__get(i).StaticCast<  ::gameObjects::userInterface::HealthIcon >()->set_alpha(((Float)0.6));
            			}
            		}
HXLINE( 298)		this->iconArray->__get(this->curSelected).StaticCast<  ::gameObjects::userInterface::HealthIcon >()->set_alpha(( (Float)(1) ));
HXLINE( 300)		{
HXLINE( 300)			int _g2 = 0;
HXDLIN( 300)			::Array< ::Dynamic> _g3 = this->grpSongs->members;
HXDLIN( 300)			while((_g2 < _g3->length)){
HXLINE( 300)				 ::meta::data::font::Alphabet item = _g3->__get(_g2).StaticCast<  ::meta::data::font::Alphabet >();
HXDLIN( 300)				_g2 = (_g2 + 1);
HXLINE( 302)				item->targetY = ( (Float)((bullShit - this->curSelected)) );
HXLINE( 303)				bullShit = (bullShit + 1);
HXLINE( 305)				item->set_alpha(((Float)0.6));
HXLINE( 308)				if ((item->targetY == 0)) {
HXLINE( 310)					item->set_alpha(( (Float)(1) ));
            				}
            			}
            		}
HXLINE( 316)		::haxe::Log_obj::trace((HX_("curSelected: ",61,53,7b,26) + this->curSelected),::hx::SourceInfo(HX_("source/meta/state/menus/FreeplayState.hx",bc,06,c4,eb),316,HX_("meta.state.menus.FreeplayState",71,99,7d,7c),HX_("changeSelection",bc,98,b5,48)));
HXLINE( 318)		this->changeDiff(null());
HXLINE( 319)		this->changeSongPlaying();
            	}


HX_DEFINE_DYNAMIC_FUNC1(FreeplayState_obj,changeSelection,(void))

void FreeplayState_obj::changeSongPlaying(){
            	HX_STACKFRAME(&_hx_pos_6d07d424410e0488_323_changeSongPlaying)
HXLINE( 322)		 ::meta::state::menus::FreeplayState _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE( 324)		if (::hx::IsNull( this->songThread )) {
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::meta::state::menus::FreeplayState,_gthis) HXARGC(0)
            			void _hx_run(){
            				HX_STACKFRAME(&_hx_pos_6d07d424410e0488_328_changeSongPlaying)
HXLINE( 328)				while(true){
HXLINE( 330)					if (!(_gthis->threadActive)) {
HXLINE( 332)						::haxe::Log_obj::trace(HX_("Killing thread",86,eb,4c,06),::hx::SourceInfo(HX_("source/meta/state/menus/FreeplayState.hx",bc,06,c4,eb),332,HX_("meta.state.menus.FreeplayState",71,99,7d,7c),HX_("changeSongPlaying",89,04,7c,d1)));
HXLINE( 333)						return;
            					}
HXLINE( 336)					 ::Dynamic index = ::sys::thread::_Thread::Thread_Impl__obj::readMessage(false);
HXLINE( 337)					if (::hx::IsNotNull( index )) {
HXLINE( 339)						bool h;
HXDLIN( 339)						if (::hx::IsEq( index,_gthis->curSelected )) {
HXLINE( 339)							h = ::hx::IsNotEq( index,_gthis->curSongPlaying );
            						}
            						else {
HXLINE( 339)							h = false;
            						}
HXDLIN( 339)						if (h) {
HXLINE( 341)							::haxe::Log_obj::trace((HX_("Loading index ",12,ba,89,96) + index),::hx::SourceInfo(HX_("source/meta/state/menus/FreeplayState.hx",bc,06,c4,eb),341,HX_("meta.state.menus.FreeplayState",71,99,7d,7c),HX_("changeSongPlaying",89,04,7c,d1)));
HXLINE( 343)							::String song = _gthis->songs->__get(_gthis->curSelected).StaticCast<  ::meta::state::menus::SongMetadata >()->songName;
HXDLIN( 343)							::String instPath = (((HX_("songs/",71,e7,88,2d) + song.toLowerCase()) + HX_("/Inst.",f9,6e,13,1c)) + HX_("ogg",4f,94,54,00));
HXDLIN( 343)							if (!(::sys::FileSystem_obj::exists(::Paths_obj::getPath(instPath,HX_("MUSIC",85,08,49,8e),null())))) {
HXLINE( 343)								instPath = (((HX_("songs/",71,e7,88,2d) + ::meta::CoolUtil_obj::swapSpaceDash(song.toLowerCase())) + HX_("/Inst.",f9,6e,13,1c)) + HX_("ogg",4f,94,54,00));
            							}
HXDLIN( 343)							 ::openfl::media::Sound inst = ::openfl::media::Sound_obj::fromFile((HX_("./",41,28,00,00) + ::Paths_obj::getPath(instPath,HX_("MUSIC",85,08,49,8e),null())));
HXLINE( 345)							bool h;
HXDLIN( 345)							if (::hx::IsEq( index,_gthis->curSelected )) {
HXLINE( 345)								h = _gthis->threadActive;
            							}
            							else {
HXLINE( 345)								h = false;
            							}
HXDLIN( 345)							if (h) {
HXLINE( 347)								::flixel::FlxG_obj::sound->playMusic(inst,null(),null(),null());
HXLINE( 349)								if (::hx::IsNotNull( ::flixel::FlxG_obj::sound->music->fadeTween )) {
HXLINE( 350)									::flixel::FlxG_obj::sound->music->fadeTween->cancel();
            								}
HXLINE( 352)								::flixel::FlxG_obj::sound->music->set_volume(((Float)0.0));
HXLINE( 353)								{
HXLINE( 353)									 ::flixel::_hx_system::FlxSound _this = ::flixel::FlxG_obj::sound->music;
HXDLIN( 353)									 ::Dynamic onComplete = null();
HXDLIN( 353)									if (::hx::IsNull( _this->_channel )) {
HXLINE( 353)										_this->play(null(),null(),null());
            									}
HXDLIN( 353)									if (::hx::IsNotNull( _this->fadeTween )) {
HXLINE( 353)										_this->fadeTween->cancel();
            									}
HXDLIN( 353)									_this->fadeTween = ::flixel::tweens::FlxTween_obj::num(((Float)0.0),((Float)1.0),((Float)1.0), ::Dynamic(::hx::Anon_obj::Create(1)
            										->setFixed(0,HX_("onComplete",f8,d4,7e,5d),onComplete)),_this->volumeTween_dyn());
            								}
HXLINE( 355)								_gthis->curSongPlaying = _gthis->curSelected;
            							}
            							else {
HXLINE( 358)								::haxe::Log_obj::trace((HX_("Nevermind, skipping ",5d,fb,31,6b) + index),::hx::SourceInfo(HX_("source/meta/state/menus/FreeplayState.hx",bc,06,c4,eb),358,HX_("meta.state.menus.FreeplayState",71,99,7d,7c),HX_("changeSongPlaying",89,04,7c,d1)));
            							}
            						}
            						else {
HXLINE( 361)							::haxe::Log_obj::trace((HX_("Skipping ",6f,0e,3d,e5) + index),::hx::SourceInfo(HX_("source/meta/state/menus/FreeplayState.hx",bc,06,c4,eb),361,HX_("meta.state.menus.FreeplayState",71,99,7d,7c),HX_("changeSongPlaying",89,04,7c,d1)));
            						}
            					}
            				}
            			}
            			HX_END_LOCAL_FUNC0((void))

HXLINE( 326)			 ::Dynamic this1 =  ::__hxcpp_thread_create( ::Dynamic(new _hx_Closure_0(_gthis)));
HXDLIN( 326)			this->songThread = this1;
            		}
HXLINE( 367)		 ::__hxcpp_thread_send(this->songThread,this->curSelected);
            	}


HX_DEFINE_DYNAMIC_FUNC0(FreeplayState_obj,changeSongPlaying,(void))


::hx::ObjectPtr< FreeplayState_obj > FreeplayState_obj::__new( ::flixel::addons::transition::TransitionData TransIn, ::flixel::addons::transition::TransitionData TransOut) {
	::hx::ObjectPtr< FreeplayState_obj > __this = new FreeplayState_obj();
	__this->__construct(TransIn,TransOut);
	return __this;
}

::hx::ObjectPtr< FreeplayState_obj > FreeplayState_obj::__alloc(::hx::Ctx *_hx_ctx, ::flixel::addons::transition::TransitionData TransIn, ::flixel::addons::transition::TransitionData TransOut) {
	FreeplayState_obj *__this = (FreeplayState_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(FreeplayState_obj), true, "meta.state.menus.FreeplayState"));
	*(void **)__this = FreeplayState_obj::_hx_vtable;
	__this->__construct(TransIn,TransOut);
	return __this;
}

FreeplayState_obj::FreeplayState_obj()
{
}

void FreeplayState_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(FreeplayState);
	HX_MARK_MEMBER_NAME(songs,"songs");
	HX_MARK_MEMBER_NAME(selector,"selector");
	HX_MARK_MEMBER_NAME(curSelected,"curSelected");
	HX_MARK_MEMBER_NAME(curSongPlaying,"curSongPlaying");
	HX_MARK_MEMBER_NAME(curDifficulty,"curDifficulty");
	HX_MARK_MEMBER_NAME(scoreText,"scoreText");
	HX_MARK_MEMBER_NAME(diffText,"diffText");
	HX_MARK_MEMBER_NAME(lerpScore,"lerpScore");
	HX_MARK_MEMBER_NAME(intendedScore,"intendedScore");
	HX_MARK_MEMBER_NAME(songThread,"songThread");
	HX_MARK_MEMBER_NAME(threadActive,"threadActive");
	HX_MARK_MEMBER_NAME(grpSongs,"grpSongs");
	HX_MARK_MEMBER_NAME(curPlaying,"curPlaying");
	HX_MARK_MEMBER_NAME(iconArray,"iconArray");
	HX_MARK_MEMBER_NAME(mainColor,"mainColor");
	HX_MARK_MEMBER_NAME(bg,"bg");
	HX_MARK_MEMBER_NAME(scoreBG,"scoreBG");
	HX_MARK_MEMBER_NAME(existingSongs,"existingSongs");
	HX_MARK_MEMBER_NAME(existingDifficulties,"existingDifficulties");
	HX_MARK_MEMBER_NAME(lastDifficulty,"lastDifficulty");
	HX_MARK_MEMBER_NAME(playingSongs,"playingSongs");
	 ::flixel::addons::ui::FlxUIState_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void FreeplayState_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(songs,"songs");
	HX_VISIT_MEMBER_NAME(selector,"selector");
	HX_VISIT_MEMBER_NAME(curSelected,"curSelected");
	HX_VISIT_MEMBER_NAME(curSongPlaying,"curSongPlaying");
	HX_VISIT_MEMBER_NAME(curDifficulty,"curDifficulty");
	HX_VISIT_MEMBER_NAME(scoreText,"scoreText");
	HX_VISIT_MEMBER_NAME(diffText,"diffText");
	HX_VISIT_MEMBER_NAME(lerpScore,"lerpScore");
	HX_VISIT_MEMBER_NAME(intendedScore,"intendedScore");
	HX_VISIT_MEMBER_NAME(songThread,"songThread");
	HX_VISIT_MEMBER_NAME(threadActive,"threadActive");
	HX_VISIT_MEMBER_NAME(grpSongs,"grpSongs");
	HX_VISIT_MEMBER_NAME(curPlaying,"curPlaying");
	HX_VISIT_MEMBER_NAME(iconArray,"iconArray");
	HX_VISIT_MEMBER_NAME(mainColor,"mainColor");
	HX_VISIT_MEMBER_NAME(bg,"bg");
	HX_VISIT_MEMBER_NAME(scoreBG,"scoreBG");
	HX_VISIT_MEMBER_NAME(existingSongs,"existingSongs");
	HX_VISIT_MEMBER_NAME(existingDifficulties,"existingDifficulties");
	HX_VISIT_MEMBER_NAME(lastDifficulty,"lastDifficulty");
	HX_VISIT_MEMBER_NAME(playingSongs,"playingSongs");
	 ::flixel::addons::ui::FlxUIState_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val FreeplayState_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"bg") ) { return ::hx::Val( bg ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"songs") ) { return ::hx::Val( songs ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"create") ) { return ::hx::Val( create_dyn() ); }
		if (HX_FIELD_EQ(inName,"update") ) { return ::hx::Val( update_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"scoreBG") ) { return ::hx::Val( scoreBG ); }
		if (HX_FIELD_EQ(inName,"addSong") ) { return ::hx::Val( addSong_dyn() ); }
		if (HX_FIELD_EQ(inName,"addWeek") ) { return ::hx::Val( addWeek_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"selector") ) { return ::hx::Val( selector ); }
		if (HX_FIELD_EQ(inName,"diffText") ) { return ::hx::Val( diffText ); }
		if (HX_FIELD_EQ(inName,"grpSongs") ) { return ::hx::Val( grpSongs ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"scoreText") ) { return ::hx::Val( scoreText ); }
		if (HX_FIELD_EQ(inName,"lerpScore") ) { return ::hx::Val( lerpScore ); }
		if (HX_FIELD_EQ(inName,"iconArray") ) { return ::hx::Val( iconArray ); }
		if (HX_FIELD_EQ(inName,"mainColor") ) { return ::hx::Val( mainColor ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"songThread") ) { return ::hx::Val( songThread ); }
		if (HX_FIELD_EQ(inName,"curPlaying") ) { return ::hx::Val( curPlaying ); }
		if (HX_FIELD_EQ(inName,"changeDiff") ) { return ::hx::Val( changeDiff_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"curSelected") ) { return ::hx::Val( curSelected ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"threadActive") ) { return ::hx::Val( threadActive ); }
		if (HX_FIELD_EQ(inName,"playingSongs") ) { return ::hx::Val( playingSongs ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"curDifficulty") ) { return ::hx::Val( curDifficulty ); }
		if (HX_FIELD_EQ(inName,"intendedScore") ) { return ::hx::Val( intendedScore ); }
		if (HX_FIELD_EQ(inName,"existingSongs") ) { return ::hx::Val( existingSongs ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"curSongPlaying") ) { return ::hx::Val( curSongPlaying ); }
		if (HX_FIELD_EQ(inName,"lastDifficulty") ) { return ::hx::Val( lastDifficulty ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"changeSelection") ) { return ::hx::Val( changeSelection_dyn() ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"changeSongPlaying") ) { return ::hx::Val( changeSongPlaying_dyn() ); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"existingDifficulties") ) { return ::hx::Val( existingDifficulties ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val FreeplayState_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"bg") ) { bg=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"songs") ) { songs=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"scoreBG") ) { scoreBG=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"selector") ) { selector=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		if (HX_FIELD_EQ(inName,"diffText") ) { diffText=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		if (HX_FIELD_EQ(inName,"grpSongs") ) { grpSongs=inValue.Cast<  ::flixel::group::FlxTypedGroup >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"scoreText") ) { scoreText=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		if (HX_FIELD_EQ(inName,"lerpScore") ) { lerpScore=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"iconArray") ) { iconArray=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		if (HX_FIELD_EQ(inName,"mainColor") ) { mainColor=inValue.Cast< int >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"songThread") ) { songThread=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"curPlaying") ) { curPlaying=inValue.Cast< bool >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"curSelected") ) { curSelected=inValue.Cast< int >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"threadActive") ) { threadActive=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"playingSongs") ) { playingSongs=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"curDifficulty") ) { curDifficulty=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"intendedScore") ) { intendedScore=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"existingSongs") ) { existingSongs=inValue.Cast< ::Array< ::String > >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"curSongPlaying") ) { curSongPlaying=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"lastDifficulty") ) { lastDifficulty=inValue.Cast< ::String >(); return inValue; }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"existingDifficulties") ) { existingDifficulties=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void FreeplayState_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("songs",fe,36,c7,80));
	outFields->push(HX_("selector",1f,33,6d,b1));
	outFields->push(HX_("curSelected",fb,eb,ab,32));
	outFields->push(HX_("curSongPlaying",79,6a,16,98));
	outFields->push(HX_("curDifficulty",db,b7,38,a7));
	outFields->push(HX_("scoreText",1f,7d,bd,dc));
	outFields->push(HX_("diffText",52,3b,1b,21));
	outFields->push(HX_("lerpScore",5b,81,4d,e7));
	outFields->push(HX_("intendedScore",a7,fd,7c,89));
	outFields->push(HX_("songThread",7f,20,3e,ea));
	outFields->push(HX_("threadActive",30,64,db,34));
	outFields->push(HX_("grpSongs",d9,dc,c7,63));
	outFields->push(HX_("curPlaying",ce,61,01,95));
	outFields->push(HX_("iconArray",60,3f,53,5f));
	outFields->push(HX_("mainColor",6a,3a,00,64));
	outFields->push(HX_("bg",c5,55,00,00));
	outFields->push(HX_("scoreBG",97,a5,9a,78));
	outFields->push(HX_("existingSongs",73,f8,5e,bf));
	outFields->push(HX_("existingDifficulties",84,4e,bf,00));
	outFields->push(HX_("lastDifficulty",31,e4,14,bb));
	outFields->push(HX_("playingSongs",b0,e8,87,48));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo FreeplayState_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(FreeplayState_obj,songs),HX_("songs",fe,36,c7,80)},
	{::hx::fsObject /*  ::flixel::text::FlxText */ ,(int)offsetof(FreeplayState_obj,selector),HX_("selector",1f,33,6d,b1)},
	{::hx::fsInt,(int)offsetof(FreeplayState_obj,curSelected),HX_("curSelected",fb,eb,ab,32)},
	{::hx::fsInt,(int)offsetof(FreeplayState_obj,curSongPlaying),HX_("curSongPlaying",79,6a,16,98)},
	{::hx::fsInt,(int)offsetof(FreeplayState_obj,curDifficulty),HX_("curDifficulty",db,b7,38,a7)},
	{::hx::fsObject /*  ::flixel::text::FlxText */ ,(int)offsetof(FreeplayState_obj,scoreText),HX_("scoreText",1f,7d,bd,dc)},
	{::hx::fsObject /*  ::flixel::text::FlxText */ ,(int)offsetof(FreeplayState_obj,diffText),HX_("diffText",52,3b,1b,21)},
	{::hx::fsInt,(int)offsetof(FreeplayState_obj,lerpScore),HX_("lerpScore",5b,81,4d,e7)},
	{::hx::fsInt,(int)offsetof(FreeplayState_obj,intendedScore),HX_("intendedScore",a7,fd,7c,89)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(FreeplayState_obj,songThread),HX_("songThread",7f,20,3e,ea)},
	{::hx::fsBool,(int)offsetof(FreeplayState_obj,threadActive),HX_("threadActive",30,64,db,34)},
	{::hx::fsObject /*  ::flixel::group::FlxTypedGroup */ ,(int)offsetof(FreeplayState_obj,grpSongs),HX_("grpSongs",d9,dc,c7,63)},
	{::hx::fsBool,(int)offsetof(FreeplayState_obj,curPlaying),HX_("curPlaying",ce,61,01,95)},
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(FreeplayState_obj,iconArray),HX_("iconArray",60,3f,53,5f)},
	{::hx::fsInt,(int)offsetof(FreeplayState_obj,mainColor),HX_("mainColor",6a,3a,00,64)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(FreeplayState_obj,bg),HX_("bg",c5,55,00,00)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(FreeplayState_obj,scoreBG),HX_("scoreBG",97,a5,9a,78)},
	{::hx::fsObject /* ::Array< ::String > */ ,(int)offsetof(FreeplayState_obj,existingSongs),HX_("existingSongs",73,f8,5e,bf)},
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(FreeplayState_obj,existingDifficulties),HX_("existingDifficulties",84,4e,bf,00)},
	{::hx::fsString,(int)offsetof(FreeplayState_obj,lastDifficulty),HX_("lastDifficulty",31,e4,14,bb)},
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(FreeplayState_obj,playingSongs),HX_("playingSongs",b0,e8,87,48)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *FreeplayState_obj_sStaticStorageInfo = 0;
#endif

static ::String FreeplayState_obj_sMemberFields[] = {
	HX_("songs",fe,36,c7,80),
	HX_("selector",1f,33,6d,b1),
	HX_("curSelected",fb,eb,ab,32),
	HX_("curSongPlaying",79,6a,16,98),
	HX_("curDifficulty",db,b7,38,a7),
	HX_("scoreText",1f,7d,bd,dc),
	HX_("diffText",52,3b,1b,21),
	HX_("lerpScore",5b,81,4d,e7),
	HX_("intendedScore",a7,fd,7c,89),
	HX_("songThread",7f,20,3e,ea),
	HX_("threadActive",30,64,db,34),
	HX_("grpSongs",d9,dc,c7,63),
	HX_("curPlaying",ce,61,01,95),
	HX_("iconArray",60,3f,53,5f),
	HX_("mainColor",6a,3a,00,64),
	HX_("bg",c5,55,00,00),
	HX_("scoreBG",97,a5,9a,78),
	HX_("existingSongs",73,f8,5e,bf),
	HX_("existingDifficulties",84,4e,bf,00),
	HX_("create",fc,66,0f,7c),
	HX_("addSong",96,66,95,88),
	HX_("addWeek",b5,a2,32,8b),
	HX_("update",09,86,05,87),
	HX_("lastDifficulty",31,e4,14,bb),
	HX_("changeDiff",95,91,b2,1c),
	HX_("changeSelection",bc,98,b5,48),
	HX_("changeSongPlaying",89,04,7c,d1),
	HX_("playingSongs",b0,e8,87,48),
	::String(null()) };

::hx::Class FreeplayState_obj::__mClass;

void FreeplayState_obj::__register()
{
	FreeplayState_obj _hx_dummy;
	FreeplayState_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("meta.state.menus.FreeplayState",71,99,7d,7c);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(FreeplayState_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< FreeplayState_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = FreeplayState_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = FreeplayState_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace meta
} // end namespace state
} // end namespace menus

// Generated by Haxe 4.1.5
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_ForeverAssets
#include <ForeverAssets.h>
#endif
#ifndef INCLUDED_Init
#include <Init.h>
#endif
#ifndef INCLUDED_Main
#include <Main.h>
#endif
#ifndef INCLUDED_Paths
#include <Paths.h>
#endif
#ifndef INCLUDED_SettingTypes
#include <SettingTypes.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
#ifndef INCLUDED_flixel_FlxSubState
#include <flixel/FlxSubState.h>
#endif
#ifndef INCLUDED_flixel_addons_transition_FlxTransitionableState
#include <flixel/addons/transition/FlxTransitionableState.h>
#endif
#ifndef INCLUDED_flixel_addons_transition_TransitionData
#include <flixel/addons/transition/TransitionData.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUIState
#include <flixel/addons/ui/FlxUIState.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IEventGetter
#include <flixel/addons/ui/interfaces/IEventGetter.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IFlxUIState
#include <flixel/addons/ui/interfaces/IFlxUIState.h>
#endif
#ifndef INCLUDED_flixel_effects_FlxFlicker
#include <flixel/effects/FlxFlicker.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroupIterator
#include <flixel/group/FlxTypedGroupIterator.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedSpriteGroup
#include <flixel/group/FlxTypedSpriteGroup.h>
#endif
#ifndef INCLUDED_flixel_input_actions_FlxAction
#include <flixel/input/actions/FlxAction.h>
#endif
#ifndef INCLUDED_flixel_input_actions_FlxActionDigital
#include <flixel/input/actions/FlxActionDigital.h>
#endif
#ifndef INCLUDED_flixel_input_actions_FlxActionSet
#include <flixel/input/actions/FlxActionSet.h>
#endif
#ifndef INCLUDED_flixel_math_FlxPoint
#include <flixel/math/FlxPoint.h>
#endif
#ifndef INCLUDED_flixel_system_FlxSound
#include <flixel/system/FlxSound.h>
#endif
#ifndef INCLUDED_flixel_system_FlxSoundGroup
#include <flixel/system/FlxSoundGroup.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_SoundFrontEnd
#include <flixel/system/frontEnds/SoundFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_text_FlxText
#include <flixel/text/FlxText.h>
#endif
#ifndef INCLUDED_flixel_text_FlxTextBorderStyle
#include <flixel/text/FlxTextBorderStyle.h>
#endif
#ifndef INCLUDED_flixel_util_FlxAxes
#include <flixel/util/FlxAxes.h>
#endif
#ifndef INCLUDED_flixel_util_FlxTimer
#include <flixel/util/FlxTimer.h>
#endif
#ifndef INCLUDED_flixel_util_FlxTimerManager
#include <flixel/util/FlxTimerManager.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif
#ifndef INCLUDED_gameObjects_userInterface_menu_Checkmark
#include <gameObjects/userInterface/menu/Checkmark.h>
#endif
#ifndef INCLUDED_gameObjects_userInterface_menu_Selector
#include <gameObjects/userInterface/menu/Selector.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_ObjectMap
#include <haxe/ds/ObjectMap.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_meta_Controls
#include <meta/Controls.h>
#endif
#ifndef INCLUDED_meta_MusicBeatState
#include <meta/MusicBeatState.h>
#endif
#ifndef INCLUDED_meta_MusicBeatSubState
#include <meta/MusicBeatSubState.h>
#endif
#ifndef INCLUDED_meta_data_PlayerSettings
#include <meta/data/PlayerSettings.h>
#endif
#ifndef INCLUDED_meta_data_dependency_Discord
#include <meta/data/dependency/Discord.h>
#endif
#ifndef INCLUDED_meta_data_dependency_FNFSprite
#include <meta/data/dependency/FNFSprite.h>
#endif
#ifndef INCLUDED_meta_data_dependency_FNFUIState
#include <meta/data/dependency/FNFUIState.h>
#endif
#ifndef INCLUDED_meta_data_font_Alphabet
#include <meta/data/font/Alphabet.h>
#endif
#ifndef INCLUDED_meta_state_menus_MainMenuState
#include <meta/state/menus/MainMenuState.h>
#endif
#ifndef INCLUDED_meta_state_menus_OptionsMenuState
#include <meta/state/menus/OptionsMenuState.h>
#endif
#ifndef INCLUDED_meta_subState_OptionsSubstate
#include <meta/subState/OptionsSubstate.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_text_TextField
#include <openfl/text/TextField.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_a26a319070f3acd8_22_new,"meta.state.menus.OptionsMenuState","new",0x19b9f786,"meta.state.menus.OptionsMenuState.new","meta/state/menus/OptionsMenuState.hx",22,0xc5f37c47)
HX_LOCAL_STACK_FRAME(_hx_pos_a26a319070f3acd8_35_create,"meta.state.menus.OptionsMenuState","create",0xa6d9bb96,"meta.state.menus.OptionsMenuState.create","meta/state/menus/OptionsMenuState.hx",35,0xc5f37c47)
HX_LOCAL_STACK_FRAME(_hx_pos_a26a319070f3acd8_141_loadSubgroup,"meta.state.menus.OptionsMenuState","loadSubgroup",0xa27a4a1f,"meta.state.menus.OptionsMenuState.loadSubgroup","meta/state/menus/OptionsMenuState.hx",141,0xc5f37c47)
HX_LOCAL_STACK_FRAME(_hx_pos_a26a319070f3acd8_182_selectOption,"meta.state.menus.OptionsMenuState","selectOption",0x7cdd8bab,"meta.state.menus.OptionsMenuState.selectOption","meta/state/menus/OptionsMenuState.hx",182,0xc5f37c47)
HX_LOCAL_STACK_FRAME(_hx_pos_a26a319070f3acd8_232_setAttachmentAlpha,"meta.state.menus.OptionsMenuState","setAttachmentAlpha",0x59333e93,"meta.state.menus.OptionsMenuState.setAttachmentAlpha","meta/state/menus/OptionsMenuState.hx",232,0xc5f37c47)
HX_LOCAL_STACK_FRAME(_hx_pos_a26a319070f3acd8_244_update,"meta.state.menus.OptionsMenuState","update",0xb1cfdaa3,"meta.state.menus.OptionsMenuState.update","meta/state/menus/OptionsMenuState.hx",244,0xc5f37c47)
HX_LOCAL_STACK_FRAME(_hx_pos_a26a319070f3acd8_278_update,"meta.state.menus.OptionsMenuState","update",0xb1cfdaa3,"meta.state.menus.OptionsMenuState.update","meta/state/menus/OptionsMenuState.hx",278,0xc5f37c47)
static const int _hx_array_data_8ac27c94_12[] = {
	(int)0,
};
HX_LOCAL_STACK_FRAME(_hx_pos_a26a319070f3acd8_310_regenInfoText,"meta.state.menus.OptionsMenuState","regenInfoText",0x8a6842be,"meta.state.menus.OptionsMenuState.regenInfoText","meta/state/menus/OptionsMenuState.hx",310,0xc5f37c47)
HX_LOCAL_STACK_FRAME(_hx_pos_a26a319070f3acd8_318_updateSelections,"meta.state.menus.OptionsMenuState","updateSelections",0xdfb1f32a,"meta.state.menus.OptionsMenuState.updateSelections","meta/state/menus/OptionsMenuState.hx",318,0xc5f37c47)
HX_LOCAL_STACK_FRAME(_hx_pos_a26a319070f3acd8_349_returnSubgroup,"meta.state.menus.OptionsMenuState","returnSubgroup",0xa179a929,"meta.state.menus.OptionsMenuState.returnSubgroup","meta/state/menus/OptionsMenuState.hx",349,0xc5f37c47)
HX_LOCAL_STACK_FRAME(_hx_pos_a26a319070f3acd8_375_returnExtrasMap,"meta.state.menus.OptionsMenuState","returnExtrasMap",0x5683dbcf,"meta.state.menus.OptionsMenuState.returnExtrasMap","meta/state/menus/OptionsMenuState.hx",375,0xc5f37c47)
HX_LOCAL_STACK_FRAME(_hx_pos_a26a319070f3acd8_409_getFromOption,"meta.state.menus.OptionsMenuState","getFromOption",0xe372075b,"meta.state.menus.OptionsMenuState.getFromOption","meta/state/menus/OptionsMenuState.hx",409,0xc5f37c47)
HX_LOCAL_STACK_FRAME(_hx_pos_a26a319070f3acd8_421_getFromOption,"meta.state.menus.OptionsMenuState","getFromOption",0xe372075b,"meta.state.menus.OptionsMenuState.getFromOption","meta/state/menus/OptionsMenuState.hx",421,0xc5f37c47)
HX_LOCAL_STACK_FRAME(_hx_pos_a26a319070f3acd8_454_updateCheckmark,"meta.state.menus.OptionsMenuState","updateCheckmark",0x48fef5b2,"meta.state.menus.OptionsMenuState.updateCheckmark","meta/state/menus/OptionsMenuState.hx",454,0xc5f37c47)
HX_LOCAL_STACK_FRAME(_hx_pos_a26a319070f3acd8_457_updateSelector,"meta.state.menus.OptionsMenuState","updateSelector",0x070ea4e2,"meta.state.menus.OptionsMenuState.updateSelector","meta/state/menus/OptionsMenuState.hx",457,0xc5f37c47)
HX_LOCAL_STACK_FRAME(_hx_pos_a26a319070f3acd8_544_callNewGroup,"meta.state.menus.OptionsMenuState","callNewGroup",0x62ac5d97,"meta.state.menus.OptionsMenuState.callNewGroup","meta/state/menus/OptionsMenuState.hx",544,0xc5f37c47)
HX_LOCAL_STACK_FRAME(_hx_pos_a26a319070f3acd8_551_callNewGroup,"meta.state.menus.OptionsMenuState","callNewGroup",0x62ac5d97,"meta.state.menus.OptionsMenuState.callNewGroup","meta/state/menus/OptionsMenuState.hx",551,0xc5f37c47)
HX_LOCAL_STACK_FRAME(_hx_pos_a26a319070f3acd8_557_openControlmenu,"meta.state.menus.OptionsMenuState","openControlmenu",0xd91b5ff8,"meta.state.menus.OptionsMenuState.openControlmenu","meta/state/menus/OptionsMenuState.hx",557,0xc5f37c47)
HX_LOCAL_STACK_FRAME(_hx_pos_a26a319070f3acd8_563_openControlmenu,"meta.state.menus.OptionsMenuState","openControlmenu",0xd91b5ff8,"meta.state.menus.OptionsMenuState.openControlmenu","meta/state/menus/OptionsMenuState.hx",563,0xc5f37c47)
HX_LOCAL_STACK_FRAME(_hx_pos_a26a319070f3acd8_571_exitMenu,"meta.state.menus.OptionsMenuState","exitMenu",0x39997ef7,"meta.state.menus.OptionsMenuState.exitMenu","meta/state/menus/OptionsMenuState.hx",571,0xc5f37c47)
HX_LOCAL_STACK_FRAME(_hx_pos_a26a319070f3acd8_578_exitMenu,"meta.state.menus.OptionsMenuState","exitMenu",0x39997ef7,"meta.state.menus.OptionsMenuState.exitMenu","meta/state/menus/OptionsMenuState.hx",578,0xc5f37c47)
namespace meta{
namespace state{
namespace menus{

void OptionsMenuState_obj::__construct( ::flixel::addons::transition::TransitionData TransIn, ::flixel::addons::transition::TransitionData TransOut){
            	HX_STACKFRAME(&_hx_pos_a26a319070f3acd8_22_new)
HXLINE( 240)		this->textValue = HX_("",00,00,00,00);
HXLINE(  32)		this->lockedMovement = false;
HXLINE(  28)		this->curSelection = 0;
HXLINE(  22)		super::__construct(TransIn,TransOut);
            	}

Dynamic OptionsMenuState_obj::__CreateEmpty() { return new OptionsMenuState_obj; }

void *OptionsMenuState_obj::_hx_vtable = 0;

Dynamic OptionsMenuState_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< OptionsMenuState_obj > _hx_result = new OptionsMenuState_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool OptionsMenuState_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x2f064378) {
		if (inClassId<=(int)0x0f8d4977) {
			if (inClassId<=(int)0x0225b2d9) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x0225b2d9;
			} else {
				return inClassId==(int)0x0f8d4977;
			}
		} else {
			return inClassId==(int)0x23a57bae || inClassId==(int)0x2f064378;
		}
	} else {
		if (inClassId<=(int)0x7c795c9f) {
			if (inClassId<=(int)0x62817b24) {
				return inClassId==(int)0x34f32d40 || inClassId==(int)0x62817b24;
			} else {
				return inClassId==(int)0x7c795c9f;
			}
		} else {
			return inClassId==(int)0x7ccf8994;
		}
	}
}

void OptionsMenuState_obj::create(){
            	HX_GC_STACKFRAME(&_hx_pos_a26a319070f3acd8_35_create)
HXLINE(  36)		this->super::create();
HXLINE(  49)		::meta::data::dependency::Discord_obj::changePresence(HX_("OPTIONS MENU",c1,95,81,f0),HX_("Main Menu",e6,3a,4e,c8),null(),null(),null());
HXLINE(  52)		 ::haxe::ds::StringMap _g =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXDLIN(  52)		_g->set(HX_("main",39,38,56,48),::cpp::VirtualArray_obj::__new(1)->init(0,::cpp::VirtualArray_obj::__new(4)->init(0,::cpp::VirtualArray_obj::__new(2)->init(0,HX_("preferences",b8,b6,f0,72))->init(1,this->callNewGroup_dyn()))->init(1,::cpp::VirtualArray_obj::__new(2)->init(0,HX_("appearance",e4,c5,9c,40))->init(1,this->callNewGroup_dyn()))->init(2,::cpp::VirtualArray_obj::__new(2)->init(0,HX_("controls",76,86,bc,37))->init(1,this->openControlmenu_dyn()))->init(3,::cpp::VirtualArray_obj::__new(2)->init(0,HX_("exit",1e,f7,1d,43))->init(1,this->exitMenu_dyn()))));
HXDLIN(  52)		_g->set(HX_("preferences",b8,b6,f0,72),::cpp::VirtualArray_obj::__new(1)->init(0,::cpp::VirtualArray_obj::__new(19)->init(0,::cpp::VirtualArray_obj::__new(2)->init(0,HX_("Game Settings",d1,a6,1c,c1))->init(1,null()))->init(1,::cpp::VirtualArray_obj::__new(2)->init(0,HX_("",00,00,00,00))->init(1,null()))->init(2,::cpp::VirtualArray_obj::__new(2)->init(0,HX_("Downscroll",0f,4a,85,46))->init(1,this->getFromOption_dyn()))->init(3,::cpp::VirtualArray_obj::__new(2)->init(0,HX_("Centered Notefield",dc,a5,a6,0e))->init(1,this->getFromOption_dyn()))->init(4,::cpp::VirtualArray_obj::__new(2)->init(0,HX_("Ghost Tapping",44,6c,9f,40))->init(1,this->getFromOption_dyn()))->init(5,::cpp::VirtualArray_obj::__new(2)->init(0,HX_("Display Accuracy",17,3c,f2,a7))->init(1,this->getFromOption_dyn()))->init(6,::cpp::VirtualArray_obj::__new(2)->init(0,HX_("Skip Text",ee,65,46,c7))->init(1,this->getFromOption_dyn()))->init(7,::cpp::VirtualArray_obj::__new(2)->init(0,HX_("",00,00,00,00))->init(1,null()))->init(8,::cpp::VirtualArray_obj::__new(2)->init(0,HX_("Meta Settings",9e,5d,88,ef))->init(1,null()))->init(9,::cpp::VirtualArray_obj::__new(2)->init(0,HX_("",00,00,00,00))->init(1,null()))->init(10,::cpp::VirtualArray_obj::__new(2)->init(0,HX_("Framerate Cap",bf,7f,6c,1f))->init(1,this->getFromOption_dyn()))->init(11,::cpp::VirtualArray_obj::__new(2)->init(0,HX_("FPS Counter",85,ef,54,c9))->init(1,this->getFromOption_dyn()))->init(12,::cpp::VirtualArray_obj::__new(2)->init(0,HX_("Memory Counter",dd,e2,42,58))->init(1,this->getFromOption_dyn()))->init(13,::cpp::VirtualArray_obj::__new(2)->init(0,HX_("Debug Info",9b,59,ce,ff))->init(1,this->getFromOption_dyn()))->init(14,::cpp::VirtualArray_obj::__new(2)->init(0,HX_("",00,00,00,00))->init(1,null()))->init(15,::cpp::VirtualArray_obj::__new(2)->init(0,HX_("Forever Settings",bc,b9,a8,d0))->init(1,null()))->init(16,::cpp::VirtualArray_obj::__new(2)->init(0,HX_("",00,00,00,00))->init(1,null()))->init(17,::cpp::VirtualArray_obj::__new(2)->init(0,HX_("Use Forever Chart Editor",c1,46,1b,e4))->init(1,this->getFromOption_dyn()))->init(18,::cpp::VirtualArray_obj::__new(2)->init(0,HX_("Custom Titlescreen",15,d0,ce,87))->init(1,this->getFromOption_dyn()))));
HXDLIN(  52)		_g->set(HX_("appearance",e4,c5,9c,40),::cpp::VirtualArray_obj::__new(1)->init(0,::cpp::VirtualArray_obj::__new(20)->init(0,::cpp::VirtualArray_obj::__new(2)->init(0,HX_("Common Settings",78,6e,05,5c))->init(1,null()))->init(1,::cpp::VirtualArray_obj::__new(2)->init(0,HX_("",00,00,00,00))->init(1,null()))->init(2,::cpp::VirtualArray_obj::__new(2)->init(0,HX_("Disable Antialiasing",6c,04,2e,d8))->init(1,this->getFromOption_dyn()))->init(3,::cpp::VirtualArray_obj::__new(2)->init(0,HX_("No Camera Note Movement",a1,da,3d,d1))->init(1,this->getFromOption_dyn()))->init(4,::cpp::VirtualArray_obj::__new(2)->init(0,HX_("Fixed Judgements",8a,ad,a6,9b))->init(1,this->getFromOption_dyn()))->init(5,::cpp::VirtualArray_obj::__new(2)->init(0,HX_("Simply Judgements",b8,b3,c4,d7))->init(1,this->getFromOption_dyn()))->init(6,::cpp::VirtualArray_obj::__new(2)->init(0,HX_("",00,00,00,00))->init(1,null()))->init(7,::cpp::VirtualArray_obj::__new(2)->init(0,HX_("Accessibility Settings",f5,8c,a5,3e))->init(1,null()))->init(8,::cpp::VirtualArray_obj::__new(2)->init(0,HX_("",00,00,00,00))->init(1,null()))->init(9,::cpp::VirtualArray_obj::__new(2)->init(0,HX_("Filter",d8,93,c9,b9))->init(1,this->getFromOption_dyn()))->init(10,::cpp::VirtualArray_obj::__new(2)->init(0,HX_("Stage Darkness",ef,05,99,24))->init(1,this->getFromOption_dyn()))->init(11,::cpp::VirtualArray_obj::__new(2)->init(0,HX_("Reduced Movements",82,8d,f2,cf))->init(1,this->getFromOption_dyn()))->init(12,::cpp::VirtualArray_obj::__new(2)->init(0,HX_("",00,00,00,00))->init(1,null()))->init(13,::cpp::VirtualArray_obj::__new(2)->init(0,HX_("User Interface",a4,1f,93,31))->init(1,null()))->init(14,::cpp::VirtualArray_obj::__new(2)->init(0,HX_("",00,00,00,00))->init(1,null()))->init(15,::cpp::VirtualArray_obj::__new(2)->init(0,HX_("UI Skin",e9,97,ae,a2))->init(1,this->getFromOption_dyn()))->init(16,::cpp::VirtualArray_obj::__new(2)->init(0,HX_("Note Skin",6b,8d,33,f0))->init(1,this->getFromOption_dyn()))->init(17,::cpp::VirtualArray_obj::__new(2)->init(0,HX_("Disable Note Splashes",2b,53,9d,28))->init(1,this->getFromOption_dyn()))->init(18,::cpp::VirtualArray_obj::__new(2)->init(0,HX_("Opaque Arrows",e9,a3,c6,17))->init(1,this->getFromOption_dyn()))->init(19,::cpp::VirtualArray_obj::__new(2)->init(0,HX_("Opaque Holds",d5,d1,24,ba))->init(1,this->getFromOption_dyn()))));
HXDLIN(  52)		this->categoryMap = _g;
HXLINE( 111)		{
HXLINE( 111)			 ::Dynamic category = this->categoryMap->keys();
HXDLIN( 111)			while(( (bool)(category->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXLINE( 111)				::String category1 = ( (::String)(category->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXLINE( 113)				this->categoryMap->get(category1)->__SetItem(1,this->returnSubgroup(category1));
HXLINE( 114)				this->categoryMap->get(category1)->__SetItem(2,this->returnExtrasMap(Dynamic( this->categoryMap->get(category1)->__GetItem(1)).StaticCast<  ::flixel::group::FlxTypedGroup >()));
            			}
            		}
HXLINE( 118)		 ::flixel::FlxSprite bg =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,-85,null(),null());
HXLINE( 119)		::String library = null();
HXDLIN( 119)		bg->loadGraphic(::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("menus/base/menuDesat",63,1b,f0,40)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),library),null(),null(),null(),null(),null());
HXLINE( 120)		bg->scrollFactor->set_x(( (Float)(0) ));
HXLINE( 121)		bg->scrollFactor->set_y(((Float)0.18));
HXLINE( 122)		bg->setGraphicSize(::Std_obj::_hx_int((bg->get_width() * ((Float)1.1))),null());
HXLINE( 123)		bg->updateHitbox();
HXLINE( 124)		bg->screenCenter(null());
HXLINE( 125)		bg->set_color(13526239);
HXLINE( 126)		bg->set_antialiasing(true);
HXLINE( 127)		this->add(bg);
HXLINE( 129)		this->infoText =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,5,(::flixel::FlxG_obj::height - 24),0,HX_("",00,00,00,00),32,null());
HXLINE( 130)		this->infoText->setFormat(HX_("VCR OSD Mono",be,44,e4,b8),20,-1,HX_("left",07,08,b0,47),::flixel::text::FlxTextBorderStyle_obj::OUTLINE_dyn(),-16777216,null());
HXLINE( 131)		this->infoText->textField->set_background(true);
HXLINE( 132)		this->infoText->textField->set_backgroundColor(-16777216);
HXLINE( 133)		this->add(this->infoText);
HXLINE( 135)		this->loadSubgroup(HX_("main",39,38,56,48));
            	}


void OptionsMenuState_obj::loadSubgroup(::String subgroupName){
            	HX_GC_STACKFRAME(&_hx_pos_a26a319070f3acd8_141_loadSubgroup)
HXLINE( 143)		this->lockedMovement = false;
HXLINE( 146)		if (::hx::IsNotNull( this->infoText )) {
HXLINE( 147)			this->remove(this->infoText,null());
            		}
HXLINE( 150)		if (::hx::IsNotNull( this->attachments )) {
HXLINE( 151)			this->remove(this->attachments,null());
            		}
HXLINE( 154)		if (::hx::IsNotNull( this->activeSubgroup )) {
HXLINE( 155)			this->remove(this->activeSubgroup,null());
            		}
HXLINE( 158)		this->activeSubgroup = Dynamic( this->categoryMap->get(subgroupName)->__GetItem(1)).StaticCast<  ::flixel::group::FlxTypedGroup >();
HXLINE( 159)		this->add(this->activeSubgroup);
HXLINE( 162)		this->curCategory = subgroupName;
HXLINE( 165)		this->currentAttachmentMap = Dynamic( this->categoryMap->get(subgroupName)->__GetItem(2)).StaticCast<  ::haxe::ds::ObjectMap >();
HXLINE( 166)		this->attachments =  ::flixel::group::FlxTypedGroup_obj::__alloc( HX_CTX ,null());
HXLINE( 167)		{
HXLINE( 167)			 ::Dynamic filter = null();
HXDLIN( 167)			 ::flixel::group::FlxTypedGroupIterator setting =  ::flixel::group::FlxTypedGroupIterator_obj::__alloc( HX_CTX ,this->activeSubgroup->members,filter);
HXDLIN( 167)			while(setting->hasNext()){
HXLINE( 167)				 ::meta::data::font::Alphabet setting1 = setting->next().StaticCast<  ::meta::data::font::Alphabet >();
HXLINE( 168)				if (::hx::IsNotNull( this->currentAttachmentMap->get(setting1) )) {
HXLINE( 169)					 ::flixel::group::FlxTypedGroup _hx_tmp = this->attachments;
HXDLIN( 169)					_hx_tmp->add(this->currentAttachmentMap->get(setting1)).StaticCast<  ::flixel::FlxBasic >();
            				}
            			}
            		}
HXLINE( 170)		this->add(this->attachments);
HXLINE( 173)		this->add(this->infoText);
HXLINE( 174)		this->regenInfoText();
HXLINE( 177)		this->curSelection = 0;
HXLINE( 178)		this->selectOption(this->curSelection,null());
            	}


HX_DEFINE_DYNAMIC_FUNC1(OptionsMenuState_obj,loadSubgroup,(void))

void OptionsMenuState_obj::selectOption(int newSelection,::hx::Null< bool >  __o_playSound){
            		bool playSound = __o_playSound.Default(true);
            	HX_STACKFRAME(&_hx_pos_a26a319070f3acd8_182_selectOption)
HXLINE( 183)		bool _hx_tmp;
HXDLIN( 183)		if ((newSelection != this->curSelection)) {
HXLINE( 183)			_hx_tmp = playSound;
            		}
            		else {
HXLINE( 183)			_hx_tmp = false;
            		}
HXDLIN( 183)		if (_hx_tmp) {
HXLINE( 184)			 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp = ::flixel::FlxG_obj::sound;
HXDLIN( 184)			_hx_tmp->play(::Paths_obj::sound(HX_("scrollMenu",4c,d4,18,06),null()),null(),null(),null(),null(),null());
            		}
HXLINE( 187)		int directionIncrement;
HXDLIN( 187)		if ((newSelection < this->curSelection)) {
HXLINE( 187)			directionIncrement = -1;
            		}
            		else {
HXLINE( 187)			directionIncrement = 1;
            		}
HXLINE( 190)		this->curSelection = newSelection;
HXLINE( 193)		if ((this->curSelection < 0)) {
HXLINE( 194)			this->curSelection = (this->activeSubgroup->length - 1);
            		}
            		else {
HXLINE( 195)			if ((this->curSelection >= this->activeSubgroup->length)) {
HXLINE( 196)				this->curSelection = 0;
            			}
            		}
HXLINE( 199)		{
HXLINE( 199)			int _g = 0;
HXDLIN( 199)			int _g1 = this->activeSubgroup->length;
HXDLIN( 199)			while((_g < _g1)){
HXLINE( 199)				_g = (_g + 1);
HXDLIN( 199)				int i = (_g - 1);
HXLINE( 201)				Dynamic( this->activeSubgroup->members->__get(i)).StaticCast<  ::meta::data::font::Alphabet >()->set_alpha(((Float)0.6));
HXLINE( 202)				if (::hx::IsNotNull( this->currentAttachmentMap )) {
HXLINE( 203)					this->setAttachmentAlpha(( ( ::flixel::FlxSprite)(this->currentAttachmentMap->get(Dynamic( this->activeSubgroup->members->__get(i)).StaticCast<  ::meta::data::font::Alphabet >())) ),((Float)0.6));
            				}
HXLINE( 204)				Dynamic( this->activeSubgroup->members->__get(i)).StaticCast<  ::meta::data::font::Alphabet >()->targetY = (( (Float)((i - this->curSelection)) ) / ( (Float)(2) ));
HXLINE( 207)				if (::hx::IsNull( this->categoryMap->get(this->curCategory)->__GetItem(0)->__GetItem(i)->__GetItem(1) )) {
HXLINE( 208)					Dynamic( this->activeSubgroup->members->__get(i)).StaticCast<  ::meta::data::font::Alphabet >()->set_alpha(( (Float)(1) ));
HXLINE( 209)					Dynamic( this->activeSubgroup->members->__get(i)).StaticCast<  ::meta::data::font::Alphabet >()->xTo = ::Std_obj::_hx_int(((( (Float)(::flixel::FlxG_obj::width) ) / ( (Float)(2) )) - ((( (Float)(Dynamic( this->activeSubgroup->members->__get(i)).StaticCast<  ::meta::data::font::Alphabet >()->text.length) ) / ( (Float)(2) )) * ( (Float)(40) ))));
            				}
            			}
            		}
HXLINE( 213)		Dynamic( this->activeSubgroup->members->__get(this->curSelection)).StaticCast<  ::meta::data::font::Alphabet >()->set_alpha(( (Float)(1) ));
HXLINE( 214)		if (::hx::IsNotNull( this->currentAttachmentMap )) {
HXLINE( 215)			this->setAttachmentAlpha(( ( ::flixel::FlxSprite)(this->currentAttachmentMap->get(Dynamic( this->activeSubgroup->members->__get(this->curSelection)).StaticCast<  ::meta::data::font::Alphabet >())) ),( (Float)(1) ));
            		}
HXLINE( 218)		{
HXLINE( 218)			int _g2 = 0;
HXDLIN( 218)			int _g3 = ( (int)(this->categoryMap->get(this->curCategory)->__GetItem(0)->__Field(HX_("length",e6,94,07,9f),::hx::paccDynamic)) );
HXDLIN( 218)			while((_g2 < _g3)){
HXLINE( 218)				_g2 = (_g2 + 1);
HXDLIN( 218)				int i = (_g2 - 1);
HXLINE( 219)				::String _hx_tmp = ( (::String)(this->categoryMap->get(this->curCategory)->__GetItem(0)->__GetItem(i)->__GetItem(0)) );
HXDLIN( 219)				if ((_hx_tmp == Dynamic( this->activeSubgroup->members->__get(this->curSelection)).StaticCast<  ::meta::data::font::Alphabet >()->text)) {
HXLINE( 220)					this->curSelectedScript = this->categoryMap->get(this->curCategory)->__GetItem(0)->__GetItem(i)->__GetItem(1);
            				}
            			}
            		}
HXLINE( 224)		if (::hx::IsNull( this->curSelectedScript )) {
HXLINE( 225)			this->selectOption((this->curSelection + directionIncrement),false);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(OptionsMenuState_obj,selectOption,(void))

void OptionsMenuState_obj::setAttachmentAlpha( ::flixel::FlxSprite attachment,Float newAlpha){
            	HX_STACKFRAME(&_hx_pos_a26a319070f3acd8_232_setAttachmentAlpha)
HXDLIN( 232)		if (::hx::IsNotNull( attachment )) {
HXLINE( 233)			attachment->set_alpha(newAlpha);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(OptionsMenuState_obj,setAttachmentAlpha,(void))

void OptionsMenuState_obj::update(Float elapsed){
            	HX_GC_STACKFRAME(&_hx_pos_a26a319070f3acd8_244_update)
HXLINE( 243)		 ::meta::state::menus::OptionsMenuState _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE( 245)		this->super::update(elapsed);
HXLINE( 249)		if (!(this->lockedMovement)) {
HXLINE( 252)			if (::hx::IsNotNull( this->curSelectedScript )) {
HXLINE( 253)				this->curSelectedScript();
            			}
HXLINE( 255)			this->updateSelections();
            		}
HXLINE( 258)		if (::hx::IsNotNull( ::Init_obj::gameSettings->get(Dynamic( this->activeSubgroup->members->__get(this->curSelection)).StaticCast<  ::meta::data::font::Alphabet >()->text) )) {
HXLINE( 261)			 ::Dynamic currentSetting = ::Init_obj::gameSettings->get(Dynamic( this->activeSubgroup->members->__get(this->curSelection)).StaticCast<  ::meta::data::font::Alphabet >()->text);
HXLINE( 262)			::String textValue = ( (::String)(currentSetting->__GetItem(2)) );
HXLINE( 263)			if (::hx::IsNull( textValue )) {
HXLINE( 264)				textValue = HX_("",00,00,00,00);
            			}
HXLINE( 266)			if ((this->finalText != textValue)) {
            				HX_BEGIN_LOCAL_FUNC_S3(::hx::LocalFunc,_hx_Closure_0, ::meta::state::menus::OptionsMenuState,_gthis,::Array< int >,loopTimes,::Array< ::String >,textSplit) HXARGC(1)
            				void _hx_run( ::flixel::util::FlxTimer tmr){
            					HX_GC_STACKFRAME(&_hx_pos_a26a319070f3acd8_278_update)
HXLINE( 280)					{
HXLINE( 280)						 ::flixel::text::FlxText _g = _gthis->infoText;
HXDLIN( 280)						_g->set_text((_g->text + textSplit->__get(loopTimes->__get(0))));
            					}
HXLINE( 281)					_gthis->infoText->screenCenter(::flixel::util::FlxAxes_obj::X_dyn());
HXLINE( 283)					loopTimes[0]++;
            				}
            				HX_END_LOCAL_FUNC1((void))

HXLINE( 270)				this->regenInfoText();
HXLINE( 272)				::Array< ::String > textSplit = ::Array_obj< ::String >::__new(0);
HXLINE( 273)				this->finalText = textValue;
HXLINE( 274)				textSplit = this->finalText.split(HX_("",00,00,00,00));
HXLINE( 276)				::Array< int > loopTimes = ::Array_obj< int >::fromData( _hx_array_data_8ac27c94_12,1);
HXLINE( 277)				this->infoTimer =  ::flixel::util::FlxTimer_obj::__alloc( HX_CTX ,null())->start(((Float)0.025), ::Dynamic(new _hx_Closure_0(_gthis,loopTimes,textSplit)),textSplit->length);
            			}
            		}
HXLINE( 289)		{
HXLINE( 289)			 ::Dynamic setting = this->currentAttachmentMap->keys();
HXDLIN( 289)			while(( (bool)(setting->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXLINE( 289)				 ::meta::data::font::Alphabet setting1 = ( ( ::meta::data::font::Alphabet)(setting->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXLINE( 291)				bool _hx_tmp;
HXDLIN( 291)				if (::hx::IsNotNull( setting1 )) {
HXLINE( 291)					_hx_tmp = ::hx::IsNotNull( this->currentAttachmentMap->get(setting1) );
            				}
            				else {
HXLINE( 291)					_hx_tmp = false;
            				}
HXDLIN( 291)				if (_hx_tmp) {
HXLINE( 293)					 ::Dynamic thisAttachment = this->currentAttachmentMap->get(setting1);
HXLINE( 294)					thisAttachment->__SetField(HX_("x",78,00,00,00),(setting1->x - ( (Float)(100) )),::hx::paccDynamic);
HXLINE( 295)					thisAttachment->__SetField(HX_("y",79,00,00,00),(setting1->y - ( (Float)(50) )),::hx::paccDynamic);
            				}
            			}
            		}
HXLINE( 299)		if (::meta::data::PlayerSettings_obj::player1->controls->_back->check()) {
HXLINE( 301)			 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp = ::flixel::FlxG_obj::sound;
HXDLIN( 301)			_hx_tmp->play(::Paths_obj::sound(HX_("cancelMenu",39,a4,43,b7),null()),null(),null(),null(),null(),null());
HXLINE( 302)			if ((this->curCategory != HX_("main",39,38,56,48))) {
HXLINE( 303)				this->loadSubgroup(HX_("main",39,38,56,48));
            			}
            			else {
HXLINE( 305)				::Main_obj::switchState(::hx::ObjectPtr<OBJ_>(this), ::meta::state::menus::MainMenuState_obj::__alloc( HX_CTX ,null(),null()));
            			}
            		}
            	}


void OptionsMenuState_obj::regenInfoText(){
            	HX_STACKFRAME(&_hx_pos_a26a319070f3acd8_310_regenInfoText)
HXLINE( 311)		if (::hx::IsNotNull( this->infoTimer )) {
HXLINE( 312)			this->infoTimer->cancel();
            		}
HXLINE( 313)		if (::hx::IsNotNull( this->infoText )) {
HXLINE( 314)			this->infoText->set_text(HX_("",00,00,00,00));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(OptionsMenuState_obj,regenInfoText,(void))

void OptionsMenuState_obj::updateSelections(){
            	HX_STACKFRAME(&_hx_pos_a26a319070f3acd8_318_updateSelections)
HXLINE( 319)		bool up = ::meta::data::PlayerSettings_obj::player1->controls->_up->check();
HXLINE( 320)		bool down = ::meta::data::PlayerSettings_obj::player1->controls->_down->check();
HXLINE( 321)		bool up_p = ::meta::data::PlayerSettings_obj::player1->controls->_upP->check();
HXLINE( 322)		bool down_p = ::meta::data::PlayerSettings_obj::player1->controls->_downP->check();
HXLINE( 323)		::Array< bool > controlArray = ::Array_obj< bool >::__new(4)->init(0,up)->init(1,down)->init(2,up_p)->init(3,down_p);
HXLINE( 325)		if (controlArray->contains(true)) {
HXLINE( 327)			int _g = 0;
HXDLIN( 327)			int _g1 = controlArray->length;
HXDLIN( 327)			while((_g < _g1)){
HXLINE( 327)				_g = (_g + 1);
HXDLIN( 327)				int i = (_g - 1);
HXLINE( 330)				if ((controlArray->__get(i) == true)) {
HXLINE( 333)					if ((i > 1)) {
HXLINE( 337)						if ((i == 2)) {
HXLINE( 338)							this->selectOption((this->curSelection - 1),null());
            						}
            						else {
HXLINE( 339)							if ((i == 3)) {
HXLINE( 340)								this->selectOption((this->curSelection + 1),null());
            							}
            						}
            					}
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(OptionsMenuState_obj,updateSelections,(void))

 ::flixel::group::FlxTypedGroup OptionsMenuState_obj::returnSubgroup(::String groupName){
            	HX_GC_STACKFRAME(&_hx_pos_a26a319070f3acd8_349_returnSubgroup)
HXLINE( 351)		 ::flixel::group::FlxTypedGroup newGroup =  ::flixel::group::FlxTypedGroup_obj::__alloc( HX_CTX ,null());
HXLINE( 353)		{
HXLINE( 353)			int _g = 0;
HXDLIN( 353)			int _g1 = ( (int)(this->categoryMap->get(groupName)->__GetItem(0)->__Field(HX_("length",e6,94,07,9f),::hx::paccDynamic)) );
HXDLIN( 353)			while((_g < _g1)){
HXLINE( 353)				_g = (_g + 1);
HXDLIN( 353)				int i = (_g - 1);
HXLINE( 355)				bool _hx_tmp;
HXDLIN( 355)				::Dynamic this1 = ::Init_obj::gameSettings;
HXDLIN( 355)				if (::hx::IsNotNull( ( ( ::haxe::ds::StringMap)(this1) )->get(this->categoryMap->get(groupName)->__GetItem(0)->__GetItem(i)->__GetItem(0)) )) {
HXLINE( 356)					::Dynamic this1 = ::Init_obj::gameSettings;
HXDLIN( 356)					::String _hx_tmp1 = ( (::String)(( ( ::haxe::ds::StringMap)(this1) )->get(this->categoryMap->get(groupName)->__GetItem(0)->__GetItem(i)->__GetItem(0))->__GetItem(3)) );
HXLINE( 355)					_hx_tmp = (_hx_tmp1 != ::Init_obj::FORCED);
            				}
            				else {
HXLINE( 355)					_hx_tmp = true;
            				}
HXDLIN( 355)				if (_hx_tmp) {
HXLINE( 358)					 ::meta::data::font::Alphabet thisOption =  ::meta::data::font::Alphabet_obj::__alloc( HX_CTX ,( (Float)(0) ),( (Float)(0) ),( (::String)(this->categoryMap->get(groupName)->__GetItem(0)->__GetItem(i)->__GetItem(0)) ),true,false,null());
HXLINE( 359)					thisOption->screenCenter(null());
HXLINE( 360)					{
HXLINE( 360)						 ::meta::data::font::Alphabet _g = thisOption;
HXDLIN( 360)						Float _g1 = _g->y;
HXDLIN( 360)						_g->set_y((_g1 + (90 * (i - ::Math_obj::floor((( (Float)(this->categoryMap->get(groupName)->__GetItem(0)->__Field(HX_("length",e6,94,07,9f),::hx::paccDynamic)) ) / ( (Float)(2) )))))));
            					}
HXLINE( 361)					thisOption->targetY = ( (Float)(i) );
HXLINE( 362)					thisOption->disableX = true;
HXLINE( 364)					if ((groupName != HX_("main",39,38,56,48))) {
HXLINE( 365)						thisOption->isMenuItem = true;
            					}
HXLINE( 366)					thisOption->set_alpha(((Float)0.6));
HXLINE( 367)					newGroup->add(thisOption).StaticCast<  ::meta::data::font::Alphabet >();
            				}
            			}
            		}
HXLINE( 371)		return newGroup;
            	}


HX_DEFINE_DYNAMIC_FUNC1(OptionsMenuState_obj,returnSubgroup,return )

 ::haxe::ds::ObjectMap OptionsMenuState_obj::returnExtrasMap( ::flixel::group::FlxTypedGroup alphabetGroup){
            	HX_GC_STACKFRAME(&_hx_pos_a26a319070f3acd8_375_returnExtrasMap)
HXLINE( 376)		 ::haxe::ds::ObjectMap extrasMap =  ::haxe::ds::ObjectMap_obj::__alloc( HX_CTX );
HXLINE( 377)		{
HXLINE( 377)			 ::Dynamic filter = null();
HXDLIN( 377)			 ::flixel::group::FlxTypedGroupIterator letter =  ::flixel::group::FlxTypedGroupIterator_obj::__alloc( HX_CTX ,alphabetGroup->members,filter);
HXDLIN( 377)			while(letter->hasNext()){
HXLINE( 377)				 ::meta::data::font::Alphabet letter1 = letter->next().StaticCast<  ::meta::data::font::Alphabet >();
HXLINE( 379)				if (::hx::IsNotNull( ::Init_obj::gameSettings->get(letter1->text) )) {
HXLINE( 381)					switch((int)(Dynamic( ::Init_obj::gameSettings->get(letter1->text)->__GetItem(1)).StaticCast<  ::SettingTypes >()->_hx_getIndex())){
            						case (int)0: {
HXLINE( 385)							 ::gameObjects::userInterface::menu::Checkmark checkmark = ::ForeverAssets_obj::generateCheckmark(( (Float)(10) ),letter1->y,HX_("checkboxThingie",47,af,bb,5d),HX_("base",11,e8,10,41),HX_("default",c1,d8,c3,9b),HX_("UI",54,4a,00,00));
HXLINE( 386)							checkmark->playAnim((::Std_obj::string(::Init_obj::trueSettings->get(letter1->text)) + HX_(" finished",92,b3,3b,f3)),null(),null(),null());
HXLINE( 388)							extrasMap->set(letter1,checkmark);
            						}
            						break;
            						case (int)1: {
HXLINE( 391)							Float letter = letter1->y;
HXDLIN( 391)							::String letter2 = letter1->text;
HXDLIN( 391)							::Array< ::String > selector = ( (::Array< ::String >)(::Init_obj::gameSettings->get(letter1->text)->__GetItem(4)) );
HXLINE( 392)							bool selector1;
HXDLIN( 392)							if ((letter1->text == HX_("Framerate Cap",bf,7f,6c,1f))) {
HXLINE( 392)								selector1 = true;
            							}
            							else {
HXLINE( 392)								selector1 = false;
            							}
HXDLIN( 392)							bool selector2;
HXDLIN( 392)							if ((letter1->text == HX_("Stage Darkness",ef,05,99,24))) {
HXLINE( 392)								selector2 = true;
            							}
            							else {
HXLINE( 392)								selector2 = false;
            							}
HXLINE( 391)							 ::gameObjects::userInterface::menu::Selector selector3 =  ::gameObjects::userInterface::menu::Selector_obj::__alloc( HX_CTX ,10,letter,letter2,selector,selector1,selector2);
HXLINE( 394)							extrasMap->set(letter1,selector3);
            						}
            						break;
            					}
            				}
            			}
            		}
HXLINE( 402)		return extrasMap;
            	}


HX_DEFINE_DYNAMIC_FUNC1(OptionsMenuState_obj,returnExtrasMap,return )

void OptionsMenuState_obj::getFromOption(){
            	HX_STACKFRAME(&_hx_pos_a26a319070f3acd8_409_getFromOption)
HXLINE( 408)		 ::meta::state::menus::OptionsMenuState _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE( 410)		if (::hx::IsNotNull( ::Init_obj::gameSettings->get(Dynamic( this->activeSubgroup->members->__get(this->curSelection)).StaticCast<  ::meta::data::font::Alphabet >()->text) )) {
HXLINE( 412)			switch((int)(Dynamic( ::Init_obj::gameSettings->get(Dynamic( this->activeSubgroup->members->__get(this->curSelection)).StaticCast<  ::meta::data::font::Alphabet >()->text)->__GetItem(1)).StaticCast<  ::SettingTypes >()->_hx_getIndex())){
            				case (int)0: {
HXLINE( 416)					if (::meta::data::PlayerSettings_obj::player1->controls->_accept->check()) {
            						HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::meta::state::menus::OptionsMenuState,_gthis) HXARGC(1)
            						void _hx_run( ::flixel::effects::FlxFlicker flick){
            							HX_STACKFRAME(&_hx_pos_a26a319070f3acd8_421_getFromOption)
HXLINE( 423)							{
HXLINE( 423)								::Dynamic this1 = ::Init_obj::trueSettings;
HXDLIN( 423)								::String key = Dynamic( _gthis->activeSubgroup->members->__get(_gthis->curSelection)).StaticCast<  ::meta::data::font::Alphabet >()->text;
HXDLIN( 423)								( ( ::haxe::ds::StringMap)(this1) )->set(key,!(( (bool)(::Init_obj::trueSettings->get(Dynamic( _gthis->activeSubgroup->members->__get(_gthis->curSelection)).StaticCast<  ::meta::data::font::Alphabet >()->text)) )));
            							}
HXLINE( 425)							 ::meta::state::menus::OptionsMenuState _gthis1 = _gthis;
HXDLIN( 425)							 ::Dynamic _hx_tmp = _gthis->currentAttachmentMap->get(Dynamic( _gthis->activeSubgroup->members->__get(_gthis->curSelection)).StaticCast<  ::meta::data::font::Alphabet >());
HXDLIN( 425)							_gthis1->updateCheckmark(( ( ::meta::data::dependency::FNFSprite)(_hx_tmp) ),( (bool)(::Init_obj::trueSettings->get(Dynamic( _gthis->activeSubgroup->members->__get(_gthis->curSelection)).StaticCast<  ::meta::data::font::Alphabet >()->text)) ));
HXLINE( 429)							::Init_obj::saveSettings();
HXLINE( 430)							_gthis->lockedMovement = false;
            						}
            						HX_END_LOCAL_FUNC1((void))

HXLINE( 418)						 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp = ::flixel::FlxG_obj::sound;
HXDLIN( 418)						_hx_tmp->play(::Paths_obj::sound(HX_("confirmMenu",bf,8e,fe,3c),null()),null(),null(),null(),null(),null());
HXLINE( 419)						this->lockedMovement = true;
HXLINE( 420)						::flixel::effects::FlxFlicker_obj::flicker(Dynamic( this->activeSubgroup->members->__get(this->curSelection)).StaticCast<  ::meta::data::font::Alphabet >(),((Float)0.5),((Float)0.12),true,false, ::Dynamic(new _hx_Closure_0(_gthis)),null());
            					}
            				}
            				break;
            				case (int)1: {
HXLINE( 435)					 ::gameObjects::userInterface::menu::Selector selector = ( ( ::gameObjects::userInterface::menu::Selector)(this->currentAttachmentMap->get(Dynamic( this->activeSubgroup->members->__get(this->curSelection)).StaticCast<  ::meta::data::font::Alphabet >())) );
HXLINE( 437)					if (!(::meta::data::PlayerSettings_obj::player1->controls->_left->check())) {
HXLINE( 438)						selector->selectorPlay(HX_("left",07,08,b0,47),null());
            					}
HXLINE( 439)					if (!(::meta::data::PlayerSettings_obj::player1->controls->_right->check())) {
HXLINE( 440)						selector->selectorPlay(HX_("right",dc,0b,64,e9),null());
            					}
HXLINE( 442)					if (::meta::data::PlayerSettings_obj::player1->controls->_rightP->check()) {
HXLINE( 443)						this->updateSelector(selector,1);
            					}
            					else {
HXLINE( 444)						if (::meta::data::PlayerSettings_obj::player1->controls->_leftP->check()) {
HXLINE( 445)							this->updateSelector(selector,-1);
            						}
            					}
            				}
            				break;
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(OptionsMenuState_obj,getFromOption,(void))

void OptionsMenuState_obj::updateCheckmark( ::meta::data::dependency::FNFSprite checkmark,bool animation){
            	HX_STACKFRAME(&_hx_pos_a26a319070f3acd8_454_updateCheckmark)
HXDLIN( 454)		checkmark->playAnim(::Std_obj::string(animation),null(),null(),null());
            	}


HX_DEFINE_DYNAMIC_FUNC2(OptionsMenuState_obj,updateCheckmark,(void))

void OptionsMenuState_obj::updateSelector( ::gameObjects::userInterface::menu::Selector selector,int updateBy){
            	HX_STACKFRAME(&_hx_pos_a26a319070f3acd8_457_updateSelector)
HXLINE( 458)		bool fps = selector->fpsCap;
HXLINE( 459)		bool bgdark = selector->darkBG;
HXLINE( 460)		if (fps) {
HXLINE( 464)			 ::Dynamic originalFPS = ::Init_obj::trueSettings->get(Dynamic( this->activeSubgroup->members->__get(this->curSelection)).StaticCast<  ::meta::data::font::Alphabet >()->text);
HXLINE( 465)			int increase = (15 * updateBy);
HXLINE( 466)			if (::hx::IsLess( (originalFPS + increase),30 )) {
HXLINE( 467)				increase = 0;
            			}
HXLINE( 469)			if (::hx::IsGreater( (originalFPS + increase),360 )) {
HXLINE( 470)				increase = 0;
            			}
HXLINE( 472)			if ((updateBy == -1)) {
HXLINE( 473)				selector->selectorPlay(HX_("left",07,08,b0,47),HX_("press",83,53,88,c8));
            			}
            			else {
HXLINE( 475)				selector->selectorPlay(HX_("right",dc,0b,64,e9),HX_("press",83,53,88,c8));
            			}
HXLINE( 477)			 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp = ::flixel::FlxG_obj::sound;
HXDLIN( 477)			_hx_tmp->play(::Paths_obj::sound(HX_("scrollMenu",4c,d4,18,06),null()),null(),null(),null(),null(),null());
HXLINE( 479)			originalFPS = (originalFPS + increase);
HXLINE( 480)			selector->chosenOptionString = ::Std_obj::string(originalFPS);
HXLINE( 481)			selector->optionChosen->text = ::Std_obj::string(originalFPS);
HXLINE( 482)			::Init_obj::trueSettings->set(Dynamic( this->activeSubgroup->members->__get(this->curSelection)).StaticCast<  ::meta::data::font::Alphabet >()->text,originalFPS);
HXLINE( 483)			::Init_obj::saveSettings();
            		}
            		else {
HXLINE( 485)			if (bgdark) {
HXLINE( 488)				 ::Dynamic originaldark = ::Init_obj::trueSettings->get(Dynamic( this->activeSubgroup->members->__get(this->curSelection)).StaticCast<  ::meta::data::font::Alphabet >()->text);
HXLINE( 489)				int increase = (5 * updateBy);
HXLINE( 490)				if (::hx::IsLess( (originaldark + increase),0 )) {
HXLINE( 491)					increase = 0;
            				}
HXLINE( 493)				if (::hx::IsGreater( (originaldark + increase),100 )) {
HXLINE( 494)					increase = 0;
            				}
HXLINE( 496)				if ((updateBy == -1)) {
HXLINE( 497)					selector->selectorPlay(HX_("left",07,08,b0,47),HX_("press",83,53,88,c8));
            				}
            				else {
HXLINE( 499)					selector->selectorPlay(HX_("right",dc,0b,64,e9),HX_("press",83,53,88,c8));
            				}
HXLINE( 501)				 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp = ::flixel::FlxG_obj::sound;
HXDLIN( 501)				_hx_tmp->play(::Paths_obj::sound(HX_("scrollMenu",4c,d4,18,06),null()),null(),null(),null(),null(),null());
HXLINE( 503)				originaldark = (originaldark + increase);
HXLINE( 504)				selector->chosenOptionString = ::Std_obj::string(originaldark);
HXLINE( 505)				selector->optionChosen->text = ::Std_obj::string(originaldark);
HXLINE( 506)				::Init_obj::trueSettings->set(Dynamic( this->activeSubgroup->members->__get(this->curSelection)).StaticCast<  ::meta::data::font::Alphabet >()->text,originaldark);
HXLINE( 507)				::Init_obj::saveSettings();
            			}
            			else {
HXLINE( 509)				bool _hx_tmp;
HXDLIN( 509)				if (!(fps)) {
HXLINE( 509)					_hx_tmp = !(bgdark);
            				}
            				else {
HXLINE( 509)					_hx_tmp = false;
            				}
HXDLIN( 509)				if (_hx_tmp) {
HXLINE( 512)					int storedNumber = 0;
HXLINE( 513)					int newSelection = storedNumber;
HXLINE( 514)					if (::hx::IsNotNull( selector->options )) {
HXLINE( 515)						{
HXLINE( 515)							int _g = 0;
HXDLIN( 515)							int _g1 = selector->options->length;
HXDLIN( 515)							while((_g < _g1)){
HXLINE( 515)								_g = (_g + 1);
HXDLIN( 515)								int curOption = (_g - 1);
HXLINE( 517)								if ((selector->options->__get(curOption) == selector->optionChosen->text)) {
HXLINE( 518)									storedNumber = curOption;
            								}
            							}
            						}
HXLINE( 521)						newSelection = (storedNumber + updateBy);
HXLINE( 522)						if ((newSelection < 0)) {
HXLINE( 523)							newSelection = (selector->options->length - 1);
            						}
            						else {
HXLINE( 524)							if ((newSelection >= selector->options->length)) {
HXLINE( 525)								newSelection = 0;
            							}
            						}
            					}
HXLINE( 528)					if ((updateBy == -1)) {
HXLINE( 529)						selector->selectorPlay(HX_("left",07,08,b0,47),HX_("press",83,53,88,c8));
            					}
            					else {
HXLINE( 531)						selector->selectorPlay(HX_("right",dc,0b,64,e9),HX_("press",83,53,88,c8));
            					}
HXLINE( 533)					 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp = ::flixel::FlxG_obj::sound;
HXDLIN( 533)					_hx_tmp->play(::Paths_obj::sound(HX_("scrollMenu",4c,d4,18,06),null()),null(),null(),null(),null(),null());
HXLINE( 535)					selector->chosenOptionString = selector->options->__get(newSelection);
HXLINE( 536)					selector->optionChosen->text = selector->chosenOptionString;
HXLINE( 538)					::Init_obj::trueSettings->set(Dynamic( this->activeSubgroup->members->__get(this->curSelection)).StaticCast<  ::meta::data::font::Alphabet >()->text,selector->chosenOptionString);
HXLINE( 539)					::Init_obj::saveSettings();
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(OptionsMenuState_obj,updateSelector,(void))

void OptionsMenuState_obj::callNewGroup(){
            	HX_STACKFRAME(&_hx_pos_a26a319070f3acd8_544_callNewGroup)
HXLINE( 543)		 ::meta::state::menus::OptionsMenuState _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE( 545)		if (::meta::data::PlayerSettings_obj::player1->controls->_accept->check()) {
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::meta::state::menus::OptionsMenuState,_gthis) HXARGC(1)
            			void _hx_run( ::flixel::effects::FlxFlicker flick){
            				HX_STACKFRAME(&_hx_pos_a26a319070f3acd8_551_callNewGroup)
HXLINE( 551)				_gthis->loadSubgroup(Dynamic( _gthis->activeSubgroup->members->__get(_gthis->curSelection)).StaticCast<  ::meta::data::font::Alphabet >()->text);
            			}
            			HX_END_LOCAL_FUNC1((void))

HXLINE( 547)			 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp = ::flixel::FlxG_obj::sound;
HXDLIN( 547)			_hx_tmp->play(::Paths_obj::sound(HX_("confirmMenu",bf,8e,fe,3c),null()),null(),null(),null(),null(),null());
HXLINE( 548)			this->lockedMovement = true;
HXLINE( 549)			::flixel::effects::FlxFlicker_obj::flicker(Dynamic( this->activeSubgroup->members->__get(this->curSelection)).StaticCast<  ::meta::data::font::Alphabet >(),((Float)0.5),((Float)0.12),true,false, ::Dynamic(new _hx_Closure_0(_gthis)),null());
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(OptionsMenuState_obj,callNewGroup,(void))

void OptionsMenuState_obj::openControlmenu(){
            	HX_STACKFRAME(&_hx_pos_a26a319070f3acd8_557_openControlmenu)
HXLINE( 556)		 ::meta::state::menus::OptionsMenuState _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE( 558)		if (::meta::data::PlayerSettings_obj::player1->controls->_accept->check()) {
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::meta::state::menus::OptionsMenuState,_gthis) HXARGC(1)
            			void _hx_run( ::flixel::effects::FlxFlicker flick){
            				HX_GC_STACKFRAME(&_hx_pos_a26a319070f3acd8_563_openControlmenu)
HXLINE( 564)				 ::meta::state::menus::OptionsMenuState _gthis1 = _gthis;
HXDLIN( 564)				_gthis1->openSubState( ::meta::subState::OptionsSubstate_obj::__alloc( HX_CTX ));
HXLINE( 565)				_gthis->lockedMovement = false;
            			}
            			HX_END_LOCAL_FUNC1((void))

HXLINE( 560)			 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp = ::flixel::FlxG_obj::sound;
HXDLIN( 560)			_hx_tmp->play(::Paths_obj::sound(HX_("confirmMenu",bf,8e,fe,3c),null()),null(),null(),null(),null(),null());
HXLINE( 561)			this->lockedMovement = true;
HXLINE( 562)			::flixel::effects::FlxFlicker_obj::flicker(Dynamic( this->activeSubgroup->members->__get(this->curSelection)).StaticCast<  ::meta::data::font::Alphabet >(),((Float)0.5),((Float)0.12),true,false, ::Dynamic(new _hx_Closure_0(_gthis)),null());
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(OptionsMenuState_obj,openControlmenu,(void))

void OptionsMenuState_obj::exitMenu(){
            	HX_STACKFRAME(&_hx_pos_a26a319070f3acd8_571_exitMenu)
HXLINE( 570)		 ::meta::state::menus::OptionsMenuState _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE( 573)		if (::meta::data::PlayerSettings_obj::player1->controls->_accept->check()) {
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::meta::state::menus::OptionsMenuState,_gthis) HXARGC(1)
            			void _hx_run( ::flixel::effects::FlxFlicker flick){
            				HX_GC_STACKFRAME(&_hx_pos_a26a319070f3acd8_578_exitMenu)
HXLINE( 579)				 ::meta::state::menus::OptionsMenuState _gthis1 = _gthis;
HXDLIN( 579)				::Main_obj::switchState(_gthis1, ::meta::state::menus::MainMenuState_obj::__alloc( HX_CTX ,null(),null()));
HXLINE( 580)				_gthis->lockedMovement = false;
            			}
            			HX_END_LOCAL_FUNC1((void))

HXLINE( 575)			 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp = ::flixel::FlxG_obj::sound;
HXDLIN( 575)			_hx_tmp->play(::Paths_obj::sound(HX_("confirmMenu",bf,8e,fe,3c),null()),null(),null(),null(),null(),null());
HXLINE( 576)			this->lockedMovement = true;
HXLINE( 577)			::flixel::effects::FlxFlicker_obj::flicker(Dynamic( this->activeSubgroup->members->__get(this->curSelection)).StaticCast<  ::meta::data::font::Alphabet >(),((Float)0.5),((Float)0.12),true,false, ::Dynamic(new _hx_Closure_0(_gthis)),null());
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(OptionsMenuState_obj,exitMenu,(void))


::hx::ObjectPtr< OptionsMenuState_obj > OptionsMenuState_obj::__new( ::flixel::addons::transition::TransitionData TransIn, ::flixel::addons::transition::TransitionData TransOut) {
	::hx::ObjectPtr< OptionsMenuState_obj > __this = new OptionsMenuState_obj();
	__this->__construct(TransIn,TransOut);
	return __this;
}

::hx::ObjectPtr< OptionsMenuState_obj > OptionsMenuState_obj::__alloc(::hx::Ctx *_hx_ctx, ::flixel::addons::transition::TransitionData TransIn, ::flixel::addons::transition::TransitionData TransOut) {
	OptionsMenuState_obj *__this = (OptionsMenuState_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(OptionsMenuState_obj), true, "meta.state.menus.OptionsMenuState"));
	*(void **)__this = OptionsMenuState_obj::_hx_vtable;
	__this->__construct(TransIn,TransOut);
	return __this;
}

OptionsMenuState_obj::OptionsMenuState_obj()
{
}

void OptionsMenuState_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(OptionsMenuState);
	HX_MARK_MEMBER_NAME(categoryMap,"categoryMap");
	HX_MARK_MEMBER_NAME(activeSubgroup,"activeSubgroup");
	HX_MARK_MEMBER_NAME(attachments,"attachments");
	HX_MARK_MEMBER_NAME(curSelection,"curSelection");
	HX_MARK_MEMBER_NAME(curSelectedScript,"curSelectedScript");
	HX_MARK_MEMBER_NAME(curCategory,"curCategory");
	HX_MARK_MEMBER_NAME(lockedMovement,"lockedMovement");
	HX_MARK_MEMBER_NAME(currentAttachmentMap,"currentAttachmentMap");
	HX_MARK_MEMBER_NAME(infoText,"infoText");
	HX_MARK_MEMBER_NAME(finalText,"finalText");
	HX_MARK_MEMBER_NAME(textValue,"textValue");
	HX_MARK_MEMBER_NAME(infoTimer,"infoTimer");
	 ::flixel::addons::ui::FlxUIState_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void OptionsMenuState_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(categoryMap,"categoryMap");
	HX_VISIT_MEMBER_NAME(activeSubgroup,"activeSubgroup");
	HX_VISIT_MEMBER_NAME(attachments,"attachments");
	HX_VISIT_MEMBER_NAME(curSelection,"curSelection");
	HX_VISIT_MEMBER_NAME(curSelectedScript,"curSelectedScript");
	HX_VISIT_MEMBER_NAME(curCategory,"curCategory");
	HX_VISIT_MEMBER_NAME(lockedMovement,"lockedMovement");
	HX_VISIT_MEMBER_NAME(currentAttachmentMap,"currentAttachmentMap");
	HX_VISIT_MEMBER_NAME(infoText,"infoText");
	HX_VISIT_MEMBER_NAME(finalText,"finalText");
	HX_VISIT_MEMBER_NAME(textValue,"textValue");
	HX_VISIT_MEMBER_NAME(infoTimer,"infoTimer");
	 ::flixel::addons::ui::FlxUIState_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val OptionsMenuState_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"create") ) { return ::hx::Val( create_dyn() ); }
		if (HX_FIELD_EQ(inName,"update") ) { return ::hx::Val( update_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"infoText") ) { return ::hx::Val( infoText ); }
		if (HX_FIELD_EQ(inName,"exitMenu") ) { return ::hx::Val( exitMenu_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"finalText") ) { return ::hx::Val( finalText ); }
		if (HX_FIELD_EQ(inName,"textValue") ) { return ::hx::Val( textValue ); }
		if (HX_FIELD_EQ(inName,"infoTimer") ) { return ::hx::Val( infoTimer ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"categoryMap") ) { return ::hx::Val( categoryMap ); }
		if (HX_FIELD_EQ(inName,"attachments") ) { return ::hx::Val( attachments ); }
		if (HX_FIELD_EQ(inName,"curCategory") ) { return ::hx::Val( curCategory ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"curSelection") ) { return ::hx::Val( curSelection ); }
		if (HX_FIELD_EQ(inName,"loadSubgroup") ) { return ::hx::Val( loadSubgroup_dyn() ); }
		if (HX_FIELD_EQ(inName,"selectOption") ) { return ::hx::Val( selectOption_dyn() ); }
		if (HX_FIELD_EQ(inName,"callNewGroup") ) { return ::hx::Val( callNewGroup_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"regenInfoText") ) { return ::hx::Val( regenInfoText_dyn() ); }
		if (HX_FIELD_EQ(inName,"getFromOption") ) { return ::hx::Val( getFromOption_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"activeSubgroup") ) { return ::hx::Val( activeSubgroup ); }
		if (HX_FIELD_EQ(inName,"lockedMovement") ) { return ::hx::Val( lockedMovement ); }
		if (HX_FIELD_EQ(inName,"returnSubgroup") ) { return ::hx::Val( returnSubgroup_dyn() ); }
		if (HX_FIELD_EQ(inName,"updateSelector") ) { return ::hx::Val( updateSelector_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"returnExtrasMap") ) { return ::hx::Val( returnExtrasMap_dyn() ); }
		if (HX_FIELD_EQ(inName,"updateCheckmark") ) { return ::hx::Val( updateCheckmark_dyn() ); }
		if (HX_FIELD_EQ(inName,"openControlmenu") ) { return ::hx::Val( openControlmenu_dyn() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"updateSelections") ) { return ::hx::Val( updateSelections_dyn() ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"curSelectedScript") ) { return ::hx::Val( curSelectedScript ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"setAttachmentAlpha") ) { return ::hx::Val( setAttachmentAlpha_dyn() ); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"currentAttachmentMap") ) { return ::hx::Val( currentAttachmentMap ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val OptionsMenuState_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"infoText") ) { infoText=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"finalText") ) { finalText=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"textValue") ) { textValue=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"infoTimer") ) { infoTimer=inValue.Cast<  ::flixel::util::FlxTimer >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"categoryMap") ) { categoryMap=inValue.Cast<  ::haxe::ds::StringMap >(); return inValue; }
		if (HX_FIELD_EQ(inName,"attachments") ) { attachments=inValue.Cast<  ::flixel::group::FlxTypedGroup >(); return inValue; }
		if (HX_FIELD_EQ(inName,"curCategory") ) { curCategory=inValue.Cast< ::String >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"curSelection") ) { curSelection=inValue.Cast< int >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"activeSubgroup") ) { activeSubgroup=inValue.Cast<  ::flixel::group::FlxTypedGroup >(); return inValue; }
		if (HX_FIELD_EQ(inName,"lockedMovement") ) { lockedMovement=inValue.Cast< bool >(); return inValue; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"curSelectedScript") ) { curSelectedScript=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"currentAttachmentMap") ) { currentAttachmentMap=inValue.Cast<  ::haxe::ds::ObjectMap >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void OptionsMenuState_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("categoryMap",3e,0a,29,e9));
	outFields->push(HX_("activeSubgroup",a5,cd,3e,94));
	outFields->push(HX_("attachments",30,df,33,e7));
	outFields->push(HX_("curSelection",ac,a2,c5,23));
	outFields->push(HX_("curCategory",9e,ec,aa,2e));
	outFields->push(HX_("lockedMovement",59,60,2b,c7));
	outFields->push(HX_("currentAttachmentMap",80,4e,c4,84));
	outFields->push(HX_("infoText",3b,00,9e,3d));
	outFields->push(HX_("finalText",43,4b,d1,8f));
	outFields->push(HX_("textValue",84,0f,a6,ca));
	outFields->push(HX_("infoTimer",77,a8,3e,af));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo OptionsMenuState_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::haxe::ds::StringMap */ ,(int)offsetof(OptionsMenuState_obj,categoryMap),HX_("categoryMap",3e,0a,29,e9)},
	{::hx::fsObject /*  ::flixel::group::FlxTypedGroup */ ,(int)offsetof(OptionsMenuState_obj,activeSubgroup),HX_("activeSubgroup",a5,cd,3e,94)},
	{::hx::fsObject /*  ::flixel::group::FlxTypedGroup */ ,(int)offsetof(OptionsMenuState_obj,attachments),HX_("attachments",30,df,33,e7)},
	{::hx::fsInt,(int)offsetof(OptionsMenuState_obj,curSelection),HX_("curSelection",ac,a2,c5,23)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(OptionsMenuState_obj,curSelectedScript),HX_("curSelectedScript",66,5c,6e,7a)},
	{::hx::fsString,(int)offsetof(OptionsMenuState_obj,curCategory),HX_("curCategory",9e,ec,aa,2e)},
	{::hx::fsBool,(int)offsetof(OptionsMenuState_obj,lockedMovement),HX_("lockedMovement",59,60,2b,c7)},
	{::hx::fsObject /*  ::haxe::ds::ObjectMap */ ,(int)offsetof(OptionsMenuState_obj,currentAttachmentMap),HX_("currentAttachmentMap",80,4e,c4,84)},
	{::hx::fsObject /*  ::flixel::text::FlxText */ ,(int)offsetof(OptionsMenuState_obj,infoText),HX_("infoText",3b,00,9e,3d)},
	{::hx::fsString,(int)offsetof(OptionsMenuState_obj,finalText),HX_("finalText",43,4b,d1,8f)},
	{::hx::fsString,(int)offsetof(OptionsMenuState_obj,textValue),HX_("textValue",84,0f,a6,ca)},
	{::hx::fsObject /*  ::flixel::util::FlxTimer */ ,(int)offsetof(OptionsMenuState_obj,infoTimer),HX_("infoTimer",77,a8,3e,af)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *OptionsMenuState_obj_sStaticStorageInfo = 0;
#endif

static ::String OptionsMenuState_obj_sMemberFields[] = {
	HX_("categoryMap",3e,0a,29,e9),
	HX_("activeSubgroup",a5,cd,3e,94),
	HX_("attachments",30,df,33,e7),
	HX_("curSelection",ac,a2,c5,23),
	HX_("curSelectedScript",66,5c,6e,7a),
	HX_("curCategory",9e,ec,aa,2e),
	HX_("lockedMovement",59,60,2b,c7),
	HX_("create",fc,66,0f,7c),
	HX_("currentAttachmentMap",80,4e,c4,84),
	HX_("loadSubgroup",05,86,4f,35),
	HX_("selectOption",91,c7,b2,0f),
	HX_("setAttachmentAlpha",f9,6a,6f,08),
	HX_("infoText",3b,00,9e,3d),
	HX_("finalText",43,4b,d1,8f),
	HX_("textValue",84,0f,a6,ca),
	HX_("infoTimer",77,a8,3e,af),
	HX_("update",09,86,05,87),
	HX_("regenInfoText",18,70,27,72),
	HX_("updateSelections",10,1a,6a,13),
	HX_("returnSubgroup",8f,2a,02,81),
	HX_("returnExtrasMap",a9,93,6c,0e),
	HX_("getFromOption",b5,34,31,cb),
	HX_("updateCheckmark",8c,ad,e7,00),
	HX_("updateSelector",48,26,97,e6),
	HX_("callNewGroup",7d,99,81,f5),
	HX_("openControlmenu",d2,17,04,91),
	HX_("exitMenu",dd,4f,1d,08),
	::String(null()) };

::hx::Class OptionsMenuState_obj::__mClass;

void OptionsMenuState_obj::__register()
{
	OptionsMenuState_obj _hx_dummy;
	OptionsMenuState_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("meta.state.menus.OptionsMenuState",94,7c,c2,8a);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(OptionsMenuState_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< OptionsMenuState_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = OptionsMenuState_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = OptionsMenuState_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace meta
} // end namespace state
} // end namespace menus

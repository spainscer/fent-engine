// Generated by Haxe 4.1.5
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_ForeverTools
#include <ForeverTools.h>
#endif
#ifndef INCLUDED_Main
#include <Main.h>
#endif
#ifndef INCLUDED_Paths
#include <Paths.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxCamera
#include <flixel/FlxCamera.h>
#endif
#ifndef INCLUDED_flixel_FlxCameraFollowStyle
#include <flixel/FlxCameraFollowStyle.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
#ifndef INCLUDED_flixel_addons_transition_FlxTransitionableState
#include <flixel/addons/transition/FlxTransitionableState.h>
#endif
#ifndef INCLUDED_flixel_addons_transition_TransitionData
#include <flixel/addons/transition/TransitionData.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUIState
#include <flixel/addons/ui/FlxUIState.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IEventGetter
#include <flixel/addons/ui/interfaces/IEventGetter.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IFlxUIState
#include <flixel/addons/ui/interfaces/IFlxUIState.h>
#endif
#ifndef INCLUDED_flixel_animation_FlxAnimation
#include <flixel/animation/FlxAnimation.h>
#endif
#ifndef INCLUDED_flixel_animation_FlxAnimationController
#include <flixel/animation/FlxAnimationController.h>
#endif
#ifndef INCLUDED_flixel_animation_FlxBaseAnimation
#include <flixel/animation/FlxBaseAnimation.h>
#endif
#ifndef INCLUDED_flixel_effects_FlxFlicker
#include <flixel/effects/FlxFlicker.h>
#endif
#ifndef INCLUDED_flixel_graphics_frames_FlxAtlasFrames
#include <flixel/graphics/frames/FlxAtlasFrames.h>
#endif
#ifndef INCLUDED_flixel_graphics_frames_FlxFramesCollection
#include <flixel/graphics/frames/FlxFramesCollection.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_input_actions_FlxAction
#include <flixel/input/actions/FlxAction.h>
#endif
#ifndef INCLUDED_flixel_input_actions_FlxActionDigital
#include <flixel/input/actions/FlxActionDigital.h>
#endif
#ifndef INCLUDED_flixel_input_actions_FlxActionSet
#include <flixel/input/actions/FlxActionSet.h>
#endif
#ifndef INCLUDED_flixel_math_FlxPoint
#include <flixel/math/FlxPoint.h>
#endif
#ifndef INCLUDED_flixel_system_FlxSound
#include <flixel/system/FlxSound.h>
#endif
#ifndef INCLUDED_flixel_system_FlxSoundGroup
#include <flixel/system/FlxSoundGroup.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_SoundFrontEnd
#include <flixel/system/frontEnds/SoundFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_text_FlxText
#include <flixel/text/FlxText.h>
#endif
#ifndef INCLUDED_flixel_text_FlxTextBorderStyle
#include <flixel/text/FlxTextBorderStyle.h>
#endif
#ifndef INCLUDED_flixel_tweens_FlxEase
#include <flixel/tweens/FlxEase.h>
#endif
#ifndef INCLUDED_flixel_tweens_FlxTween
#include <flixel/tweens/FlxTween.h>
#endif
#ifndef INCLUDED_flixel_tweens_misc_VarTween
#include <flixel/tweens/misc/VarTween.h>
#endif
#ifndef INCLUDED_flixel_util_FlxAxes
#include <flixel/util/FlxAxes.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif
#ifndef INCLUDED_meta_Controls
#include <meta/Controls.h>
#endif
#ifndef INCLUDED_meta_MusicBeatState
#include <meta/MusicBeatState.h>
#endif
#ifndef INCLUDED_meta_data_PlayerSettings
#include <meta/data/PlayerSettings.h>
#endif
#ifndef INCLUDED_meta_data_dependency_Discord
#include <meta/data/dependency/Discord.h>
#endif
#ifndef INCLUDED_meta_data_dependency_FNFUIState
#include <meta/data/dependency/FNFUIState.h>
#endif
#ifndef INCLUDED_meta_state_menus_FreeplayState
#include <meta/state/menus/FreeplayState.h>
#endif
#ifndef INCLUDED_meta_state_menus_MainMenuState
#include <meta/state/menus/MainMenuState.h>
#endif
#ifndef INCLUDED_meta_state_menus_OptionsMenuState
#include <meta/state/menus/OptionsMenuState.h>
#endif
#ifndef INCLUDED_meta_state_menus_StoryMenuState
#include <meta/state/menus/StoryMenuState.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_sys_io_File
#include <sys/io/File.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_b53ce54b30042969_23_new,"meta.state.menus.MainMenuState","new",0x37d4220b,"meta.state.menus.MainMenuState.new","meta/state/menus/MainMenuState.hx",23,0xf0411208)
static const ::String _hx_array_data_e8e9c099_1[] = {
	HX_("story mode",6e,d7,a7,5e),HX_("freeplay",a0,90,86,22),HX_("options",5e,33,fe,df),
};
HX_LOCAL_STACK_FRAME(_hx_pos_b53ce54b30042969_37_create,"meta.state.menus.MainMenuState","create",0xefdf3231,"meta.state.menus.MainMenuState.create","meta/state/menus/MainMenuState.hx",37,0xf0411208)
HX_LOCAL_STACK_FRAME(_hx_pos_b53ce54b30042969_259_update,"meta.state.menus.MainMenuState","update",0xfad5513e,"meta.state.menus.MainMenuState.update","meta/state/menus/MainMenuState.hx",259,0xf0411208)
HX_LOCAL_STACK_FRAME(_hx_pos_b53ce54b30042969_146_update,"meta.state.menus.MainMenuState","update",0xfad5513e,"meta.state.menus.MainMenuState.update","meta/state/menus/MainMenuState.hx",146,0xf0411208)
HX_LOCAL_STACK_FRAME(_hx_pos_b53ce54b30042969_220_update,"meta.state.menus.MainMenuState","update",0xfad5513e,"meta.state.menus.MainMenuState.update","meta/state/menus/MainMenuState.hx",220,0xf0411208)
HX_LOCAL_STACK_FRAME(_hx_pos_b53ce54b30042969_226_update,"meta.state.menus.MainMenuState","update",0xfad5513e,"meta.state.menus.MainMenuState.update","meta/state/menus/MainMenuState.hx",226,0xf0411208)
HX_LOCAL_STACK_FRAME(_hx_pos_b53ce54b30042969_233_update,"meta.state.menus.MainMenuState","update",0xfad5513e,"meta.state.menus.MainMenuState.update","meta/state/menus/MainMenuState.hx",233,0xf0411208)
HX_LOCAL_STACK_FRAME(_hx_pos_b53ce54b30042969_269_updateSelection,"meta.state.menus.MainMenuState","updateSelection",0xd46f6f2e,"meta.state.menus.MainMenuState.updateSelection","meta/state/menus/MainMenuState.hx",269,0xf0411208)
HX_LOCAL_STACK_FRAME(_hx_pos_b53ce54b30042969_266_updateSelection,"meta.state.menus.MainMenuState","updateSelection",0xd46f6f2e,"meta.state.menus.MainMenuState.updateSelection","meta/state/menus/MainMenuState.hx",266,0xf0411208)
namespace meta{
namespace state{
namespace menus{

void MainMenuState_obj::__construct( ::flixel::addons::transition::TransitionData TransIn, ::flixel::addons::transition::TransitionData TransOut){
            	HX_STACKFRAME(&_hx_pos_b53ce54b30042969_23_new)
HXLINE( 263)		this->lastCurSelected = 0;
HXLINE( 143)		this->counterControl = ((Float)0);
HXLINE( 142)		this->selectedSomethin = false;
HXLINE(  33)		this->canSnap = ::Array_obj< Float >::__new(0);
HXLINE(  32)		this->optionShit = ::Array_obj< ::String >::fromData( _hx_array_data_e8e9c099_1,3);
HXLINE(  26)		this->curSelected = ((Float)0);
HXLINE(  23)		super::__construct(TransIn,TransOut);
            	}

Dynamic MainMenuState_obj::__CreateEmpty() { return new MainMenuState_obj; }

void *MainMenuState_obj::_hx_vtable = 0;

Dynamic MainMenuState_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< MainMenuState_obj > _hx_result = new MainMenuState_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool MainMenuState_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x25d7e651) {
		if (inClassId<=(int)0x0f8d4977) {
			if (inClassId<=(int)0x0225b2d9) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x0225b2d9;
			} else {
				return inClassId==(int)0x0f8d4977;
			}
		} else {
			return inClassId==(int)0x23a57bae || inClassId==(int)0x25d7e651;
		}
	} else {
		if (inClassId<=(int)0x7c795c9f) {
			if (inClassId<=(int)0x62817b24) {
				return inClassId==(int)0x2f064378 || inClassId==(int)0x62817b24;
			} else {
				return inClassId==(int)0x7c795c9f;
			}
		} else {
			return inClassId==(int)0x7ccf8994;
		}
	}
}

void MainMenuState_obj::create(){
            	HX_GC_STACKFRAME(&_hx_pos_b53ce54b30042969_37_create)
HXLINE(  38)		this->super::create();
HXLINE(  41)		this->transIn = ::flixel::addons::transition::FlxTransitionableState_obj::defaultTransIn;
HXLINE(  42)		this->transOut = ::flixel::addons::transition::FlxTransitionableState_obj::defaultTransOut;
HXLINE(  45)		::ForeverTools_obj::resetMenuMusic(null());
HXLINE(  48)		::meta::data::dependency::Discord_obj::changePresence(HX_("MENU SCREEN",cd,33,d5,06),HX_("Main Menu",e6,3a,4e,c8),null(),null(),null());
HXLINE(  52)		this->persistentUpdate = (this->persistentDraw = true);
HXLINE(  55)		this->bg =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,-85,null(),null());
HXLINE(  56)		 ::flixel::FlxSprite _hx_tmp = this->bg;
HXDLIN(  56)		::String library = null();
HXDLIN(  56)		_hx_tmp->loadGraphic(::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("menus/base/menuBG",c7,c2,57,e9)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),library),null(),null(),null(),null(),null());
HXLINE(  57)		this->bg->scrollFactor->set_x(( (Float)(0) ));
HXLINE(  58)		this->bg->scrollFactor->set_y(((Float)0.18));
HXLINE(  59)		 ::flixel::FlxSprite _hx_tmp1 = this->bg;
HXDLIN(  59)		_hx_tmp1->setGraphicSize(::Std_obj::_hx_int((this->bg->get_width() * ((Float)1.1))),null());
HXLINE(  60)		this->bg->updateHitbox();
HXLINE(  61)		this->bg->screenCenter(null());
HXLINE(  62)		this->bg->set_antialiasing(true);
HXLINE(  63)		this->add(this->bg);
HXLINE(  65)		 ::flixel::FlxSprite _hx_tmp2 =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,-85,null(),null());
HXDLIN(  65)		::String library1 = null();
HXDLIN(  65)		this->magenta = _hx_tmp2->loadGraphic(::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("menus/base/menuDesat",63,1b,f0,40)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),library1),null(),null(),null(),null(),null());
HXLINE(  66)		this->magenta->scrollFactor->set_x(( (Float)(0) ));
HXLINE(  67)		this->magenta->scrollFactor->set_y(((Float)0.18));
HXLINE(  68)		 ::flixel::FlxSprite _hx_tmp3 = this->magenta;
HXDLIN(  68)		_hx_tmp3->setGraphicSize(::Std_obj::_hx_int((this->magenta->get_width() * ((Float)1.1))),null());
HXLINE(  69)		this->magenta->updateHitbox();
HXLINE(  70)		this->magenta->screenCenter(null());
HXLINE(  71)		this->magenta->set_visible(false);
HXLINE(  72)		this->magenta->set_antialiasing(true);
HXLINE(  73)		this->magenta->set_color(-167525);
HXLINE(  74)		this->add(this->magenta);
HXLINE(  77)		this->camFollow =  ::flixel::FlxObject_obj::__alloc( HX_CTX ,0,0,1,1);
HXLINE(  78)		this->add(this->camFollow);
HXLINE(  81)		this->menuItems =  ::flixel::group::FlxTypedGroup_obj::__alloc( HX_CTX ,null());
HXLINE(  82)		this->add(this->menuItems);
HXLINE(  85)		::String library2 = null();
HXDLIN(  85)		::String tex = ::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("menus/base/title/FNF_main_menu_assets",f8,c2,93,08)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),library2);
HXDLIN(  85)		 ::flixel::graphics::frames::FlxAtlasFrames tex1 = ::flixel::graphics::frames::FlxAtlasFrames_obj::fromSparrow(tex,::sys::io::File_obj::getContent(::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("menus/base/title/FNF_main_menu_assets",f8,c2,93,08)) + HX_(".xml",69,3e,c3,1e)),HX_("TEXT",ad,94,ba,37),library2)));
HXLINE(  88)		{
HXLINE(  88)			int _g = 0;
HXDLIN(  88)			int _g1 = this->optionShit->length;
HXDLIN(  88)			while((_g < _g1)){
HXLINE(  88)				_g = (_g + 1);
HXDLIN(  88)				int i = (_g - 1);
HXLINE(  90)				 ::flixel::FlxSprite menuItem =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,0,(80 + (i * 200)),null());
HXLINE(  91)				menuItem->set_frames(tex1);
HXLINE(  93)				menuItem->animation->addByPrefix(HX_("idle",14,a7,b3,45),(this->optionShit->__get(i) + HX_(" basic",8e,b6,25,79)),24,null(),null(),null());
HXLINE(  94)				menuItem->animation->addByPrefix(HX_("selected",5b,2a,6d,b1),(this->optionShit->__get(i) + HX_(" white",89,d6,28,95)),24,null(),null(),null());
HXLINE(  95)				menuItem->animation->play(HX_("idle",14,a7,b3,45),null(),null(),null());
HXLINE(  96)				this->canSnap[i] = ( (Float)(-1) );
HXLINE(  98)				menuItem->ID = i;
HXLINE( 102)				menuItem->screenCenter(::flixel::util::FlxAxes_obj::X_dyn());
HXLINE( 104)				if ((::hx::Mod(menuItem->ID,2) == 0)) {
HXLINE( 105)					 ::flixel::FlxSprite _g = menuItem;
HXDLIN( 105)					_g->set_x((_g->x + 1000));
            				}
            				else {
HXLINE( 107)					 ::flixel::FlxSprite _g = menuItem;
HXDLIN( 107)					_g->set_x((_g->x - ( (Float)(1000) )));
            				}
HXLINE( 110)				this->menuItems->add(menuItem).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 111)				menuItem->scrollFactor->set(null(),null());
HXLINE( 112)				menuItem->set_antialiasing(true);
HXLINE( 113)				menuItem->updateHitbox();
            			}
            		}
HXLINE( 126)		Float camLerp = ::Main_obj::framerateAdjust(((Float)0.10));
HXLINE( 127)		::flixel::FlxG_obj::camera->follow(this->camFollow,null(),camLerp);
HXLINE( 129)		this->updateSelection();
HXLINE( 133)		 ::flixel::text::FlxText versionShit =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,5,(::flixel::FlxG_obj::height - 18),0,(HX_("Forever Engine v",71,95,62,a1) + ::Main_obj::gameVersion),12,null());
HXLINE( 134)		versionShit->scrollFactor->set(null(),null());
HXLINE( 135)		versionShit->setFormat(HX_("VCR OSD Mono",be,44,e4,b8),16,-1,HX_("left",07,08,b0,47),::flixel::text::FlxTextBorderStyle_obj::OUTLINE_dyn(),-16777216,null());
HXLINE( 136)		this->add(versionShit);
            	}


void MainMenuState_obj::update(Float elapsed){
            		HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_3) HXARGC(1)
            		void _hx_run( ::flixel::FlxSprite menuItem){
            			HX_STACKFRAME(&_hx_pos_b53ce54b30042969_259_update)
HXLINE( 259)			menuItem->screenCenter(::flixel::util::FlxAxes_obj::X_dyn());
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_STACKFRAME(&_hx_pos_b53ce54b30042969_146_update)
HXLINE( 145)		 ::meta::state::menus::MainMenuState _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE( 150)		bool up = ::meta::data::PlayerSettings_obj::player1->controls->_up->check();
HXLINE( 151)		bool down = ::meta::data::PlayerSettings_obj::player1->controls->_down->check();
HXLINE( 152)		bool up_p = ::meta::data::PlayerSettings_obj::player1->controls->_upP->check();
HXLINE( 153)		bool down_p = ::meta::data::PlayerSettings_obj::player1->controls->_downP->check();
HXLINE( 154)		::Array< bool > controlArray = ::Array_obj< bool >::__new(4)->init(0,up)->init(1,down)->init(2,up_p)->init(3,down_p);
HXLINE( 156)		bool _hx_tmp;
HXDLIN( 156)		if (controlArray->contains(true)) {
HXLINE( 156)			_hx_tmp = !(this->selectedSomethin);
            		}
            		else {
HXLINE( 156)			_hx_tmp = false;
            		}
HXDLIN( 156)		if (_hx_tmp) {
HXLINE( 158)			int _g = 0;
HXDLIN( 158)			int _g1 = controlArray->length;
HXDLIN( 158)			while((_g < _g1)){
HXLINE( 158)				_g = (_g + 1);
HXDLIN( 158)				int i = (_g - 1);
HXLINE( 161)				if ((controlArray->__get(i) == true)) {
HXLINE( 164)					if ((i > 1)) {
HXLINE( 168)						if ((i == 2)) {
HXLINE( 169)							this->curSelected--;
            						}
            						else {
HXLINE( 170)							if ((i == 3)) {
HXLINE( 171)								this->curSelected++;
            							}
            						}
HXLINE( 173)						 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp = ::flixel::FlxG_obj::sound;
HXDLIN( 173)						_hx_tmp->play(::Paths_obj::sound(HX_("scrollMenu",4c,d4,18,06),null()),null(),null(),null(),null(),null());
            					}
HXLINE( 196)					if ((this->curSelected < 0)) {
HXLINE( 197)						this->curSelected = ( (Float)((this->optionShit->length - 1)) );
            					}
            					else {
HXLINE( 198)						if ((this->curSelected >= this->optionShit->length)) {
HXLINE( 199)							this->curSelected = ( (Float)(0) );
            						}
            					}
            				}
            			}
            		}
            		else {
HXLINE( 207)			this->counterControl = ( (Float)(0) );
            		}
HXLINE( 210)		bool _hx_tmp1;
HXDLIN( 210)		if (::meta::data::PlayerSettings_obj::player1->controls->_accept->check()) {
HXLINE( 210)			_hx_tmp1 = !(this->selectedSomethin);
            		}
            		else {
HXLINE( 210)			_hx_tmp1 = false;
            		}
HXDLIN( 210)		if (_hx_tmp1) {
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_2, ::meta::state::menus::MainMenuState,_gthis) HXARGC(1)
            			void _hx_run( ::flixel::FlxSprite spr){
            				HX_STACKFRAME(&_hx_pos_b53ce54b30042969_220_update)
HXLINE( 220)				if ((_gthis->curSelected != spr->ID)) {
            					HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::flixel::FlxSprite,spr) HXARGC(1)
            					void _hx_run( ::flixel::tweens::FlxTween twn){
            						HX_STACKFRAME(&_hx_pos_b53ce54b30042969_226_update)
HXLINE( 226)						spr->kill();
            					}
            					HX_END_LOCAL_FUNC1((void))

HXLINE( 222)					::flixel::tweens::FlxTween_obj::tween(spr, ::Dynamic(::hx::Anon_obj::Create(2)
            						->setFixed(0,HX_("x",78,00,00,00),(::flixel::FlxG_obj::width * 2))
            						->setFixed(1,HX_("alpha",5e,a7,96,21),0)),((Float)0.4), ::Dynamic(::hx::Anon_obj::Create(2)
            						->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::quadOut_dyn())
            						->setFixed(1,HX_("onComplete",f8,d4,7e,5d), ::Dynamic(new _hx_Closure_0(spr)))));
            				}
            				else {
            					HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_1, ::meta::state::menus::MainMenuState,_gthis) HXARGC(1)
            					void _hx_run( ::flixel::effects::FlxFlicker flick){
            						HX_GC_STACKFRAME(&_hx_pos_b53ce54b30042969_233_update)
HXLINE( 234)						::String daChoice = _gthis->optionShit->__get(::Math_obj::floor(_gthis->curSelected));
HXLINE( 236)						::String _hx_switch_0 = daChoice;
            						if (  (_hx_switch_0==HX_("freeplay",a0,90,86,22)) ){
HXLINE( 241)							 ::meta::state::menus::MainMenuState _gthis1 = _gthis;
HXDLIN( 241)							::Main_obj::switchState(_gthis1, ::meta::state::menus::FreeplayState_obj::__alloc( HX_CTX ,null(),null()));
HXDLIN( 241)							goto _hx_goto_5;
            						}
            						if (  (_hx_switch_0==HX_("options",5e,33,fe,df)) ){
HXLINE( 243)							_gthis->transIn = ::flixel::addons::transition::FlxTransitionableState_obj::defaultTransIn;
HXLINE( 244)							_gthis->transOut = ::flixel::addons::transition::FlxTransitionableState_obj::defaultTransOut;
HXLINE( 245)							 ::meta::state::menus::MainMenuState _gthis1 = _gthis;
HXDLIN( 245)							::Main_obj::switchState(_gthis1, ::meta::state::menus::OptionsMenuState_obj::__alloc( HX_CTX ,null(),null()));
HXLINE( 242)							goto _hx_goto_5;
            						}
            						if (  (_hx_switch_0==HX_("story mode",6e,d7,a7,5e)) ){
HXLINE( 239)							 ::meta::state::menus::MainMenuState _gthis1 = _gthis;
HXDLIN( 239)							::Main_obj::switchState(_gthis1, ::meta::state::menus::StoryMenuState_obj::__alloc( HX_CTX ,null(),null()));
HXDLIN( 239)							goto _hx_goto_5;
            						}
            						_hx_goto_5:;
            					}
            					HX_END_LOCAL_FUNC1((void))

HXLINE( 232)					::flixel::effects::FlxFlicker_obj::flicker(spr,1,((Float)0.06),false,false, ::Dynamic(new _hx_Closure_1(_gthis)),null());
            				}
            			}
            			HX_END_LOCAL_FUNC1((void))

HXLINE( 213)			this->selectedSomethin = true;
HXLINE( 214)			 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp = ::flixel::FlxG_obj::sound;
HXDLIN( 214)			_hx_tmp->play(::Paths_obj::sound(HX_("confirmMenu",bf,8e,fe,3c),null()),null(),null(),null(),null(),null());
HXLINE( 216)			::flixel::effects::FlxFlicker_obj::flicker(this->magenta,((Float)0.8),((Float)0.1),false,null(),null(),null());
HXLINE( 218)			this->menuItems->forEach( ::Dynamic(new _hx_Closure_2(_gthis)),null());
            		}
HXLINE( 252)		if ((::Math_obj::floor(this->curSelected) != this->lastCurSelected)) {
HXLINE( 253)			this->updateSelection();
            		}
HXLINE( 255)		this->super::update(elapsed);
HXLINE( 257)		this->menuItems->forEach( ::Dynamic(new _hx_Closure_3()),null());
            	}


void MainMenuState_obj::updateSelection(){
            		HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_0) HXARGC(1)
            		void _hx_run( ::flixel::FlxSprite spr){
            			HX_STACKFRAME(&_hx_pos_b53ce54b30042969_269_updateSelection)
HXLINE( 270)			spr->animation->play(HX_("idle",14,a7,b3,45),null(),null(),null());
HXLINE( 271)			spr->updateHitbox();
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_STACKFRAME(&_hx_pos_b53ce54b30042969_266_updateSelection)
HXLINE( 268)		this->menuItems->forEach( ::Dynamic(new _hx_Closure_0()),null());
HXLINE( 275)		 ::flixel::FlxObject _hx_tmp = this->camFollow;
HXDLIN( 275)		Float _hx_tmp1 = Dynamic( this->menuItems->members->__get(::Math_obj::floor(this->curSelected))).StaticCast<  ::flixel::FlxSprite >()->getGraphicMidpoint(null())->x;
HXDLIN( 275)		_hx_tmp->setPosition(_hx_tmp1,Dynamic( this->menuItems->members->__get(::Math_obj::floor(this->curSelected))).StaticCast<  ::flixel::FlxSprite >()->getGraphicMidpoint(null())->y);
HXLINE( 278)		if ((Dynamic( this->menuItems->members->__get(::Math_obj::floor(this->curSelected))).StaticCast<  ::flixel::FlxSprite >()->animation->_curAnim->name == HX_("idle",14,a7,b3,45))) {
HXLINE( 279)			Dynamic( this->menuItems->members->__get(::Math_obj::floor(this->curSelected))).StaticCast<  ::flixel::FlxSprite >()->animation->play(HX_("selected",5b,2a,6d,b1),null(),null(),null());
            		}
HXLINE( 281)		Dynamic( this->menuItems->members->__get(::Math_obj::floor(this->curSelected))).StaticCast<  ::flixel::FlxSprite >()->updateHitbox();
HXLINE( 283)		this->lastCurSelected = ::Math_obj::floor(this->curSelected);
            	}


HX_DEFINE_DYNAMIC_FUNC0(MainMenuState_obj,updateSelection,(void))


::hx::ObjectPtr< MainMenuState_obj > MainMenuState_obj::__new( ::flixel::addons::transition::TransitionData TransIn, ::flixel::addons::transition::TransitionData TransOut) {
	::hx::ObjectPtr< MainMenuState_obj > __this = new MainMenuState_obj();
	__this->__construct(TransIn,TransOut);
	return __this;
}

::hx::ObjectPtr< MainMenuState_obj > MainMenuState_obj::__alloc(::hx::Ctx *_hx_ctx, ::flixel::addons::transition::TransitionData TransIn, ::flixel::addons::transition::TransitionData TransOut) {
	MainMenuState_obj *__this = (MainMenuState_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(MainMenuState_obj), true, "meta.state.menus.MainMenuState"));
	*(void **)__this = MainMenuState_obj::_hx_vtable;
	__this->__construct(TransIn,TransOut);
	return __this;
}

MainMenuState_obj::MainMenuState_obj()
{
}

void MainMenuState_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(MainMenuState);
	HX_MARK_MEMBER_NAME(menuItems,"menuItems");
	HX_MARK_MEMBER_NAME(curSelected,"curSelected");
	HX_MARK_MEMBER_NAME(bg,"bg");
	HX_MARK_MEMBER_NAME(magenta,"magenta");
	HX_MARK_MEMBER_NAME(camFollow,"camFollow");
	HX_MARK_MEMBER_NAME(optionShit,"optionShit");
	HX_MARK_MEMBER_NAME(canSnap,"canSnap");
	HX_MARK_MEMBER_NAME(selectedSomethin,"selectedSomethin");
	HX_MARK_MEMBER_NAME(counterControl,"counterControl");
	HX_MARK_MEMBER_NAME(lastCurSelected,"lastCurSelected");
	 ::flixel::addons::ui::FlxUIState_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void MainMenuState_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(menuItems,"menuItems");
	HX_VISIT_MEMBER_NAME(curSelected,"curSelected");
	HX_VISIT_MEMBER_NAME(bg,"bg");
	HX_VISIT_MEMBER_NAME(magenta,"magenta");
	HX_VISIT_MEMBER_NAME(camFollow,"camFollow");
	HX_VISIT_MEMBER_NAME(optionShit,"optionShit");
	HX_VISIT_MEMBER_NAME(canSnap,"canSnap");
	HX_VISIT_MEMBER_NAME(selectedSomethin,"selectedSomethin");
	HX_VISIT_MEMBER_NAME(counterControl,"counterControl");
	HX_VISIT_MEMBER_NAME(lastCurSelected,"lastCurSelected");
	 ::flixel::addons::ui::FlxUIState_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val MainMenuState_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"bg") ) { return ::hx::Val( bg ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"create") ) { return ::hx::Val( create_dyn() ); }
		if (HX_FIELD_EQ(inName,"update") ) { return ::hx::Val( update_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"magenta") ) { return ::hx::Val( magenta ); }
		if (HX_FIELD_EQ(inName,"canSnap") ) { return ::hx::Val( canSnap ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"menuItems") ) { return ::hx::Val( menuItems ); }
		if (HX_FIELD_EQ(inName,"camFollow") ) { return ::hx::Val( camFollow ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"optionShit") ) { return ::hx::Val( optionShit ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"curSelected") ) { return ::hx::Val( curSelected ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"counterControl") ) { return ::hx::Val( counterControl ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"lastCurSelected") ) { return ::hx::Val( lastCurSelected ); }
		if (HX_FIELD_EQ(inName,"updateSelection") ) { return ::hx::Val( updateSelection_dyn() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"selectedSomethin") ) { return ::hx::Val( selectedSomethin ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val MainMenuState_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"bg") ) { bg=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"magenta") ) { magenta=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"canSnap") ) { canSnap=inValue.Cast< ::Array< Float > >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"menuItems") ) { menuItems=inValue.Cast<  ::flixel::group::FlxTypedGroup >(); return inValue; }
		if (HX_FIELD_EQ(inName,"camFollow") ) { camFollow=inValue.Cast<  ::flixel::FlxObject >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"optionShit") ) { optionShit=inValue.Cast< ::Array< ::String > >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"curSelected") ) { curSelected=inValue.Cast< Float >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"counterControl") ) { counterControl=inValue.Cast< Float >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"lastCurSelected") ) { lastCurSelected=inValue.Cast< int >(); return inValue; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"selectedSomethin") ) { selectedSomethin=inValue.Cast< bool >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void MainMenuState_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("menuItems",e1,15,e5,5c));
	outFields->push(HX_("curSelected",fb,eb,ab,32));
	outFields->push(HX_("bg",c5,55,00,00));
	outFields->push(HX_("magenta",29,ba,9d,0e));
	outFields->push(HX_("camFollow",e0,6e,47,22));
	outFields->push(HX_("optionShit",d5,2d,ee,91));
	outFields->push(HX_("canSnap",7a,3e,af,6a));
	outFields->push(HX_("selectedSomethin",c8,ec,fb,99));
	outFields->push(HX_("counterControl",c1,fb,d2,ad));
	outFields->push(HX_("lastCurSelected",45,8d,e8,d4));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo MainMenuState_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::flixel::group::FlxTypedGroup */ ,(int)offsetof(MainMenuState_obj,menuItems),HX_("menuItems",e1,15,e5,5c)},
	{::hx::fsFloat,(int)offsetof(MainMenuState_obj,curSelected),HX_("curSelected",fb,eb,ab,32)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(MainMenuState_obj,bg),HX_("bg",c5,55,00,00)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(MainMenuState_obj,magenta),HX_("magenta",29,ba,9d,0e)},
	{::hx::fsObject /*  ::flixel::FlxObject */ ,(int)offsetof(MainMenuState_obj,camFollow),HX_("camFollow",e0,6e,47,22)},
	{::hx::fsObject /* ::Array< ::String > */ ,(int)offsetof(MainMenuState_obj,optionShit),HX_("optionShit",d5,2d,ee,91)},
	{::hx::fsObject /* ::Array< Float > */ ,(int)offsetof(MainMenuState_obj,canSnap),HX_("canSnap",7a,3e,af,6a)},
	{::hx::fsBool,(int)offsetof(MainMenuState_obj,selectedSomethin),HX_("selectedSomethin",c8,ec,fb,99)},
	{::hx::fsFloat,(int)offsetof(MainMenuState_obj,counterControl),HX_("counterControl",c1,fb,d2,ad)},
	{::hx::fsInt,(int)offsetof(MainMenuState_obj,lastCurSelected),HX_("lastCurSelected",45,8d,e8,d4)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *MainMenuState_obj_sStaticStorageInfo = 0;
#endif

static ::String MainMenuState_obj_sMemberFields[] = {
	HX_("menuItems",e1,15,e5,5c),
	HX_("curSelected",fb,eb,ab,32),
	HX_("bg",c5,55,00,00),
	HX_("magenta",29,ba,9d,0e),
	HX_("camFollow",e0,6e,47,22),
	HX_("optionShit",d5,2d,ee,91),
	HX_("canSnap",7a,3e,af,6a),
	HX_("create",fc,66,0f,7c),
	HX_("selectedSomethin",c8,ec,fb,99),
	HX_("counterControl",c1,fb,d2,ad),
	HX_("update",09,86,05,87),
	HX_("lastCurSelected",45,8d,e8,d4),
	HX_("updateSelection",03,c9,a5,dd),
	::String(null()) };

::hx::Class MainMenuState_obj::__mClass;

void MainMenuState_obj::__register()
{
	MainMenuState_obj _hx_dummy;
	MainMenuState_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("meta.state.menus.MainMenuState",99,c0,e9,e8);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(MainMenuState_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< MainMenuState_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = MainMenuState_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = MainMenuState_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace meta
} // end namespace state
} // end namespace menus

// Generated by Haxe 4.1.5
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_ForeverAssets
#include <ForeverAssets.h>
#endif
#ifndef INCLUDED_ForeverTools
#include <ForeverTools.h>
#endif
#ifndef INCLUDED_Init
#include <Init.h>
#endif
#ifndef INCLUDED_Main
#include <Main.h>
#endif
#ifndef INCLUDED_Paths
#include <Paths.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_StringTools
#include <StringTools.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxCamera
#include <flixel/FlxCamera.h>
#endif
#ifndef INCLUDED_flixel_FlxCameraFollowStyle
#include <flixel/FlxCameraFollowStyle.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxGame
#include <flixel/FlxGame.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
#ifndef INCLUDED_flixel_FlxSubState
#include <flixel/FlxSubState.h>
#endif
#ifndef INCLUDED_flixel_addons_transition_FlxTransitionableState
#include <flixel/addons/transition/FlxTransitionableState.h>
#endif
#ifndef INCLUDED_flixel_addons_transition_TransitionData
#include <flixel/addons/transition/TransitionData.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUIState
#include <flixel/addons/ui/FlxUIState.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IEventGetter
#include <flixel/addons/ui/interfaces/IEventGetter.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IFlxUIState
#include <flixel/addons/ui/interfaces/IFlxUIState.h>
#endif
#ifndef INCLUDED_flixel_animation_FlxAnimation
#include <flixel/animation/FlxAnimation.h>
#endif
#ifndef INCLUDED_flixel_animation_FlxAnimationController
#include <flixel/animation/FlxAnimationController.h>
#endif
#ifndef INCLUDED_flixel_animation_FlxBaseAnimation
#include <flixel/animation/FlxBaseAnimation.h>
#endif
#ifndef INCLUDED_flixel_graphics_frames_FlxAtlasFrames
#include <flixel/graphics/frames/FlxAtlasFrames.h>
#endif
#ifndef INCLUDED_flixel_graphics_frames_FlxFramesCollection
#include <flixel/graphics/frames/FlxFramesCollection.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroupIterator
#include <flixel/group/FlxTypedGroupIterator.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedSpriteGroup
#include <flixel/group/FlxTypedSpriteGroup.h>
#endif
#ifndef INCLUDED_flixel_input_FlxBaseKeyList
#include <flixel/input/FlxBaseKeyList.h>
#endif
#ifndef INCLUDED_flixel_input_FlxKeyManager
#include <flixel/input/FlxKeyManager.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInputManager
#include <flixel/input/IFlxInputManager.h>
#endif
#ifndef INCLUDED_flixel_input_actions_FlxAction
#include <flixel/input/actions/FlxAction.h>
#endif
#ifndef INCLUDED_flixel_input_actions_FlxActionDigital
#include <flixel/input/actions/FlxActionDigital.h>
#endif
#ifndef INCLUDED_flixel_input_actions_FlxActionSet
#include <flixel/input/actions/FlxActionSet.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard_FlxKeyList
#include <flixel/input/keyboard/FlxKeyList.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard_FlxKeyboard
#include <flixel/input/keyboard/FlxKeyboard.h>
#endif
#ifndef INCLUDED_flixel_math_FlxMath
#include <flixel/math/FlxMath.h>
#endif
#ifndef INCLUDED_flixel_math_FlxPoint
#include <flixel/math/FlxPoint.h>
#endif
#ifndef INCLUDED_flixel_math_FlxRandom
#include <flixel/math/FlxRandom.h>
#endif
#ifndef INCLUDED_flixel_math_FlxRect
#include <flixel/math/FlxRect.h>
#endif
#ifndef INCLUDED_flixel_system_FlxSound
#include <flixel/system/FlxSound.h>
#endif
#ifndef INCLUDED_flixel_system_FlxSoundGroup
#include <flixel/system/FlxSoundGroup.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_CameraFrontEnd
#include <flixel/system/frontEnds/CameraFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_SoundFrontEnd
#include <flixel/system/frontEnds/SoundFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_tweens_FlxEase
#include <flixel/tweens/FlxEase.h>
#endif
#ifndef INCLUDED_flixel_tweens_FlxTween
#include <flixel/tweens/FlxTween.h>
#endif
#ifndef INCLUDED_flixel_tweens_misc_VarTween
#include <flixel/tweens/misc/VarTween.h>
#endif
#ifndef INCLUDED_flixel_util_FlxAxes
#include <flixel/util/FlxAxes.h>
#endif
#ifndef INCLUDED_flixel_util_FlxSave
#include <flixel/util/FlxSave.h>
#endif
#ifndef INCLUDED_flixel_util_FlxTimer
#include <flixel/util/FlxTimer.h>
#endif
#ifndef INCLUDED_flixel_util_FlxTimerManager
#include <flixel/util/FlxTimerManager.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif
#ifndef INCLUDED_flixel_util__FlxColor_FlxColor_Impl_
#include <flixel/util/_FlxColor/FlxColor_Impl_.h>
#endif
#ifndef INCLUDED_gameObjects_Boyfriend
#include <gameObjects/Boyfriend.h>
#endif
#ifndef INCLUDED_gameObjects_Character
#include <gameObjects/Character.h>
#endif
#ifndef INCLUDED_gameObjects_Stage
#include <gameObjects/Stage.h>
#endif
#ifndef INCLUDED_gameObjects_userInterface_ClassHUD
#include <gameObjects/userInterface/ClassHUD.h>
#endif
#ifndef INCLUDED_gameObjects_userInterface_DialogueBox
#include <gameObjects/userInterface/DialogueBox.h>
#endif
#ifndef INCLUDED_gameObjects_userInterface_notes_Note
#include <gameObjects/userInterface/notes/Note.h>
#endif
#ifndef INCLUDED_gameObjects_userInterface_notes_NoteSplash
#include <gameObjects/userInterface/notes/NoteSplash.h>
#endif
#ifndef INCLUDED_gameObjects_userInterface_notes_Strumline
#include <gameObjects/userInterface/notes/Strumline.h>
#endif
#ifndef INCLUDED_gameObjects_userInterface_notes_UIStaticArrow
#include <gameObjects/userInterface/notes/UIStaticArrow.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_Log
#include <haxe/Log.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_meta_Controls
#include <meta/Controls.h>
#endif
#ifndef INCLUDED_meta_CoolUtil
#include <meta/CoolUtil.h>
#endif
#ifndef INCLUDED_meta_MusicBeatState
#include <meta/MusicBeatState.h>
#endif
#ifndef INCLUDED_meta_MusicBeatSubState
#include <meta/MusicBeatSubState.h>
#endif
#ifndef INCLUDED_meta_data_ChartLoader
#include <meta/data/ChartLoader.h>
#endif
#ifndef INCLUDED_meta_data_Conductor
#include <meta/data/Conductor.h>
#endif
#ifndef INCLUDED_meta_data_Highscore
#include <meta/data/Highscore.h>
#endif
#ifndef INCLUDED_meta_data_PlayerSettings
#include <meta/data/PlayerSettings.h>
#endif
#ifndef INCLUDED_meta_data_Song
#include <meta/data/Song.h>
#endif
#ifndef INCLUDED_meta_data_Timings
#include <meta/data/Timings.h>
#endif
#ifndef INCLUDED_meta_data_dependency_Discord
#include <meta/data/dependency/Discord.h>
#endif
#ifndef INCLUDED_meta_data_dependency_FNFSprite
#include <meta/data/dependency/FNFSprite.h>
#endif
#ifndef INCLUDED_meta_data_dependency_FNFUIState
#include <meta/data/dependency/FNFUIState.h>
#endif
#ifndef INCLUDED_meta_state_PlayState
#include <meta/state/PlayState.h>
#endif
#ifndef INCLUDED_meta_state_charting_ChartingState
#include <meta/state/charting/ChartingState.h>
#endif
#ifndef INCLUDED_meta_state_charting_OriginalChartingState
#include <meta/state/charting/OriginalChartingState.h>
#endif
#ifndef INCLUDED_meta_state_menus_FreeplayState
#include <meta/state/menus/FreeplayState.h>
#endif
#ifndef INCLUDED_meta_state_menus_StoryMenuState
#include <meta/state/menus/StoryMenuState.h>
#endif
#ifndef INCLUDED_meta_subState_GameOverSubstate
#include <meta/subState/GameOverSubstate.h>
#endif
#ifndef INCLUDED_meta_subState_PauseSubState
#include <meta/subState/PauseSubState.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_media_Sound
#include <openfl/media/Sound.h>
#endif
#ifndef INCLUDED_sys_FileSystem
#include <sys/FileSystem.h>
#endif
#ifndef INCLUDED_sys_io_File
#include <sys/io/File.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_a31d76c4ca3ed2cf_48_new,"meta.state.PlayState","new",0x4afde389,"meta.state.PlayState.new","meta/state/PlayState.hx",48,0xa82031c9)
HX_LOCAL_STACK_FRAME(_hx_pos_a31d76c4ca3ed2cf_153_create,"meta.state.PlayState","create",0x61ccf373,"meta.state.PlayState.create","meta/state/PlayState.hx",153,0xa82031c9)
static const Float _hx_array_data_5d796b17_3[] = {
	(Float)0,(Float)0,(Float)0,(Float)0,
};
HX_LOCAL_STACK_FRAME(_hx_pos_a31d76c4ca3ed2cf_388_update,"meta.state.PlayState","update",0x6cc31280,"meta.state.PlayState.update","meta/state/PlayState.hx",388,0xa82031c9)
HX_LOCAL_STACK_FRAME(_hx_pos_a31d76c4ca3ed2cf_586_noteCalls,"meta.state.PlayState","noteCalls",0xe59314ac,"meta.state.PlayState.noteCalls","meta/state/PlayState.hx",586,0xa82031c9)
HX_LOCAL_STACK_FRAME(_hx_pos_a31d76c4ca3ed2cf_635_noteCalls,"meta.state.PlayState","noteCalls",0xe59314ac,"meta.state.PlayState.noteCalls","meta/state/PlayState.hx",635,0xa82031c9)
HX_LOCAL_STACK_FRAME(_hx_pos_a31d76c4ca3ed2cf_716_controlPlayer,"meta.state.PlayState","controlPlayer",0xd93c2f07,"meta.state.PlayState.controlPlayer","meta/state/PlayState.hx",716,0xa82031c9)
HX_LOCAL_STACK_FRAME(_hx_pos_a31d76c4ca3ed2cf_787_controlPlayer,"meta.state.PlayState","controlPlayer",0xd93c2f07,"meta.state.PlayState.controlPlayer","meta/state/PlayState.hx",787,0xa82031c9)
HX_LOCAL_STACK_FRAME(_hx_pos_a31d76c4ca3ed2cf_734_controlPlayer,"meta.state.PlayState","controlPlayer",0xd93c2f07,"meta.state.PlayState.controlPlayer","meta/state/PlayState.hx",734,0xa82031c9)
HX_LOCAL_STACK_FRAME(_hx_pos_a31d76c4ca3ed2cf_737_controlPlayer,"meta.state.PlayState","controlPlayer",0xd93c2f07,"meta.state.PlayState.controlPlayer","meta/state/PlayState.hx",737,0xa82031c9)
HX_LOCAL_STACK_FRAME(_hx_pos_a31d76c4ca3ed2cf_778_controlPlayer,"meta.state.PlayState","controlPlayer",0xd93c2f07,"meta.state.PlayState.controlPlayer","meta/state/PlayState.hx",778,0xa82031c9)
HX_LOCAL_STACK_FRAME(_hx_pos_a31d76c4ca3ed2cf_807_goodNoteHit,"meta.state.PlayState","goodNoteHit",0xdae331ed,"meta.state.PlayState.goodNoteHit","meta/state/PlayState.hx",807,0xa82031c9)
HX_LOCAL_STACK_FRAME(_hx_pos_a31d76c4ca3ed2cf_870_missNoteCheck,"meta.state.PlayState","missNoteCheck",0x3dad3143,"meta.state.PlayState.missNoteCheck","meta/state/PlayState.hx",870,0xa82031c9)
HX_LOCAL_STACK_FRAME(_hx_pos_a31d76c4ca3ed2cf_884_characterPlayAnimation,"meta.state.PlayState","characterPlayAnimation",0x4da40b7e,"meta.state.PlayState.characterPlayAnimation","meta/state/PlayState.hx",884,0xa82031c9)
HX_LOCAL_STACK_FRAME(_hx_pos_a31d76c4ca3ed2cf_914_strumCallsAuto,"meta.state.PlayState","strumCallsAuto",0x975b1912,"meta.state.PlayState.strumCallsAuto","meta/state/PlayState.hx",914,0xa82031c9)
HX_LOCAL_STACK_FRAME(_hx_pos_a31d76c4ca3ed2cf_937_mainControls,"meta.state.PlayState","mainControls",0xc9659b86,"meta.state.PlayState.mainControls","meta/state/PlayState.hx",937,0xa82031c9)
HX_LOCAL_STACK_FRAME(_hx_pos_a31d76c4ca3ed2cf_1019_strumCameraRoll,"meta.state.PlayState","strumCameraRoll",0xddc7f814,"meta.state.PlayState.strumCameraRoll","meta/state/PlayState.hx",1019,0xa82031c9)
HX_LOCAL_STACK_FRAME(_hx_pos_a31d76c4ca3ed2cf_1039_onFocus,"meta.state.PlayState","onFocus",0xbae459e2,"meta.state.PlayState.onFocus","meta/state/PlayState.hx",1039,0xa82031c9)
HX_LOCAL_STACK_FRAME(_hx_pos_a31d76c4ca3ed2cf_1046_onFocusLost,"meta.state.PlayState","onFocusLost",0xf9a4c8e6,"meta.state.PlayState.onFocusLost","meta/state/PlayState.hx",1046,0xa82031c9)
HX_LOCAL_STACK_FRAME(_hx_pos_a31d76c4ca3ed2cf_1071_popUpScore,"meta.state.PlayState","popUpScore",0xe615355d,"meta.state.PlayState.popUpScore","meta/state/PlayState.hx",1071,0xa82031c9)
HX_LOCAL_STACK_FRAME(_hx_pos_a31d76c4ca3ed2cf_1094_createSplash,"meta.state.PlayState","createSplash",0x44d6813a,"meta.state.PlayState.createSplash","meta/state/PlayState.hx",1094,0xa82031c9)
HX_LOCAL_STACK_FRAME(_hx_pos_a31d76c4ca3ed2cf_1104_popUpCombo,"meta.state.PlayState","popUpCombo",0xb798ea59,"meta.state.PlayState.popUpCombo","meta/state/PlayState.hx",1104,0xa82031c9)
HX_LOCAL_STACK_FRAME(_hx_pos_a31d76c4ca3ed2cf_1133_popUpCombo,"meta.state.PlayState","popUpCombo",0xb798ea59,"meta.state.PlayState.popUpCombo","meta/state/PlayState.hx",1133,0xa82031c9)
HX_LOCAL_STACK_FRAME(_hx_pos_a31d76c4ca3ed2cf_1161_decreaseCombo,"meta.state.PlayState","decreaseCombo",0xa2b92f79,"meta.state.PlayState.decreaseCombo","meta/state/PlayState.hx",1161,0xa82031c9)
HX_LOCAL_STACK_FRAME(_hx_pos_a31d76c4ca3ed2cf_1191_increaseCombo,"meta.state.PlayState","increaseCombo",0x4f367d95,"meta.state.PlayState.increaseCombo","meta/state/PlayState.hx",1191,0xa82031c9)
HX_LOCAL_STACK_FRAME(_hx_pos_a31d76c4ca3ed2cf_1205_displayRating,"meta.state.PlayState","displayRating",0xa5abf068,"meta.state.PlayState.displayRating","meta/state/PlayState.hx",1205,0xa82031c9)
HX_LOCAL_STACK_FRAME(_hx_pos_a31d76c4ca3ed2cf_1220_displayRating,"meta.state.PlayState","displayRating",0xa5abf068,"meta.state.PlayState.displayRating","meta/state/PlayState.hx",1220,0xa82031c9)
HX_LOCAL_STACK_FRAME(_hx_pos_a31d76c4ca3ed2cf_1237_displayRating,"meta.state.PlayState","displayRating",0xa5abf068,"meta.state.PlayState.displayRating","meta/state/PlayState.hx",1237,0xa82031c9)
HX_LOCAL_STACK_FRAME(_hx_pos_a31d76c4ca3ed2cf_1265_healthCall,"meta.state.PlayState","healthCall",0xa4727f51,"meta.state.PlayState.healthCall","meta/state/PlayState.hx",1265,0xa82031c9)
HX_LOCAL_STACK_FRAME(_hx_pos_a31d76c4ca3ed2cf_1272_startSong,"meta.state.PlayState","startSong",0x6c35f540,"meta.state.PlayState.startSong","meta/state/PlayState.hx",1272,0xa82031c9)
HX_LOCAL_STACK_FRAME(_hx_pos_a31d76c4ca3ed2cf_1297_generateSong,"meta.state.PlayState","generateSong",0x8214ad61,"meta.state.PlayState.generateSong","meta/state/PlayState.hx",1297,0xa82031c9)
HX_LOCAL_STACK_FRAME(_hx_pos_a31d76c4ca3ed2cf_1339_sortByShit,"meta.state.PlayState","sortByShit",0x14a9932c,"meta.state.PlayState.sortByShit","meta/state/PlayState.hx",1339,0xa82031c9)
HX_LOCAL_STACK_FRAME(_hx_pos_a31d76c4ca3ed2cf_1342_resyncVocals,"meta.state.PlayState","resyncVocals",0xcdd5d643,"meta.state.PlayState.resyncVocals","meta/state/PlayState.hx",1342,0xa82031c9)
HX_LOCAL_STACK_FRAME(_hx_pos_a31d76c4ca3ed2cf_1352_stepHit,"meta.state.PlayState","stepHit",0xa15f0a10,"meta.state.PlayState.stepHit","meta/state/PlayState.hx",1352,0xa82031c9)
HX_LOCAL_STACK_FRAME(_hx_pos_a31d76c4ca3ed2cf_1361_charactersDance,"meta.state.PlayState","charactersDance",0xbe5d9ed2,"meta.state.PlayState.charactersDance","meta/state/PlayState.hx",1361,0xa82031c9)
HX_LOCAL_STACK_FRAME(_hx_pos_a31d76c4ca3ed2cf_1374_beatHit,"meta.state.PlayState","beatHit",0x94224626,"meta.state.PlayState.beatHit","meta/state/PlayState.hx",1374,0xa82031c9)
HX_LOCAL_STACK_FRAME(_hx_pos_a31d76c4ca3ed2cf_1411_openSubState,"meta.state.PlayState","openSubState",0x9a312612,"meta.state.PlayState.openSubState","meta/state/PlayState.hx",1411,0xa82031c9)
HX_LOCAL_STACK_FRAME(_hx_pos_a31d76c4ca3ed2cf_1434_closeSubState,"meta.state.PlayState","closeSubState",0x2cf118b2,"meta.state.PlayState.closeSubState","meta/state/PlayState.hx",1434,0xa82031c9)
HX_LOCAL_STACK_FRAME(_hx_pos_a31d76c4ca3ed2cf_1459_endSong,"meta.state.PlayState","endSong",0x4e9a38f9,"meta.state.PlayState.endSong","meta/state/PlayState.hx",1459,0xa82031c9)
HX_LOCAL_STACK_FRAME(_hx_pos_a31d76c4ca3ed2cf_1505_songEndSpecificActions,"meta.state.PlayState","songEndSpecificActions",0x2abbe37c,"meta.state.PlayState.songEndSpecificActions","meta/state/PlayState.hx",1505,0xa82031c9)
HX_LOCAL_STACK_FRAME(_hx_pos_a31d76c4ca3ed2cf_1522_songEndSpecificActions,"meta.state.PlayState","songEndSpecificActions",0x2abbe37c,"meta.state.PlayState.songEndSpecificActions","meta/state/PlayState.hx",1522,0xa82031c9)
HX_LOCAL_STACK_FRAME(_hx_pos_a31d76c4ca3ed2cf_1531_callDefaultSongEnd,"meta.state.PlayState","callDefaultSongEnd",0xdf8f6c7a,"meta.state.PlayState.callDefaultSongEnd","meta/state/PlayState.hx",1531,0xa82031c9)
HX_LOCAL_STACK_FRAME(_hx_pos_a31d76c4ca3ed2cf_1548_songIntroCutscene,"meta.state.PlayState","songIntroCutscene",0x671482ea,"meta.state.PlayState.songIntroCutscene","meta/state/PlayState.hx",1548,0xa82031c9)
HX_LOCAL_STACK_FRAME(_hx_pos_a31d76c4ca3ed2cf_1606_songIntroCutscene,"meta.state.PlayState","songIntroCutscene",0x671482ea,"meta.state.PlayState.songIntroCutscene","meta/state/PlayState.hx",1606,0xa82031c9)
HX_LOCAL_STACK_FRAME(_hx_pos_a31d76c4ca3ed2cf_1618_songIntroCutscene,"meta.state.PlayState","songIntroCutscene",0x671482ea,"meta.state.PlayState.songIntroCutscene","meta/state/PlayState.hx",1618,0xa82031c9)
HX_LOCAL_STACK_FRAME(_hx_pos_a31d76c4ca3ed2cf_1614_songIntroCutscene,"meta.state.PlayState","songIntroCutscene",0x671482ea,"meta.state.PlayState.songIntroCutscene","meta/state/PlayState.hx",1614,0xa82031c9)
HX_LOCAL_STACK_FRAME(_hx_pos_a31d76c4ca3ed2cf_1626_songIntroCutscene,"meta.state.PlayState","songIntroCutscene",0x671482ea,"meta.state.PlayState.songIntroCutscene","meta/state/PlayState.hx",1626,0xa82031c9)
HX_LOCAL_STACK_FRAME(_hx_pos_a31d76c4ca3ed2cf_1575_songIntroCutscene,"meta.state.PlayState","songIntroCutscene",0x671482ea,"meta.state.PlayState.songIntroCutscene","meta/state/PlayState.hx",1575,0xa82031c9)
HX_LOCAL_STACK_FRAME(_hx_pos_a31d76c4ca3ed2cf_1568_songIntroCutscene,"meta.state.PlayState","songIntroCutscene",0x671482ea,"meta.state.PlayState.songIntroCutscene","meta/state/PlayState.hx",1568,0xa82031c9)
HX_LOCAL_STACK_FRAME(_hx_pos_a31d76c4ca3ed2cf_1559_songIntroCutscene,"meta.state.PlayState","songIntroCutscene",0x671482ea,"meta.state.PlayState.songIntroCutscene","meta/state/PlayState.hx",1559,0xa82031c9)
HX_LOCAL_STACK_FRAME(_hx_pos_a31d76c4ca3ed2cf_1636_callTextbox,"meta.state.PlayState","callTextbox",0xf59dbea9,"meta.state.PlayState.callTextbox","meta/state/PlayState.hx",1636,0xa82031c9)
HX_LOCAL_STACK_FRAME(_hx_pos_a31d76c4ca3ed2cf_1684_startCountdown,"meta.state.PlayState","startCountdown",0x07517b66,"meta.state.PlayState.startCountdown","meta/state/PlayState.hx",1684,0xa82031c9)
HX_LOCAL_STACK_FRAME(_hx_pos_a31d76c4ca3ed2cf_1722_startCountdown,"meta.state.PlayState","startCountdown",0x07517b66,"meta.state.PlayState.startCountdown","meta/state/PlayState.hx",1722,0xa82031c9)
HX_LOCAL_STACK_FRAME(_hx_pos_a31d76c4ca3ed2cf_1741_startCountdown,"meta.state.PlayState","startCountdown",0x07517b66,"meta.state.PlayState.startCountdown","meta/state/PlayState.hx",1741,0xa82031c9)
HX_LOCAL_STACK_FRAME(_hx_pos_a31d76c4ca3ed2cf_1762_startCountdown,"meta.state.PlayState","startCountdown",0x07517b66,"meta.state.PlayState.startCountdown","meta/state/PlayState.hx",1762,0xa82031c9)
HX_LOCAL_STACK_FRAME(_hx_pos_a31d76c4ca3ed2cf_1676_startCountdown,"meta.state.PlayState","startCountdown",0x07517b66,"meta.state.PlayState.startCountdown","meta/state/PlayState.hx",1676,0xa82031c9)
HX_LOCAL_STACK_FRAME(_hx_pos_a31d76c4ca3ed2cf_1776_add,"meta.state.PlayState","add",0x4af4054a,"meta.state.PlayState.add","meta/state/PlayState.hx",1776,0xa82031c9)
HX_LOCAL_STACK_FRAME(_hx_pos_a31d76c4ca3ed2cf_1052_updateRPC,"meta.state.PlayState","updateRPC",0xe9cdfc45,"meta.state.PlayState.updateRPC","meta/state/PlayState.hx",1052,0xa82031c9)
HX_LOCAL_STACK_FRAME(_hx_pos_a31d76c4ca3ed2cf_1401_resetMusic,"meta.state.PlayState","resetMusic",0x9f199c4d,"meta.state.PlayState.resetMusic","meta/state/PlayState.hx",1401,0xa82031c9)
HX_LOCAL_STACK_FRAME(_hx_pos_a31d76c4ca3ed2cf_1652_skipCutscenes,"meta.state.PlayState","skipCutscenes",0x64cb5e93,"meta.state.PlayState.skipCutscenes","meta/state/PlayState.hx",1652,0xa82031c9)
HX_LOCAL_STACK_FRAME(_hx_pos_a31d76c4ca3ed2cf_52_boot,"meta.state.PlayState","boot",0x4b4234e9,"meta.state.PlayState.boot","meta/state/PlayState.hx",52,0xa82031c9)
HX_LOCAL_STACK_FRAME(_hx_pos_a31d76c4ca3ed2cf_54_boot,"meta.state.PlayState","boot",0x4b4234e9,"meta.state.PlayState.boot","meta/state/PlayState.hx",54,0xa82031c9)
HX_LOCAL_STACK_FRAME(_hx_pos_a31d76c4ca3ed2cf_55_boot,"meta.state.PlayState","boot",0x4b4234e9,"meta.state.PlayState.boot","meta/state/PlayState.hx",55,0xa82031c9)
HX_LOCAL_STACK_FRAME(_hx_pos_a31d76c4ca3ed2cf_56_boot,"meta.state.PlayState","boot",0x4b4234e9,"meta.state.PlayState.boot","meta/state/PlayState.hx",56,0xa82031c9)
HX_LOCAL_STACK_FRAME(_hx_pos_a31d76c4ca3ed2cf_57_boot,"meta.state.PlayState","boot",0x4b4234e9,"meta.state.PlayState.boot","meta/state/PlayState.hx",57,0xa82031c9)
HX_LOCAL_STACK_FRAME(_hx_pos_a31d76c4ca3ed2cf_62_boot,"meta.state.PlayState","boot",0x4b4234e9,"meta.state.PlayState.boot","meta/state/PlayState.hx",62,0xa82031c9)
HX_LOCAL_STACK_FRAME(_hx_pos_a31d76c4ca3ed2cf_68_boot,"meta.state.PlayState","boot",0x4b4234e9,"meta.state.PlayState.boot","meta/state/PlayState.hx",68,0xa82031c9)
HX_LOCAL_STACK_FRAME(_hx_pos_a31d76c4ca3ed2cf_69_boot,"meta.state.PlayState","boot",0x4b4234e9,"meta.state.PlayState.boot","meta/state/PlayState.hx",69,0xa82031c9)
HX_LOCAL_STACK_FRAME(_hx_pos_a31d76c4ca3ed2cf_84_boot,"meta.state.PlayState","boot",0x4b4234e9,"meta.state.PlayState.boot","meta/state/PlayState.hx",84,0xa82031c9)
HX_LOCAL_STACK_FRAME(_hx_pos_a31d76c4ca3ed2cf_85_boot,"meta.state.PlayState","boot",0x4b4234e9,"meta.state.PlayState.boot","meta/state/PlayState.hx",85,0xa82031c9)
HX_LOCAL_STACK_FRAME(_hx_pos_a31d76c4ca3ed2cf_86_boot,"meta.state.PlayState","boot",0x4b4234e9,"meta.state.PlayState.boot","meta/state/PlayState.hx",86,0xa82031c9)
HX_LOCAL_STACK_FRAME(_hx_pos_a31d76c4ca3ed2cf_93_boot,"meta.state.PlayState","boot",0x4b4234e9,"meta.state.PlayState.boot","meta/state/PlayState.hx",93,0xa82031c9)
HX_LOCAL_STACK_FRAME(_hx_pos_a31d76c4ca3ed2cf_94_boot,"meta.state.PlayState","boot",0x4b4234e9,"meta.state.PlayState.boot","meta/state/PlayState.hx",94,0xa82031c9)
HX_LOCAL_STACK_FRAME(_hx_pos_a31d76c4ca3ed2cf_96_boot,"meta.state.PlayState","boot",0x4b4234e9,"meta.state.PlayState.boot","meta/state/PlayState.hx",96,0xa82031c9)
HX_LOCAL_STACK_FRAME(_hx_pos_a31d76c4ca3ed2cf_118_boot,"meta.state.PlayState","boot",0x4b4234e9,"meta.state.PlayState.boot","meta/state/PlayState.hx",118,0xa82031c9)
HX_LOCAL_STACK_FRAME(_hx_pos_a31d76c4ca3ed2cf_122_boot,"meta.state.PlayState","boot",0x4b4234e9,"meta.state.PlayState.boot","meta/state/PlayState.hx",122,0xa82031c9)
HX_LOCAL_STACK_FRAME(_hx_pos_a31d76c4ca3ed2cf_126_boot,"meta.state.PlayState","boot",0x4b4234e9,"meta.state.PlayState.boot","meta/state/PlayState.hx",126,0xa82031c9)
HX_LOCAL_STACK_FRAME(_hx_pos_a31d76c4ca3ed2cf_128_boot,"meta.state.PlayState","boot",0x4b4234e9,"meta.state.PlayState.boot","meta/state/PlayState.hx",128,0xa82031c9)
HX_LOCAL_STACK_FRAME(_hx_pos_a31d76c4ca3ed2cf_134_boot,"meta.state.PlayState","boot",0x4b4234e9,"meta.state.PlayState.boot","meta/state/PlayState.hx",134,0xa82031c9)
HX_LOCAL_STACK_FRAME(_hx_pos_a31d76c4ca3ed2cf_135_boot,"meta.state.PlayState","boot",0x4b4234e9,"meta.state.PlayState.boot","meta/state/PlayState.hx",135,0xa82031c9)
HX_LOCAL_STACK_FRAME(_hx_pos_a31d76c4ca3ed2cf_142_boot,"meta.state.PlayState","boot",0x4b4234e9,"meta.state.PlayState.boot","meta/state/PlayState.hx",142,0xa82031c9)
HX_LOCAL_STACK_FRAME(_hx_pos_a31d76c4ca3ed2cf_1673_boot,"meta.state.PlayState","boot",0x4b4234e9,"meta.state.PlayState.boot","meta/state/PlayState.hx",1673,0xa82031c9)
namespace meta{
namespace state{

void PlayState_obj::__construct( ::flixel::addons::transition::TransitionData TransIn, ::flixel::addons::transition::TransitionData TransOut){
            	HX_STACKFRAME(&_hx_pos_a31d76c4ca3ed2cf_48_new)
HXLINE(1456)		this->endSongEvent = false;
HXLINE(1101)		int color = ::flixel::util::_FlxColor::FlxColor_Impl__obj::_new(null());
HXDLIN(1101)		{
HXLINE(1101)			color = (color & -16711681);
HXDLIN(1101)			color = (color | 13369344);
            		}
HXDLIN(1101)		{
HXLINE(1101)			color = (color & -65281);
HXDLIN(1101)			color = (color | 16896);
            		}
HXDLIN(1101)		{
HXLINE(1101)			color = (color & -256);
HXDLIN(1101)			color = (color | 66);
            		}
HXDLIN(1101)		{
HXLINE(1101)			color = (color & 16777215);
HXDLIN(1101)			color = (color | -16777216);
            		}
HXDLIN(1101)		this->createdColor = color;
HXLINE(1068)		this->ratingTiming = HX_("",00,00,00,00);
HXLINE(1066)		this->animationsPlay = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 385)		this->staticDisplace = 0;
HXLINE( 144)		this->allUIs = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 124)		this->storyDifficultyText = HX_("",00,00,00,00);
HXLINE( 116)		this->camDisplaceY = ((Float)0);
HXLINE( 115)		this->camDisplaceX = ((Float)0);
HXLINE( 109)		this->songTime = ((Float)0);
HXLINE( 108)		this->lastReportedPlayheadPosition = 0;
HXLINE( 107)		this->previousFrameTime = 0;
HXLINE( 105)		this->canPause = true;
HXLINE( 103)		this->inCutscene = false;
HXLINE( 102)		this->startedCountdown = false;
HXLINE( 101)		this->paused = false;
HXLINE( 100)		this->startingSong = false;
HXLINE(  98)		this->generatedMusic = false;
HXLINE(  91)		this->gfSpeed = 1;
HXLINE(  90)		this->curSong = HX_("",00,00,00,00);
HXLINE(  80)		this->curSection = 0;
HXLINE(  76)		this->numberOfKeys = 4;
HXLINE(  73)		this->allSicks = true;
HXLINE(  72)		this->ratingArray = ::Array_obj< ::String >::__new(0);
HXLINE(  71)		this->unspawnNotes = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(  48)		super::__construct(TransIn,TransOut);
            	}

Dynamic PlayState_obj::__CreateEmpty() { return new PlayState_obj; }

void *PlayState_obj::_hx_vtable = 0;

Dynamic PlayState_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< PlayState_obj > _hx_result = new PlayState_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool PlayState_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x2f064378) {
		if (inClassId<=(int)0x0f8d4977) {
			if (inClassId<=(int)0x0225b2d9) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x0225b2d9;
			} else {
				return inClassId==(int)0x0f8d4977;
			}
		} else {
			return inClassId==(int)0x23a57bae || inClassId==(int)0x2f064378;
		}
	} else {
		if (inClassId<=(int)0x7c795c9f) {
			if (inClassId<=(int)0x62817b24) {
				return inClassId==(int)0x3acadfb1 || inClassId==(int)0x62817b24;
			} else {
				return inClassId==(int)0x7c795c9f;
			}
		} else {
			return inClassId==(int)0x7ccf8994;
		}
	}
}

void PlayState_obj::create(){
            	HX_GC_STACKFRAME(&_hx_pos_a31d76c4ca3ed2cf_153_create)
HXLINE( 154)		this->super::create();
HXLINE( 157)		::meta::state::PlayState_obj::songScore = 0;
HXLINE( 158)		::meta::state::PlayState_obj::combo = 0;
HXLINE( 159)		::meta::state::PlayState_obj::health = ( (Float)(1) );
HXLINE( 160)		::meta::state::PlayState_obj::misses = 0;
HXLINE( 162)		::meta::state::PlayState_obj::lastCombo = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 164)		::meta::state::PlayState_obj::defaultCamZoom = ((Float)1.05);
HXLINE( 165)		::meta::state::PlayState_obj::forceZoom = ::Array_obj< Float >::fromData( _hx_array_data_5d796b17_3,4);
HXLINE( 167)		::meta::data::Timings_obj::callAccuracy();
HXLINE( 169)		::meta::state::PlayState_obj::assetModifier = HX_("base",11,e8,10,41);
HXLINE( 170)		::meta::state::PlayState_obj::changeableSkin = HX_("default",c1,d8,c3,9b);
HXLINE( 173)		::meta::state::PlayState_obj::resetMusic();
HXLINE( 174)		if (::hx::IsNotNull( ::flixel::FlxG_obj::sound->music )) {
HXLINE( 175)			 ::flixel::_hx_system::FlxSound _this = ::flixel::FlxG_obj::sound->music;
HXDLIN( 175)			_this->cleanup(_this->autoDestroy,true);
            		}
HXLINE( 178)		::meta::state::PlayState_obj::camGame =  ::flixel::FlxCamera_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null());
HXLINE( 181)		::meta::state::PlayState_obj::camHUD =  ::flixel::FlxCamera_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null());
HXLINE( 182)		{
HXLINE( 182)			 ::flixel::FlxCamera _hx_tmp = ::meta::state::PlayState_obj::camHUD;
HXDLIN( 182)			_hx_tmp->bgColor = (_hx_tmp->bgColor & 16777215);
HXDLIN( 182)			 ::flixel::FlxCamera _hx_tmp1 = ::meta::state::PlayState_obj::camHUD;
HXDLIN( 182)			_hx_tmp1->bgColor = (_hx_tmp1->bgColor | 0);
            		}
HXLINE( 184)		::flixel::FlxG_obj::cameras->reset(::meta::state::PlayState_obj::camGame);
HXLINE( 185)		::flixel::FlxG_obj::cameras->add(::meta::state::PlayState_obj::camHUD).StaticCast<  ::flixel::FlxCamera >();
HXLINE( 186)		this->allUIs->push(::meta::state::PlayState_obj::camHUD);
HXLINE( 187)		::flixel::FlxCamera_obj::defaultCameras = ::Array_obj< ::Dynamic>::__new(1)->init(0,::meta::state::PlayState_obj::camGame);
HXLINE( 190)		if (::hx::IsNull( ::meta::state::PlayState_obj::SONG )) {
HXLINE( 191)			::meta::state::PlayState_obj::SONG = ::meta::data::Song_obj::loadFromJson(HX_("test",52,c8,f9,4c),HX_("test",52,c8,f9,4c));
            		}
HXLINE( 193)		::meta::data::Conductor_obj::mapBPMChanges(::meta::state::PlayState_obj::SONG);
HXLINE( 194)		::meta::data::Conductor_obj::changeBPM(( (Float)(::meta::state::PlayState_obj::SONG->__Field(HX_("bpm",df,be,4a,00),::hx::paccDynamic)) ),null());
HXLINE( 198)		::meta::state::PlayState_obj::determinedChartType = HX_("FNF",fe,61,35,00);
HXLINE( 203)		::meta::state::PlayState_obj::curStage = HX_("",00,00,00,00);
HXLINE( 205)		if (::hx::IsNotNull( ::meta::state::PlayState_obj::SONG->__Field(HX_("stage",be,6a,0b,84),::hx::paccDynamic) )) {
HXLINE( 206)			::meta::state::PlayState_obj::curStage = ( (::String)(::meta::state::PlayState_obj::SONG->__Field(HX_("stage",be,6a,0b,84),::hx::paccDynamic)) );
            		}
HXLINE( 209)		this->displayRating(HX_("sick",be,8c,53,4c),HX_("early",a3,28,ed,67),true);
HXLINE( 210)		this->popUpCombo(true);
HXLINE( 212)		this->stageBuild =  ::gameObjects::Stage_obj::__alloc( HX_CTX ,::meta::state::PlayState_obj::curStage);
HXLINE( 213)		this->add(this->stageBuild);
HXLINE( 227)		::meta::state::PlayState_obj::gf =  ::gameObjects::Character_obj::__alloc( HX_CTX ,( (Float)(400) ),( (Float)(130) ),this->stageBuild->returnGFtype(::meta::state::PlayState_obj::curStage),null());
HXLINE( 228)		::meta::state::PlayState_obj::gf->scrollFactor->set(((Float)0.95),((Float)0.95));
HXLINE( 230)		::meta::state::PlayState_obj::dadOpponent =  ::gameObjects::Character_obj::__alloc( HX_CTX ,( (Float)(100) ),( (Float)(100) ),( (::String)(::meta::state::PlayState_obj::SONG->__Field(HX_("player2",b1,09,15,8a),::hx::paccDynamic)) ),null());
HXLINE( 231)		::meta::state::PlayState_obj::boyfriend =  ::gameObjects::Boyfriend_obj::__alloc( HX_CTX ,( (Float)(770) ),( (Float)(450) ),( (::String)(::meta::state::PlayState_obj::SONG->__Field(HX_("player1",b0,09,15,8a),::hx::paccDynamic)) ));
HXLINE( 234)		Float camPos = (::meta::state::PlayState_obj::gf->getMidpoint(null())->x - ( (Float)(100) ));
HXDLIN( 234)		 ::flixel::math::FlxPoint camPos1 =  ::flixel::math::FlxPoint_obj::__alloc( HX_CTX ,camPos,(::meta::state::PlayState_obj::boyfriend->getMidpoint(null())->y - ( (Float)(100) )));
HXLINE( 238)		this->stageBuild->dadPosition(::meta::state::PlayState_obj::curStage,::meta::state::PlayState_obj::dadOpponent,::meta::state::PlayState_obj::gf,camPos1,( (::String)(::meta::state::PlayState_obj::SONG->__Field(HX_("player2",b1,09,15,8a),::hx::paccDynamic)) ));
HXLINE( 243)		::meta::state::PlayState_obj::changeableSkin = ( (::String)(::Init_obj::trueSettings->get(HX_("UI Skin",e9,97,ae,a2))) );
HXLINE( 244)		bool _hx_tmp2;
HXDLIN( 244)		if (::StringTools_obj::startsWith(::meta::state::PlayState_obj::curStage,HX_("school",74,b8,c8,40))) {
HXLINE( 244)			_hx_tmp2 = (::meta::state::PlayState_obj::determinedChartType == HX_("FNF",fe,61,35,00));
            		}
            		else {
HXLINE( 244)			_hx_tmp2 = false;
            		}
HXDLIN( 244)		if (_hx_tmp2) {
HXLINE( 245)			::meta::state::PlayState_obj::assetModifier = HX_("pixel",86,c6,a3,c2);
            		}
HXLINE( 250)		this->stageBuild->repositionPlayers(::meta::state::PlayState_obj::curStage,::meta::state::PlayState_obj::boyfriend,::meta::state::PlayState_obj::dadOpponent,::meta::state::PlayState_obj::gf);
HXLINE( 253)		this->add(::meta::state::PlayState_obj::gf);
HXLINE( 256)		if ((::meta::state::PlayState_obj::curStage == HX_("highway",0d,b3,8f,73))) {
HXLINE( 257)			this->add(this->stageBuild->limo);
            		}
HXLINE( 259)		this->add(::meta::state::PlayState_obj::dadOpponent);
HXLINE( 260)		this->add(::meta::state::PlayState_obj::boyfriend);
HXLINE( 262)		this->add(this->stageBuild->foreground);
HXLINE( 265)		::meta::state::PlayState_obj::dadOpponent->dance(null());
HXLINE( 266)		::meta::state::PlayState_obj::gf->dance(null());
HXLINE( 267)		::meta::state::PlayState_obj::boyfriend->dance(null());
HXLINE( 270)		::meta::data::Conductor_obj::songPosition = -((::meta::data::Conductor_obj::crochet * ( (Float)(4) )));
HXLINE( 274)		 ::flixel::FlxSprite darknessBG =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,(( (Float)(::flixel::FlxG_obj::width) ) * ((Float)-0.5)),(( (Float)(::flixel::FlxG_obj::height) ) * ((Float)-0.5)),null());
HXDLIN( 274)		 ::flixel::FlxSprite darknessBG1 = darknessBG->makeGraphic((::flixel::FlxG_obj::width * 2),(::flixel::FlxG_obj::height * 2),-16777216,null(),null());
HXLINE( 275)		darknessBG1->set_alpha((( (Float)(::Init_obj::trueSettings->get(HX_("Stage Darkness",ef,05,99,24))) ) * ((Float)0.01)));
HXLINE( 276)		darknessBG1->scrollFactor->set(0,0);
HXLINE( 277)		this->add(darknessBG1);
HXLINE( 280)		::meta::state::PlayState_obj::strumLines =  ::flixel::group::FlxTypedGroup_obj::__alloc( HX_CTX ,null());
HXLINE( 283)		this->generateSong(( (::String)(::meta::state::PlayState_obj::SONG->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic)) ));
HXLINE( 286)		camPos1->set((::meta::state::PlayState_obj::gf->x + (( (Float)(::meta::state::PlayState_obj::gf->frameWidth) ) / ( (Float)(2) ))),(::meta::state::PlayState_obj::gf->y + (( (Float)(::meta::state::PlayState_obj::gf->frameHeight) ) / ( (Float)(2) ))));
HXLINE( 289)		this->camFollow =  ::flixel::FlxObject_obj::__alloc( HX_CTX ,0,0,1,1);
HXLINE( 290)		this->camFollow->setPosition(camPos1->x,camPos1->y);
HXLINE( 292)		if (::hx::IsNotNull( ::meta::state::PlayState_obj::prevCamFollow )) {
HXLINE( 293)			this->camFollow = ::meta::state::PlayState_obj::prevCamFollow;
HXLINE( 294)			::meta::state::PlayState_obj::prevCamFollow = null();
            		}
HXLINE( 297)		this->add(this->camFollow);
HXLINE( 300)		Float camLerp = ::Main_obj::framerateAdjust(((Float)0.04));
HXLINE( 301)		::flixel::FlxG_obj::camera->follow(this->camFollow,::flixel::FlxCameraFollowStyle_obj::LOCKON_dyn(),camLerp);
HXLINE( 302)		::flixel::FlxG_obj::camera->set_zoom(::meta::state::PlayState_obj::defaultCamZoom);
HXLINE( 303)		{
HXLINE( 303)			 ::flixel::FlxCamera _this = ::flixel::FlxG_obj::camera;
HXDLIN( 303)			 ::flixel::math::FlxPoint point = this->camFollow->getPosition(null());
HXDLIN( 303)			_this->scroll->set((point->x - (( (Float)(_this->width) ) * ((Float)0.5))),(point->y - (( (Float)(_this->height) ) * ((Float)0.5))));
HXDLIN( 303)			if (point->_weak) {
HXLINE( 303)				point->put();
            			}
            		}
HXLINE( 305)		{
HXLINE( 305)			 ::flixel::math::FlxRect _this1 = ::flixel::FlxG_obj::worldBounds;
HXDLIN( 305)			_this1->x = ( (Float)(0) );
HXDLIN( 305)			_this1->y = ( (Float)(0) );
HXDLIN( 305)			_this1->width = ( (Float)(::flixel::FlxG_obj::width) );
HXDLIN( 305)			_this1->height = ( (Float)(::flixel::FlxG_obj::height) );
            		}
HXLINE( 308)		this->startingSong = true;
HXLINE( 309)		this->startedCountdown = true;
HXLINE( 312)		Float placement = (( (Float)(::flixel::FlxG_obj::width) ) / ( (Float)(2) ));
HXLINE( 313)		Float _hx_tmp3 = (placement - (( (Float)(::flixel::FlxG_obj::width) ) / ( (Float)(4) )));
HXDLIN( 313)		 ::gameObjects::Character _hx_tmp4 = ::meta::state::PlayState_obj::dadOpponent;
HXDLIN( 313)		this->dadStrums =  ::gameObjects::userInterface::notes::Strumline_obj::__alloc( HX_CTX ,_hx_tmp3,::hx::ObjectPtr<OBJ_>(this),_hx_tmp4,false,true,false,4,::Init_obj::trueSettings->get(HX_("Downscroll",0f,4a,85,46)),null());
HXLINE( 314)		 ::gameObjects::userInterface::notes::Strumline _hx_tmp5 = this->dadStrums;
HXDLIN( 314)		_hx_tmp5->set_visible(!(( (bool)(::Init_obj::trueSettings->get(HX_("Centered Notefield",dc,a5,a6,0e))) )));
HXLINE( 315)		Float _hx_tmp6;
HXDLIN( 315)		if (!(( (bool)(::Init_obj::trueSettings->get(HX_("Centered Notefield",dc,a5,a6,0e))) ))) {
HXLINE( 315)			_hx_tmp6 = (( (Float)(::flixel::FlxG_obj::width) ) / ( (Float)(4) ));
            		}
            		else {
HXLINE( 315)			_hx_tmp6 = ( (Float)(0) );
            		}
HXDLIN( 315)		 ::gameObjects::Boyfriend _hx_tmp7 = ::meta::state::PlayState_obj::boyfriend;
HXDLIN( 315)		this->boyfriendStrums =  ::gameObjects::userInterface::notes::Strumline_obj::__alloc( HX_CTX ,(placement + _hx_tmp6),::hx::ObjectPtr<OBJ_>(this),_hx_tmp7,true,false,true,4,::Init_obj::trueSettings->get(HX_("Downscroll",0f,4a,85,46)),null());
HXLINE( 318)		::meta::state::PlayState_obj::strumLines->add(this->dadStrums).StaticCast<  ::gameObjects::userInterface::notes::Strumline >();
HXLINE( 319)		::meta::state::PlayState_obj::strumLines->add(this->boyfriendStrums).StaticCast<  ::gameObjects::userInterface::notes::Strumline >();
HXLINE( 322)		::meta::state::PlayState_obj::strumHUD = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 323)		{
HXLINE( 323)			int _g = 0;
HXDLIN( 323)			int _g1 = ::meta::state::PlayState_obj::strumLines->length;
HXDLIN( 323)			while((_g < _g1)){
HXLINE( 323)				_g = (_g + 1);
HXDLIN( 323)				int i = (_g - 1);
HXLINE( 326)				::meta::state::PlayState_obj::strumHUD[i] =  ::flixel::FlxCamera_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null());
HXLINE( 327)				{
HXLINE( 327)					 ::flixel::FlxCamera _hx_tmp = ::meta::state::PlayState_obj::strumHUD->__get(i).StaticCast<  ::flixel::FlxCamera >();
HXDLIN( 327)					_hx_tmp->bgColor = (_hx_tmp->bgColor & 16777215);
HXDLIN( 327)					 ::flixel::FlxCamera _hx_tmp1 = ::meta::state::PlayState_obj::strumHUD->__get(i).StaticCast<  ::flixel::FlxCamera >();
HXDLIN( 327)					_hx_tmp1->bgColor = (_hx_tmp1->bgColor | 0);
            				}
HXLINE( 329)				::meta::state::PlayState_obj::strumHUD->__get(i).StaticCast<  ::flixel::FlxCamera >()->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,::meta::state::PlayState_obj::camHUD));
HXLINE( 330)				this->allUIs->push(::meta::state::PlayState_obj::strumHUD->__get(i).StaticCast<  ::flixel::FlxCamera >());
HXLINE( 331)				::flixel::FlxG_obj::cameras->add(::meta::state::PlayState_obj::strumHUD->__get(i).StaticCast<  ::flixel::FlxCamera >()).StaticCast<  ::flixel::FlxCamera >();
HXLINE( 333)				Dynamic( ::meta::state::PlayState_obj::strumLines->members->__get(i)).StaticCast<  ::gameObjects::userInterface::notes::Strumline >()->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,::meta::state::PlayState_obj::strumHUD->__get(i).StaticCast<  ::flixel::FlxCamera >()));
            			}
            		}
HXLINE( 335)		this->add(::meta::state::PlayState_obj::strumLines);
HXLINE( 337)		::meta::state::PlayState_obj::uiHUD =  ::gameObjects::userInterface::ClassHUD_obj::__alloc( HX_CTX );
HXLINE( 338)		this->add(::meta::state::PlayState_obj::uiHUD);
HXLINE( 339)		::meta::state::PlayState_obj::uiHUD->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,::meta::state::PlayState_obj::camHUD));
HXLINE( 343)		::meta::state::PlayState_obj::dialogueHUD =  ::flixel::FlxCamera_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null());
HXLINE( 344)		{
HXLINE( 344)			 ::flixel::FlxCamera _hx_tmp8 = ::meta::state::PlayState_obj::dialogueHUD;
HXDLIN( 344)			_hx_tmp8->bgColor = (_hx_tmp8->bgColor & 16777215);
HXDLIN( 344)			 ::flixel::FlxCamera _hx_tmp9 = ::meta::state::PlayState_obj::dialogueHUD;
HXDLIN( 344)			_hx_tmp9->bgColor = (_hx_tmp9->bgColor | 0);
            		}
HXLINE( 345)		::flixel::FlxG_obj::cameras->add(::meta::state::PlayState_obj::dialogueHUD).StaticCast<  ::flixel::FlxCamera >();
HXLINE( 348)		if (!(::meta::state::PlayState_obj::skipCutscenes())) {
HXLINE( 349)			this->songIntroCutscene();
            		}
            		else {
HXLINE( 351)			this->startCountdown();
            		}
            	}


void PlayState_obj::update(Float elapsed){
            	HX_GC_STACKFRAME(&_hx_pos_a31d76c4ca3ed2cf_388_update)
HXLINE( 389)		this->stageBuild->stageUpdateConstant(elapsed,::meta::state::PlayState_obj::boyfriend,::meta::state::PlayState_obj::gf,::meta::state::PlayState_obj::dadOpponent);
HXLINE( 391)		this->super::update(elapsed);
HXLINE( 393)		::flixel::FlxG_obj::camera->set_followLerp((elapsed * ( (Float)(2) )));
HXLINE( 395)		if ((::meta::state::PlayState_obj::health > 2)) {
HXLINE( 396)			::meta::state::PlayState_obj::health = ( (Float)(2) );
            		}
HXLINE( 399)		bool _hx_tmp;
HXDLIN( 399)		if (::hx::IsNotNull( this->dialogueBox )) {
HXLINE( 399)			_hx_tmp = this->dialogueBox->alive;
            		}
            		else {
HXLINE( 399)			_hx_tmp = false;
            		}
HXDLIN( 399)		if (_hx_tmp) {
HXLINE( 401)			 ::flixel::input::keyboard::FlxKeyList _this = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 401)			if (_this->keyManager->checkStatus(16,_this->status)) {
HXLINE( 402)				this->dialogueBox->closeDialog();
            			}
HXLINE( 405)			bool _hx_tmp;
HXDLIN( 405)			if (::meta::data::PlayerSettings_obj::player1->controls->_accept->check()) {
HXLINE( 405)				_hx_tmp = this->dialogueBox->textStarted;
            			}
            			else {
HXLINE( 405)				_hx_tmp = false;
            			}
HXDLIN( 405)			if (_hx_tmp) {
HXLINE( 407)				 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp = ::flixel::FlxG_obj::sound;
HXDLIN( 407)				_hx_tmp->play(::Paths_obj::sound(HX_("cancelMenu",39,a4,43,b7),null()),null(),null(),null(),null(),null());
HXLINE( 408)				 ::gameObjects::userInterface::DialogueBox _hx_tmp1 = this->dialogueBox;
HXDLIN( 408)				_hx_tmp1->curPage = (_hx_tmp1->curPage + 1);
HXLINE( 410)				if ((this->dialogueBox->curPage == ( (::Array< ::Dynamic>)(this->dialogueBox->dialogueData->__Field(HX_("dialogue",18,2d,94,a7),::hx::paccDynamic)) )->length)) {
HXLINE( 411)					this->dialogueBox->closeDialog();
            				}
            				else {
HXLINE( 413)					this->dialogueBox->updateDialog(null());
            				}
            			}
            		}
HXLINE( 418)		if (!(this->inCutscene)) {
HXLINE( 420)			bool _hx_tmp;
HXDLIN( 420)			bool _hx_tmp1;
HXDLIN( 420)			 ::flixel::input::keyboard::FlxKeyList _this = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 420)			if (_this->keyManager->checkStatus(13,_this->status)) {
HXLINE( 420)				_hx_tmp1 = this->startedCountdown;
            			}
            			else {
HXLINE( 420)				_hx_tmp1 = false;
            			}
HXDLIN( 420)			if (_hx_tmp1) {
HXLINE( 420)				_hx_tmp = this->canPause;
            			}
            			else {
HXLINE( 420)				_hx_tmp = false;
            			}
HXDLIN( 420)			if (_hx_tmp) {
HXLINE( 423)				this->persistentUpdate = false;
HXLINE( 424)				this->persistentDraw = true;
HXLINE( 425)				this->paused = true;
HXLINE( 428)				Float _hx_tmp = ::meta::state::PlayState_obj::boyfriend->getScreenPosition(null(),null())->x;
HXDLIN( 428)				this->openSubState( ::meta::subState::PauseSubState_obj::__alloc( HX_CTX ,_hx_tmp,::meta::state::PlayState_obj::boyfriend->getScreenPosition(null(),null())->y));
HXLINE( 429)				::meta::state::PlayState_obj::updateRPC(true);
            			}
HXLINE( 433)			if (!(::meta::state::PlayState_obj::isStoryMode)) {
HXLINE( 436)				bool _hx_tmp;
HXDLIN( 436)				 ::flixel::input::keyboard::FlxKeyList _this = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 436)				if (_this->keyManager->checkStatus(55,_this->status)) {
HXLINE( 436)					_hx_tmp = !(this->startingSong);
            				}
            				else {
HXLINE( 436)					_hx_tmp = false;
            				}
HXDLIN( 436)				if (_hx_tmp) {
HXLINE( 438)					::meta::state::PlayState_obj::resetMusic();
HXLINE( 439)					if (( (bool)(::Init_obj::trueSettings->get(HX_("Use Forever Chart Editor",c1,46,1b,e4))) )) {
HXLINE( 440)						::Main_obj::switchState(::hx::ObjectPtr<OBJ_>(this), ::meta::state::charting::ChartingState_obj::__alloc( HX_CTX ,null(),null()));
            					}
            					else {
HXLINE( 442)						::Main_obj::switchState(::hx::ObjectPtr<OBJ_>(this), ::meta::state::charting::OriginalChartingState_obj::__alloc( HX_CTX ,null(),null()));
            					}
            				}
            			}
HXLINE( 447)			if (this->startingSong) {
HXLINE( 449)				if (this->startedCountdown) {
HXLINE( 451)					 ::Dynamic _hx_tmp = ::hx::ClassOf< ::meta::data::Conductor >();
HXDLIN( 451)					::meta::data::Conductor_obj::songPosition = (::meta::data::Conductor_obj::songPosition + (elapsed * ( (Float)(1000) )));
HXLINE( 452)					if ((::meta::data::Conductor_obj::songPosition >= 0)) {
HXLINE( 453)						this->startSong();
            					}
            				}
            			}
            			else {
HXLINE( 459)				 ::Dynamic _hx_tmp = ::hx::ClassOf< ::meta::data::Conductor >();
HXDLIN( 459)				::meta::data::Conductor_obj::songPosition = (::meta::data::Conductor_obj::songPosition + (elapsed * ( (Float)(1000) )));
HXLINE( 461)				if (!(this->paused)) {
HXLINE( 463)					 ::meta::state::PlayState _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 463)					_hx_tmp->songTime = (_hx_tmp->songTime + (::flixel::FlxG_obj::game->ticks - this->previousFrameTime));
HXLINE( 464)					this->previousFrameTime = ::flixel::FlxG_obj::game->ticks;
HXLINE( 467)					if ((::meta::data::Conductor_obj::lastSongPos != ::meta::data::Conductor_obj::songPosition)) {
HXLINE( 469)						this->songTime = ((this->songTime + ::meta::data::Conductor_obj::songPosition) / ( (Float)(2) ));
HXLINE( 470)						::meta::data::Conductor_obj::lastSongPos = ::meta::data::Conductor_obj::songPosition;
            					}
            				}
            			}
HXLINE( 483)			bool _hx_tmp2;
HXDLIN( 483)			if (this->generatedMusic) {
HXLINE( 483)				_hx_tmp2 = ::hx::IsNotNull(  ::Dynamic(::meta::state::PlayState_obj::SONG->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(::Std_obj::_hx_int((( (Float)(this->curStep) ) / ( (Float)(16) )))) );
            			}
            			else {
HXLINE( 483)				_hx_tmp2 = false;
            			}
HXDLIN( 483)			if (_hx_tmp2) {
HXLINE( 485)				if (!(( (bool)( ::Dynamic(::meta::state::PlayState_obj::SONG->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(::Std_obj::_hx_int((( (Float)(this->curStep) ) / ( (Float)(16) ))))->__Field(HX_("mustHitSection",3b,5f,87,62),::hx::paccDynamic)) ))) {
HXLINE( 487)					 ::gameObjects::Character _hx_char = ::meta::state::PlayState_obj::dadOpponent;
HXLINE( 489)					Float getCenterX = (_hx_char->getMidpoint(null())->x + 150);
HXLINE( 490)					Float getCenterY = (_hx_char->getMidpoint(null())->y - ( (Float)(100) ));
HXLINE( 491)					::String _hx_switch_0 = ::meta::state::PlayState_obj::dadOpponent->curCharacter;
            					if (  (_hx_switch_0==HX_("mom",cb,16,53,00)) ){
HXLINE( 494)						getCenterY = _hx_char->getMidpoint(null())->y;
HXDLIN( 494)						goto _hx_goto_4;
            					}
            					if (  (_hx_switch_0==HX_("senpai",3c,df,8d,6b)) ){
HXLINE( 496)						getCenterY = (_hx_char->getMidpoint(null())->y - ( (Float)(430) ));
HXLINE( 497)						getCenterX = (_hx_char->getMidpoint(null())->x - ( (Float)(100) ));
HXLINE( 495)						goto _hx_goto_4;
            					}
            					if (  (_hx_switch_0==HX_("senpai-angry",10,7a,b8,25)) ){
HXLINE( 499)						getCenterY = (_hx_char->getMidpoint(null())->y - ( (Float)(430) ));
HXLINE( 500)						getCenterX = (_hx_char->getMidpoint(null())->x - ( (Float)(100) ));
HXLINE( 498)						goto _hx_goto_4;
            					}
            					_hx_goto_4:;
HXLINE( 503)					this->camFollow->setPosition((getCenterX + (this->camDisplaceX * ( (Float)(8) ))),getCenterY);
HXLINE( 505)					if ((_hx_char->curCharacter == HX_("mom",cb,16,53,00))) {
HXLINE( 506)						::meta::state::PlayState_obj::vocals->set_volume(( (Float)(1) ));
            					}
            				}
            				else {
HXLINE( 517)					 ::gameObjects::Boyfriend _hx_char = ::meta::state::PlayState_obj::boyfriend;
HXLINE( 519)					Float getCenterX = (_hx_char->getMidpoint(null())->x - ( (Float)(100) ));
HXLINE( 520)					Float getCenterY = (_hx_char->getMidpoint(null())->y - ( (Float)(100) ));
HXLINE( 521)					::String _hx_switch_1 = ::meta::state::PlayState_obj::curStage;
            					if (  (_hx_switch_1==HX_("limo",1f,17,b3,47)) ){
HXLINE( 524)						getCenterX = (_hx_char->getMidpoint(null())->x - ( (Float)(300) ));
HXDLIN( 524)						goto _hx_goto_5;
            					}
            					if (  (_hx_switch_1==HX_("mall",d4,3a,56,48)) ){
HXLINE( 526)						getCenterY = (_hx_char->getMidpoint(null())->y - ( (Float)(200) ));
HXDLIN( 526)						goto _hx_goto_5;
            					}
            					if (  (_hx_switch_1==HX_("school",74,b8,c8,40)) ){
HXLINE( 528)						getCenterX = (_hx_char->getMidpoint(null())->x - ( (Float)(200) ));
HXLINE( 529)						getCenterY = (_hx_char->getMidpoint(null())->y - ( (Float)(200) ));
HXLINE( 527)						goto _hx_goto_5;
            					}
            					if (  (_hx_switch_1==HX_("schoolEvil",28,a1,f5,f7)) ){
HXLINE( 531)						getCenterX = (_hx_char->getMidpoint(null())->x - ( (Float)(200) ));
HXLINE( 532)						getCenterY = (_hx_char->getMidpoint(null())->y - ( (Float)(200) ));
HXLINE( 530)						goto _hx_goto_5;
            					}
            					_hx_goto_5:;
HXLINE( 535)					this->camFollow->setPosition((getCenterX + (this->camDisplaceX * ( (Float)(8) ))),getCenterY);
            				}
            			}
HXLINE( 546)			Float easeLerp = ((Float)0.95);
HXLINE( 548)			Float a = (::meta::state::PlayState_obj::defaultCamZoom + ::meta::state::PlayState_obj::forceZoom->__get(0));
HXDLIN( 548)			::flixel::FlxG_obj::camera->set_zoom((a + (easeLerp * (::flixel::FlxG_obj::camera->zoom - a))));
HXLINE( 549)			{
HXLINE( 549)				int _g = 0;
HXDLIN( 549)				::Array< ::Dynamic> _g1 = this->allUIs;
HXDLIN( 549)				while((_g < _g1->length)){
HXLINE( 549)					 ::flixel::FlxCamera hud = _g1->__get(_g).StaticCast<  ::flixel::FlxCamera >();
HXDLIN( 549)					_g = (_g + 1);
HXLINE( 550)					Float a = (1 + ::meta::state::PlayState_obj::forceZoom->__get(1));
HXDLIN( 550)					hud->set_zoom((a + (easeLerp * (hud->zoom - a))));
            				}
            			}
HXLINE( 553)			Float a1 = ::meta::state::PlayState_obj::forceZoom->__get(2);
HXDLIN( 553)			::flixel::FlxG_obj::camera->set_angle((a1 + (easeLerp * (::flixel::FlxG_obj::camera->angle - a1))));
HXLINE( 554)			{
HXLINE( 554)				int _g2 = 0;
HXDLIN( 554)				::Array< ::Dynamic> _g3 = this->allUIs;
HXDLIN( 554)				while((_g2 < _g3->length)){
HXLINE( 554)					 ::flixel::FlxCamera hud = _g3->__get(_g2).StaticCast<  ::flixel::FlxCamera >();
HXDLIN( 554)					_g2 = (_g2 + 1);
HXLINE( 555)					Float a = ::meta::state::PlayState_obj::forceZoom->__get(3);
HXDLIN( 555)					hud->set_angle((a + (easeLerp * (hud->angle - a))));
            				}
            			}
HXLINE( 557)			bool _hx_tmp3;
HXDLIN( 557)			if ((::meta::state::PlayState_obj::health <= 0)) {
HXLINE( 557)				_hx_tmp3 = this->startedCountdown;
            			}
            			else {
HXLINE( 557)				_hx_tmp3 = false;
            			}
HXDLIN( 557)			if (_hx_tmp3) {
HXLINE( 560)				this->persistentUpdate = false;
HXLINE( 561)				this->persistentDraw = false;
HXLINE( 562)				this->paused = true;
HXLINE( 564)				::meta::state::PlayState_obj::resetMusic();
HXLINE( 566)				Float _hx_tmp = ::meta::state::PlayState_obj::boyfriend->getScreenPosition(null(),null())->x;
HXDLIN( 566)				this->openSubState( ::meta::subState::GameOverSubstate_obj::__alloc( HX_CTX ,_hx_tmp,::meta::state::PlayState_obj::boyfriend->getScreenPosition(null(),null())->y));
            			}
HXLINE( 572)			bool _hx_tmp4;
HXDLIN( 572)			if (::hx::IsNotNull( this->unspawnNotes->__get(0).StaticCast<  ::gameObjects::userInterface::notes::Note >() )) {
HXLINE( 572)				_hx_tmp4 = ((this->unspawnNotes->__get(0).StaticCast<  ::gameObjects::userInterface::notes::Note >()->strumTime - ::meta::data::Conductor_obj::songPosition) < 3500);
            			}
            			else {
HXLINE( 572)				_hx_tmp4 = false;
            			}
HXDLIN( 572)			if (_hx_tmp4) {
HXLINE( 574)				 ::gameObjects::userInterface::notes::Note dunceNote = this->unspawnNotes->__get(0).StaticCast<  ::gameObjects::userInterface::notes::Note >();
HXLINE( 576)				int _hx_tmp;
HXDLIN( 576)				if (dunceNote->mustPress) {
HXLINE( 576)					_hx_tmp = 4;
            				}
            				else {
HXLINE( 576)					_hx_tmp = 0;
            				}
HXDLIN( 576)				Dynamic( ::meta::state::PlayState_obj::strumLines->members->__get(::Math_obj::floor((( (Float)((dunceNote->noteData + _hx_tmp)) ) / ( (Float)(this->numberOfKeys) ))))).StaticCast<  ::gameObjects::userInterface::notes::Strumline >()->push(dunceNote);
HXLINE( 577)				::Array< ::Dynamic> _hx_tmp1 = this->unspawnNotes;
HXDLIN( 577)				_hx_tmp1->removeRange(this->unspawnNotes->indexOf(dunceNote,null()),1);
            			}
HXLINE( 580)			this->noteCalls();
            		}
            	}


void PlayState_obj::noteCalls(){
            	HX_GC_STACKFRAME(&_hx_pos_a31d76c4ca3ed2cf_586_noteCalls)
HXLINE( 585)		 ::meta::state::PlayState _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE( 588)		bool up = ::meta::data::PlayerSettings_obj::player1->controls->_up->check();
HXLINE( 589)		bool right = ::meta::data::PlayerSettings_obj::player1->controls->_right->check();
HXLINE( 590)		bool down = ::meta::data::PlayerSettings_obj::player1->controls->_down->check();
HXLINE( 591)		bool left = ::meta::data::PlayerSettings_obj::player1->controls->_left->check();
HXLINE( 593)		bool upP = ::meta::data::PlayerSettings_obj::player1->controls->_upP->check();
HXLINE( 594)		bool rightP = ::meta::data::PlayerSettings_obj::player1->controls->_rightP->check();
HXLINE( 595)		bool downP = ::meta::data::PlayerSettings_obj::player1->controls->_downP->check();
HXLINE( 596)		bool leftP = ::meta::data::PlayerSettings_obj::player1->controls->_leftP->check();
HXLINE( 598)		bool upR = ::meta::data::PlayerSettings_obj::player1->controls->_upR->check();
HXLINE( 599)		bool rightR = ::meta::data::PlayerSettings_obj::player1->controls->_rightR->check();
HXLINE( 600)		bool downR = ::meta::data::PlayerSettings_obj::player1->controls->_downR->check();
HXLINE( 601)		bool leftR = ::meta::data::PlayerSettings_obj::player1->controls->_leftR->check();
HXLINE( 603)		::Array< bool > holdControls = ::Array_obj< bool >::__new(4)->init(0,left)->init(1,down)->init(2,up)->init(3,right);
HXLINE( 604)		::Array< bool > pressControls = ::Array_obj< bool >::__new(4)->init(0,leftP)->init(1,downP)->init(2,upP)->init(3,rightP);
HXLINE( 605)		::Array< bool > releaseControls = ::Array_obj< bool >::__new(4)->init(0,leftR)->init(1,downR)->init(2,upR)->init(3,rightR);
HXLINE( 608)		{
HXLINE( 608)			 ::Dynamic filter = null();
HXDLIN( 608)			 ::flixel::group::FlxTypedGroupIterator strumline =  ::flixel::group::FlxTypedGroupIterator_obj::__alloc( HX_CTX ,::meta::state::PlayState_obj::strumLines->members,filter);
HXDLIN( 608)			while(strumline->hasNext()){
HXLINE( 608)				 ::gameObjects::userInterface::notes::Strumline strumline1 = strumline->next().StaticCast<  ::gameObjects::userInterface::notes::Strumline >();
HXLINE( 611)				int i = 0;
HXLINE( 612)				{
HXLINE( 612)					 ::Dynamic filter = null();
HXDLIN( 612)					 ::flixel::group::FlxTypedGroupIterator uiNote =  ::flixel::group::FlxTypedGroupIterator_obj::__alloc( HX_CTX ,strumline1->receptors->members,filter);
HXDLIN( 612)					while(uiNote->hasNext()){
HXLINE( 612)						 ::gameObjects::userInterface::notes::UIStaticArrow uiNote1 = uiNote->next().StaticCast<  ::gameObjects::userInterface::notes::UIStaticArrow >();
HXLINE( 614)						if (strumline1->autoplay) {
HXLINE( 615)							this->strumCallsAuto(uiNote1,null(),null());
            						}
            					}
            				}
HXLINE( 618)				if (::hx::IsNotNull( strumline1->splashNotes )) {
HXLINE( 619)					int _g = 0;
HXDLIN( 619)					int _g1 = strumline1->splashNotes->length;
HXDLIN( 619)					while((_g < _g1)){
HXLINE( 619)						_g = (_g + 1);
HXDLIN( 619)						int i = (_g - 1);
HXLINE( 621)						Dynamic( strumline1->splashNotes->members->__get(i)).StaticCast<  ::gameObjects::userInterface::notes::NoteSplash >()->set_x((Dynamic( strumline1->receptors->members->__get(i)).StaticCast<  ::gameObjects::userInterface::notes::UIStaticArrow >()->x - ( (Float)(48) )));
HXLINE( 622)						Dynamic( strumline1->splashNotes->members->__get(i)).StaticCast<  ::gameObjects::userInterface::notes::NoteSplash >()->set_y((Dynamic( strumline1->receptors->members->__get(i)).StaticCast<  ::gameObjects::userInterface::notes::UIStaticArrow >()->y - ( (Float)(56) )));
            					}
            				}
            			}
            		}
HXLINE( 627)		bool _hx_tmp;
HXDLIN( 627)		if (this->generatedMusic) {
HXLINE( 627)			_hx_tmp = this->startedCountdown;
            		}
            		else {
HXLINE( 627)			_hx_tmp = false;
            		}
HXDLIN( 627)		if (_hx_tmp) {
HXLINE( 629)			 ::Dynamic filter = null();
HXDLIN( 629)			 ::flixel::group::FlxTypedGroupIterator strumline =  ::flixel::group::FlxTypedGroupIterator_obj::__alloc( HX_CTX ,::meta::state::PlayState_obj::strumLines->members,filter);
HXDLIN( 629)			while(strumline->hasNext()){
            				HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_0, ::meta::state::PlayState,_gthis, ::gameObjects::userInterface::notes::Strumline,strumline1) HXARGC(1)
            				void _hx_run( ::gameObjects::userInterface::notes::Note daNote){
            					HX_GC_STACKFRAME(&_hx_pos_a31d76c4ca3ed2cf_635_noteCalls)
HXLINE( 637)					int downscrollMultiplier = 1;
HXLINE( 638)					if (( (bool)(::Init_obj::trueSettings->get(HX_("Downscroll",0f,4a,85,46))) )) {
HXLINE( 639)						downscrollMultiplier = -1;
            					}
HXLINE( 642)					Float psuedoY = (::meta::data::Conductor_obj::songPosition - daNote->strumTime);
HXLINE( 641)					Float psuedoY1 = (( (Float)(downscrollMultiplier) ) * -((psuedoY * (((Float)0.45) * ::flixel::math::FlxMath_obj::roundDecimal(daNote->noteSpeed,2)))));
HXLINE( 644)					Float psuedoX = (25 + daNote->noteVisualOffset);
HXLINE( 646)					daNote->set_y(((Dynamic( strumline1->receptors->members->__get(::Math_obj::floor(( (Float)(daNote->noteData) )))).StaticCast<  ::gameObjects::userInterface::notes::UIStaticArrow >()->y + (::Math_obj::cos((daNote->noteDirection * (::Math_obj::PI / ( (Float)(180) )))) * psuedoY1)) + (::Math_obj::sin((daNote->noteDirection * (::Math_obj::PI / ( (Float)(180) )))) * psuedoX)));
HXLINE( 650)					daNote->set_x(((Dynamic( strumline1->receptors->members->__get(::Math_obj::floor(( (Float)(daNote->noteData) )))).StaticCast<  ::gameObjects::userInterface::notes::UIStaticArrow >()->x + (::Math_obj::cos((daNote->noteDirection * (::Math_obj::PI / ( (Float)(180) )))) * psuedoX)) + (::Math_obj::sin((daNote->noteDirection * (::Math_obj::PI / ( (Float)(180) )))) * psuedoY1)));
HXLINE( 654)					if (daNote->isSustainNote) {
HXLINE( 657)						bool _hx_tmp;
HXDLIN( 657)						if (::StringTools_obj::endsWith(daNote->animation->_curAnim->name,HX_("holdend",fc,4b,02,b8))) {
HXLINE( 657)							_hx_tmp = ::hx::IsNotNull( daNote->prevNote );
            						}
            						else {
HXLINE( 657)							_hx_tmp = false;
            						}
HXDLIN( 657)						if (_hx_tmp) {
HXLINE( 659)							if (( (bool)(::Init_obj::trueSettings->get(HX_("Downscroll",0f,4a,85,46))) )) {
HXLINE( 660)								 ::gameObjects::userInterface::notes::Note _g = daNote;
HXDLIN( 660)								Float _g1 = _g->y;
HXDLIN( 660)								_g->set_y((_g1 + daNote->prevNote->get_height()));
            							}
            							else {
HXLINE( 662)								 ::gameObjects::userInterface::notes::Note _g = daNote;
HXDLIN( 662)								Float _g1 = _g->y;
HXDLIN( 662)								_g->set_y((_g1 - (daNote->prevNote->get_height() / ( (Float)(2) ))));
            							}
            						}
            						else {
HXLINE( 665)							 ::gameObjects::userInterface::notes::Note _g = daNote;
HXDLIN( 665)							Float _g1 = _g->y;
HXDLIN( 665)							_g->set_y((_g1 - ((daNote->get_height() / ( (Float)(2) )) * ( (Float)(downscrollMultiplier) ))));
            						}
HXLINE( 666)						if (( (bool)(::Init_obj::trueSettings->get(HX_("Downscroll",0f,4a,85,46))) )) {
HXLINE( 667)							daNote->set_flipY(true);
            						}
            					}
HXLINE( 671)					daNote->set_angle(-(daNote->noteDirection));
HXLINE( 674)					_gthis->mainControls(daNote,strumline1->character,strumline1,strumline1->autoplay);
HXLINE( 677)					if ((daNote->y > ::flixel::FlxG_obj::height)) {
HXLINE( 679)						daNote->set_active(false);
HXLINE( 680)						daNote->set_visible(false);
            					}
            					else {
HXLINE( 684)						daNote->set_visible(true);
HXLINE( 685)						daNote->set_active(true);
            					}
HXLINE( 689)					bool _hx_tmp;
HXDLIN( 689)					bool _hx_tmp1;
HXDLIN( 689)					if (!(( (bool)(::Init_obj::trueSettings->get(HX_("Downscroll",0f,4a,85,46))) ))) {
HXLINE( 689)						Float daNote1 = daNote->y;
HXDLIN( 689)						_hx_tmp1 = (daNote1 < -(daNote->get_height()));
            					}
            					else {
HXLINE( 689)						_hx_tmp1 = false;
            					}
HXDLIN( 689)					if (!(_hx_tmp1)) {
HXLINE( 690)						if (( (bool)(::Init_obj::trueSettings->get(HX_("Downscroll",0f,4a,85,46))) )) {
HXLINE( 690)							Float daNote1 = daNote->y;
HXDLIN( 690)							int _hx_tmp1 = ::flixel::FlxG_obj::height;
HXLINE( 689)							_hx_tmp = (daNote1 > (_hx_tmp1 + daNote->get_height()));
            						}
            						else {
HXLINE( 689)							_hx_tmp = false;
            						}
            					}
            					else {
HXLINE( 689)						_hx_tmp = true;
            					}
HXDLIN( 689)					if (_hx_tmp) {
HXLINE( 692)						bool _hx_tmp;
HXDLIN( 692)						bool _hx_tmp1;
HXDLIN( 692)						if (!(daNote->tooLate)) {
HXLINE( 692)							_hx_tmp1 = !(daNote->wasGoodHit);
            						}
            						else {
HXLINE( 692)							_hx_tmp1 = true;
            						}
HXDLIN( 692)						if (_hx_tmp1) {
HXLINE( 692)							_hx_tmp = daNote->mustPress;
            						}
            						else {
HXLINE( 692)							_hx_tmp = false;
            						}
HXDLIN( 692)						if (_hx_tmp) {
HXLINE( 694)							::meta::state::PlayState_obj::vocals->set_volume(( (Float)(0) ));
HXLINE( 695)							 ::meta::state::PlayState _gthis1 = _gthis;
HXDLIN( 695)							 ::Dynamic _hx_tmp;
HXDLIN( 695)							if (( (bool)(::Init_obj::trueSettings->get(HX_("Ghost Tapping",44,6c,9f,40))) )) {
HXLINE( 695)								_hx_tmp = true;
            							}
            							else {
HXLINE( 695)								_hx_tmp = false;
            							}
HXDLIN( 695)							_gthis1->missNoteCheck(_hx_tmp,daNote->noteData,::meta::state::PlayState_obj::boyfriend,true,null());
HXLINE( 697)							::meta::data::Timings_obj::updateAccuracy(0,null());
            						}
HXLINE( 700)						daNote->set_active(false);
HXLINE( 701)						daNote->set_visible(false);
HXLINE( 704)						daNote->kill();
HXLINE( 705)						if (strumline1->notesGroup->members->contains(daNote)) {
HXLINE( 706)							strumline1->notesGroup->remove(daNote,true).StaticCast<  ::gameObjects::userInterface::notes::Note >();
            						}
HXLINE( 707)						daNote->destroy();
            					}
            				}
            				HX_END_LOCAL_FUNC1((void))

HXLINE( 629)				 ::gameObjects::userInterface::notes::Strumline strumline1 = strumline->next().StaticCast<  ::gameObjects::userInterface::notes::Strumline >();
HXLINE( 631)				if (!(strumline1->autoplay)) {
HXLINE( 632)					this->controlPlayer(strumline1->character,strumline1->autoplay,strumline1,holdControls,pressControls,releaseControls);
            				}
HXLINE( 634)				strumline1->notesGroup->forEachAlive( ::Dynamic(new _hx_Closure_0(_gthis,strumline1)),null());
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(PlayState_obj,noteCalls,(void))

void PlayState_obj::controlPlayer( ::gameObjects::Character character,bool autoplay, ::gameObjects::userInterface::notes::Strumline characterStrums,::Array< bool > holdControls,::Array< bool > pressControls,::Array< bool > releaseControls){
            	HX_STACKFRAME(&_hx_pos_a31d76c4ca3ed2cf_716_controlPlayer)
HXLINE( 714)		 ::meta::state::PlayState _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE( 717)		if (!(autoplay)) {
            			HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_3,::Array< bool >,releaseControls,::Array< bool >,pressControls) HXARGC(1)
            			void _hx_run( ::gameObjects::userInterface::notes::UIStaticArrow strum){
            				HX_STACKFRAME(&_hx_pos_a31d76c4ca3ed2cf_787_controlPlayer)
HXLINE( 788)				bool _hx_tmp;
HXDLIN( 788)				if (pressControls->__get(strum->ID)) {
HXLINE( 788)					_hx_tmp = (strum->animation->_curAnim->name != HX_("confirm",00,9d,39,10));
            				}
            				else {
HXLINE( 788)					_hx_tmp = false;
            				}
HXDLIN( 788)				if (_hx_tmp) {
HXLINE( 789)					strum->playAnim(HX_("pressed",a2,d2,e6,39),null(),null(),null());
            				}
HXLINE( 790)				if (releaseControls->__get(strum->ID)) {
HXLINE( 791)					strum->playAnim(HX_("static",ae,dc,fb,05),null(),null(),null());
            				}
            			}
            			HX_END_LOCAL_FUNC1((void))

HXLINE( 720)			if (pressControls->contains(true)) {
HXLINE( 723)				int _g = 0;
HXDLIN( 723)				int _g1 = pressControls->length;
HXDLIN( 723)				while((_g < _g1)){
HXLINE( 723)					_g = (_g + 1);
HXDLIN( 723)					int i = (_g - 1);
HXLINE( 726)					if (pressControls->__get(i)) {
            						HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_0,::Array< ::Dynamic>,possibleNoteList,int,i) HXARGC(1)
            						void _hx_run( ::gameObjects::userInterface::notes::Note daNote){
            							HX_STACKFRAME(&_hx_pos_a31d76c4ca3ed2cf_734_controlPlayer)
HXLINE( 734)							bool _hx_tmp;
HXDLIN( 734)							bool _hx_tmp1;
HXDLIN( 734)							bool _hx_tmp2;
HXDLIN( 734)							if ((daNote->noteData == i)) {
HXLINE( 734)								_hx_tmp2 = daNote->canBeHit;
            							}
            							else {
HXLINE( 734)								_hx_tmp2 = false;
            							}
HXDLIN( 734)							if (_hx_tmp2) {
HXLINE( 734)								_hx_tmp1 = !(daNote->tooLate);
            							}
            							else {
HXLINE( 734)								_hx_tmp1 = false;
            							}
HXDLIN( 734)							if (_hx_tmp1) {
HXLINE( 734)								_hx_tmp = !(daNote->wasGoodHit);
            							}
            							else {
HXLINE( 734)								_hx_tmp = false;
            							}
HXDLIN( 734)							if (_hx_tmp) {
HXLINE( 735)								possibleNoteList->push(daNote);
            							}
            						}
            						HX_END_LOCAL_FUNC1((void))

            						HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_1) HXARGC(2)
            						int _hx_run( ::gameObjects::userInterface::notes::Note a, ::gameObjects::userInterface::notes::Note b){
            							HX_STACKFRAME(&_hx_pos_a31d76c4ca3ed2cf_737_controlPlayer)
HXLINE( 737)							return ::Std_obj::_hx_int((a->strumTime - b->strumTime));
            						}
            						HX_END_LOCAL_FUNC2(return)

HXLINE( 729)						::Array< ::Dynamic> possibleNoteList = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 730)						::Array< ::Dynamic> pressedNotes = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 732)						characterStrums->notesGroup->forEachAlive( ::Dynamic(new _hx_Closure_0(possibleNoteList,i)),null());
HXLINE( 737)						possibleNoteList->sort( ::Dynamic(new _hx_Closure_1()));
HXLINE( 740)						if ((possibleNoteList->length > 0)) {
HXLINE( 742)							bool eligable = true;
HXLINE( 743)							bool firstNote = true;
HXLINE( 745)							{
HXLINE( 745)								int _g = 0;
HXDLIN( 745)								while((_g < possibleNoteList->length)){
HXLINE( 745)									 ::gameObjects::userInterface::notes::Note coolNote = possibleNoteList->__get(_g).StaticCast<  ::gameObjects::userInterface::notes::Note >();
HXDLIN( 745)									_g = (_g + 1);
HXLINE( 747)									{
HXLINE( 747)										int _g1 = 0;
HXDLIN( 747)										while((_g1 < pressedNotes->length)){
HXLINE( 747)											 ::gameObjects::userInterface::notes::Note noteDouble = pressedNotes->__get(_g1).StaticCast<  ::gameObjects::userInterface::notes::Note >();
HXDLIN( 747)											_g1 = (_g1 + 1);
HXLINE( 749)											if ((::Math_obj::abs((noteDouble->strumTime - coolNote->strumTime)) < 10)) {
HXLINE( 750)												firstNote = false;
            											}
            											else {
HXLINE( 752)												eligable = false;
            											}
            										}
            									}
HXLINE( 755)									if (eligable) {
HXLINE( 757)										this->goodNoteHit(coolNote,character,characterStrums,firstNote);
HXLINE( 758)										pressedNotes->push(coolNote);
            									}
            								}
            							}
            						}
            						else {
HXLINE( 765)							if (!(( (bool)(::Init_obj::trueSettings->get(HX_("Ghost Tapping",44,6c,9f,40))) ))) {
HXLINE( 766)								this->missNoteCheck(true,i,character,true,null());
            							}
            						}
            					}
            				}
            			}
HXLINE( 773)			if (holdControls->contains(true)) {
            				HX_BEGIN_LOCAL_FUNC_S4(::hx::LocalFunc,_hx_Closure_2, ::meta::state::PlayState,_gthis, ::gameObjects::userInterface::notes::Strumline,characterStrums, ::gameObjects::Character,character,::Array< bool >,holdControls) HXARGC(1)
            				void _hx_run( ::gameObjects::userInterface::notes::Note coolNote){
            					HX_STACKFRAME(&_hx_pos_a31d76c4ca3ed2cf_778_controlPlayer)
HXLINE( 778)					bool _hx_tmp;
HXDLIN( 778)					bool _hx_tmp1;
HXDLIN( 778)					bool _hx_tmp2;
HXDLIN( 778)					if (coolNote->canBeHit) {
HXLINE( 778)						_hx_tmp2 = coolNote->mustPress;
            					}
            					else {
HXLINE( 778)						_hx_tmp2 = false;
            					}
HXDLIN( 778)					if (_hx_tmp2) {
HXLINE( 778)						_hx_tmp1 = coolNote->isSustainNote;
            					}
            					else {
HXLINE( 778)						_hx_tmp1 = false;
            					}
HXDLIN( 778)					if (_hx_tmp1) {
HXLINE( 778)						_hx_tmp = holdControls->__get(coolNote->noteData);
            					}
            					else {
HXLINE( 778)						_hx_tmp = false;
            					}
HXDLIN( 778)					if (_hx_tmp) {
HXLINE( 779)						_gthis->goodNoteHit(coolNote,character,characterStrums,null());
            					}
            				}
            				HX_END_LOCAL_FUNC1((void))

HXLINE( 776)				characterStrums->notesGroup->forEachAlive( ::Dynamic(new _hx_Closure_2(_gthis,characterStrums,character,holdControls)),null());
            			}
HXLINE( 786)			characterStrums->receptors->forEach( ::Dynamic(new _hx_Closure_3(releaseControls,pressControls)),null());
            		}
HXLINE( 797)		bool _hx_tmp;
HXDLIN( 797)		bool _hx_tmp1;
HXDLIN( 797)		if (::hx::IsNotNull( character )) {
HXLINE( 797)			_hx_tmp1 = ::hx::IsNotNull( character->animation );
            		}
            		else {
HXLINE( 797)			_hx_tmp1 = false;
            		}
HXDLIN( 797)		if (_hx_tmp1) {
HXLINE( 798)			if ((character->holdTimer > (::meta::data::Conductor_obj::stepCrochet * ((Float)0.004)))) {
HXLINE( 798)				if (holdControls->contains(true)) {
HXLINE( 797)					_hx_tmp = autoplay;
            				}
            				else {
HXLINE( 797)					_hx_tmp = true;
            				}
            			}
            			else {
HXLINE( 797)				_hx_tmp = false;
            			}
            		}
            		else {
HXLINE( 797)			_hx_tmp = false;
            		}
HXDLIN( 797)		if (_hx_tmp) {
HXLINE( 800)			bool _hx_tmp;
HXDLIN( 800)			if (::StringTools_obj::startsWith(character->animation->_curAnim->name,HX_("sing",4f,96,53,4c))) {
HXLINE( 800)				_hx_tmp = !(::StringTools_obj::endsWith(character->animation->_curAnim->name,HX_("miss",fc,52,5c,48)));
            			}
            			else {
HXLINE( 800)				_hx_tmp = false;
            			}
HXDLIN( 800)			if (_hx_tmp) {
HXLINE( 801)				character->dance(null());
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC6(PlayState_obj,controlPlayer,(void))

void PlayState_obj::goodNoteHit( ::gameObjects::userInterface::notes::Note coolNote, ::gameObjects::Character character, ::gameObjects::userInterface::notes::Strumline characterStrums, ::Dynamic __o_canDisplayJudgement){
            		 ::Dynamic canDisplayJudgement = __o_canDisplayJudgement;
            		if (::hx::IsNull(__o_canDisplayJudgement)) canDisplayJudgement = true;
            	HX_STACKFRAME(&_hx_pos_a31d76c4ca3ed2cf_807_goodNoteHit)
HXDLIN( 807)		if (!(coolNote->wasGoodHit)) {
HXLINE( 809)			coolNote->wasGoodHit = true;
HXLINE( 810)			::meta::state::PlayState_obj::vocals->set_volume(( (Float)(1) ));
HXLINE( 812)			this->characterPlayAnimation(coolNote,character);
HXLINE( 813)			if (::hx::IsNotNull( Dynamic( characterStrums->receptors->members->__get(coolNote->noteData)).StaticCast<  ::gameObjects::userInterface::notes::UIStaticArrow >() )) {
HXLINE( 814)				Dynamic( characterStrums->receptors->members->__get(coolNote->noteData)).StaticCast<  ::gameObjects::userInterface::notes::UIStaticArrow >()->playAnim(HX_("confirm",00,9d,39,10),true,null(),null());
            			}
HXLINE( 816)			if (( (bool)(canDisplayJudgement) )) {
HXLINE( 821)				Float noteDiff = ::Math_obj::abs((coolNote->strumTime - ::meta::data::Conductor_obj::songPosition));
HXLINE( 822)				::haxe::Log_obj::trace(noteDiff,::hx::SourceInfo(HX_("source/meta/state/PlayState.hx",55,81,3e,76),822,HX_("meta.state.PlayState",17,6b,79,5d),HX_("goodNoteHit",c4,4d,c4,22)));
HXLINE( 824)				if ((coolNote->strumTime < ::meta::data::Conductor_obj::songPosition)) {
HXLINE( 825)					this->ratingTiming = HX_("late",26,0b,ad,47);
            				}
            				else {
HXLINE( 827)					this->ratingTiming = HX_("early",a3,28,ed,67);
            				}
HXLINE( 830)				::String foundRating = HX_("miss",fc,52,5c,48);
HXLINE( 831)				Float lowestThreshold = ::Math_obj::POSITIVE_INFINITY;
HXLINE( 832)				{
HXLINE( 832)					 ::Dynamic myRating = ::meta::data::Timings_obj::judgementsMap->keys();
HXDLIN( 832)					while(( (bool)(myRating->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXLINE( 832)						::String myRating1 = ( (::String)(myRating->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXLINE( 834)						Float myThreshold = ( (Float)(::meta::data::Timings_obj::judgementsMap->get(myRating1)->__GetItem(1)) );
HXLINE( 835)						bool _hx_tmp;
HXDLIN( 835)						if ((noteDiff <= myThreshold)) {
HXLINE( 835)							_hx_tmp = (myThreshold < lowestThreshold);
            						}
            						else {
HXLINE( 835)							_hx_tmp = false;
            						}
HXDLIN( 835)						if (_hx_tmp) {
HXLINE( 837)							foundRating = myRating1;
HXLINE( 838)							lowestThreshold = myThreshold;
            						}
            					}
            				}
HXLINE( 842)				if (!(coolNote->isSustainNote)) {
HXLINE( 844)					this->increaseCombo(foundRating,coolNote->noteData,character);
HXLINE( 845)					this->popUpScore(foundRating,this->ratingTiming,characterStrums,coolNote);
HXLINE( 846)					this->healthCall(::meta::data::Timings_obj::judgementsMap->get(foundRating)->__GetItem(3));
            				}
            				else {
HXLINE( 848)					if (coolNote->isSustainNote) {
HXLINE( 851)						::meta::data::Timings_obj::updateAccuracy(100,true);
HXLINE( 852)						if (::StringTools_obj::endsWith(coolNote->animation->get_name(),HX_("holdend",fc,4b,02,b8))) {
HXLINE( 853)							this->healthCall(100);
            						}
            					}
            				}
            			}
HXLINE( 857)			if (!(coolNote->isSustainNote)) {
HXLINE( 860)				coolNote->kill();
HXLINE( 861)				if (characterStrums->notesGroup->members->contains(coolNote)) {
HXLINE( 862)					characterStrums->notesGroup->remove(coolNote,true).StaticCast<  ::gameObjects::userInterface::notes::Note >();
            				}
HXLINE( 863)				coolNote->destroy();
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC4(PlayState_obj,goodNoteHit,(void))

void PlayState_obj::missNoteCheck( ::Dynamic __o_includeAnimation,::hx::Null< int >  __o_direction, ::gameObjects::Character character,::hx::Null< bool >  __o_popMiss,::hx::Null< bool >  __o_lockMiss){
            		 ::Dynamic includeAnimation = __o_includeAnimation;
            		if (::hx::IsNull(__o_includeAnimation)) includeAnimation = false;
            		int direction = __o_direction.Default(0);
            		bool popMiss = __o_popMiss.Default(false);
            		bool lockMiss = __o_lockMiss.Default(false);
            	HX_STACKFRAME(&_hx_pos_a31d76c4ca3ed2cf_870_missNoteCheck)
HXLINE( 871)		if (( (bool)(includeAnimation) )) {
HXLINE( 873)			::String stringDirection = ::gameObjects::userInterface::notes::UIStaticArrow_obj::getArrowFromNumber(direction);
HXLINE( 875)			 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp = ::flixel::FlxG_obj::sound;
HXDLIN( 875)			::String library = null();
HXDLIN( 875)			::String _hx_tmp1 = ::Paths_obj::sound((HX_("missnote",ee,98,f1,e3) + ::flixel::FlxG_obj::random->_hx_int(1,3,null())),library);
HXDLIN( 875)			_hx_tmp->play(_hx_tmp1,::flixel::FlxG_obj::random->_hx_float(((Float)0.1),((Float)0.2),null()),null(),null(),null(),null());
HXLINE( 876)			character->playAnim(((HX_("sing",4f,96,53,4c) + stringDirection.toUpperCase()) + HX_("miss",fc,52,5c,48)),lockMiss,null(),null());
            		}
HXLINE( 878)		this->decreaseCombo(popMiss);
            	}


HX_DEFINE_DYNAMIC_FUNC5(PlayState_obj,missNoteCheck,(void))

void PlayState_obj::characterPlayAnimation( ::gameObjects::userInterface::notes::Note coolNote, ::gameObjects::Character character){
            	HX_STACKFRAME(&_hx_pos_a31d76c4ca3ed2cf_884_characterPlayAnimation)
HXLINE( 887)		::String stringArrow = HX_("",00,00,00,00);
HXLINE( 888)		::String altString = HX_("",00,00,00,00);
HXLINE( 890)		::String baseString = (HX_("sing",4f,96,53,4c) + ::gameObjects::userInterface::notes::UIStaticArrow_obj::getArrowFromNumber(coolNote->noteData).toUpperCase());
HXLINE( 893)		if ((coolNote->noteAlt > 0)) {
HXLINE( 894)			altString = HX_("-alt",1c,93,08,1e);
            		}
HXLINE( 895)		bool _hx_tmp;
HXDLIN( 895)		bool _hx_tmp1;
HXDLIN( 895)		if (::hx::IsNotNull(  ::Dynamic(::meta::state::PlayState_obj::SONG->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(::Math_obj::floor((( (Float)(this->curStep) ) / ( (Float)(16) )))) )) {
HXLINE( 895)			_hx_tmp1 = ( (bool)( ::Dynamic(::meta::state::PlayState_obj::SONG->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(::Math_obj::floor((( (Float)(this->curStep) ) / ( (Float)(16) ))))->__Field(HX_("altAnim",da,f3,f2,e5),::hx::paccDynamic)) );
            		}
            		else {
HXLINE( 895)			_hx_tmp1 = false;
            		}
HXDLIN( 895)		if (_hx_tmp1) {
HXLINE( 895)			_hx_tmp = character->animOffsets->exists((baseString + HX_("-alt",1c,93,08,1e)));
            		}
            		else {
HXLINE( 895)			_hx_tmp = false;
            		}
HXDLIN( 895)		if (_hx_tmp) {
HXLINE( 898)			if ((altString != HX_("-alt",1c,93,08,1e))) {
HXLINE( 899)				altString = HX_("-alt",1c,93,08,1e);
            			}
            			else {
HXLINE( 901)				altString = HX_("",00,00,00,00);
            			}
            		}
HXLINE( 904)		stringArrow = (baseString + altString);
HXLINE( 908)		character->playAnim(stringArrow,true,null(),null());
HXLINE( 909)		character->holdTimer = ( (Float)(0) );
            	}


HX_DEFINE_DYNAMIC_FUNC2(PlayState_obj,characterPlayAnimation,(void))

void PlayState_obj::strumCallsAuto( ::gameObjects::userInterface::notes::UIStaticArrow cStrum, ::Dynamic __o_callType, ::gameObjects::userInterface::notes::Note daNote){
            		 ::Dynamic callType = __o_callType;
            		if (::hx::IsNull(__o_callType)) callType = 1;
            	HX_STACKFRAME(&_hx_pos_a31d76c4ca3ed2cf_914_strumCallsAuto)
HXDLIN( 914)		if (::hx::IsNull( callType )) {
HXLINE( 922)			if ((daNote->noteData == cStrum->ID)) {
HXLINE( 925)				cStrum->playAnim(HX_("confirm",00,9d,39,10),null(),null(),null());
HXLINE( 928)				bool _hx_tmp;
HXDLIN( 928)				if (daNote->isSustainNote) {
HXLINE( 928)					_hx_tmp = !(::StringTools_obj::endsWith(daNote->animation->_curAnim->name,HX_("holdend",fc,4b,02,b8)));
            				}
            				else {
HXLINE( 928)					_hx_tmp = false;
            				}
HXDLIN( 928)				if (_hx_tmp) {
HXLINE( 929)					cStrum->canFinishAnimation = false;
            				}
            				else {
HXLINE( 931)					cStrum->canFinishAnimation = true;
            				}
            			}
            		}
            		else {
HXDLIN( 914)			if (::hx::IsEq( callType,1 )) {
HXLINE( 918)				bool _hx_tmp;
HXDLIN( 918)				if (cStrum->animation->get_finished()) {
HXLINE( 918)					_hx_tmp = cStrum->canFinishAnimation;
            				}
            				else {
HXLINE( 918)					_hx_tmp = false;
            				}
HXDLIN( 918)				if (_hx_tmp) {
HXLINE( 919)					cStrum->playAnim(HX_("static",ae,dc,fb,05),null(),null(),null());
            				}
            			}
            			else {
HXLINE( 922)				if ((daNote->noteData == cStrum->ID)) {
HXLINE( 925)					cStrum->playAnim(HX_("confirm",00,9d,39,10),null(),null(),null());
HXLINE( 928)					bool _hx_tmp;
HXDLIN( 928)					if (daNote->isSustainNote) {
HXLINE( 928)						_hx_tmp = !(::StringTools_obj::endsWith(daNote->animation->_curAnim->name,HX_("holdend",fc,4b,02,b8)));
            					}
            					else {
HXLINE( 928)						_hx_tmp = false;
            					}
HXDLIN( 928)					if (_hx_tmp) {
HXLINE( 929)						cStrum->canFinishAnimation = false;
            					}
            					else {
HXLINE( 931)						cStrum->canFinishAnimation = true;
            					}
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC3(PlayState_obj,strumCallsAuto,(void))

void PlayState_obj::mainControls( ::gameObjects::userInterface::notes::Note daNote, ::gameObjects::Character _hx_char, ::gameObjects::userInterface::notes::Strumline strumline,bool autoplay){
            	HX_GC_STACKFRAME(&_hx_pos_a31d76c4ca3ed2cf_937_mainControls)
HXLINE( 938)		::Array< ::Dynamic> notesPressedAutoplay = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 940)		int downscrollMultiplier = 1;
HXLINE( 941)		if (( (bool)(::Init_obj::trueSettings->get(HX_("Downscroll",0f,4a,85,46))) )) {
HXLINE( 942)			downscrollMultiplier = -1;
            		}
HXLINE( 946)		bool _hx_tmp;
HXDLIN( 946)		bool _hx_tmp1;
HXDLIN( 946)		if (daNote->isSustainNote) {
HXLINE( 947)			bool _hx_tmp;
HXDLIN( 947)			if (((daNote->y + daNote->offset->y) <= (Dynamic( strumline->receptors->members->__get(::Math_obj::floor(( (Float)(daNote->noteData) )))).StaticCast<  ::gameObjects::userInterface::notes::UIStaticArrow >()->y + (::gameObjects::userInterface::notes::Note_obj::swagWidth / ( (Float)(2) ))))) {
HXLINE( 947)				_hx_tmp = !(( (bool)(::Init_obj::trueSettings->get(HX_("Downscroll",0f,4a,85,46))) ));
            			}
            			else {
HXLINE( 947)				_hx_tmp = false;
            			}
HXDLIN( 947)			if (!(_hx_tmp)) {
HXLINE( 949)				Float _hx_tmp = (daNote->y - (daNote->offset->y * daNote->scale->y));
HXDLIN( 949)				Float _hx_tmp2 = (_hx_tmp + daNote->get_height());
HXDLIN( 949)				if ((_hx_tmp2 >= (Dynamic( strumline->receptors->members->__get(::Math_obj::floor(( (Float)(daNote->noteData) )))).StaticCast<  ::gameObjects::userInterface::notes::UIStaticArrow >()->y + (::gameObjects::userInterface::notes::Note_obj::swagWidth / ( (Float)(2) ))))) {
HXLINE( 946)					_hx_tmp1 = ::Init_obj::trueSettings->get_bool(HX_("Downscroll",0f,4a,85,46));
            				}
            				else {
HXLINE( 946)					_hx_tmp1 = false;
            				}
            			}
            			else {
HXLINE( 946)				_hx_tmp1 = true;
            			}
            		}
            		else {
HXLINE( 946)			_hx_tmp1 = false;
            		}
HXDLIN( 946)		if (_hx_tmp1) {
HXLINE( 952)			if (!(autoplay)) {
HXLINE( 952)				if (!(daNote->wasGoodHit)) {
HXLINE( 952)					if (daNote->prevNote->wasGoodHit) {
HXLINE( 946)						_hx_tmp = !(daNote->canBeHit);
            					}
            					else {
HXLINE( 946)						_hx_tmp = false;
            					}
            				}
            				else {
HXLINE( 946)					_hx_tmp = true;
            				}
            			}
            			else {
HXLINE( 946)				_hx_tmp = true;
            			}
            		}
            		else {
HXLINE( 946)			_hx_tmp = false;
            		}
HXDLIN( 946)		if (_hx_tmp) {
HXLINE( 954)			Float swagRectY = (((Dynamic( strumline->receptors->members->__get(::Math_obj::floor(( (Float)(daNote->noteData) )))).StaticCast<  ::gameObjects::userInterface::notes::UIStaticArrow >()->y + (::gameObjects::userInterface::notes::Note_obj::swagWidth / ( (Float)(2) ))) - daNote->y) / daNote->scale->y);
HXLINE( 955)			Float swagRect = (daNote->get_width() * ( (Float)(2) ));
HXDLIN( 955)			 ::flixel::math::FlxRect swagRect1 =  ::flixel::math::FlxRect_obj::__alloc( HX_CTX ,0,0,swagRect,(daNote->get_height() * ( (Float)(2) )));
HXLINE( 958)			if (( (bool)(::Init_obj::trueSettings->get(HX_("Downscroll",0f,4a,85,46))) )) {
HXLINE( 960)				swagRect1->height = swagRectY;
HXLINE( 962)				 ::flixel::math::FlxRect swagRect = swagRect1;
HXDLIN( 962)				Float swagRect2 = swagRect->y;
HXDLIN( 962)				Float swagRect3 = swagRect1->height;
HXDLIN( 962)				swagRect->y = (swagRect2 + (swagRect3 - daNote->get_height()));
            			}
            			else {
HXLINE( 966)				swagRect1->y = swagRectY;
HXLINE( 967)				 ::flixel::math::FlxRect swagRect = swagRect1;
HXDLIN( 967)				swagRect->height = (swagRect->height - swagRect1->y);
            			}
HXLINE( 970)			daNote->set_clipRect(swagRect1);
            		}
HXLINE( 975)		if (autoplay) {
HXLINE( 978)			if ((daNote->strumTime <= ::meta::data::Conductor_obj::songPosition)) {
HXLINE( 990)				bool canDisplayJudgement = false;
HXLINE( 991)				if (strumline->displayJudgements) {
HXLINE( 993)					canDisplayJudgement = true;
HXLINE( 994)					{
HXLINE( 994)						int _g = 0;
HXDLIN( 994)						while((_g < notesPressedAutoplay->length)){
HXLINE( 994)							 ::Dynamic noteDouble = notesPressedAutoplay->__get(_g);
HXDLIN( 994)							_g = (_g + 1);
HXLINE( 996)							if (::hx::IsEq( noteDouble->__Field(HX_("noteData",3c,7b,96,51),::hx::paccDynamic),daNote->noteData )) {
HXLINE( 999)								canDisplayJudgement = false;
            							}
            						}
            					}
HXLINE(1005)					notesPressedAutoplay->push(daNote);
            				}
HXLINE(1008)				this->goodNoteHit(daNote,_hx_char,strumline,canDisplayJudgement);
            			}
            		}
HXLINE(1014)		this->strumCameraRoll(strumline->receptors,daNote->mustPress);
            	}


HX_DEFINE_DYNAMIC_FUNC4(PlayState_obj,mainControls,(void))

void PlayState_obj::strumCameraRoll( ::flixel::group::FlxTypedGroup cStrum,bool mustHit){
            	HX_STACKFRAME(&_hx_pos_a31d76c4ca3ed2cf_1019_strumCameraRoll)
HXDLIN(1019)		if (!(( (bool)(::Init_obj::trueSettings->get(HX_("No Camera Note Movement",a1,da,3d,d1))) ))) {
HXLINE(1021)			Float camDisplaceExtend = ((Float)1.5);
HXLINE(1022)			Float camDisplaceSpeed = ((Float)0.0125);
HXLINE(1023)			if (::hx::IsNotNull(  ::Dynamic(::meta::state::PlayState_obj::SONG->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(::Std_obj::_hx_int((( (Float)(this->curStep) ) / ( (Float)(16) )))) )) {
HXLINE(1025)				bool _hx_tmp;
HXDLIN(1025)				bool _hx_tmp1;
HXDLIN(1025)				if (( (bool)( ::Dynamic(::meta::state::PlayState_obj::SONG->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(::Std_obj::_hx_int((( (Float)(this->curStep) ) / ( (Float)(16) ))))->__Field(HX_("mustHitSection",3b,5f,87,62),::hx::paccDynamic)) )) {
HXLINE(1025)					_hx_tmp1 = mustHit;
            				}
            				else {
HXLINE(1025)					_hx_tmp1 = false;
            				}
HXDLIN(1025)				if (!(_hx_tmp1)) {
HXLINE(1026)					if (!(( (bool)( ::Dynamic(::meta::state::PlayState_obj::SONG->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(::Std_obj::_hx_int((( (Float)(this->curStep) ) / ( (Float)(16) ))))->__Field(HX_("mustHitSection",3b,5f,87,62),::hx::paccDynamic)) ))) {
HXLINE(1025)						_hx_tmp = !(mustHit);
            					}
            					else {
HXLINE(1025)						_hx_tmp = false;
            					}
            				}
            				else {
HXLINE(1025)					_hx_tmp = true;
            				}
HXDLIN(1025)				if (_hx_tmp) {
HXLINE(1028)					bool _hx_tmp;
HXDLIN(1028)					if ((Dynamic( cStrum->members->__get(0)).StaticCast<  ::gameObjects::userInterface::notes::UIStaticArrow >()->animation->_curAnim->name == HX_("confirm",00,9d,39,10))) {
HXLINE(1028)						_hx_tmp = (this->camDisplaceX > -(camDisplaceExtend));
            					}
            					else {
HXLINE(1028)						_hx_tmp = false;
            					}
HXDLIN(1028)					if (_hx_tmp) {
HXLINE(1029)						 ::meta::state::PlayState _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(1029)						_hx_tmp->camDisplaceX = (_hx_tmp->camDisplaceX - camDisplaceSpeed);
            					}
            					else {
HXLINE(1030)						bool _hx_tmp;
HXDLIN(1030)						if ((Dynamic( cStrum->members->__get(3)).StaticCast<  ::gameObjects::userInterface::notes::UIStaticArrow >()->animation->_curAnim->name == HX_("confirm",00,9d,39,10))) {
HXLINE(1030)							_hx_tmp = (this->camDisplaceX < camDisplaceExtend);
            						}
            						else {
HXLINE(1030)							_hx_tmp = false;
            						}
HXDLIN(1030)						if (_hx_tmp) {
HXLINE(1031)							 ::meta::state::PlayState _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(1031)							_hx_tmp->camDisplaceX = (_hx_tmp->camDisplaceX + camDisplaceSpeed);
            						}
            					}
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(PlayState_obj,strumCameraRoll,(void))

void PlayState_obj::onFocus(){
            	HX_STACKFRAME(&_hx_pos_a31d76c4ca3ed2cf_1039_onFocus)
HXLINE(1040)		if (!(this->paused)) {
HXLINE(1041)			::meta::state::PlayState_obj::updateRPC(false);
            		}
HXLINE(1042)		this->super::onFocus();
            	}


void PlayState_obj::onFocusLost(){
            	HX_STACKFRAME(&_hx_pos_a31d76c4ca3ed2cf_1046_onFocusLost)
HXLINE(1047)		::meta::state::PlayState_obj::updateRPC(true);
HXLINE(1048)		this->super::onFocusLost();
            	}


void PlayState_obj::popUpScore(::String baseRating,::String timing, ::gameObjects::userInterface::notes::Strumline strumline, ::gameObjects::userInterface::notes::Note coolNote){
            	HX_STACKFRAME(&_hx_pos_a31d76c4ca3ed2cf_1071_popUpScore)
HXLINE(1073)		int score = 50;
HXLINE(1076)		if ((baseRating == HX_("sick",be,8c,53,4c))) {
HXLINE(1078)			this->createSplash(coolNote,strumline);
            		}
            		else {
HXLINE(1081)			if (this->allSicks) {
HXLINE(1082)				this->allSicks = false;
            			}
            		}
HXLINE(1084)		this->displayRating(baseRating,timing,null());
HXLINE(1085)		::meta::data::Timings_obj::updateAccuracy(( (int)(::meta::data::Timings_obj::judgementsMap->get(baseRating)->__GetItem(3)) ),null());
HXLINE(1086)		score = ::Std_obj::_hx_int(( (Float)(::meta::data::Timings_obj::judgementsMap->get(baseRating)->__GetItem(2)) ));
HXLINE(1088)		 ::Dynamic _hx_tmp = ::hx::ClassOf< ::meta::state::PlayState >();
HXDLIN(1088)		::meta::state::PlayState_obj::songScore = (::meta::state::PlayState_obj::songScore + score);
HXLINE(1090)		this->popUpCombo(null());
            	}


HX_DEFINE_DYNAMIC_FUNC4(PlayState_obj,popUpScore,(void))

void PlayState_obj::createSplash( ::gameObjects::userInterface::notes::Note coolNote, ::gameObjects::userInterface::notes::Strumline strumline){
            	HX_STACKFRAME(&_hx_pos_a31d76c4ca3ed2cf_1094_createSplash)
HXLINE(1096)		::String noteSplashRandom = ::Std_obj::string((::flixel::FlxG_obj::random->_hx_int(0,1,null()) + 1));
HXLINE(1097)		if (::hx::IsNotNull( strumline->splashNotes )) {
HXLINE(1098)			Dynamic( strumline->splashNotes->members->__get(coolNote->noteData)).StaticCast<  ::gameObjects::userInterface::notes::NoteSplash >()->playAnim((HX_("anim",11,86,71,40) + noteSplashRandom),null(),null(),null());
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(PlayState_obj,createSplash,(void))

void PlayState_obj::popUpCombo( ::Dynamic __o_preload){
            		 ::Dynamic preload = __o_preload;
            		if (::hx::IsNull(__o_preload)) preload = false;
            	HX_STACKFRAME(&_hx_pos_a31d76c4ca3ed2cf_1104_popUpCombo)
HXLINE(1105)		::String comboString = ::Std_obj::string(::meta::state::PlayState_obj::combo);
HXLINE(1106)		bool negative = false;
HXLINE(1107)		bool _hx_tmp;
HXDLIN(1107)		if (!(::StringTools_obj::startsWith(comboString,HX_("-",2d,00,00,00)))) {
HXLINE(1107)			_hx_tmp = (::meta::state::PlayState_obj::combo == 0);
            		}
            		else {
HXLINE(1107)			_hx_tmp = true;
            		}
HXDLIN(1107)		if (_hx_tmp) {
HXLINE(1108)			negative = true;
            		}
HXLINE(1109)		::Array< ::String > stringArray = comboString.split(HX_("",00,00,00,00));
HXLINE(1111)		if (::hx::IsNotNull( ::meta::state::PlayState_obj::lastCombo )) {
HXLINE(1113)			while((::meta::state::PlayState_obj::lastCombo->length > 0)){
HXLINE(1115)				::meta::state::PlayState_obj::lastCombo->__get(0).StaticCast<  ::flixel::FlxSprite >()->kill();
HXLINE(1116)				::meta::state::PlayState_obj::lastCombo->remove(::meta::state::PlayState_obj::lastCombo->__get(0).StaticCast<  ::flixel::FlxSprite >());
            			}
            		}
HXLINE(1120)		{
HXLINE(1120)			int _g = 0;
HXDLIN(1120)			int _g1 = stringArray->length;
HXDLIN(1120)			while((_g < _g1)){
HXLINE(1120)				_g = (_g + 1);
HXDLIN(1120)				int scoreInt = (_g - 1);
HXLINE(1123)				bool numScore;
HXDLIN(1123)				if (!(negative)) {
HXLINE(1123)					numScore = this->allSicks;
            				}
            				else {
HXLINE(1123)					numScore = false;
            				}
HXDLIN(1123)				 ::flixel::FlxSprite numScore1 = ::ForeverAssets_obj::generateCombo(HX_("combo",4e,28,5d,4a),stringArray->__get(scoreInt),numScore,::meta::state::PlayState_obj::assetModifier,::meta::state::PlayState_obj::changeableSkin,HX_("UI",54,4a,00,00),negative,this->createdColor,scoreInt);
HXLINE(1125)				this->add(numScore1);
HXLINE(1127)				if (!(( (bool)(::Init_obj::trueSettings->get(HX_("Simply Judgements",b8,b3,c4,d7))) ))) {
            					HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::flixel::FlxSprite,numScore1) HXARGC(1)
            					void _hx_run( ::flixel::tweens::FlxTween tween){
            						HX_STACKFRAME(&_hx_pos_a31d76c4ca3ed2cf_1133_popUpCombo)
HXLINE(1133)						numScore1->kill();
            					}
            					HX_END_LOCAL_FUNC1((void))

HXLINE(1129)					this->add(numScore1);
HXLINE(1130)					::flixel::tweens::FlxTween_obj::tween(numScore1, ::Dynamic(::hx::Anon_obj::Create(1)
            						->setFixed(0,HX_("alpha",5e,a7,96,21),0)),((Float)0.2), ::Dynamic(::hx::Anon_obj::Create(2)
            						->setFixed(0,HX_("startDelay",c1,af,3d,f3),(::meta::data::Conductor_obj::crochet * ((Float)0.002)))
            						->setFixed(1,HX_("onComplete",f8,d4,7e,5d), ::Dynamic(new _hx_Closure_0(numScore1)))));
            				}
            				else {
HXLINE(1140)					this->add(numScore1);
HXLINE(1142)					{
HXLINE(1142)						 ::flixel::FlxSprite _g = numScore1;
HXDLIN(1142)						_g->set_y((_g->y + 10));
            					}
HXLINE(1143)					{
HXLINE(1143)						 ::flixel::FlxSprite _g1 = numScore1;
HXDLIN(1143)						_g1->set_x((_g1->x - ( (Float)(95) )));
            					}
HXLINE(1144)					{
HXLINE(1144)						 ::flixel::FlxSprite _g2 = numScore1;
HXDLIN(1144)						_g2->set_x((_g2->x - ( (Float)(((comboString.length - 1) * 22)) )));
            					}
HXLINE(1145)					::meta::state::PlayState_obj::lastCombo->push(numScore1);
HXLINE(1146)					::flixel::tweens::FlxTween_obj::tween(numScore1, ::Dynamic(::hx::Anon_obj::Create(1)
            						->setFixed(0,HX_("y",79,00,00,00),(numScore1->y + 20))),((Float)0.1), ::Dynamic(::hx::Anon_obj::Create(2)
            						->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::circOut_dyn())
            						->setFixed(1,HX_("type",ba,f2,08,4d),16)));
            				}
HXLINE(1148)				if (( (bool)(preload) )) {
HXLINE(1149)					numScore1->set_visible(false);
            				}
HXLINE(1151)				if (( (bool)(::Init_obj::trueSettings->get(HX_("Fixed Judgements",8a,ad,a6,9b))) )) {
HXLINE(1153)					numScore1->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,::meta::state::PlayState_obj::camHUD));
HXLINE(1154)					{
HXLINE(1154)						 ::flixel::FlxSprite _g = numScore1;
HXDLIN(1154)						_g->set_y((_g->y + 50));
            					}
            				}
HXLINE(1156)				{
HXLINE(1156)					 ::flixel::FlxSprite _g1 = numScore1;
HXDLIN(1156)					_g1->set_x((_g1->x + 100));
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(PlayState_obj,popUpCombo,(void))

void PlayState_obj::decreaseCombo( ::Dynamic __o_popMiss){
            		 ::Dynamic popMiss = __o_popMiss;
            		if (::hx::IsNull(__o_popMiss)) popMiss = false;
            	HX_STACKFRAME(&_hx_pos_a31d76c4ca3ed2cf_1161_decreaseCombo)
HXLINE(1163)		bool _hx_tmp;
HXDLIN(1163)		bool _hx_tmp1;
HXDLIN(1163)		if ((::meta::state::PlayState_obj::combo <= 5)) {
HXLINE(1163)			_hx_tmp1 = (::meta::state::PlayState_obj::combo < 0);
            		}
            		else {
HXLINE(1163)			_hx_tmp1 = true;
            		}
HXDLIN(1163)		if (_hx_tmp1) {
HXLINE(1163)			_hx_tmp = ::meta::state::PlayState_obj::gf->animOffsets->exists(HX_("sad",16,98,57,00));
            		}
            		else {
HXLINE(1163)			_hx_tmp = false;
            		}
HXDLIN(1163)		if (_hx_tmp) {
HXLINE(1164)			::meta::state::PlayState_obj::gf->playAnim(HX_("sad",16,98,57,00),null(),null(),null());
            		}
HXLINE(1166)		if ((::meta::state::PlayState_obj::combo > 0)) {
HXLINE(1167)			::meta::state::PlayState_obj::combo = 0;
            		}
            		else {
HXLINE(1169)			::meta::state::PlayState_obj::combo--;
            		}
HXLINE(1172)		 ::Dynamic _hx_tmp2 = ::hx::ClassOf< ::meta::state::PlayState >();
HXDLIN(1172)		::meta::state::PlayState_obj::songScore = (::meta::state::PlayState_obj::songScore - 10);
HXLINE(1173)		::meta::state::PlayState_obj::misses++;
HXLINE(1176)		if (( (bool)(popMiss) )) {
HXLINE(1179)			this->displayRating(HX_("miss",fc,52,5c,48),HX_("late",26,0b,ad,47),null());
HXLINE(1180)			this->healthCall(::meta::data::Timings_obj::judgementsMap->get(HX_("miss",fc,52,5c,48))->__GetItem(3));
            		}
HXLINE(1182)		this->popUpCombo(null());
HXLINE(1185)		::meta::data::Timings_obj::updateFCDisplay();
            	}


HX_DEFINE_DYNAMIC_FUNC1(PlayState_obj,decreaseCombo,(void))

void PlayState_obj::increaseCombo(::String baseRating, ::Dynamic __o_direction, ::gameObjects::Character character){
            		 ::Dynamic direction = __o_direction;
            		if (::hx::IsNull(__o_direction)) direction = 0;
            	HX_STACKFRAME(&_hx_pos_a31d76c4ca3ed2cf_1191_increaseCombo)
HXDLIN(1191)		if (::hx::IsNotNull( baseRating )) {
HXLINE(1193)			if (::hx::IsGreater( ::meta::data::Timings_obj::judgementsMap->get(baseRating)->__GetItem(3),0 )) {
HXLINE(1195)				if ((::meta::state::PlayState_obj::combo < 0)) {
HXLINE(1196)					::meta::state::PlayState_obj::combo = 0;
            				}
HXLINE(1197)				 ::Dynamic _hx_tmp = ::hx::ClassOf< ::meta::state::PlayState >();
HXDLIN(1197)				::meta::state::PlayState_obj::combo = (::meta::state::PlayState_obj::combo + 1);
            			}
            			else {
HXLINE(1200)				this->missNoteCheck(true,direction,character,false,true);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC3(PlayState_obj,increaseCombo,(void))

void PlayState_obj::displayRating(::String daRating,::String timing, ::Dynamic __o_cache){
            		 ::Dynamic cache = __o_cache;
            		if (::hx::IsNull(__o_cache)) cache = false;
            	HX_STACKFRAME(&_hx_pos_a31d76c4ca3ed2cf_1205_displayRating)
HXLINE(1210)		bool rating;
HXDLIN(1210)		if ((daRating == HX_("sick",be,8c,53,4c))) {
HXLINE(1210)			rating = this->allSicks;
            		}
            		else {
HXLINE(1210)			rating = false;
            		}
HXDLIN(1210)		 ::flixel::FlxSprite rating1 = ::ForeverAssets_obj::generateRating((HX_("",00,00,00,00) + daRating),rating,timing,::meta::state::PlayState_obj::assetModifier,::meta::state::PlayState_obj::changeableSkin,HX_("UI",54,4a,00,00));
HXLINE(1211)		this->add(rating1);
HXLINE(1213)		if (!(( (bool)(::Init_obj::trueSettings->get(HX_("Simply Judgements",b8,b3,c4,d7))) ))) {
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::flixel::FlxSprite,rating1) HXARGC(1)
            			void _hx_run( ::flixel::tweens::FlxTween tween){
            				HX_STACKFRAME(&_hx_pos_a31d76c4ca3ed2cf_1220_displayRating)
HXLINE(1220)				rating1->kill();
            			}
            			HX_END_LOCAL_FUNC1((void))

HXLINE(1215)			this->add(rating1);
HXLINE(1217)			::flixel::tweens::FlxTween_obj::tween(rating1, ::Dynamic(::hx::Anon_obj::Create(1)
            				->setFixed(0,HX_("alpha",5e,a7,96,21),0)),((Float)0.2), ::Dynamic(::hx::Anon_obj::Create(2)
            				->setFixed(0,HX_("startDelay",c1,af,3d,f3),(::meta::data::Conductor_obj::crochet * ((Float)0.00125)))
            				->setFixed(1,HX_("onComplete",f8,d4,7e,5d), ::Dynamic(new _hx_Closure_0(rating1)))));
            		}
            		else {
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_1, ::flixel::FlxSprite,rating1) HXARGC(1)
            			void _hx_run( ::flixel::tweens::FlxTween tween){
            				HX_STACKFRAME(&_hx_pos_a31d76c4ca3ed2cf_1237_displayRating)
HXLINE(1237)				rating1->kill();
            			}
            			HX_END_LOCAL_FUNC1((void))

HXLINE(1227)			if (::hx::IsNotNull( ::meta::state::PlayState_obj::lastRating )) {
HXLINE(1229)				::meta::state::PlayState_obj::lastRating->kill();
            			}
HXLINE(1231)			this->add(rating1);
HXLINE(1232)			::meta::state::PlayState_obj::lastRating = rating1;
HXLINE(1233)			::flixel::tweens::FlxTween_obj::tween(rating1, ::Dynamic(::hx::Anon_obj::Create(1)
            				->setFixed(0,HX_("y",79,00,00,00),(rating1->y + 20))),((Float)0.2), ::Dynamic(::hx::Anon_obj::Create(2)
            				->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::circOut_dyn())
            				->setFixed(1,HX_("type",ba,f2,08,4d),16)));
HXLINE(1234)			::flixel::tweens::FlxTween_obj::tween(rating1, ::Dynamic(::hx::Anon_obj::Create(2)
            				->setFixed(0,HX_("scale.x",94,2d,07,65),0)
            				->setFixed(1,HX_("scale.y",95,2d,07,65),0)),((Float)0.1), ::Dynamic(::hx::Anon_obj::Create(2)
            				->setFixed(0,HX_("startDelay",c1,af,3d,f3),(::meta::data::Conductor_obj::crochet * ((Float)0.00125)))
            				->setFixed(1,HX_("onComplete",f8,d4,7e,5d), ::Dynamic(new _hx_Closure_1(rating1)))));
            		}
HXLINE(1244)		if (( (bool)(::Init_obj::trueSettings->get(HX_("Fixed Judgements",8a,ad,a6,9b))) )) {
HXLINE(1247)			rating1->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,::meta::state::PlayState_obj::camHUD));
HXLINE(1248)			rating1->screenCenter(null());
            		}
HXLINE(1252)		{
HXLINE(1252)			::Dynamic this1 = ::meta::data::Timings_obj::gottenJudgements;
HXDLIN(1252)			( ( ::haxe::ds::StringMap)(this1) )->set(daRating,(::meta::data::Timings_obj::gottenJudgements->get(daRating) + 1));
            		}
HXLINE(1255)		if ((::meta::data::Timings_obj::smallestRating != daRating)) {
HXLINE(1256)			 ::Dynamic _hx_tmp = ::meta::data::Timings_obj::judgementsMap->get(::meta::data::Timings_obj::smallestRating)->__GetItem(0);
HXDLIN(1256)			if (::hx::IsLess( _hx_tmp,::meta::data::Timings_obj::judgementsMap->get(daRating)->__GetItem(0) )) {
HXLINE(1257)				::meta::data::Timings_obj::smallestRating = daRating;
            			}
            		}
HXLINE(1260)		if (( (bool)(cache) )) {
HXLINE(1261)			rating1->set_visible(false);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC3(PlayState_obj,displayRating,(void))

void PlayState_obj::healthCall( ::Dynamic __o_ratingMultiplier){
            		 ::Dynamic ratingMultiplier = __o_ratingMultiplier;
            		if (::hx::IsNull(__o_ratingMultiplier)) ratingMultiplier = 0;
            	HX_STACKFRAME(&_hx_pos_a31d76c4ca3ed2cf_1265_healthCall)
HXLINE(1267)		Float healthBase = ((Float)0.06);
HXLINE(1268)		 ::Dynamic _hx_tmp = ::hx::ClassOf< ::meta::state::PlayState >();
HXDLIN(1268)		::meta::state::PlayState_obj::health = (::meta::state::PlayState_obj::health + (healthBase * (( (Float)(ratingMultiplier) ) / ( (Float)(100) ))));
            	}


HX_DEFINE_DYNAMIC_FUNC1(PlayState_obj,healthCall,(void))

void PlayState_obj::startSong(){
            	HX_STACKFRAME(&_hx_pos_a31d76c4ca3ed2cf_1272_startSong)
HXLINE(1273)		this->startingSong = false;
HXLINE(1275)		this->previousFrameTime = ::flixel::FlxG_obj::game->ticks;
HXLINE(1276)		this->lastReportedPlayheadPosition = 0;
HXLINE(1278)		if (!(this->paused)) {
HXLINE(1280)			::meta::state::PlayState_obj::songMusic->play(null(),null(),null());
HXLINE(1281)			::meta::state::PlayState_obj::songMusic->onComplete = this->endSong_dyn();
HXLINE(1282)			::meta::state::PlayState_obj::vocals->play(null(),null(),null());
HXLINE(1284)			this->resyncVocals();
HXLINE(1288)			::meta::state::PlayState_obj::songLength = ::meta::state::PlayState_obj::songMusic->_length;
HXLINE(1291)			::meta::state::PlayState_obj::updateRPC(false);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(PlayState_obj,startSong,(void))

void PlayState_obj::generateSong(::String dataPath){
            	HX_GC_STACKFRAME(&_hx_pos_a31d76c4ca3ed2cf_1297_generateSong)
HXLINE(1300)		 ::Dynamic songData = ::meta::state::PlayState_obj::SONG;
HXLINE(1301)		::meta::data::Conductor_obj::changeBPM(( (Float)(songData->__Field(HX_("bpm",df,be,4a,00),::hx::paccDynamic)) ),null());
HXLINE(1304)		::String _hx_tmp = (::meta::CoolUtil_obj::dashToSpace(( (::String)(::meta::state::PlayState_obj::SONG->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic)) )) + HX_(" - ",73,6f,18,00));
HXDLIN(1304)		::meta::state::PlayState_obj::songDetails = (_hx_tmp + ::meta::CoolUtil_obj::difficultyFromNumber(::meta::state::PlayState_obj::storyDifficulty));
HXLINE(1307)		::meta::state::PlayState_obj::detailsPausedText = (HX_("Paused - ",65,2f,92,fd) + ::meta::state::PlayState_obj::songDetails);
HXLINE(1310)		::meta::state::PlayState_obj::detailsSub = HX_("",00,00,00,00);
HXLINE(1313)		::meta::state::PlayState_obj::updateRPC(false);
HXLINE(1315)		this->curSong = ( (::String)(songData->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic)) );
HXLINE(1316)		 ::flixel::_hx_system::FlxSound _hx_tmp1 =  ::flixel::_hx_system::FlxSound_obj::__alloc( HX_CTX );
HXDLIN(1316)		::String song = ( (::String)(::meta::state::PlayState_obj::SONG->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic)) );
HXDLIN(1316)		::String instPath = (((HX_("songs/",71,e7,88,2d) + song.toLowerCase()) + HX_("/Inst.",f9,6e,13,1c)) + HX_("ogg",4f,94,54,00));
HXDLIN(1316)		if (!(::sys::FileSystem_obj::exists(::Paths_obj::getPath(instPath,HX_("MUSIC",85,08,49,8e),null())))) {
HXLINE(1316)			instPath = (((HX_("songs/",71,e7,88,2d) + ::meta::CoolUtil_obj::swapSpaceDash(song.toLowerCase())) + HX_("/Inst.",f9,6e,13,1c)) + HX_("ogg",4f,94,54,00));
            		}
HXDLIN(1316)		::meta::state::PlayState_obj::songMusic = _hx_tmp1->loadEmbedded(::openfl::media::Sound_obj::fromFile((HX_("./",41,28,00,00) + ::Paths_obj::getPath(instPath,HX_("MUSIC",85,08,49,8e),null()))),false,true,null());
HXLINE(1318)		if (( (bool)(::meta::state::PlayState_obj::SONG->__Field(HX_("needsVoices",be,05,e9,0d),::hx::paccDynamic)) )) {
HXLINE(1319)			 ::flixel::_hx_system::FlxSound _hx_tmp =  ::flixel::_hx_system::FlxSound_obj::__alloc( HX_CTX );
HXDLIN(1319)			::String song = ( (::String)(::meta::state::PlayState_obj::SONG->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic)) );
HXDLIN(1319)			::String voicePath = (((HX_("songs/",71,e7,88,2d) + song.toLowerCase()) + HX_("/Voices.",1e,f6,e5,90)) + HX_("ogg",4f,94,54,00));
HXDLIN(1319)			if (!(::sys::FileSystem_obj::exists(::Paths_obj::getPath(voicePath,HX_("MUSIC",85,08,49,8e),null())))) {
HXLINE(1319)				voicePath = (((HX_("songs/",71,e7,88,2d) + ::meta::CoolUtil_obj::swapSpaceDash(song.toLowerCase())) + HX_("/Voices.",1e,f6,e5,90)) + HX_("ogg",4f,94,54,00));
            			}
HXDLIN(1319)			::meta::state::PlayState_obj::vocals = _hx_tmp->loadEmbedded(::openfl::media::Sound_obj::fromFile((HX_("./",41,28,00,00) + ::Paths_obj::getPath(voicePath,HX_("MUSIC",85,08,49,8e),null()))),false,true,null());
            		}
            		else {
HXLINE(1321)			::meta::state::PlayState_obj::vocals =  ::flixel::_hx_system::FlxSound_obj::__alloc( HX_CTX );
            		}
HXLINE(1323)		::flixel::FlxG_obj::sound->list->add(::meta::state::PlayState_obj::songMusic).StaticCast<  ::flixel::_hx_system::FlxSound >();
HXLINE(1324)		::flixel::FlxG_obj::sound->list->add(::meta::state::PlayState_obj::vocals).StaticCast<  ::flixel::_hx_system::FlxSound >();
HXLINE(1327)		this->unspawnNotes = ::meta::data::ChartLoader_obj::generateChartType(::meta::state::PlayState_obj::SONG,::meta::state::PlayState_obj::determinedChartType);
HXLINE(1331)		this->unspawnNotes->sort(this->sortByShit_dyn());
HXLINE(1333)		this->generatedMusic = true;
HXLINE(1335)		::meta::data::Timings_obj::accuracyMaxCalculation(this->unspawnNotes);
            	}


HX_DEFINE_DYNAMIC_FUNC1(PlayState_obj,generateSong,(void))

int PlayState_obj::sortByShit( ::gameObjects::userInterface::notes::Note Obj1, ::gameObjects::userInterface::notes::Note Obj2){
            	HX_STACKFRAME(&_hx_pos_a31d76c4ca3ed2cf_1339_sortByShit)
HXDLIN(1339)		Float Value1 = Obj1->strumTime;
HXDLIN(1339)		Float Value2 = Obj2->strumTime;
HXDLIN(1339)		int result = 0;
HXDLIN(1339)		if ((Value1 < Value2)) {
HXDLIN(1339)			result = -1;
            		}
            		else {
HXDLIN(1339)			if ((Value1 > Value2)) {
HXDLIN(1339)				result = 1;
            			}
            		}
HXDLIN(1339)		return result;
            	}


HX_DEFINE_DYNAMIC_FUNC2(PlayState_obj,sortByShit,return )

void PlayState_obj::resyncVocals(){
            	HX_STACKFRAME(&_hx_pos_a31d76c4ca3ed2cf_1342_resyncVocals)
HXLINE(1343)		::meta::state::PlayState_obj::vocals->pause();
HXLINE(1345)		::meta::state::PlayState_obj::songMusic->play(null(),null(),null());
HXLINE(1346)		::meta::data::Conductor_obj::songPosition = ::meta::state::PlayState_obj::songMusic->_time;
HXLINE(1347)		::meta::state::PlayState_obj::vocals->set_time(::meta::data::Conductor_obj::songPosition);
HXLINE(1348)		::meta::state::PlayState_obj::vocals->play(null(),null(),null());
            	}


HX_DEFINE_DYNAMIC_FUNC0(PlayState_obj,resyncVocals,(void))

void PlayState_obj::stepHit(){
            	HX_STACKFRAME(&_hx_pos_a31d76c4ca3ed2cf_1352_stepHit)
HXLINE(1353)		this->super::stepHit();
HXLINE(1355)		bool _hx_tmp;
HXDLIN(1355)		if (!((::meta::state::PlayState_obj::songMusic->_time > (::meta::data::Conductor_obj::songPosition + 20)))) {
HXLINE(1355)			_hx_tmp = (::meta::state::PlayState_obj::songMusic->_time < (::meta::data::Conductor_obj::songPosition - ( (Float)(20) )));
            		}
            		else {
HXLINE(1355)			_hx_tmp = true;
            		}
HXDLIN(1355)		if (_hx_tmp) {
HXLINE(1356)			this->resyncVocals();
            		}
            	}


void PlayState_obj::charactersDance(int curBeat){
            	HX_STACKFRAME(&_hx_pos_a31d76c4ca3ed2cf_1361_charactersDance)
HXLINE(1362)		bool _hx_tmp;
HXDLIN(1362)		if ((::hx::Mod(curBeat,this->gfSpeed) == 0)) {
HXLINE(1362)			_hx_tmp = ::StringTools_obj::startsWith(::meta::state::PlayState_obj::gf->animation->_curAnim->name,HX_("dance",33,83,83,d4));
            		}
            		else {
HXLINE(1362)			_hx_tmp = false;
            		}
HXDLIN(1362)		if (_hx_tmp) {
HXLINE(1363)			::meta::state::PlayState_obj::gf->dance(null());
            		}
HXLINE(1365)		bool _hx_tmp1;
HXDLIN(1365)		if (::StringTools_obj::startsWith(::meta::state::PlayState_obj::boyfriend->animation->_curAnim->name,HX_("idle",14,a7,b3,45))) {
HXLINE(1365)			if ((::hx::Mod(curBeat,2) != 0)) {
HXLINE(1365)				_hx_tmp1 = ::meta::state::PlayState_obj::boyfriend->quickDancer;
            			}
            			else {
HXLINE(1365)				_hx_tmp1 = true;
            			}
            		}
            		else {
HXLINE(1365)			_hx_tmp1 = false;
            		}
HXDLIN(1365)		if (_hx_tmp1) {
HXLINE(1366)			::meta::state::PlayState_obj::boyfriend->dance(null());
            		}
HXLINE(1369)		bool _hx_tmp2;
HXDLIN(1369)		if (::StringTools_obj::startsWith(::meta::state::PlayState_obj::dadOpponent->animation->_curAnim->name,HX_("idle",14,a7,b3,45))) {
HXLINE(1369)			if ((::hx::Mod(curBeat,2) != 0)) {
HXLINE(1369)				_hx_tmp2 = ::meta::state::PlayState_obj::dadOpponent->quickDancer;
            			}
            			else {
HXLINE(1369)				_hx_tmp2 = true;
            			}
            		}
            		else {
HXLINE(1369)			_hx_tmp2 = false;
            		}
HXDLIN(1369)		if (_hx_tmp2) {
HXLINE(1370)			::meta::state::PlayState_obj::dadOpponent->dance(null());
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(PlayState_obj,charactersDance,(void))

void PlayState_obj::beatHit(){
            	HX_STACKFRAME(&_hx_pos_a31d76c4ca3ed2cf_1374_beatHit)
HXLINE(1375)		this->super::beatHit();
HXLINE(1377)		bool _hx_tmp;
HXDLIN(1377)		bool _hx_tmp1;
HXDLIN(1377)		if ((::flixel::FlxG_obj::camera->zoom < ((Float)1.35))) {
HXLINE(1377)			_hx_tmp1 = (::hx::Mod(this->curBeat,4) == 0);
            		}
            		else {
HXLINE(1377)			_hx_tmp1 = false;
            		}
HXDLIN(1377)		if (_hx_tmp1) {
HXLINE(1377)			_hx_tmp = !(( (bool)(::Init_obj::trueSettings->get(HX_("Reduced Movements",82,8d,f2,cf))) ));
            		}
            		else {
HXLINE(1377)			_hx_tmp = false;
            		}
HXDLIN(1377)		if (_hx_tmp) {
HXLINE(1379)			{
HXLINE(1379)				 ::flixel::FlxCamera _g = ::flixel::FlxG_obj::camera;
HXDLIN(1379)				_g->set_zoom((_g->zoom + ((Float)0.015)));
            			}
HXLINE(1380)			{
HXLINE(1380)				 ::flixel::FlxCamera _g1 = ::meta::state::PlayState_obj::camHUD;
HXDLIN(1380)				_g1->set_zoom((_g1->zoom + ((Float)0.05)));
            			}
HXLINE(1381)			{
HXLINE(1381)				int _g2 = 0;
HXDLIN(1381)				::Array< ::Dynamic> _g3 = ::meta::state::PlayState_obj::strumHUD;
HXDLIN(1381)				while((_g2 < _g3->length)){
HXLINE(1381)					 ::flixel::FlxCamera hud = _g3->__get(_g2).StaticCast<  ::flixel::FlxCamera >();
HXDLIN(1381)					_g2 = (_g2 + 1);
HXLINE(1382)					{
HXLINE(1382)						 ::flixel::FlxCamera _g = hud;
HXDLIN(1382)						_g->set_zoom((_g->zoom + ((Float)0.05)));
            					}
            				}
            			}
            		}
HXLINE(1385)		::meta::state::PlayState_obj::uiHUD->beatHit();
HXLINE(1388)		this->charactersDance(this->curBeat);
HXLINE(1391)		this->stageBuild->stageUpdate(this->curBeat,::meta::state::PlayState_obj::boyfriend,::meta::state::PlayState_obj::gf,::meta::state::PlayState_obj::dadOpponent);
            	}


void PlayState_obj::openSubState( ::flixel::FlxSubState SubState){
            	HX_STACKFRAME(&_hx_pos_a31d76c4ca3ed2cf_1411_openSubState)
HXLINE(1412)		if (this->paused) {
HXLINE(1415)			if (::hx::IsNotNull( ::meta::state::PlayState_obj::songMusic )) {
HXLINE(1418)				::meta::state::PlayState_obj::songMusic->pause();
HXLINE(1419)				::meta::state::PlayState_obj::vocals->pause();
            			}
HXLINE(1424)			bool _hx_tmp;
HXDLIN(1424)			if (::hx::IsNotNull( ::meta::state::PlayState_obj::startTimer )) {
HXLINE(1424)				_hx_tmp = !(::meta::state::PlayState_obj::startTimer->finished);
            			}
            			else {
HXLINE(1424)				_hx_tmp = false;
            			}
HXDLIN(1424)			if (_hx_tmp) {
HXLINE(1425)				::meta::state::PlayState_obj::startTimer->active = false;
            			}
            		}
HXLINE(1429)		this->super::openSubState(SubState);
            	}


void PlayState_obj::closeSubState(){
            	HX_STACKFRAME(&_hx_pos_a31d76c4ca3ed2cf_1434_closeSubState)
HXLINE(1435)		if (this->paused) {
HXLINE(1437)			bool _hx_tmp;
HXDLIN(1437)			if (::hx::IsNotNull( ::meta::state::PlayState_obj::songMusic )) {
HXLINE(1437)				_hx_tmp = !(this->startingSong);
            			}
            			else {
HXLINE(1437)				_hx_tmp = false;
            			}
HXDLIN(1437)			if (_hx_tmp) {
HXLINE(1438)				this->resyncVocals();
            			}
HXLINE(1440)			bool _hx_tmp1;
HXDLIN(1440)			if (::hx::IsNotNull( ::meta::state::PlayState_obj::startTimer )) {
HXLINE(1440)				_hx_tmp1 = !(::meta::state::PlayState_obj::startTimer->finished);
            			}
            			else {
HXLINE(1440)				_hx_tmp1 = false;
            			}
HXDLIN(1440)			if (_hx_tmp1) {
HXLINE(1441)				::meta::state::PlayState_obj::startTimer->active = true;
            			}
HXLINE(1442)			this->paused = false;
HXLINE(1445)			::meta::state::PlayState_obj::updateRPC(false);
            		}
HXLINE(1449)		this->super::closeSubState();
            	}


void PlayState_obj::endSong(){
            	HX_GC_STACKFRAME(&_hx_pos_a31d76c4ca3ed2cf_1459_endSong)
HXLINE(1460)		this->canPause = false;
HXLINE(1461)		::meta::state::PlayState_obj::songMusic->set_volume(( (Float)(0) ));
HXLINE(1462)		::meta::state::PlayState_obj::vocals->set_volume(( (Float)(0) ));
HXLINE(1463)		if (( (bool)(::meta::state::PlayState_obj::SONG->__Field(HX_("validScore",b6,dc,18,c7),::hx::paccDynamic)) )) {
HXLINE(1464)			::meta::data::Highscore_obj::saveScore(( (::String)(::meta::state::PlayState_obj::SONG->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic)) ),::meta::state::PlayState_obj::songScore,::meta::state::PlayState_obj::storyDifficulty);
            		}
HXLINE(1466)		if (!(::meta::state::PlayState_obj::isStoryMode)) {
HXLINE(1468)			::Main_obj::switchState(::hx::ObjectPtr<OBJ_>(this), ::meta::state::menus::FreeplayState_obj::__alloc( HX_CTX ,null(),null()));
            		}
            		else {
HXLINE(1473)			 ::Dynamic _hx_tmp = ::hx::ClassOf< ::meta::state::PlayState >();
HXDLIN(1473)			::meta::state::PlayState_obj::campaignScore = (::meta::state::PlayState_obj::campaignScore + ::meta::state::PlayState_obj::songScore);
HXLINE(1476)			::meta::state::PlayState_obj::storyPlaylist->remove(::meta::state::PlayState_obj::storyPlaylist->__get(0));
HXLINE(1479)			bool _hx_tmp1;
HXDLIN(1479)			if ((::meta::state::PlayState_obj::storyPlaylist->length <= 0)) {
HXLINE(1479)				_hx_tmp1 = !(this->endSongEvent);
            			}
            			else {
HXLINE(1479)				_hx_tmp1 = false;
            			}
HXDLIN(1479)			if (_hx_tmp1) {
HXLINE(1482)				::ForeverTools_obj::resetMenuMusic(null());
HXLINE(1485)				this->transIn = ::flixel::addons::transition::FlxTransitionableState_obj::defaultTransIn;
HXLINE(1486)				this->transOut = ::flixel::addons::transition::FlxTransitionableState_obj::defaultTransOut;
HXLINE(1489)				::Main_obj::switchState(::hx::ObjectPtr<OBJ_>(this), ::meta::state::menus::StoryMenuState_obj::__alloc( HX_CTX ,null(),null()));
HXLINE(1492)				if (( (bool)(::meta::state::PlayState_obj::SONG->__Field(HX_("validScore",b6,dc,18,c7),::hx::paccDynamic)) )) {
HXLINE(1493)					::meta::data::Highscore_obj::saveWeekScore(::meta::state::PlayState_obj::storyWeek,::meta::state::PlayState_obj::campaignScore,::meta::state::PlayState_obj::storyDifficulty);
            				}
HXLINE(1496)				::flixel::FlxG_obj::save->flush(null(),null());
            			}
            			else {
HXLINE(1499)				this->songEndSpecificActions();
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(PlayState_obj,endSong,(void))

void PlayState_obj::songEndSpecificActions(){
            	HX_GC_STACKFRAME(&_hx_pos_a31d76c4ca3ed2cf_1505_songEndSpecificActions)
HXLINE(1504)		 ::meta::state::PlayState _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE(1506)		if ((( (::String)(::meta::state::PlayState_obj::SONG->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic)) ).toLowerCase() == HX_("eggnog",61,04,ba,f4))) {
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::meta::state::PlayState,_gthis) HXARGC(1)
            			void _hx_run( ::flixel::util::FlxTimer timer){
            				HX_GC_STACKFRAME(&_hx_pos_a31d76c4ca3ed2cf_1522_songEndSpecificActions)
HXLINE(1522)				_gthis->callDefaultSongEnd();
            			}
            			HX_END_LOCAL_FUNC1((void))

HXLINE(1510)			 ::flixel::FlxSprite blackShit =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,(( (Float)(-(::flixel::FlxG_obj::width)) ) * ::flixel::FlxG_obj::camera->zoom),(( (Float)(-(::flixel::FlxG_obj::height)) ) * ::flixel::FlxG_obj::camera->zoom),null());
HXDLIN(1510)			 ::flixel::FlxSprite blackShit1 = blackShit->makeGraphic((::flixel::FlxG_obj::width * 3),(::flixel::FlxG_obj::height * 3),-16777216,null(),null());
HXLINE(1512)			blackShit1->scrollFactor->set(null(),null());
HXLINE(1513)			this->add(blackShit1);
HXLINE(1514)			::meta::state::PlayState_obj::camHUD->set_visible(false);
HXLINE(1517)			 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp = ::flixel::FlxG_obj::sound;
HXDLIN(1517)			_hx_tmp->play(::Paths_obj::sound(HX_("Lights_Shut_off",86,a9,43,29),null()),null(),null(),null(),null(),null());
HXLINE(1520)			 ::flixel::util::FlxTimer eggnogEndTimer =  ::flixel::util::FlxTimer_obj::__alloc( HX_CTX ,null());
HXDLIN(1520)			 ::flixel::util::FlxTimer eggnogEndTimer1 = eggnogEndTimer->start((::meta::data::Conductor_obj::crochet / ( (Float)(1000) )), ::Dynamic(new _hx_Closure_0(_gthis)),1);
            		}
            		else {
HXLINE(1526)			this->callDefaultSongEnd();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(PlayState_obj,songEndSpecificActions,(void))

void PlayState_obj::callDefaultSongEnd(){
            	HX_GC_STACKFRAME(&_hx_pos_a31d76c4ca3ed2cf_1531_callDefaultSongEnd)
HXLINE(1532)		::String difficulty = (HX_("-",2d,00,00,00) + ::meta::CoolUtil_obj::difficultyFromNumber(::meta::state::PlayState_obj::storyDifficulty).toLowerCase());
HXLINE(1533)		difficulty = ::StringTools_obj::replace(difficulty,HX_("-normal",14,52,af,7f),HX_("",00,00,00,00));
HXLINE(1535)		::flixel::addons::transition::FlxTransitionableState_obj::skipNextTransIn = true;
HXLINE(1536)		::flixel::addons::transition::FlxTransitionableState_obj::skipNextTransOut = true;
HXLINE(1538)		::String _hx_tmp = (::meta::state::PlayState_obj::storyPlaylist->__get(0).toLowerCase() + difficulty);
HXDLIN(1538)		::meta::state::PlayState_obj::SONG = ::meta::data::Song_obj::loadFromJson(_hx_tmp,::meta::state::PlayState_obj::storyPlaylist->__get(0));
HXLINE(1539)		::ForeverTools_obj::killMusic(::Array_obj< ::Dynamic>::__new(2)->init(0,::meta::state::PlayState_obj::songMusic)->init(1,::meta::state::PlayState_obj::vocals));
HXLINE(1542)		{
HXLINE(1542)			 ::flixel::FlxState nextState =  ::meta::state::PlayState_obj::__alloc( HX_CTX ,null(),null());
HXDLIN(1542)			if (::flixel::FlxG_obj::game->_state->switchTo(nextState)) {
HXLINE(1542)				::flixel::FlxG_obj::game->_requestedState = nextState;
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(PlayState_obj,callDefaultSongEnd,(void))

void PlayState_obj::songIntroCutscene(){
            	HX_GC_STACKFRAME(&_hx_pos_a31d76c4ca3ed2cf_1548_songIntroCutscene)
HXLINE(1547)		 ::meta::state::PlayState _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE(1549)		::String _hx_switch_0 = this->curSong.toLowerCase();
            		if (  (_hx_switch_0==HX_("roses",04,6c,64,ed)) ){
HXLINE(1584)			 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp = ::flixel::FlxG_obj::sound;
HXDLIN(1584)			_hx_tmp->play(::Paths_obj::sound(HX_("ANGRY_TEXT_BOX",57,5c,5c,19),null()),null(),null(),null(),null(),null());
HXLINE(1585)			this->callTextbox();
HXLINE(1582)			goto _hx_goto_59;
            		}
            		if (  (_hx_switch_0==HX_("thorns",9c,bf,c7,8c)) ){
            			HX_BEGIN_LOCAL_FUNC_S3(::hx::LocalFunc,_hx_Closure_3, ::meta::state::PlayState,_gthis, ::flixel::FlxSprite,red1, ::flixel::FlxSprite,senpaiEvil) HXARGC(1)
            			void _hx_run( ::flixel::util::FlxTimer swagTimer){
            				HX_GC_STACKFRAME(&_hx_pos_a31d76c4ca3ed2cf_1606_songIntroCutscene)
HXLINE(1607)				{
HXLINE(1607)					 ::flixel::FlxSprite _g = senpaiEvil;
HXDLIN(1607)					_g->set_alpha((_g->alpha + ((Float)0.15)));
            				}
HXLINE(1608)				if ((senpaiEvil->alpha < 1)) {
HXLINE(1609)					swagTimer->reset(null());
            				}
            				else {
            					HX_BEGIN_LOCAL_FUNC_S3(::hx::LocalFunc,_hx_Closure_1, ::meta::state::PlayState,_gthis, ::flixel::FlxSprite,red1, ::flixel::FlxSprite,senpaiEvil) HXARGC(0)
            					void _hx_run(){
            						HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::meta::state::PlayState,_gthis) HXARGC(0)
            						void _hx_run(){
            							HX_GC_STACKFRAME(&_hx_pos_a31d76c4ca3ed2cf_1618_songIntroCutscene)
HXLINE(1619)							{
HXLINE(1619)								int _g = 0;
HXDLIN(1619)								::Array< ::Dynamic> _g1 = _gthis->allUIs;
HXDLIN(1619)								while((_g < _g1->length)){
HXLINE(1619)									 ::flixel::FlxCamera hud = _g1->__get(_g).StaticCast<  ::flixel::FlxCamera >();
HXDLIN(1619)									_g = (_g + 1);
HXLINE(1620)									hud->set_visible(true);
            								}
            							}
HXLINE(1621)							_gthis->callTextbox();
            						}
            						HX_END_LOCAL_FUNC0((void))

            						HX_GC_STACKFRAME(&_hx_pos_a31d76c4ca3ed2cf_1614_songIntroCutscene)
HXLINE(1615)						_gthis->remove(senpaiEvil,null()).StaticCast<  ::flixel::FlxBasic >();
HXLINE(1616)						_gthis->remove(red1,null()).StaticCast<  ::flixel::FlxBasic >();
HXLINE(1617)						::flixel::FlxG_obj::camera->fade(-1,((Float)0.01),true, ::Dynamic(new _hx_Closure_0(_gthis)),true);
            					}
            					HX_END_LOCAL_FUNC0((void))

            					HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_2) HXARGC(1)
            					void _hx_run( ::flixel::util::FlxTimer deadTime){
            						HX_GC_STACKFRAME(&_hx_pos_a31d76c4ca3ed2cf_1626_songIntroCutscene)
HXLINE(1626)						::flixel::FlxG_obj::camera->fade(-1,((Float)1.6),false,null(),null());
            					}
            					HX_END_LOCAL_FUNC1((void))

HXLINE(1612)					senpaiEvil->animation->play(HX_("idle",14,a7,b3,45),null(),null(),null());
HXLINE(1613)					 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp = ::flixel::FlxG_obj::sound;
HXDLIN(1613)					_hx_tmp->play(::Paths_obj::sound(HX_("Senpai_Dies",56,a2,b9,ec),null()),1,false,null(),true, ::Dynamic(new _hx_Closure_1(_gthis,red1,senpaiEvil)));
HXLINE(1624)					 ::flixel::util::FlxTimer_obj::__alloc( HX_CTX ,null())->start(((Float)3.2), ::Dynamic(new _hx_Closure_2()),null());
            				}
            			}
            			HX_END_LOCAL_FUNC1((void))

HXLINE(1587)			this->inCutscene = true;
HXLINE(1588)			{
HXLINE(1588)				int _g = 0;
HXDLIN(1588)				::Array< ::Dynamic> _g1 = this->allUIs;
HXDLIN(1588)				while((_g < _g1->length)){
HXLINE(1588)					 ::flixel::FlxCamera hud = _g1->__get(_g).StaticCast<  ::flixel::FlxCamera >();
HXDLIN(1588)					_g = (_g + 1);
HXLINE(1589)					hud->set_visible(false);
            				}
            			}
HXLINE(1591)			 ::flixel::FlxSprite red =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,-100,-100,null());
HXDLIN(1591)			 ::flixel::FlxSprite red1 = red->makeGraphic((::flixel::FlxG_obj::width * 2),(::flixel::FlxG_obj::height * 2),-58575,null(),null());
HXLINE(1592)			red1->scrollFactor->set(null(),null());
HXLINE(1594)			 ::flixel::FlxSprite senpaiEvil =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,null(),null(),null());
HXLINE(1595)			 ::flixel::FlxSprite senpaiEvil1 = senpaiEvil;
HXDLIN(1595)			::String library = null();
HXDLIN(1595)			::String _hx_tmp = ::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("cutscene/senpai/senpaiCrazy",47,60,93,5c)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),library);
HXDLIN(1595)			senpaiEvil1->set_frames(::flixel::graphics::frames::FlxAtlasFrames_obj::fromSparrow(_hx_tmp,::sys::io::File_obj::getContent(::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("cutscene/senpai/senpaiCrazy",47,60,93,5c)) + HX_(".xml",69,3e,c3,1e)),HX_("TEXT",ad,94,ba,37),library))));
HXLINE(1596)			senpaiEvil->animation->addByPrefix(HX_("idle",14,a7,b3,45),HX_("Senpai Pre Explosion",54,71,6e,81),24,false,null(),null());
HXLINE(1597)			 ::flixel::FlxSprite senpaiEvil2 = senpaiEvil;
HXDLIN(1597)			senpaiEvil2->setGraphicSize(::Std_obj::_hx_int((senpaiEvil->get_width() * ( (Float)(6) ))),null());
HXLINE(1598)			senpaiEvil->scrollFactor->set(null(),null());
HXLINE(1599)			senpaiEvil->updateHitbox();
HXLINE(1600)			senpaiEvil->screenCenter(null());
HXLINE(1602)			this->add(red1);
HXLINE(1603)			this->add(senpaiEvil);
HXLINE(1604)			senpaiEvil->set_alpha(( (Float)(0) ));
HXLINE(1605)			 ::flixel::util::FlxTimer_obj::__alloc( HX_CTX ,null())->start(((Float)0.3), ::Dynamic(new _hx_Closure_3(_gthis,red1,senpaiEvil)),null());
HXLINE(1586)			goto _hx_goto_59;
            		}
            		if (  (_hx_switch_0==HX_("winter-horrorland",9d,39,f4,1e)) ){
            			HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_6, ::meta::state::PlayState,_gthis, ::flixel::FlxSprite,blackScreen2) HXARGC(1)
            			void _hx_run( ::flixel::util::FlxTimer tmr){
            				HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_5, ::meta::state::PlayState,_gthis, ::flixel::FlxSprite,blackScreen2) HXARGC(1)
            				void _hx_run( ::flixel::util::FlxTimer tmr){
            					HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_4, ::meta::state::PlayState,_gthis) HXARGC(1)
            					void _hx_run( ::flixel::tweens::FlxTween twn){
            						HX_GC_STACKFRAME(&_hx_pos_a31d76c4ca3ed2cf_1575_songIntroCutscene)
HXLINE(1575)						_gthis->startCountdown();
            					}
            					HX_END_LOCAL_FUNC1((void))

            					HX_GC_STACKFRAME(&_hx_pos_a31d76c4ca3ed2cf_1568_songIntroCutscene)
HXLINE(1569)					::meta::state::PlayState_obj::camHUD->set_visible(true);
HXLINE(1570)					_gthis->remove(blackScreen2,null()).StaticCast<  ::flixel::FlxBasic >();
HXLINE(1571)					::flixel::tweens::FlxTween_obj::tween(::flixel::FlxG_obj::camera, ::Dynamic(::hx::Anon_obj::Create(1)
            						->setFixed(0,HX_("zoom",13,a3,f8,50),::meta::state::PlayState_obj::defaultCamZoom)),((Float)2.5), ::Dynamic(::hx::Anon_obj::Create(2)
            						->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::quadInOut_dyn())
            						->setFixed(1,HX_("onComplete",f8,d4,7e,5d), ::Dynamic(new _hx_Closure_4(_gthis)))));
            				}
            				HX_END_LOCAL_FUNC1((void))

            				HX_GC_STACKFRAME(&_hx_pos_a31d76c4ca3ed2cf_1559_songIntroCutscene)
HXLINE(1560)				_gthis->remove(blackScreen2,null()).StaticCast<  ::flixel::FlxBasic >();
HXLINE(1561)				 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp = ::flixel::FlxG_obj::sound;
HXDLIN(1561)				_hx_tmp->play(::Paths_obj::sound(HX_("Lights_Turn_On",5f,e1,29,ad),null()),null(),null(),null(),null(),null());
HXLINE(1562)				_gthis->camFollow->set_y(( (Float)(-2050) ));
HXLINE(1563)				{
HXLINE(1563)					 ::flixel::FlxObject _g = _gthis->camFollow;
HXDLIN(1563)					_g->set_x((_g->x + 200));
            				}
HXLINE(1564)				{
HXLINE(1564)					 ::flixel::FlxCamera _this = ::flixel::FlxG_obj::camera;
HXDLIN(1564)					 ::flixel::math::FlxPoint point = _gthis->camFollow->getPosition(null());
HXDLIN(1564)					_this->scroll->set((point->x - (( (Float)(_this->width) ) * ((Float)0.5))),(point->y - (( (Float)(_this->height) ) * ((Float)0.5))));
HXDLIN(1564)					if (point->_weak) {
HXLINE(1564)						point->put();
            					}
            				}
HXLINE(1565)				::flixel::FlxG_obj::camera->set_zoom(((Float)1.5));
HXLINE(1567)				 ::flixel::util::FlxTimer_obj::__alloc( HX_CTX ,null())->start(((Float)0.8), ::Dynamic(new _hx_Closure_5(_gthis,blackScreen2)),null());
            			}
            			HX_END_LOCAL_FUNC1((void))

HXLINE(1552)			this->inCutscene = true;
HXLINE(1553)			 ::flixel::FlxSprite blackScreen =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,0,0,null());
HXDLIN(1553)			int blackScreen1 = ::Std_obj::_hx_int(( (Float)((::flixel::FlxG_obj::width * 2)) ));
HXDLIN(1553)			 ::flixel::FlxSprite blackScreen2 = blackScreen->makeGraphic(blackScreen1,::Std_obj::_hx_int(( (Float)((::flixel::FlxG_obj::height * 2)) )),-16777216,null(),null());
HXLINE(1554)			this->add(blackScreen2);
HXLINE(1555)			blackScreen2->scrollFactor->set(null(),null());
HXLINE(1556)			::meta::state::PlayState_obj::camHUD->set_visible(false);
HXLINE(1558)			 ::flixel::util::FlxTimer_obj::__alloc( HX_CTX ,null())->start(((Float)0.1), ::Dynamic(new _hx_Closure_6(_gthis,blackScreen2)),null());
HXLINE(1551)			goto _hx_goto_59;
            		}
            		/* default */{
HXLINE(1631)			this->callTextbox();
            		}
            		_hx_goto_59:;
            	}


HX_DEFINE_DYNAMIC_FUNC0(PlayState_obj,songIntroCutscene,(void))

void PlayState_obj::callTextbox(){
            	HX_STACKFRAME(&_hx_pos_a31d76c4ca3ed2cf_1636_callTextbox)
HXLINE(1637)		::String library = null();
HXDLIN(1637)		::String dialogPath = ::Paths_obj::getPath(((HX_("songs/",71,e7,88,2d) + (( (::String)(::meta::state::PlayState_obj::SONG->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic)) ).toLowerCase() + HX_("/dialogue",47,74,e6,61))) + HX_(".json",56,f1,d6,c2)),HX_("TEXT",ad,94,ba,37),library);
HXLINE(1638)		if (::sys::FileSystem_obj::exists(dialogPath)) {
HXLINE(1640)			this->startedCountdown = false;
HXLINE(1642)			this->dialogueBox = ::gameObjects::userInterface::DialogueBox_obj::createDialogue(::sys::io::File_obj::getContent(dialogPath));
HXLINE(1643)			this->dialogueBox->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,::meta::state::PlayState_obj::dialogueHUD));
HXLINE(1644)			this->dialogueBox->whenDaFinish = this->startCountdown_dyn();
HXLINE(1646)			this->add(this->dialogueBox);
            		}
            		else {
HXLINE(1649)			this->startCountdown();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(PlayState_obj,callTextbox,(void))

void PlayState_obj::startCountdown(){
            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_3, ::meta::state::PlayState,_gthis) HXARGC(1)
            		void _hx_run( ::flixel::util::FlxTimer tmr){
            			HX_GC_STACKFRAME(&_hx_pos_a31d76c4ca3ed2cf_1684_startCountdown)
HXLINE(1685)			_gthis->startedCountdown = true;
HXLINE(1687)			_gthis->charactersDance(_gthis->curBeat);
HXLINE(1689)			 ::haxe::ds::StringMap introAssets =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXLINE(1690)			{
HXLINE(1691)				::String value = ::ForeverTools_obj::returnSkinAsset(HX_("ready",63,a0,ba,e6),::meta::state::PlayState_obj::assetModifier,::meta::state::PlayState_obj::changeableSkin,HX_("UI",54,4a,00,00),null(),null());
HXLINE(1692)				::String value1 = ::ForeverTools_obj::returnSkinAsset(HX_("set",a2,9b,57,00),::meta::state::PlayState_obj::assetModifier,::meta::state::PlayState_obj::changeableSkin,HX_("UI",54,4a,00,00),null(),null());
HXLINE(1690)				introAssets->set(HX_("default",c1,d8,c3,9b),::Array_obj< ::String >::__new(3)->init(0,value)->init(1,value1)->init(2,::ForeverTools_obj::returnSkinAsset(HX_("go",28,5a,00,00),::meta::state::PlayState_obj::assetModifier,::meta::state::PlayState_obj::changeableSkin,HX_("UI",54,4a,00,00),null(),null())));
            			}
HXLINE(1696)			::Array< ::String > introAlts = ( (::Array< ::String >)(introAssets->get(HX_("default",c1,d8,c3,9b))) );
HXLINE(1697)			{
HXLINE(1697)				 ::Dynamic value2 = introAssets->keys();
HXDLIN(1697)				while(( (bool)(value2->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXLINE(1697)					::String value = ( (::String)(value2->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXLINE(1699)					if ((value == ::meta::state::PlayState_obj::curStage)) {
HXLINE(1700)						introAlts = ( (::Array< ::String >)(introAssets->get(value)) );
            					}
            				}
            			}
HXLINE(1703)			switch((int)(::meta::state::PlayState_obj::swagCounter)){
            				case (int)0: {
HXLINE(1706)					 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp = ::flixel::FlxG_obj::sound;
HXDLIN(1706)					_hx_tmp->play(::Paths_obj::sound((HX_("intro3-",06,6a,b9,1f) + ::meta::state::PlayState_obj::assetModifier),null()),((Float)0.6),null(),null(),null(),null());
HXLINE(1707)					::meta::data::Conductor_obj::songPosition = -((::meta::data::Conductor_obj::crochet * ( (Float)(4) )));
            				}
            				break;
            				case (int)1: {
            					HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::flixel::FlxSprite,ready1) HXARGC(1)
            					void _hx_run( ::flixel::tweens::FlxTween twn){
            						HX_GC_STACKFRAME(&_hx_pos_a31d76c4ca3ed2cf_1722_startCountdown)
HXLINE(1722)						ready1->destroy();
            					}
            					HX_END_LOCAL_FUNC1((void))

HXLINE(1709)					 ::flixel::FlxSprite ready =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,null(),null(),null());
HXDLIN(1709)					::String library = null();
HXDLIN(1709)					 ::flixel::FlxSprite ready1 = ready->loadGraphic(::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + introAlts->__get(0)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),library),null(),null(),null(),null(),null());
HXLINE(1710)					ready1->scrollFactor->set(null(),null());
HXLINE(1711)					ready1->updateHitbox();
HXLINE(1713)					if ((::meta::state::PlayState_obj::assetModifier == HX_("pixel",86,c6,a3,c2))) {
HXLINE(1714)						 ::flixel::FlxSprite ready = ready1;
HXDLIN(1714)						Float _hx_tmp = ready1->get_width();
HXDLIN(1714)						ready->setGraphicSize(::Std_obj::_hx_int((_hx_tmp * ::meta::state::PlayState_obj::daPixelZoom)),null());
            					}
HXLINE(1716)					ready1->screenCenter(null());
HXLINE(1717)					_gthis->add(ready1).StaticCast<  ::flixel::FlxBasic >();
HXLINE(1718)					 ::flixel::FlxSprite ready2 = ready1;
HXDLIN(1718)					 ::flixel::FlxSprite _g = ready1;
HXDLIN(1718)					 ::Dynamic _hx_tmp =  ::Dynamic(::hx::Anon_obj::Create(2)
            						->setFixed(0,HX_("y",79,00,00,00),_g->set_y((_g->y + 100)))
            						->setFixed(1,HX_("alpha",5e,a7,96,21),0));
HXDLIN(1718)					::flixel::tweens::FlxTween_obj::tween(ready2,_hx_tmp,(::meta::data::Conductor_obj::crochet / ( (Float)(1000) )), ::Dynamic(::hx::Anon_obj::Create(2)
            						->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::cubeInOut_dyn())
            						->setFixed(1,HX_("onComplete",f8,d4,7e,5d), ::Dynamic(new _hx_Closure_0(ready1)))));
HXLINE(1725)					 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp1 = ::flixel::FlxG_obj::sound;
HXDLIN(1725)					_hx_tmp1->play(::Paths_obj::sound((HX_("intro2-",27,69,b9,1f) + ::meta::state::PlayState_obj::assetModifier),null()),((Float)0.6),null(),null(),null(),null());
HXLINE(1727)					::meta::data::Conductor_obj::songPosition = -((::meta::data::Conductor_obj::crochet * ( (Float)(3) )));
            				}
            				break;
            				case (int)2: {
            					HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_1, ::flixel::FlxSprite,set1) HXARGC(1)
            					void _hx_run( ::flixel::tweens::FlxTween twn){
            						HX_GC_STACKFRAME(&_hx_pos_a31d76c4ca3ed2cf_1741_startCountdown)
HXLINE(1741)						set1->destroy();
            					}
            					HX_END_LOCAL_FUNC1((void))

HXLINE(1729)					 ::flixel::FlxSprite set =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,null(),null(),null());
HXDLIN(1729)					::String library = null();
HXDLIN(1729)					 ::flixel::FlxSprite set1 = set->loadGraphic(::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + introAlts->__get(1)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),library),null(),null(),null(),null(),null());
HXLINE(1730)					set1->scrollFactor->set(null(),null());
HXLINE(1732)					if ((::meta::state::PlayState_obj::assetModifier == HX_("pixel",86,c6,a3,c2))) {
HXLINE(1733)						 ::flixel::FlxSprite set = set1;
HXDLIN(1733)						Float _hx_tmp = set1->get_width();
HXDLIN(1733)						set->setGraphicSize(::Std_obj::_hx_int((_hx_tmp * ::meta::state::PlayState_obj::daPixelZoom)),null());
            					}
HXLINE(1735)					set1->screenCenter(null());
HXLINE(1736)					_gthis->add(set1).StaticCast<  ::flixel::FlxBasic >();
HXLINE(1737)					 ::flixel::FlxSprite set2 = set1;
HXDLIN(1737)					 ::flixel::FlxSprite _g = set1;
HXDLIN(1737)					 ::Dynamic _hx_tmp =  ::Dynamic(::hx::Anon_obj::Create(2)
            						->setFixed(0,HX_("y",79,00,00,00),_g->set_y((_g->y + 100)))
            						->setFixed(1,HX_("alpha",5e,a7,96,21),0));
HXDLIN(1737)					::flixel::tweens::FlxTween_obj::tween(set2,_hx_tmp,(::meta::data::Conductor_obj::crochet / ( (Float)(1000) )), ::Dynamic(::hx::Anon_obj::Create(2)
            						->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::cubeInOut_dyn())
            						->setFixed(1,HX_("onComplete",f8,d4,7e,5d), ::Dynamic(new _hx_Closure_1(set1)))));
HXLINE(1744)					 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp1 = ::flixel::FlxG_obj::sound;
HXDLIN(1744)					_hx_tmp1->play(::Paths_obj::sound((HX_("intro1-",48,68,b9,1f) + ::meta::state::PlayState_obj::assetModifier),null()),((Float)0.6),null(),null(),null(),null());
HXLINE(1746)					::meta::data::Conductor_obj::songPosition = -((::meta::data::Conductor_obj::crochet * ( (Float)(2) )));
            				}
            				break;
            				case (int)3: {
            					HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_2, ::flixel::FlxSprite,go1) HXARGC(1)
            					void _hx_run( ::flixel::tweens::FlxTween twn){
            						HX_GC_STACKFRAME(&_hx_pos_a31d76c4ca3ed2cf_1762_startCountdown)
HXLINE(1762)						go1->destroy();
            					}
            					HX_END_LOCAL_FUNC1((void))

HXLINE(1748)					 ::flixel::FlxSprite go =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,null(),null(),null());
HXDLIN(1748)					::String library = null();
HXDLIN(1748)					 ::flixel::FlxSprite go1 = go->loadGraphic(::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + introAlts->__get(2)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),library),null(),null(),null(),null(),null());
HXLINE(1749)					go1->scrollFactor->set(null(),null());
HXLINE(1751)					if ((::meta::state::PlayState_obj::assetModifier == HX_("pixel",86,c6,a3,c2))) {
HXLINE(1752)						 ::flixel::FlxSprite go = go1;
HXDLIN(1752)						Float _hx_tmp = go1->get_width();
HXDLIN(1752)						go->setGraphicSize(::Std_obj::_hx_int((_hx_tmp * ::meta::state::PlayState_obj::daPixelZoom)),null());
            					}
HXLINE(1754)					go1->updateHitbox();
HXLINE(1756)					go1->screenCenter(null());
HXLINE(1757)					_gthis->add(go1).StaticCast<  ::flixel::FlxBasic >();
HXLINE(1758)					 ::flixel::FlxSprite go2 = go1;
HXDLIN(1758)					 ::flixel::FlxSprite _g = go1;
HXDLIN(1758)					 ::Dynamic _hx_tmp =  ::Dynamic(::hx::Anon_obj::Create(2)
            						->setFixed(0,HX_("y",79,00,00,00),_g->set_y((_g->y + 100)))
            						->setFixed(1,HX_("alpha",5e,a7,96,21),0));
HXDLIN(1758)					::flixel::tweens::FlxTween_obj::tween(go2,_hx_tmp,(::meta::data::Conductor_obj::crochet / ( (Float)(1000) )), ::Dynamic(::hx::Anon_obj::Create(2)
            						->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::cubeInOut_dyn())
            						->setFixed(1,HX_("onComplete",f8,d4,7e,5d), ::Dynamic(new _hx_Closure_2(go1)))));
HXLINE(1765)					 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp1 = ::flixel::FlxG_obj::sound;
HXDLIN(1765)					_hx_tmp1->play(::Paths_obj::sound((HX_("introGo-",f9,c1,92,a2) + ::meta::state::PlayState_obj::assetModifier),null()),((Float)0.6),null(),null(),null(),null());
HXLINE(1767)					::meta::data::Conductor_obj::songPosition = -(::meta::data::Conductor_obj::crochet);
            				}
            				break;
            			}
HXLINE(1770)			 ::Dynamic _hx_tmp = ::hx::ClassOf< ::meta::state::PlayState >();
HXDLIN(1770)			::meta::state::PlayState_obj::swagCounter = (::meta::state::PlayState_obj::swagCounter + 1);
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_GC_STACKFRAME(&_hx_pos_a31d76c4ca3ed2cf_1676_startCountdown)
HXLINE(1675)		 ::meta::state::PlayState _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE(1677)		this->inCutscene = false;
HXLINE(1678)		::meta::data::Conductor_obj::songPosition = -((::meta::data::Conductor_obj::crochet * ( (Float)(5) )));
HXLINE(1679)		::meta::state::PlayState_obj::swagCounter = 0;
HXLINE(1681)		::meta::state::PlayState_obj::camHUD->set_visible(true);
HXLINE(1683)		 ::flixel::util::FlxTimer _hx_tmp =  ::flixel::util::FlxTimer_obj::__alloc( HX_CTX ,null());
HXDLIN(1683)		::meta::state::PlayState_obj::startTimer = _hx_tmp->start((::meta::data::Conductor_obj::crochet / ( (Float)(1000) )), ::Dynamic(new _hx_Closure_3(_gthis)),5);
            	}


HX_DEFINE_DYNAMIC_FUNC0(PlayState_obj,startCountdown,(void))

 ::Dynamic PlayState_obj::add( ::Dynamic _tmp_Object){
            	HX_STACKFRAME(&_hx_pos_a31d76c4ca3ed2cf_1776_add)
HXLINE(1777)		 ::flixel::FlxBasic Object = ( ( ::flixel::FlxBasic)(_tmp_Object) );
HXDLIN(1777)		bool _hx_tmp;
HXDLIN(1777)		if (( (bool)(::Init_obj::trueSettings->get(HX_("Disable Antialiasing",6c,04,2e,d8))) )) {
HXLINE(1777)			_hx_tmp = ::Std_obj::isOfType(Object,::hx::ClassOf< ::flixel::FlxSprite >());
            		}
            		else {
HXLINE(1777)			_hx_tmp = false;
            		}
HXDLIN(1777)		if (_hx_tmp) {
HXLINE(1778)			::hx::TCast<  ::flixel::FlxSprite >::cast(Object)->set_antialiasing(false);
            		}
HXLINE(1779)		return this->super::add(Object);
            	}


 ::flixel::util::FlxTimer PlayState_obj::startTimer;

::String PlayState_obj::curStage;

 ::Dynamic PlayState_obj::SONG;

bool PlayState_obj::isStoryMode;

int PlayState_obj::storyWeek;

::Array< ::String > PlayState_obj::storyPlaylist;

int PlayState_obj::storyDifficulty;

 ::flixel::_hx_system::FlxSound PlayState_obj::songMusic;

 ::flixel::_hx_system::FlxSound PlayState_obj::vocals;

int PlayState_obj::campaignScore;

 ::gameObjects::Character PlayState_obj::dadOpponent;

 ::gameObjects::Character PlayState_obj::gf;

 ::gameObjects::Boyfriend PlayState_obj::boyfriend;

::String PlayState_obj::assetModifier;

::String PlayState_obj::changeableSkin;

::String PlayState_obj::songDetails;

::String PlayState_obj::detailsSub;

::String PlayState_obj::detailsPausedText;

 ::flixel::FlxObject PlayState_obj::prevCamFollow;

Float PlayState_obj::health;

int PlayState_obj::combo;

int PlayState_obj::misses;

 ::flixel::FlxCamera PlayState_obj::camHUD;

 ::flixel::FlxCamera PlayState_obj::camGame;

 ::flixel::FlxCamera PlayState_obj::dialogueHUD;

Float PlayState_obj::defaultCamZoom;

::Array< Float > PlayState_obj::forceZoom;

int PlayState_obj::songScore;

::String PlayState_obj::iconRPC;

Float PlayState_obj::songLength;

 ::gameObjects::userInterface::ClassHUD PlayState_obj::uiHUD;

Float PlayState_obj::daPixelZoom;

::String PlayState_obj::determinedChartType;

 ::flixel::group::FlxTypedGroup PlayState_obj::strumLines;

::Array< ::Dynamic> PlayState_obj::strumHUD;

 ::flixel::FlxSprite PlayState_obj::lastRating;

::Array< ::Dynamic> PlayState_obj::lastCombo;

void PlayState_obj::updateRPC(bool pausedRPC){
            	HX_STACKFRAME(&_hx_pos_a31d76c4ca3ed2cf_1052_updateRPC)
HXLINE(1054)		::String displayRPC;
HXDLIN(1054)		if (pausedRPC) {
HXLINE(1054)			displayRPC = ::meta::state::PlayState_obj::detailsPausedText;
            		}
            		else {
HXLINE(1054)			displayRPC = ::meta::state::PlayState_obj::songDetails;
            		}
HXLINE(1056)		if ((::meta::state::PlayState_obj::health > 0)) {
HXLINE(1058)			bool _hx_tmp;
HXDLIN(1058)			if ((::meta::data::Conductor_obj::songPosition > 0)) {
HXLINE(1058)				_hx_tmp = !(pausedRPC);
            			}
            			else {
HXLINE(1058)				_hx_tmp = false;
            			}
HXDLIN(1058)			if (_hx_tmp) {
HXLINE(1059)				::meta::data::dependency::Discord_obj::changePresence(displayRPC,::meta::state::PlayState_obj::detailsSub,::meta::state::PlayState_obj::iconRPC,true,(::meta::state::PlayState_obj::songLength - ::meta::data::Conductor_obj::songPosition));
            			}
            			else {
HXLINE(1061)				::meta::data::dependency::Discord_obj::changePresence(displayRPC,::meta::state::PlayState_obj::detailsSub,::meta::state::PlayState_obj::iconRPC,null(),null());
            			}
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(PlayState_obj,updateRPC,(void))

void PlayState_obj::resetMusic(){
            	HX_STACKFRAME(&_hx_pos_a31d76c4ca3ed2cf_1401_resetMusic)
HXLINE(1403)		if (::hx::IsNotNull( ::meta::state::PlayState_obj::songMusic )) {
HXLINE(1404)			 ::flixel::_hx_system::FlxSound _this = ::meta::state::PlayState_obj::songMusic;
HXDLIN(1404)			_this->cleanup(_this->autoDestroy,true);
            		}
HXLINE(1406)		if (::hx::IsNotNull( ::meta::state::PlayState_obj::vocals )) {
HXLINE(1407)			 ::flixel::_hx_system::FlxSound _this = ::meta::state::PlayState_obj::vocals;
HXDLIN(1407)			_this->cleanup(_this->autoDestroy,true);
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(PlayState_obj,resetMusic,(void))

bool PlayState_obj::skipCutscenes(){
            	HX_STACKFRAME(&_hx_pos_a31d76c4ca3ed2cf_1652_skipCutscenes)
HXLINE(1654)		bool _hx_tmp;
HXDLIN(1654)		if (::hx::IsNotNull( ::Init_obj::trueSettings->get(HX_("Skip Text",ee,65,46,c7)) )) {
HXLINE(1654)			_hx_tmp = ::Std_obj::isOfType(::Init_obj::trueSettings->get(HX_("Skip Text",ee,65,46,c7)),::hx::ClassOf< ::String >());
            		}
            		else {
HXLINE(1654)			_hx_tmp = false;
            		}
HXDLIN(1654)		if (_hx_tmp) {
HXLINE(1656)			::String _hx_switch_0 = ::hx::TCast< ::String >::cast(::Init_obj::trueSettings->get(HX_("Skip Text",ee,65,46,c7)));
            			if (  (_hx_switch_0==HX_("freeplay only",ec,40,4e,0b)) ){
HXLINE(1661)				if (!(::meta::state::PlayState_obj::isStoryMode)) {
HXLINE(1662)					return true;
            				}
            				else {
HXLINE(1664)					return false;
            				}
HXLINE(1661)				goto _hx_goto_80;
            			}
            			if (  (_hx_switch_0==HX_("never",8c,3e,30,99)) ){
HXLINE(1659)				return false;
HXDLIN(1659)				goto _hx_goto_80;
            			}
            			/* default */{
HXLINE(1666)				return true;
            			}
            			_hx_goto_80:;
            		}
HXLINE(1670)		return false;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(PlayState_obj,skipCutscenes,return )

int PlayState_obj::swagCounter;


::hx::ObjectPtr< PlayState_obj > PlayState_obj::__new( ::flixel::addons::transition::TransitionData TransIn, ::flixel::addons::transition::TransitionData TransOut) {
	::hx::ObjectPtr< PlayState_obj > __this = new PlayState_obj();
	__this->__construct(TransIn,TransOut);
	return __this;
}

::hx::ObjectPtr< PlayState_obj > PlayState_obj::__alloc(::hx::Ctx *_hx_ctx, ::flixel::addons::transition::TransitionData TransIn, ::flixel::addons::transition::TransitionData TransOut) {
	PlayState_obj *__this = (PlayState_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(PlayState_obj), true, "meta.state.PlayState"));
	*(void **)__this = PlayState_obj::_hx_vtable;
	__this->__construct(TransIn,TransOut);
	return __this;
}

PlayState_obj::PlayState_obj()
{
}

void PlayState_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(PlayState);
	HX_MARK_MEMBER_NAME(unspawnNotes,"unspawnNotes");
	HX_MARK_MEMBER_NAME(ratingArray,"ratingArray");
	HX_MARK_MEMBER_NAME(allSicks,"allSicks");
	HX_MARK_MEMBER_NAME(numberOfKeys,"numberOfKeys");
	HX_MARK_MEMBER_NAME(curSection,"curSection");
	HX_MARK_MEMBER_NAME(camFollow,"camFollow");
	HX_MARK_MEMBER_NAME(curSong,"curSong");
	HX_MARK_MEMBER_NAME(gfSpeed,"gfSpeed");
	HX_MARK_MEMBER_NAME(generatedMusic,"generatedMusic");
	HX_MARK_MEMBER_NAME(startingSong,"startingSong");
	HX_MARK_MEMBER_NAME(paused,"paused");
	HX_MARK_MEMBER_NAME(startedCountdown,"startedCountdown");
	HX_MARK_MEMBER_NAME(inCutscene,"inCutscene");
	HX_MARK_MEMBER_NAME(canPause,"canPause");
	HX_MARK_MEMBER_NAME(previousFrameTime,"previousFrameTime");
	HX_MARK_MEMBER_NAME(lastReportedPlayheadPosition,"lastReportedPlayheadPosition");
	HX_MARK_MEMBER_NAME(songTime,"songTime");
	HX_MARK_MEMBER_NAME(camDisplaceX,"camDisplaceX");
	HX_MARK_MEMBER_NAME(camDisplaceY,"camDisplaceY");
	HX_MARK_MEMBER_NAME(storyDifficultyText,"storyDifficultyText");
	HX_MARK_MEMBER_NAME(stageBuild,"stageBuild");
	HX_MARK_MEMBER_NAME(dadStrums,"dadStrums");
	HX_MARK_MEMBER_NAME(boyfriendStrums,"boyfriendStrums");
	HX_MARK_MEMBER_NAME(allUIs,"allUIs");
	HX_MARK_MEMBER_NAME(staticDisplace,"staticDisplace");
	HX_MARK_MEMBER_NAME(animationsPlay,"animationsPlay");
	HX_MARK_MEMBER_NAME(ratingTiming,"ratingTiming");
	HX_MARK_MEMBER_NAME(createdColor,"createdColor");
	HX_MARK_MEMBER_NAME(endSongEvent,"endSongEvent");
	HX_MARK_MEMBER_NAME(dialogueBox,"dialogueBox");
	 ::flixel::addons::ui::FlxUIState_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void PlayState_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(unspawnNotes,"unspawnNotes");
	HX_VISIT_MEMBER_NAME(ratingArray,"ratingArray");
	HX_VISIT_MEMBER_NAME(allSicks,"allSicks");
	HX_VISIT_MEMBER_NAME(numberOfKeys,"numberOfKeys");
	HX_VISIT_MEMBER_NAME(curSection,"curSection");
	HX_VISIT_MEMBER_NAME(camFollow,"camFollow");
	HX_VISIT_MEMBER_NAME(curSong,"curSong");
	HX_VISIT_MEMBER_NAME(gfSpeed,"gfSpeed");
	HX_VISIT_MEMBER_NAME(generatedMusic,"generatedMusic");
	HX_VISIT_MEMBER_NAME(startingSong,"startingSong");
	HX_VISIT_MEMBER_NAME(paused,"paused");
	HX_VISIT_MEMBER_NAME(startedCountdown,"startedCountdown");
	HX_VISIT_MEMBER_NAME(inCutscene,"inCutscene");
	HX_VISIT_MEMBER_NAME(canPause,"canPause");
	HX_VISIT_MEMBER_NAME(previousFrameTime,"previousFrameTime");
	HX_VISIT_MEMBER_NAME(lastReportedPlayheadPosition,"lastReportedPlayheadPosition");
	HX_VISIT_MEMBER_NAME(songTime,"songTime");
	HX_VISIT_MEMBER_NAME(camDisplaceX,"camDisplaceX");
	HX_VISIT_MEMBER_NAME(camDisplaceY,"camDisplaceY");
	HX_VISIT_MEMBER_NAME(storyDifficultyText,"storyDifficultyText");
	HX_VISIT_MEMBER_NAME(stageBuild,"stageBuild");
	HX_VISIT_MEMBER_NAME(dadStrums,"dadStrums");
	HX_VISIT_MEMBER_NAME(boyfriendStrums,"boyfriendStrums");
	HX_VISIT_MEMBER_NAME(allUIs,"allUIs");
	HX_VISIT_MEMBER_NAME(staticDisplace,"staticDisplace");
	HX_VISIT_MEMBER_NAME(animationsPlay,"animationsPlay");
	HX_VISIT_MEMBER_NAME(ratingTiming,"ratingTiming");
	HX_VISIT_MEMBER_NAME(createdColor,"createdColor");
	HX_VISIT_MEMBER_NAME(endSongEvent,"endSongEvent");
	HX_VISIT_MEMBER_NAME(dialogueBox,"dialogueBox");
	 ::flixel::addons::ui::FlxUIState_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val PlayState_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"add") ) { return ::hx::Val( add_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"paused") ) { return ::hx::Val( paused ); }
		if (HX_FIELD_EQ(inName,"allUIs") ) { return ::hx::Val( allUIs ); }
		if (HX_FIELD_EQ(inName,"create") ) { return ::hx::Val( create_dyn() ); }
		if (HX_FIELD_EQ(inName,"update") ) { return ::hx::Val( update_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"curSong") ) { return ::hx::Val( curSong ); }
		if (HX_FIELD_EQ(inName,"gfSpeed") ) { return ::hx::Val( gfSpeed ); }
		if (HX_FIELD_EQ(inName,"onFocus") ) { return ::hx::Val( onFocus_dyn() ); }
		if (HX_FIELD_EQ(inName,"stepHit") ) { return ::hx::Val( stepHit_dyn() ); }
		if (HX_FIELD_EQ(inName,"beatHit") ) { return ::hx::Val( beatHit_dyn() ); }
		if (HX_FIELD_EQ(inName,"endSong") ) { return ::hx::Val( endSong_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"allSicks") ) { return ::hx::Val( allSicks ); }
		if (HX_FIELD_EQ(inName,"canPause") ) { return ::hx::Val( canPause ); }
		if (HX_FIELD_EQ(inName,"songTime") ) { return ::hx::Val( songTime ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"camFollow") ) { return ::hx::Val( camFollow ); }
		if (HX_FIELD_EQ(inName,"dadStrums") ) { return ::hx::Val( dadStrums ); }
		if (HX_FIELD_EQ(inName,"noteCalls") ) { return ::hx::Val( noteCalls_dyn() ); }
		if (HX_FIELD_EQ(inName,"startSong") ) { return ::hx::Val( startSong_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"curSection") ) { return ::hx::Val( curSection ); }
		if (HX_FIELD_EQ(inName,"inCutscene") ) { return ::hx::Val( inCutscene ); }
		if (HX_FIELD_EQ(inName,"stageBuild") ) { return ::hx::Val( stageBuild ); }
		if (HX_FIELD_EQ(inName,"popUpScore") ) { return ::hx::Val( popUpScore_dyn() ); }
		if (HX_FIELD_EQ(inName,"popUpCombo") ) { return ::hx::Val( popUpCombo_dyn() ); }
		if (HX_FIELD_EQ(inName,"healthCall") ) { return ::hx::Val( healthCall_dyn() ); }
		if (HX_FIELD_EQ(inName,"sortByShit") ) { return ::hx::Val( sortByShit_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"ratingArray") ) { return ::hx::Val( ratingArray ); }
		if (HX_FIELD_EQ(inName,"goodNoteHit") ) { return ::hx::Val( goodNoteHit_dyn() ); }
		if (HX_FIELD_EQ(inName,"onFocusLost") ) { return ::hx::Val( onFocusLost_dyn() ); }
		if (HX_FIELD_EQ(inName,"dialogueBox") ) { return ::hx::Val( dialogueBox ); }
		if (HX_FIELD_EQ(inName,"callTextbox") ) { return ::hx::Val( callTextbox_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"unspawnNotes") ) { return ::hx::Val( unspawnNotes ); }
		if (HX_FIELD_EQ(inName,"numberOfKeys") ) { return ::hx::Val( numberOfKeys ); }
		if (HX_FIELD_EQ(inName,"startingSong") ) { return ::hx::Val( startingSong ); }
		if (HX_FIELD_EQ(inName,"camDisplaceX") ) { return ::hx::Val( camDisplaceX ); }
		if (HX_FIELD_EQ(inName,"camDisplaceY") ) { return ::hx::Val( camDisplaceY ); }
		if (HX_FIELD_EQ(inName,"mainControls") ) { return ::hx::Val( mainControls_dyn() ); }
		if (HX_FIELD_EQ(inName,"ratingTiming") ) { return ::hx::Val( ratingTiming ); }
		if (HX_FIELD_EQ(inName,"createSplash") ) { return ::hx::Val( createSplash_dyn() ); }
		if (HX_FIELD_EQ(inName,"createdColor") ) { return ::hx::Val( createdColor ); }
		if (HX_FIELD_EQ(inName,"generateSong") ) { return ::hx::Val( generateSong_dyn() ); }
		if (HX_FIELD_EQ(inName,"resyncVocals") ) { return ::hx::Val( resyncVocals_dyn() ); }
		if (HX_FIELD_EQ(inName,"openSubState") ) { return ::hx::Val( openSubState_dyn() ); }
		if (HX_FIELD_EQ(inName,"endSongEvent") ) { return ::hx::Val( endSongEvent ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"controlPlayer") ) { return ::hx::Val( controlPlayer_dyn() ); }
		if (HX_FIELD_EQ(inName,"missNoteCheck") ) { return ::hx::Val( missNoteCheck_dyn() ); }
		if (HX_FIELD_EQ(inName,"decreaseCombo") ) { return ::hx::Val( decreaseCombo_dyn() ); }
		if (HX_FIELD_EQ(inName,"increaseCombo") ) { return ::hx::Val( increaseCombo_dyn() ); }
		if (HX_FIELD_EQ(inName,"displayRating") ) { return ::hx::Val( displayRating_dyn() ); }
		if (HX_FIELD_EQ(inName,"closeSubState") ) { return ::hx::Val( closeSubState_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"generatedMusic") ) { return ::hx::Val( generatedMusic ); }
		if (HX_FIELD_EQ(inName,"staticDisplace") ) { return ::hx::Val( staticDisplace ); }
		if (HX_FIELD_EQ(inName,"strumCallsAuto") ) { return ::hx::Val( strumCallsAuto_dyn() ); }
		if (HX_FIELD_EQ(inName,"animationsPlay") ) { return ::hx::Val( animationsPlay ); }
		if (HX_FIELD_EQ(inName,"startCountdown") ) { return ::hx::Val( startCountdown_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"boyfriendStrums") ) { return ::hx::Val( boyfriendStrums ); }
		if (HX_FIELD_EQ(inName,"strumCameraRoll") ) { return ::hx::Val( strumCameraRoll_dyn() ); }
		if (HX_FIELD_EQ(inName,"charactersDance") ) { return ::hx::Val( charactersDance_dyn() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"startedCountdown") ) { return ::hx::Val( startedCountdown ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"previousFrameTime") ) { return ::hx::Val( previousFrameTime ); }
		if (HX_FIELD_EQ(inName,"songIntroCutscene") ) { return ::hx::Val( songIntroCutscene_dyn() ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"callDefaultSongEnd") ) { return ::hx::Val( callDefaultSongEnd_dyn() ); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"storyDifficultyText") ) { return ::hx::Val( storyDifficultyText ); }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"characterPlayAnimation") ) { return ::hx::Val( characterPlayAnimation_dyn() ); }
		if (HX_FIELD_EQ(inName,"songEndSpecificActions") ) { return ::hx::Val( songEndSpecificActions_dyn() ); }
		break;
	case 28:
		if (HX_FIELD_EQ(inName,"lastReportedPlayheadPosition") ) { return ::hx::Val( lastReportedPlayheadPosition ); }
	}
	return super::__Field(inName,inCallProp);
}

bool PlayState_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"gf") ) { outValue = ( gf ); return true; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"SONG") ) { outValue = ( SONG ); return true; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"combo") ) { outValue = ( combo ); return true; }
		if (HX_FIELD_EQ(inName,"uiHUD") ) { outValue = ( uiHUD ); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"vocals") ) { outValue = ( vocals ); return true; }
		if (HX_FIELD_EQ(inName,"health") ) { outValue = ( health ); return true; }
		if (HX_FIELD_EQ(inName,"misses") ) { outValue = ( misses ); return true; }
		if (HX_FIELD_EQ(inName,"camHUD") ) { outValue = ( camHUD ); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"camGame") ) { outValue = ( camGame ); return true; }
		if (HX_FIELD_EQ(inName,"iconRPC") ) { outValue = ( iconRPC ); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"curStage") ) { outValue = ( curStage ); return true; }
		if (HX_FIELD_EQ(inName,"strumHUD") ) { outValue = ( strumHUD ); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"storyWeek") ) { outValue = ( storyWeek ); return true; }
		if (HX_FIELD_EQ(inName,"songMusic") ) { outValue = ( songMusic ); return true; }
		if (HX_FIELD_EQ(inName,"boyfriend") ) { outValue = ( boyfriend ); return true; }
		if (HX_FIELD_EQ(inName,"forceZoom") ) { outValue = ( forceZoom ); return true; }
		if (HX_FIELD_EQ(inName,"songScore") ) { outValue = ( songScore ); return true; }
		if (HX_FIELD_EQ(inName,"lastCombo") ) { outValue = ( lastCombo ); return true; }
		if (HX_FIELD_EQ(inName,"updateRPC") ) { outValue = updateRPC_dyn(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"startTimer") ) { outValue = ( startTimer ); return true; }
		if (HX_FIELD_EQ(inName,"detailsSub") ) { outValue = ( detailsSub ); return true; }
		if (HX_FIELD_EQ(inName,"songLength") ) { outValue = ( songLength ); return true; }
		if (HX_FIELD_EQ(inName,"strumLines") ) { outValue = ( strumLines ); return true; }
		if (HX_FIELD_EQ(inName,"lastRating") ) { outValue = ( lastRating ); return true; }
		if (HX_FIELD_EQ(inName,"resetMusic") ) { outValue = resetMusic_dyn(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"isStoryMode") ) { outValue = ( isStoryMode ); return true; }
		if (HX_FIELD_EQ(inName,"dadOpponent") ) { outValue = ( dadOpponent ); return true; }
		if (HX_FIELD_EQ(inName,"songDetails") ) { outValue = ( songDetails ); return true; }
		if (HX_FIELD_EQ(inName,"dialogueHUD") ) { outValue = ( dialogueHUD ); return true; }
		if (HX_FIELD_EQ(inName,"daPixelZoom") ) { outValue = ( daPixelZoom ); return true; }
		if (HX_FIELD_EQ(inName,"swagCounter") ) { outValue = ( swagCounter ); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"storyPlaylist") ) { outValue = ( storyPlaylist ); return true; }
		if (HX_FIELD_EQ(inName,"campaignScore") ) { outValue = ( campaignScore ); return true; }
		if (HX_FIELD_EQ(inName,"assetModifier") ) { outValue = ( assetModifier ); return true; }
		if (HX_FIELD_EQ(inName,"prevCamFollow") ) { outValue = ( prevCamFollow ); return true; }
		if (HX_FIELD_EQ(inName,"skipCutscenes") ) { outValue = skipCutscenes_dyn(); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"changeableSkin") ) { outValue = ( changeableSkin ); return true; }
		if (HX_FIELD_EQ(inName,"defaultCamZoom") ) { outValue = ( defaultCamZoom ); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"storyDifficulty") ) { outValue = ( storyDifficulty ); return true; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"detailsPausedText") ) { outValue = ( detailsPausedText ); return true; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"determinedChartType") ) { outValue = ( determinedChartType ); return true; }
	}
	return false;
}

::hx::Val PlayState_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"paused") ) { paused=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"allUIs") ) { allUIs=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"curSong") ) { curSong=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"gfSpeed") ) { gfSpeed=inValue.Cast< int >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"allSicks") ) { allSicks=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"canPause") ) { canPause=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"songTime") ) { songTime=inValue.Cast< Float >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"camFollow") ) { camFollow=inValue.Cast<  ::flixel::FlxObject >(); return inValue; }
		if (HX_FIELD_EQ(inName,"dadStrums") ) { dadStrums=inValue.Cast<  ::gameObjects::userInterface::notes::Strumline >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"curSection") ) { curSection=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"inCutscene") ) { inCutscene=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"stageBuild") ) { stageBuild=inValue.Cast<  ::gameObjects::Stage >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"ratingArray") ) { ratingArray=inValue.Cast< ::Array< ::String > >(); return inValue; }
		if (HX_FIELD_EQ(inName,"dialogueBox") ) { dialogueBox=inValue.Cast<  ::gameObjects::userInterface::DialogueBox >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"unspawnNotes") ) { unspawnNotes=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		if (HX_FIELD_EQ(inName,"numberOfKeys") ) { numberOfKeys=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"startingSong") ) { startingSong=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"camDisplaceX") ) { camDisplaceX=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"camDisplaceY") ) { camDisplaceY=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"ratingTiming") ) { ratingTiming=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"createdColor") ) { createdColor=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"endSongEvent") ) { endSongEvent=inValue.Cast< bool >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"generatedMusic") ) { generatedMusic=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"staticDisplace") ) { staticDisplace=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"animationsPlay") ) { animationsPlay=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"boyfriendStrums") ) { boyfriendStrums=inValue.Cast<  ::gameObjects::userInterface::notes::Strumline >(); return inValue; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"startedCountdown") ) { startedCountdown=inValue.Cast< bool >(); return inValue; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"previousFrameTime") ) { previousFrameTime=inValue.Cast< int >(); return inValue; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"storyDifficultyText") ) { storyDifficultyText=inValue.Cast< ::String >(); return inValue; }
		break;
	case 28:
		if (HX_FIELD_EQ(inName,"lastReportedPlayheadPosition") ) { lastReportedPlayheadPosition=inValue.Cast< int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool PlayState_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"gf") ) { gf=ioValue.Cast<  ::gameObjects::Character >(); return true; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"SONG") ) { SONG=ioValue.Cast<  ::Dynamic >(); return true; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"combo") ) { combo=ioValue.Cast< int >(); return true; }
		if (HX_FIELD_EQ(inName,"uiHUD") ) { uiHUD=ioValue.Cast<  ::gameObjects::userInterface::ClassHUD >(); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"vocals") ) { vocals=ioValue.Cast<  ::flixel::_hx_system::FlxSound >(); return true; }
		if (HX_FIELD_EQ(inName,"health") ) { health=ioValue.Cast< Float >(); return true; }
		if (HX_FIELD_EQ(inName,"misses") ) { misses=ioValue.Cast< int >(); return true; }
		if (HX_FIELD_EQ(inName,"camHUD") ) { camHUD=ioValue.Cast<  ::flixel::FlxCamera >(); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"camGame") ) { camGame=ioValue.Cast<  ::flixel::FlxCamera >(); return true; }
		if (HX_FIELD_EQ(inName,"iconRPC") ) { iconRPC=ioValue.Cast< ::String >(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"curStage") ) { curStage=ioValue.Cast< ::String >(); return true; }
		if (HX_FIELD_EQ(inName,"strumHUD") ) { strumHUD=ioValue.Cast< ::Array< ::Dynamic> >(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"storyWeek") ) { storyWeek=ioValue.Cast< int >(); return true; }
		if (HX_FIELD_EQ(inName,"songMusic") ) { songMusic=ioValue.Cast<  ::flixel::_hx_system::FlxSound >(); return true; }
		if (HX_FIELD_EQ(inName,"boyfriend") ) { boyfriend=ioValue.Cast<  ::gameObjects::Boyfriend >(); return true; }
		if (HX_FIELD_EQ(inName,"forceZoom") ) { forceZoom=ioValue.Cast< ::Array< Float > >(); return true; }
		if (HX_FIELD_EQ(inName,"songScore") ) { songScore=ioValue.Cast< int >(); return true; }
		if (HX_FIELD_EQ(inName,"lastCombo") ) { lastCombo=ioValue.Cast< ::Array< ::Dynamic> >(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"startTimer") ) { startTimer=ioValue.Cast<  ::flixel::util::FlxTimer >(); return true; }
		if (HX_FIELD_EQ(inName,"detailsSub") ) { detailsSub=ioValue.Cast< ::String >(); return true; }
		if (HX_FIELD_EQ(inName,"songLength") ) { songLength=ioValue.Cast< Float >(); return true; }
		if (HX_FIELD_EQ(inName,"strumLines") ) { strumLines=ioValue.Cast<  ::flixel::group::FlxTypedGroup >(); return true; }
		if (HX_FIELD_EQ(inName,"lastRating") ) { lastRating=ioValue.Cast<  ::flixel::FlxSprite >(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"isStoryMode") ) { isStoryMode=ioValue.Cast< bool >(); return true; }
		if (HX_FIELD_EQ(inName,"dadOpponent") ) { dadOpponent=ioValue.Cast<  ::gameObjects::Character >(); return true; }
		if (HX_FIELD_EQ(inName,"songDetails") ) { songDetails=ioValue.Cast< ::String >(); return true; }
		if (HX_FIELD_EQ(inName,"dialogueHUD") ) { dialogueHUD=ioValue.Cast<  ::flixel::FlxCamera >(); return true; }
		if (HX_FIELD_EQ(inName,"daPixelZoom") ) { daPixelZoom=ioValue.Cast< Float >(); return true; }
		if (HX_FIELD_EQ(inName,"swagCounter") ) { swagCounter=ioValue.Cast< int >(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"storyPlaylist") ) { storyPlaylist=ioValue.Cast< ::Array< ::String > >(); return true; }
		if (HX_FIELD_EQ(inName,"campaignScore") ) { campaignScore=ioValue.Cast< int >(); return true; }
		if (HX_FIELD_EQ(inName,"assetModifier") ) { assetModifier=ioValue.Cast< ::String >(); return true; }
		if (HX_FIELD_EQ(inName,"prevCamFollow") ) { prevCamFollow=ioValue.Cast<  ::flixel::FlxObject >(); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"changeableSkin") ) { changeableSkin=ioValue.Cast< ::String >(); return true; }
		if (HX_FIELD_EQ(inName,"defaultCamZoom") ) { defaultCamZoom=ioValue.Cast< Float >(); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"storyDifficulty") ) { storyDifficulty=ioValue.Cast< int >(); return true; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"detailsPausedText") ) { detailsPausedText=ioValue.Cast< ::String >(); return true; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"determinedChartType") ) { determinedChartType=ioValue.Cast< ::String >(); return true; }
	}
	return false;
}

void PlayState_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("unspawnNotes",9f,67,f2,45));
	outFields->push(HX_("ratingArray",3c,a0,0f,10));
	outFields->push(HX_("allSicks",14,59,ab,75));
	outFields->push(HX_("numberOfKeys",54,fe,6d,5e));
	outFields->push(HX_("curSection",45,58,c1,68));
	outFields->push(HX_("camFollow",e0,6e,47,22));
	outFields->push(HX_("curSong",75,95,6d,b7));
	outFields->push(HX_("gfSpeed",e8,9c,20,98));
	outFields->push(HX_("generatedMusic",96,8a,5d,71));
	outFields->push(HX_("startingSong",b5,31,61,33));
	outFields->push(HX_("paused",ae,40,84,ef));
	outFields->push(HX_("startedCountdown",30,57,28,9b));
	outFields->push(HX_("inCutscene",8f,21,01,56));
	outFields->push(HX_("canPause",c6,18,eb,2b));
	outFields->push(HX_("previousFrameTime",a3,ef,a7,c2));
	outFields->push(HX_("lastReportedPlayheadPosition",86,66,7f,37));
	outFields->push(HX_("songTime",82,2a,d5,3a));
	outFields->push(HX_("camDisplaceX",70,57,a0,84));
	outFields->push(HX_("camDisplaceY",71,57,a0,84));
	outFields->push(HX_("storyDifficultyText",5d,4b,db,c2));
	outFields->push(HX_("stageBuild",90,2f,3b,0e));
	outFields->push(HX_("dadStrums",b1,5c,9a,96));
	outFields->push(HX_("boyfriendStrums",14,cc,6d,2e));
	outFields->push(HX_("allUIs",1e,71,88,3f));
	outFields->push(HX_("staticDisplace",87,b3,99,ce));
	outFields->push(HX_("animationsPlay",83,32,3e,e9));
	outFields->push(HX_("ratingTiming",87,2e,81,64));
	outFields->push(HX_("createdColor",5b,c2,fa,c6));
	outFields->push(HX_("endSongEvent",aa,18,41,b4));
	outFields->push(HX_("dialogueBox",d3,87,95,1b));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo PlayState_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(PlayState_obj,unspawnNotes),HX_("unspawnNotes",9f,67,f2,45)},
	{::hx::fsObject /* ::Array< ::String > */ ,(int)offsetof(PlayState_obj,ratingArray),HX_("ratingArray",3c,a0,0f,10)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,allSicks),HX_("allSicks",14,59,ab,75)},
	{::hx::fsInt,(int)offsetof(PlayState_obj,numberOfKeys),HX_("numberOfKeys",54,fe,6d,5e)},
	{::hx::fsInt,(int)offsetof(PlayState_obj,curSection),HX_("curSection",45,58,c1,68)},
	{::hx::fsObject /*  ::flixel::FlxObject */ ,(int)offsetof(PlayState_obj,camFollow),HX_("camFollow",e0,6e,47,22)},
	{::hx::fsString,(int)offsetof(PlayState_obj,curSong),HX_("curSong",75,95,6d,b7)},
	{::hx::fsInt,(int)offsetof(PlayState_obj,gfSpeed),HX_("gfSpeed",e8,9c,20,98)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,generatedMusic),HX_("generatedMusic",96,8a,5d,71)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,startingSong),HX_("startingSong",b5,31,61,33)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,paused),HX_("paused",ae,40,84,ef)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,startedCountdown),HX_("startedCountdown",30,57,28,9b)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,inCutscene),HX_("inCutscene",8f,21,01,56)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,canPause),HX_("canPause",c6,18,eb,2b)},
	{::hx::fsInt,(int)offsetof(PlayState_obj,previousFrameTime),HX_("previousFrameTime",a3,ef,a7,c2)},
	{::hx::fsInt,(int)offsetof(PlayState_obj,lastReportedPlayheadPosition),HX_("lastReportedPlayheadPosition",86,66,7f,37)},
	{::hx::fsFloat,(int)offsetof(PlayState_obj,songTime),HX_("songTime",82,2a,d5,3a)},
	{::hx::fsFloat,(int)offsetof(PlayState_obj,camDisplaceX),HX_("camDisplaceX",70,57,a0,84)},
	{::hx::fsFloat,(int)offsetof(PlayState_obj,camDisplaceY),HX_("camDisplaceY",71,57,a0,84)},
	{::hx::fsString,(int)offsetof(PlayState_obj,storyDifficultyText),HX_("storyDifficultyText",5d,4b,db,c2)},
	{::hx::fsObject /*  ::gameObjects::Stage */ ,(int)offsetof(PlayState_obj,stageBuild),HX_("stageBuild",90,2f,3b,0e)},
	{::hx::fsObject /*  ::gameObjects::userInterface::notes::Strumline */ ,(int)offsetof(PlayState_obj,dadStrums),HX_("dadStrums",b1,5c,9a,96)},
	{::hx::fsObject /*  ::gameObjects::userInterface::notes::Strumline */ ,(int)offsetof(PlayState_obj,boyfriendStrums),HX_("boyfriendStrums",14,cc,6d,2e)},
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(PlayState_obj,allUIs),HX_("allUIs",1e,71,88,3f)},
	{::hx::fsInt,(int)offsetof(PlayState_obj,staticDisplace),HX_("staticDisplace",87,b3,99,ce)},
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(PlayState_obj,animationsPlay),HX_("animationsPlay",83,32,3e,e9)},
	{::hx::fsString,(int)offsetof(PlayState_obj,ratingTiming),HX_("ratingTiming",87,2e,81,64)},
	{::hx::fsInt,(int)offsetof(PlayState_obj,createdColor),HX_("createdColor",5b,c2,fa,c6)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,endSongEvent),HX_("endSongEvent",aa,18,41,b4)},
	{::hx::fsObject /*  ::gameObjects::userInterface::DialogueBox */ ,(int)offsetof(PlayState_obj,dialogueBox),HX_("dialogueBox",d3,87,95,1b)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo PlayState_obj_sStaticStorageInfo[] = {
	{::hx::fsObject /*  ::flixel::util::FlxTimer */ ,(void *) &PlayState_obj::startTimer,HX_("startTimer",03,98,4c,2c)},
	{::hx::fsString,(void *) &PlayState_obj::curStage,HX_("curStage",1e,65,b9,cb)},
	{::hx::fsObject /*  ::Dynamic */ ,(void *) &PlayState_obj::SONG,HX_("SONG",d5,eb,18,37)},
	{::hx::fsBool,(void *) &PlayState_obj::isStoryMode,HX_("isStoryMode",ae,68,02,07)},
	{::hx::fsInt,(void *) &PlayState_obj::storyWeek,HX_("storyWeek",89,3e,16,2f)},
	{::hx::fsObject /* ::Array< ::String > */ ,(void *) &PlayState_obj::storyPlaylist,HX_("storyPlaylist",67,a1,89,7c)},
	{::hx::fsInt,(void *) &PlayState_obj::storyDifficulty,HX_("storyDifficulty",90,ca,a7,d0)},
	{::hx::fsObject /*  ::flixel::_hx_system::FlxSound */ ,(void *) &PlayState_obj::songMusic,HX_("songMusic",90,18,d5,3f)},
	{::hx::fsObject /*  ::flixel::_hx_system::FlxSound */ ,(void *) &PlayState_obj::vocals,HX_("vocals",5e,10,51,59)},
	{::hx::fsInt,(void *) &PlayState_obj::campaignScore,HX_("campaignScore",22,22,d6,07)},
	{::hx::fsObject /*  ::gameObjects::Character */ ,(void *) &PlayState_obj::dadOpponent,HX_("dadOpponent",04,cb,d0,6b)},
	{::hx::fsObject /*  ::gameObjects::Character */ ,(void *) &PlayState_obj::gf,HX_("gf",1f,5a,00,00)},
	{::hx::fsObject /*  ::gameObjects::Boyfriend */ ,(void *) &PlayState_obj::boyfriend,HX_("boyfriend",6a,29,b8,e6)},
	{::hx::fsString,(void *) &PlayState_obj::assetModifier,HX_("assetModifier",67,71,16,3e)},
	{::hx::fsString,(void *) &PlayState_obj::changeableSkin,HX_("changeableSkin",a7,06,10,a4)},
	{::hx::fsString,(void *) &PlayState_obj::songDetails,HX_("songDetails",6d,35,e3,63)},
	{::hx::fsString,(void *) &PlayState_obj::detailsSub,HX_("detailsSub",de,69,d5,79)},
	{::hx::fsString,(void *) &PlayState_obj::detailsPausedText,HX_("detailsPausedText",dd,4f,70,44)},
	{::hx::fsObject /*  ::flixel::FlxObject */ ,(void *) &PlayState_obj::prevCamFollow,HX_("prevCamFollow",6d,99,a3,09)},
	{::hx::fsFloat,(void *) &PlayState_obj::health,HX_("health",9c,28,06,fd)},
	{::hx::fsInt,(void *) &PlayState_obj::combo,HX_("combo",4e,28,5d,4a)},
	{::hx::fsInt,(void *) &PlayState_obj::misses,HX_("misses",6a,62,54,56)},
	{::hx::fsObject /*  ::flixel::FlxCamera */ ,(void *) &PlayState_obj::camHUD,HX_("camHUD",e8,2b,76,b7)},
	{::hx::fsObject /*  ::flixel::FlxCamera */ ,(void *) &PlayState_obj::camGame,HX_("camGame",a1,47,50,cf)},
	{::hx::fsObject /*  ::flixel::FlxCamera */ ,(void *) &PlayState_obj::dialogueHUD,HX_("dialogueHUD",7f,fe,99,1b)},
	{::hx::fsFloat,(void *) &PlayState_obj::defaultCamZoom,HX_("defaultCamZoom",01,50,2a,0b)},
	{::hx::fsObject /* ::Array< Float > */ ,(void *) &PlayState_obj::forceZoom,HX_("forceZoom",9e,52,3d,56)},
	{::hx::fsInt,(void *) &PlayState_obj::songScore,HX_("songScore",3d,bb,53,a8)},
	{::hx::fsString,(void *) &PlayState_obj::iconRPC,HX_("iconRPC",ec,c8,10,d6)},
	{::hx::fsFloat,(void *) &PlayState_obj::songLength,HX_("songLength",9b,3a,8c,fa)},
	{::hx::fsObject /*  ::gameObjects::userInterface::ClassHUD */ ,(void *) &PlayState_obj::uiHUD,HX_("uiHUD",c3,32,80,a3)},
	{::hx::fsFloat,(void *) &PlayState_obj::daPixelZoom,HX_("daPixelZoom",7c,81,6e,df)},
	{::hx::fsString,(void *) &PlayState_obj::determinedChartType,HX_("determinedChartType",07,47,45,fe)},
	{::hx::fsObject /*  ::flixel::group::FlxTypedGroup */ ,(void *) &PlayState_obj::strumLines,HX_("strumLines",f6,27,b3,0d)},
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(void *) &PlayState_obj::strumHUD,HX_("strumHUD",ee,42,37,c4)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(void *) &PlayState_obj::lastRating,HX_("lastRating",13,17,65,86)},
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(void *) &PlayState_obj::lastCombo,HX_("lastCombo",18,56,0a,97)},
	{::hx::fsInt,(void *) &PlayState_obj::swagCounter,HX_("swagCounter",92,71,f7,21)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static ::String PlayState_obj_sMemberFields[] = {
	HX_("unspawnNotes",9f,67,f2,45),
	HX_("ratingArray",3c,a0,0f,10),
	HX_("allSicks",14,59,ab,75),
	HX_("numberOfKeys",54,fe,6d,5e),
	HX_("curSection",45,58,c1,68),
	HX_("camFollow",e0,6e,47,22),
	HX_("curSong",75,95,6d,b7),
	HX_("gfSpeed",e8,9c,20,98),
	HX_("generatedMusic",96,8a,5d,71),
	HX_("startingSong",b5,31,61,33),
	HX_("paused",ae,40,84,ef),
	HX_("startedCountdown",30,57,28,9b),
	HX_("inCutscene",8f,21,01,56),
	HX_("canPause",c6,18,eb,2b),
	HX_("previousFrameTime",a3,ef,a7,c2),
	HX_("lastReportedPlayheadPosition",86,66,7f,37),
	HX_("songTime",82,2a,d5,3a),
	HX_("camDisplaceX",70,57,a0,84),
	HX_("camDisplaceY",71,57,a0,84),
	HX_("storyDifficultyText",5d,4b,db,c2),
	HX_("stageBuild",90,2f,3b,0e),
	HX_("dadStrums",b1,5c,9a,96),
	HX_("boyfriendStrums",14,cc,6d,2e),
	HX_("allUIs",1e,71,88,3f),
	HX_("create",fc,66,0f,7c),
	HX_("staticDisplace",87,b3,99,ce),
	HX_("update",09,86,05,87),
	HX_("noteCalls",c3,bc,a8,7e),
	HX_("controlPlayer",9e,2e,7d,b0),
	HX_("goodNoteHit",c4,4d,c4,22),
	HX_("missNoteCheck",da,30,ee,14),
	HX_("characterPlayAnimation",07,e1,b7,27),
	HX_("strumCallsAuto",9b,bd,f9,18),
	HX_("mainControls",cf,db,7c,66),
	HX_("strumCameraRoll",6b,4b,f9,c6),
	HX_("onFocus",39,fe,c6,9a),
	HX_("onFocusLost",bd,e4,85,41),
	HX_("animationsPlay",83,32,3e,e9),
	HX_("ratingTiming",87,2e,81,64),
	HX_("popUpScore",66,a1,f2,3f),
	HX_("createSplash",83,c1,ed,e1),
	HX_("createdColor",5b,c2,fa,c6),
	HX_("popUpCombo",62,56,76,11),
	HX_("decreaseCombo",10,2f,fa,79),
	HX_("increaseCombo",2c,7d,77,26),
	HX_("displayRating",ff,ef,ec,7c),
	HX_("healthCall",5a,eb,4f,fe),
	HX_("startSong",57,9d,4b,05),
	HX_("generateSong",aa,ed,2b,1f),
	HX_("sortByShit",35,ff,86,6e),
	HX_("resyncVocals",8c,16,ed,6a),
	HX_("stepHit",67,ae,41,81),
	HX_("charactersDance",29,f2,8e,a7),
	HX_("beatHit",7d,ea,04,74),
	HX_("openSubState",5b,66,48,37),
	HX_("closeSubState",49,18,32,04),
	HX_("endSongEvent",aa,18,41,b4),
	HX_("endSong",50,dd,7c,2e),
	HX_("songEndSpecificActions",05,b9,cf,04),
	HX_("callDefaultSongEnd",83,89,35,21),
	HX_("dialogueBox",d3,87,95,1b),
	HX_("songIntroCutscene",01,9a,c2,fd),
	HX_("callTextbox",80,da,7e,3d),
	HX_("startCountdown",ef,1f,f0,88),
	HX_("add",21,f2,49,00),
	::String(null()) };

static void PlayState_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(PlayState_obj::startTimer,"startTimer");
	HX_MARK_MEMBER_NAME(PlayState_obj::curStage,"curStage");
	HX_MARK_MEMBER_NAME(PlayState_obj::SONG,"SONG");
	HX_MARK_MEMBER_NAME(PlayState_obj::isStoryMode,"isStoryMode");
	HX_MARK_MEMBER_NAME(PlayState_obj::storyWeek,"storyWeek");
	HX_MARK_MEMBER_NAME(PlayState_obj::storyPlaylist,"storyPlaylist");
	HX_MARK_MEMBER_NAME(PlayState_obj::storyDifficulty,"storyDifficulty");
	HX_MARK_MEMBER_NAME(PlayState_obj::songMusic,"songMusic");
	HX_MARK_MEMBER_NAME(PlayState_obj::vocals,"vocals");
	HX_MARK_MEMBER_NAME(PlayState_obj::campaignScore,"campaignScore");
	HX_MARK_MEMBER_NAME(PlayState_obj::dadOpponent,"dadOpponent");
	HX_MARK_MEMBER_NAME(PlayState_obj::gf,"gf");
	HX_MARK_MEMBER_NAME(PlayState_obj::boyfriend,"boyfriend");
	HX_MARK_MEMBER_NAME(PlayState_obj::assetModifier,"assetModifier");
	HX_MARK_MEMBER_NAME(PlayState_obj::changeableSkin,"changeableSkin");
	HX_MARK_MEMBER_NAME(PlayState_obj::songDetails,"songDetails");
	HX_MARK_MEMBER_NAME(PlayState_obj::detailsSub,"detailsSub");
	HX_MARK_MEMBER_NAME(PlayState_obj::detailsPausedText,"detailsPausedText");
	HX_MARK_MEMBER_NAME(PlayState_obj::prevCamFollow,"prevCamFollow");
	HX_MARK_MEMBER_NAME(PlayState_obj::health,"health");
	HX_MARK_MEMBER_NAME(PlayState_obj::combo,"combo");
	HX_MARK_MEMBER_NAME(PlayState_obj::misses,"misses");
	HX_MARK_MEMBER_NAME(PlayState_obj::camHUD,"camHUD");
	HX_MARK_MEMBER_NAME(PlayState_obj::camGame,"camGame");
	HX_MARK_MEMBER_NAME(PlayState_obj::dialogueHUD,"dialogueHUD");
	HX_MARK_MEMBER_NAME(PlayState_obj::defaultCamZoom,"defaultCamZoom");
	HX_MARK_MEMBER_NAME(PlayState_obj::forceZoom,"forceZoom");
	HX_MARK_MEMBER_NAME(PlayState_obj::songScore,"songScore");
	HX_MARK_MEMBER_NAME(PlayState_obj::iconRPC,"iconRPC");
	HX_MARK_MEMBER_NAME(PlayState_obj::songLength,"songLength");
	HX_MARK_MEMBER_NAME(PlayState_obj::uiHUD,"uiHUD");
	HX_MARK_MEMBER_NAME(PlayState_obj::daPixelZoom,"daPixelZoom");
	HX_MARK_MEMBER_NAME(PlayState_obj::determinedChartType,"determinedChartType");
	HX_MARK_MEMBER_NAME(PlayState_obj::strumLines,"strumLines");
	HX_MARK_MEMBER_NAME(PlayState_obj::strumHUD,"strumHUD");
	HX_MARK_MEMBER_NAME(PlayState_obj::lastRating,"lastRating");
	HX_MARK_MEMBER_NAME(PlayState_obj::lastCombo,"lastCombo");
	HX_MARK_MEMBER_NAME(PlayState_obj::swagCounter,"swagCounter");
};

#ifdef HXCPP_VISIT_ALLOCS
static void PlayState_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(PlayState_obj::startTimer,"startTimer");
	HX_VISIT_MEMBER_NAME(PlayState_obj::curStage,"curStage");
	HX_VISIT_MEMBER_NAME(PlayState_obj::SONG,"SONG");
	HX_VISIT_MEMBER_NAME(PlayState_obj::isStoryMode,"isStoryMode");
	HX_VISIT_MEMBER_NAME(PlayState_obj::storyWeek,"storyWeek");
	HX_VISIT_MEMBER_NAME(PlayState_obj::storyPlaylist,"storyPlaylist");
	HX_VISIT_MEMBER_NAME(PlayState_obj::storyDifficulty,"storyDifficulty");
	HX_VISIT_MEMBER_NAME(PlayState_obj::songMusic,"songMusic");
	HX_VISIT_MEMBER_NAME(PlayState_obj::vocals,"vocals");
	HX_VISIT_MEMBER_NAME(PlayState_obj::campaignScore,"campaignScore");
	HX_VISIT_MEMBER_NAME(PlayState_obj::dadOpponent,"dadOpponent");
	HX_VISIT_MEMBER_NAME(PlayState_obj::gf,"gf");
	HX_VISIT_MEMBER_NAME(PlayState_obj::boyfriend,"boyfriend");
	HX_VISIT_MEMBER_NAME(PlayState_obj::assetModifier,"assetModifier");
	HX_VISIT_MEMBER_NAME(PlayState_obj::changeableSkin,"changeableSkin");
	HX_VISIT_MEMBER_NAME(PlayState_obj::songDetails,"songDetails");
	HX_VISIT_MEMBER_NAME(PlayState_obj::detailsSub,"detailsSub");
	HX_VISIT_MEMBER_NAME(PlayState_obj::detailsPausedText,"detailsPausedText");
	HX_VISIT_MEMBER_NAME(PlayState_obj::prevCamFollow,"prevCamFollow");
	HX_VISIT_MEMBER_NAME(PlayState_obj::health,"health");
	HX_VISIT_MEMBER_NAME(PlayState_obj::combo,"combo");
	HX_VISIT_MEMBER_NAME(PlayState_obj::misses,"misses");
	HX_VISIT_MEMBER_NAME(PlayState_obj::camHUD,"camHUD");
	HX_VISIT_MEMBER_NAME(PlayState_obj::camGame,"camGame");
	HX_VISIT_MEMBER_NAME(PlayState_obj::dialogueHUD,"dialogueHUD");
	HX_VISIT_MEMBER_NAME(PlayState_obj::defaultCamZoom,"defaultCamZoom");
	HX_VISIT_MEMBER_NAME(PlayState_obj::forceZoom,"forceZoom");
	HX_VISIT_MEMBER_NAME(PlayState_obj::songScore,"songScore");
	HX_VISIT_MEMBER_NAME(PlayState_obj::iconRPC,"iconRPC");
	HX_VISIT_MEMBER_NAME(PlayState_obj::songLength,"songLength");
	HX_VISIT_MEMBER_NAME(PlayState_obj::uiHUD,"uiHUD");
	HX_VISIT_MEMBER_NAME(PlayState_obj::daPixelZoom,"daPixelZoom");
	HX_VISIT_MEMBER_NAME(PlayState_obj::determinedChartType,"determinedChartType");
	HX_VISIT_MEMBER_NAME(PlayState_obj::strumLines,"strumLines");
	HX_VISIT_MEMBER_NAME(PlayState_obj::strumHUD,"strumHUD");
	HX_VISIT_MEMBER_NAME(PlayState_obj::lastRating,"lastRating");
	HX_VISIT_MEMBER_NAME(PlayState_obj::lastCombo,"lastCombo");
	HX_VISIT_MEMBER_NAME(PlayState_obj::swagCounter,"swagCounter");
};

#endif

::hx::Class PlayState_obj::__mClass;

static ::String PlayState_obj_sStaticFields[] = {
	HX_("startTimer",03,98,4c,2c),
	HX_("curStage",1e,65,b9,cb),
	HX_("SONG",d5,eb,18,37),
	HX_("isStoryMode",ae,68,02,07),
	HX_("storyWeek",89,3e,16,2f),
	HX_("storyPlaylist",67,a1,89,7c),
	HX_("storyDifficulty",90,ca,a7,d0),
	HX_("songMusic",90,18,d5,3f),
	HX_("vocals",5e,10,51,59),
	HX_("campaignScore",22,22,d6,07),
	HX_("dadOpponent",04,cb,d0,6b),
	HX_("gf",1f,5a,00,00),
	HX_("boyfriend",6a,29,b8,e6),
	HX_("assetModifier",67,71,16,3e),
	HX_("changeableSkin",a7,06,10,a4),
	HX_("songDetails",6d,35,e3,63),
	HX_("detailsSub",de,69,d5,79),
	HX_("detailsPausedText",dd,4f,70,44),
	HX_("prevCamFollow",6d,99,a3,09),
	HX_("health",9c,28,06,fd),
	HX_("combo",4e,28,5d,4a),
	HX_("misses",6a,62,54,56),
	HX_("camHUD",e8,2b,76,b7),
	HX_("camGame",a1,47,50,cf),
	HX_("dialogueHUD",7f,fe,99,1b),
	HX_("defaultCamZoom",01,50,2a,0b),
	HX_("forceZoom",9e,52,3d,56),
	HX_("songScore",3d,bb,53,a8),
	HX_("iconRPC",ec,c8,10,d6),
	HX_("songLength",9b,3a,8c,fa),
	HX_("uiHUD",c3,32,80,a3),
	HX_("daPixelZoom",7c,81,6e,df),
	HX_("determinedChartType",07,47,45,fe),
	HX_("strumLines",f6,27,b3,0d),
	HX_("strumHUD",ee,42,37,c4),
	HX_("lastRating",13,17,65,86),
	HX_("lastCombo",18,56,0a,97),
	HX_("updateRPC",5c,a4,e3,82),
	HX_("resetMusic",56,08,f7,f8),
	HX_("skipCutscenes",2a,5e,0c,3c),
	HX_("swagCounter",92,71,f7,21),
	::String(null())
};

void PlayState_obj::__register()
{
	PlayState_obj _hx_dummy;
	PlayState_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("meta.state.PlayState",17,6b,79,5d);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &PlayState_obj::__GetStatic;
	__mClass->mSetStaticField = &PlayState_obj::__SetStatic;
	__mClass->mMarkFunc = PlayState_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(PlayState_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(PlayState_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< PlayState_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = PlayState_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = PlayState_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = PlayState_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void PlayState_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_a31d76c4ca3ed2cf_52_boot)
HXDLIN(  52)		curStage = HX_("",00,00,00,00);
            	}
{
            	HX_STACKFRAME(&_hx_pos_a31d76c4ca3ed2cf_54_boot)
HXDLIN(  54)		isStoryMode = false;
            	}
{
            	HX_STACKFRAME(&_hx_pos_a31d76c4ca3ed2cf_55_boot)
HXDLIN(  55)		storyWeek = 0;
            	}
{
            	HX_STACKFRAME(&_hx_pos_a31d76c4ca3ed2cf_56_boot)
HXDLIN(  56)		storyPlaylist = ::Array_obj< ::String >::__new(0);
            	}
{
            	HX_STACKFRAME(&_hx_pos_a31d76c4ca3ed2cf_57_boot)
HXDLIN(  57)		storyDifficulty = 2;
            	}
{
            	HX_STACKFRAME(&_hx_pos_a31d76c4ca3ed2cf_62_boot)
HXDLIN(  62)		campaignScore = 0;
            	}
{
            	HX_STACKFRAME(&_hx_pos_a31d76c4ca3ed2cf_68_boot)
HXDLIN(  68)		assetModifier = HX_("base",11,e8,10,41);
            	}
{
            	HX_STACKFRAME(&_hx_pos_a31d76c4ca3ed2cf_69_boot)
HXDLIN(  69)		changeableSkin = HX_("default",c1,d8,c3,9b);
            	}
{
            	HX_STACKFRAME(&_hx_pos_a31d76c4ca3ed2cf_84_boot)
HXDLIN(  84)		songDetails = HX_("",00,00,00,00);
            	}
{
            	HX_STACKFRAME(&_hx_pos_a31d76c4ca3ed2cf_85_boot)
HXDLIN(  85)		detailsSub = HX_("",00,00,00,00);
            	}
{
            	HX_STACKFRAME(&_hx_pos_a31d76c4ca3ed2cf_86_boot)
HXDLIN(  86)		detailsPausedText = HX_("",00,00,00,00);
            	}
{
            	HX_STACKFRAME(&_hx_pos_a31d76c4ca3ed2cf_93_boot)
HXDLIN(  93)		health = ((Float)1);
            	}
{
            	HX_STACKFRAME(&_hx_pos_a31d76c4ca3ed2cf_94_boot)
HXDLIN(  94)		combo = 0;
            	}
{
            	HX_STACKFRAME(&_hx_pos_a31d76c4ca3ed2cf_96_boot)
HXDLIN(  96)		misses = 0;
            	}
{
            	HX_STACKFRAME(&_hx_pos_a31d76c4ca3ed2cf_118_boot)
HXDLIN( 118)		defaultCamZoom = ((Float)1.05);
            	}
{
            	HX_STACKFRAME(&_hx_pos_a31d76c4ca3ed2cf_122_boot)
HXDLIN( 122)		songScore = 0;
            	}
{
            	HX_STACKFRAME(&_hx_pos_a31d76c4ca3ed2cf_126_boot)
HXDLIN( 126)		iconRPC = HX_("",00,00,00,00);
            	}
{
            	HX_STACKFRAME(&_hx_pos_a31d76c4ca3ed2cf_128_boot)
HXDLIN( 128)		songLength = ((Float)0);
            	}
{
            	HX_STACKFRAME(&_hx_pos_a31d76c4ca3ed2cf_134_boot)
HXDLIN( 134)		daPixelZoom = ((Float)6);
            	}
{
            	HX_STACKFRAME(&_hx_pos_a31d76c4ca3ed2cf_135_boot)
HXDLIN( 135)		determinedChartType = HX_("",00,00,00,00);
            	}
{
            	HX_STACKFRAME(&_hx_pos_a31d76c4ca3ed2cf_142_boot)
HXDLIN( 142)		strumHUD = ::Array_obj< ::Dynamic>::__new(0);
            	}
{
            	HX_STACKFRAME(&_hx_pos_a31d76c4ca3ed2cf_1673_boot)
HXDLIN(1673)		swagCounter = 0;
            	}
}

} // end namespace meta
} // end namespace state

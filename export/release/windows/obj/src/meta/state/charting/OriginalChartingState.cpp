// Generated by Haxe 4.1.5
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_ForeverAssets
#include <ForeverAssets.h>
#endif
#ifndef INCLUDED_ForeverTools
#include <ForeverTools.h>
#endif
#ifndef INCLUDED_Main
#include <Main.h>
#endif
#ifndef INCLUDED_Paths
#include <Paths.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_StringTools
#include <StringTools.h>
#endif
#ifndef INCLUDED_Type
#include <Type.h>
#endif
#ifndef INCLUDED_Xml
#include <Xml.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxCamera
#include <flixel/FlxCamera.h>
#endif
#ifndef INCLUDED_flixel_FlxCameraFollowStyle
#include <flixel/FlxCameraFollowStyle.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxGame
#include <flixel/FlxGame.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
#ifndef INCLUDED_flixel_IFlxBasic
#include <flixel/IFlxBasic.h>
#endif
#ifndef INCLUDED_flixel_IFlxSprite
#include <flixel/IFlxSprite.h>
#endif
#ifndef INCLUDED_flixel_addons_display_FlxGridOverlay
#include <flixel/addons/display/FlxGridOverlay.h>
#endif
#ifndef INCLUDED_flixel_addons_transition_FlxTransitionableState
#include <flixel/addons/transition/FlxTransitionableState.h>
#endif
#ifndef INCLUDED_flixel_addons_transition_TransitionData
#include <flixel/addons/transition/TransitionData.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxInputText
#include <flixel/addons/ui/FlxInputText.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUI
#include <flixel/addons/ui/FlxUI.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUI9SliceSprite
#include <flixel/addons/ui/FlxUI9SliceSprite.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUIButton
#include <flixel/addons/ui/FlxUIButton.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUICheckBox
#include <flixel/addons/ui/FlxUICheckBox.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUIDropDownHeader
#include <flixel/addons/ui/FlxUIDropDownHeader.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUIDropDownMenu
#include <flixel/addons/ui/FlxUIDropDownMenu.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUIGroup
#include <flixel/addons/ui/FlxUIGroup.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUIInputText
#include <flixel/addons/ui/FlxUIInputText.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUINumericStepper
#include <flixel/addons/ui/FlxUINumericStepper.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUISprite
#include <flixel/addons/ui/FlxUISprite.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUIState
#include <flixel/addons/ui/FlxUIState.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUITabMenu
#include <flixel/addons/ui/FlxUITabMenu.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUIText
#include <flixel/addons/ui/FlxUIText.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUITypedButton
#include <flixel/addons/ui/FlxUITypedButton.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_StrNameLabel
#include <flixel/addons/ui/StrNameLabel.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_ICursorPointable
#include <flixel/addons/ui/interfaces/ICursorPointable.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IEventGetter
#include <flixel/addons/ui/interfaces/IEventGetter.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IFireTongue
#include <flixel/addons/ui/interfaces/IFireTongue.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IFlxUIButton
#include <flixel/addons/ui/interfaces/IFlxUIButton.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IFlxUIClickable
#include <flixel/addons/ui/interfaces/IFlxUIClickable.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IFlxUIState
#include <flixel/addons/ui/interfaces/IFlxUIState.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IFlxUIWidget
#include <flixel/addons/ui/interfaces/IFlxUIWidget.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IHasParams
#include <flixel/addons/ui/interfaces/IHasParams.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_ILabeled
#include <flixel/addons/ui/interfaces/ILabeled.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IResizable
#include <flixel/addons/ui/interfaces/IResizable.h>
#endif
#ifndef INCLUDED_flixel_animation_FlxAnimationController
#include <flixel/animation/FlxAnimationController.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedSpriteGroup
#include <flixel/group/FlxTypedSpriteGroup.h>
#endif
#ifndef INCLUDED_flixel_input_FlxBaseKeyList
#include <flixel/input/FlxBaseKeyList.h>
#endif
#ifndef INCLUDED_flixel_input_FlxInput
#include <flixel/input/FlxInput.h>
#endif
#ifndef INCLUDED_flixel_input_FlxKeyManager
#include <flixel/input/FlxKeyManager.h>
#endif
#ifndef INCLUDED_flixel_input_FlxPointer
#include <flixel/input/FlxPointer.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInput
#include <flixel/input/IFlxInput.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInputManager
#include <flixel/input/IFlxInputManager.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard_FlxKeyList
#include <flixel/input/keyboard/FlxKeyList.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard_FlxKeyboard
#include <flixel/input/keyboard/FlxKeyboard.h>
#endif
#ifndef INCLUDED_flixel_input_mouse_FlxMouse
#include <flixel/input/mouse/FlxMouse.h>
#endif
#ifndef INCLUDED_flixel_input_mouse_FlxMouseButton
#include <flixel/input/mouse/FlxMouseButton.h>
#endif
#ifndef INCLUDED_flixel_math_FlxMath
#include <flixel/math/FlxMath.h>
#endif
#ifndef INCLUDED_flixel_math_FlxPoint
#include <flixel/math/FlxPoint.h>
#endif
#ifndef INCLUDED_flixel_system_FlxSound
#include <flixel/system/FlxSound.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_SoundFrontEnd
#include <flixel/system/frontEnds/SoundFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_text_FlxText
#include <flixel/text/FlxText.h>
#endif
#ifndef INCLUDED_flixel_ui_FlxButton
#include <flixel/ui/FlxButton.h>
#endif
#ifndef INCLUDED_flixel_ui_FlxTypedButton
#include <flixel/ui/FlxTypedButton.h>
#endif
#ifndef INCLUDED_flixel_ui_FlxTypedButton_flixel_text_FlxText
#include <flixel/ui/FlxTypedButton_flixel_text_FlxText.h>
#endif
#ifndef INCLUDED_flixel_util_FlxSave
#include <flixel/util/FlxSave.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif
#ifndef INCLUDED_gameObjects_userInterface_HealthIcon
#include <gameObjects/userInterface/HealthIcon.h>
#endif
#ifndef INCLUDED_gameObjects_userInterface_notes_Note
#include <gameObjects/userInterface/notes/Note.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_Log
#include <haxe/Log.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_haxe_format_JsonPrinter
#include <haxe/format/JsonPrinter.h>
#endif
#ifndef INCLUDED_meta_CoolUtil
#include <meta/CoolUtil.h>
#endif
#ifndef INCLUDED_meta_MusicBeatState
#include <meta/MusicBeatState.h>
#endif
#ifndef INCLUDED_meta_data_Conductor
#include <meta/data/Conductor.h>
#endif
#ifndef INCLUDED_meta_data_Song
#include <meta/data/Song.h>
#endif
#ifndef INCLUDED_meta_data_dependency_FNFSprite
#include <meta/data/dependency/FNFSprite.h>
#endif
#ifndef INCLUDED_meta_data_dependency_FNFUIState
#include <meta/data/dependency/FNFUIState.h>
#endif
#ifndef INCLUDED_meta_state_PlayState
#include <meta/state/PlayState.h>
#endif
#ifndef INCLUDED_meta_state_charting_OriginalChartingState
#include <meta/state/charting/OriginalChartingState.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_ErrorEvent
#include <openfl/events/ErrorEvent.h>
#endif
#ifndef INCLUDED_openfl_events_Event
#include <openfl/events/Event.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IOErrorEvent
#include <openfl/events/IOErrorEvent.h>
#endif
#ifndef INCLUDED_openfl_events_TextEvent
#include <openfl/events/TextEvent.h>
#endif
#ifndef INCLUDED_openfl_media_Sound
#include <openfl/media/Sound.h>
#endif
#ifndef INCLUDED_openfl_media_SoundChannel
#include <openfl/media/SoundChannel.h>
#endif
#ifndef INCLUDED_openfl_net_FileReference
#include <openfl/net/FileReference.h>
#endif
#ifndef INCLUDED_sys_FileSystem
#include <sys/FileSystem.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_9a934f134b71b84f_45_new,"meta.state.charting.OriginalChartingState","new",0xbf3e0b4a,"meta.state.charting.OriginalChartingState.new","meta/state/charting/OriginalChartingState.hx",45,0xf932d165)
HX_LOCAL_STACK_FRAME(_hx_pos_9a934f134b71b84f_95_create,"meta.state.charting.OriginalChartingState","create",0x5c715a52,"meta.state.charting.OriginalChartingState.create","meta/state/charting/OriginalChartingState.hx",95,0xf932d165)
HX_LOCAL_STACK_FRAME(_hx_pos_9a934f134b71b84f_195_addSongUI,"meta.state.charting.OriginalChartingState","addSongUI",0x8f9d48d4,"meta.state.charting.OriginalChartingState.addSongUI","meta/state/charting/OriginalChartingState.hx",195,0xf932d165)
HX_LOCAL_STACK_FRAME(_hx_pos_9a934f134b71b84f_203_addSongUI,"meta.state.charting.OriginalChartingState","addSongUI",0x8f9d48d4,"meta.state.charting.OriginalChartingState.addSongUI","meta/state/charting/OriginalChartingState.hx",203,0xf932d165)
HX_LOCAL_STACK_FRAME(_hx_pos_9a934f134b71b84f_214_addSongUI,"meta.state.charting.OriginalChartingState","addSongUI",0x8f9d48d4,"meta.state.charting.OriginalChartingState.addSongUI","meta/state/charting/OriginalChartingState.hx",214,0xf932d165)
HX_LOCAL_STACK_FRAME(_hx_pos_9a934f134b71b84f_219_addSongUI,"meta.state.charting.OriginalChartingState","addSongUI",0x8f9d48d4,"meta.state.charting.OriginalChartingState.addSongUI","meta/state/charting/OriginalChartingState.hx",219,0xf932d165)
HX_LOCAL_STACK_FRAME(_hx_pos_9a934f134b71b84f_224_addSongUI,"meta.state.charting.OriginalChartingState","addSongUI",0x8f9d48d4,"meta.state.charting.OriginalChartingState.addSongUI","meta/state/charting/OriginalChartingState.hx",224,0xf932d165)
HX_LOCAL_STACK_FRAME(_hx_pos_9a934f134b71b84f_240_addSongUI,"meta.state.charting.OriginalChartingState","addSongUI",0x8f9d48d4,"meta.state.charting.OriginalChartingState.addSongUI","meta/state/charting/OriginalChartingState.hx",240,0xf932d165)
HX_LOCAL_STACK_FRAME(_hx_pos_9a934f134b71b84f_247_addSongUI,"meta.state.charting.OriginalChartingState","addSongUI",0x8f9d48d4,"meta.state.charting.OriginalChartingState.addSongUI","meta/state/charting/OriginalChartingState.hx",247,0xf932d165)
HX_LOCAL_STACK_FRAME(_hx_pos_9a934f134b71b84f_187_addSongUI,"meta.state.charting.OriginalChartingState","addSongUI",0x8f9d48d4,"meta.state.charting.OriginalChartingState.addSongUI","meta/state/charting/OriginalChartingState.hx",187,0xf932d165)
HX_LOCAL_STACK_FRAME(_hx_pos_9a934f134b71b84f_298_addSectionUI,"meta.state.charting.OriginalChartingState","addSectionUI",0x3eb58cee,"meta.state.charting.OriginalChartingState.addSectionUI","meta/state/charting/OriginalChartingState.hx",298,0xf932d165)
HX_LOCAL_STACK_FRAME(_hx_pos_9a934f134b71b84f_305_addSectionUI,"meta.state.charting.OriginalChartingState","addSectionUI",0x3eb58cee,"meta.state.charting.OriginalChartingState.addSectionUI","meta/state/charting/OriginalChartingState.hx",305,0xf932d165)
HX_LOCAL_STACK_FRAME(_hx_pos_9a934f134b71b84f_282_addSectionUI,"meta.state.charting.OriginalChartingState","addSectionUI",0x3eb58cee,"meta.state.charting.OriginalChartingState.addSectionUI","meta/state/charting/OriginalChartingState.hx",282,0xf932d165)
HX_LOCAL_STACK_FRAME(_hx_pos_9a934f134b71b84f_342_addNoteUI,"meta.state.charting.OriginalChartingState","addNoteUI",0x93ca3e31,"meta.state.charting.OriginalChartingState.addNoteUI","meta/state/charting/OriginalChartingState.hx",342,0xf932d165)
HX_LOCAL_STACK_FRAME(_hx_pos_9a934f134b71b84f_391_loadSong,"meta.state.charting.OriginalChartingState","loadSong",0xf03de9f1,"meta.state.charting.OriginalChartingState.loadSong","meta/state/charting/OriginalChartingState.hx",391,0xf932d165)
HX_LOCAL_STACK_FRAME(_hx_pos_9a934f134b71b84f_370_loadSong,"meta.state.charting.OriginalChartingState","loadSong",0xf03de9f1,"meta.state.charting.OriginalChartingState.loadSong","meta/state/charting/OriginalChartingState.hx",370,0xf932d165)
HX_LOCAL_STACK_FRAME(_hx_pos_9a934f134b71b84f_399_pauseMusic,"meta.state.charting.OriginalChartingState","pauseMusic",0xee20c425,"meta.state.charting.OriginalChartingState.pauseMusic","meta/state/charting/OriginalChartingState.hx",399,0xf932d165)
HX_LOCAL_STACK_FRAME(_hx_pos_9a934f134b71b84f_408_generateUI,"meta.state.charting.OriginalChartingState","generateUI",0x56adf71f,"meta.state.charting.OriginalChartingState.generateUI","meta/state/charting/OriginalChartingState.hx",408,0xf932d165)
HX_LOCAL_STACK_FRAME(_hx_pos_9a934f134b71b84f_428_getEvent,"meta.state.charting.OriginalChartingState","getEvent",0x08e1cc7a,"meta.state.charting.OriginalChartingState.getEvent","meta/state/charting/OriginalChartingState.hx",428,0xf932d165)
HX_LOCAL_STACK_FRAME(_hx_pos_9a934f134b71b84f_489_sectionStartTime,"meta.state.charting.OriginalChartingState","sectionStartTime",0x340775c0,"meta.state.charting.OriginalChartingState.sectionStartTime","meta/state/charting/OriginalChartingState.hx",489,0xf932d165)
HX_LOCAL_STACK_FRAME(_hx_pos_9a934f134b71b84f_504_update,"meta.state.charting.OriginalChartingState","update",0x6767795f,"meta.state.charting.OriginalChartingState.update","meta/state/charting/OriginalChartingState.hx",504,0xf932d165)
HX_LOCAL_STACK_FRAME(_hx_pos_9a934f134b71b84f_535_update,"meta.state.charting.OriginalChartingState","update",0x6767795f,"meta.state.charting.OriginalChartingState.update","meta/state/charting/OriginalChartingState.hx",535,0xf932d165)
HX_LOCAL_STACK_FRAME(_hx_pos_9a934f134b71b84f_706_changeNoteSustain,"meta.state.charting.OriginalChartingState","changeNoteSustain",0xb0dc2bab,"meta.state.charting.OriginalChartingState.changeNoteSustain","meta/state/charting/OriginalChartingState.hx",706,0xf932d165)
HX_LOCAL_STACK_FRAME(_hx_pos_9a934f134b71b84f_721_recalculateSteps,"meta.state.charting.OriginalChartingState","recalculateSteps",0x8f9c162a,"meta.state.charting.OriginalChartingState.recalculateSteps","meta/state/charting/OriginalChartingState.hx",721,0xf932d165)
HX_LOCAL_STACK_FRAME(_hx_pos_9a934f134b71b84f_740_resetSection,"meta.state.charting.OriginalChartingState","resetSection",0x86c663ac,"meta.state.charting.OriginalChartingState.resetSection","meta/state/charting/OriginalChartingState.hx",740,0xf932d165)
HX_LOCAL_STACK_FRAME(_hx_pos_9a934f134b71b84f_763_changeSection,"meta.state.charting.OriginalChartingState","changeSection",0x35b16dbf,"meta.state.charting.OriginalChartingState.changeSection","meta/state/charting/OriginalChartingState.hx",763,0xf932d165)
HX_LOCAL_STACK_FRAME(_hx_pos_9a934f134b71b84f_796_copySection,"meta.state.charting.OriginalChartingState","copySection",0xef4ab79a,"meta.state.charting.OriginalChartingState.copySection","meta/state/charting/OriginalChartingState.hx",796,0xf932d165)
HX_LOCAL_STACK_FRAME(_hx_pos_9a934f134b71b84f_811_updateSectionUI,"meta.state.charting.OriginalChartingState","updateSectionUI",0xac28161a,"meta.state.charting.OriginalChartingState.updateSectionUI","meta/state/charting/OriginalChartingState.hx",811,0xf932d165)
HX_LOCAL_STACK_FRAME(_hx_pos_9a934f134b71b84f_825_updateHeads,"meta.state.charting.OriginalChartingState","updateHeads",0x45af7174,"meta.state.charting.OriginalChartingState.updateHeads","meta/state/charting/OriginalChartingState.hx",825,0xf932d165)
HX_LOCAL_STACK_FRAME(_hx_pos_9a934f134b71b84f_839_updateNoteUI,"meta.state.charting.OriginalChartingState","updateNoteUI",0xe8898185,"meta.state.charting.OriginalChartingState.updateNoteUI","meta/state/charting/OriginalChartingState.hx",839,0xf932d165)
HX_LOCAL_STACK_FRAME(_hx_pos_9a934f134b71b84f_844_updateGrid,"meta.state.charting.OriginalChartingState","updateGrid",0x056e17c5,"meta.state.charting.OriginalChartingState.updateGrid","meta/state/charting/OriginalChartingState.hx",844,0xf932d165)
HX_LOCAL_STACK_FRAME(_hx_pos_9a934f134b71b84f_916_addSection,"meta.state.charting.OriginalChartingState","addSection",0xcdaf881a,"meta.state.charting.OriginalChartingState.addSection","meta/state/charting/OriginalChartingState.hx",916,0xf932d165)
HX_LOCAL_STACK_FRAME(_hx_pos_9a934f134b71b84f_931_selectNote,"meta.state.charting.OriginalChartingState","selectNote",0xbff2e364,"meta.state.charting.OriginalChartingState.selectNote","meta/state/charting/OriginalChartingState.hx",931,0xf932d165)
HX_LOCAL_STACK_FRAME(_hx_pos_9a934f134b71b84f_949_deleteNote,"meta.state.charting.OriginalChartingState","deleteNote",0xa4a44c13,"meta.state.charting.OriginalChartingState.deleteNote","meta/state/charting/OriginalChartingState.hx",949,0xf932d165)
HX_LOCAL_STACK_FRAME(_hx_pos_9a934f134b71b84f_963_clearSection,"meta.state.charting.OriginalChartingState","clearSection",0xf066cfae,"meta.state.charting.OriginalChartingState.clearSection","meta/state/charting/OriginalChartingState.hx",963,0xf932d165)
HX_LOCAL_STACK_FRAME(_hx_pos_9a934f134b71b84f_970_clearSong,"meta.state.charting.OriginalChartingState","clearSong",0x6a09526c,"meta.state.charting.OriginalChartingState.clearSong","meta/state/charting/OriginalChartingState.hx",970,0xf932d165)
HX_LOCAL_STACK_FRAME(_hx_pos_9a934f134b71b84f_980_addNote,"meta.state.charting.OriginalChartingState","addNote",0xfa9a529d,"meta.state.charting.OriginalChartingState.addNote","meta/state/charting/OriginalChartingState.hx",980,0xf932d165)
HX_LOCAL_STACK_FRAME(_hx_pos_9a934f134b71b84f_1006_getStrumTime,"meta.state.charting.OriginalChartingState","getStrumTime",0xba87e256,"meta.state.charting.OriginalChartingState.getStrumTime","meta/state/charting/OriginalChartingState.hx",1006,0xf932d165)
HX_LOCAL_STACK_FRAME(_hx_pos_9a934f134b71b84f_1011_getYfromStrum,"meta.state.charting.OriginalChartingState","getYfromStrum",0xef4b0f86,"meta.state.charting.OriginalChartingState.getYfromStrum","meta/state/charting/OriginalChartingState.hx",1011,0xf932d165)
HX_LOCAL_STACK_FRAME(_hx_pos_9a934f134b71b84f_1041_loadLevel,"meta.state.charting.OriginalChartingState","loadLevel",0x378aa7e8,"meta.state.charting.OriginalChartingState.loadLevel","meta/state/charting/OriginalChartingState.hx",1041,0xf932d165)
HX_LOCAL_STACK_FRAME(_hx_pos_9a934f134b71b84f_1045_getNotes,"meta.state.charting.OriginalChartingState","getNotes",0x32e7e0a1,"meta.state.charting.OriginalChartingState.getNotes","meta/state/charting/OriginalChartingState.hx",1045,0xf932d165)
HX_LOCAL_STACK_FRAME(_hx_pos_9a934f134b71b84f_1057_loadJson,"meta.state.charting.OriginalChartingState","loadJson",0xea4e0844,"meta.state.charting.OriginalChartingState.loadJson","meta/state/charting/OriginalChartingState.hx",1057,0xf932d165)
HX_LOCAL_STACK_FRAME(_hx_pos_9a934f134b71b84f_1063_loadAutosave,"meta.state.charting.OriginalChartingState","loadAutosave",0xb5135248,"meta.state.charting.OriginalChartingState.loadAutosave","meta/state/charting/OriginalChartingState.hx",1063,0xf932d165)
HX_LOCAL_STACK_FRAME(_hx_pos_9a934f134b71b84f_1069_autosaveSong,"meta.state.charting.OriginalChartingState","autosaveSong",0x1ebc3bf7,"meta.state.charting.OriginalChartingState.autosaveSong","meta/state/charting/OriginalChartingState.hx",1069,0xf932d165)
HX_LOCAL_STACK_FRAME(_hx_pos_9a934f134b71b84f_1077_saveLevel,"meta.state.charting.OriginalChartingState","saveLevel",0xab006371,"meta.state.charting.OriginalChartingState.saveLevel","meta/state/charting/OriginalChartingState.hx",1077,0xf932d165)
HX_LOCAL_STACK_FRAME(_hx_pos_9a934f134b71b84f_1095_onSaveComplete,"meta.state.charting.OriginalChartingState","onSaveComplete",0x6965e62b,"meta.state.charting.OriginalChartingState.onSaveComplete","meta/state/charting/OriginalChartingState.hx",1095,0xf932d165)
HX_LOCAL_STACK_FRAME(_hx_pos_9a934f134b71b84f_1107_onSaveCancel,"meta.state.charting.OriginalChartingState","onSaveCancel",0x9041326c,"meta.state.charting.OriginalChartingState.onSaveCancel","meta/state/charting/OriginalChartingState.hx",1107,0xf932d165)
HX_LOCAL_STACK_FRAME(_hx_pos_9a934f134b71b84f_1118_onSaveError,"meta.state.charting.OriginalChartingState","onSaveError",0x5f77eb16,"meta.state.charting.OriginalChartingState.onSaveError","meta/state/charting/OriginalChartingState.hx",1118,0xf932d165)
HX_LOCAL_STACK_FRAME(_hx_pos_9a934f134b71b84f_59_boot,"meta.state.charting.OriginalChartingState","boot",0x8f24d608,"meta.state.charting.OriginalChartingState.boot","meta/state/charting/OriginalChartingState.hx",59,0xf932d165)
HX_LOCAL_STACK_FRAME(_hx_pos_9a934f134b71b84f_70_boot,"meta.state.charting.OriginalChartingState","boot",0x8f24d608,"meta.state.charting.OriginalChartingState.boot","meta/state/charting/OriginalChartingState.hx",70,0xf932d165)
namespace meta{
namespace state{
namespace charting{

void OriginalChartingState_obj::__construct( ::flixel::addons::transition::TransitionData TransIn, ::flixel::addons::transition::TransitionData TransOut){
            	HX_STACKFRAME(&_hx_pos_9a934f134b71b84f_45_new)
HXLINE(1037)		this->daSpacing = ((Float)0.3);
HXLINE( 478)		this->updatedSection = false;
HXLINE(  87)		this->tempBpm = ((Float)0);
HXLINE(  65)		this->amountSteps = 0;
HXLINE(  64)		this->curSong = HX_("Dadbattle",9f,4a,7c,48);
HXLINE(  57)		this->curNoteType = 0;
HXLINE(  55)		this->curSection = 0;
HXLINE(  45)		super::__construct(TransIn,TransOut);
            	}

Dynamic OriginalChartingState_obj::__CreateEmpty() { return new OriginalChartingState_obj; }

void *OriginalChartingState_obj::_hx_vtable = 0;

Dynamic OriginalChartingState_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< OriginalChartingState_obj > _hx_result = new OriginalChartingState_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool OriginalChartingState_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x2f064378) {
		if (inClassId<=(int)0x0f8d4977) {
			if (inClassId<=(int)0x0225b2d9) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x0225b2d9;
			} else {
				return inClassId==(int)0x0f8d4977;
			}
		} else {
			return inClassId==(int)0x23a57bae || inClassId==(int)0x2f064378;
		}
	} else {
		if (inClassId<=(int)0x7ccf8994) {
			if (inClassId<=(int)0x7c795c9f) {
				return inClassId==(int)0x62817b24 || inClassId==(int)0x7c795c9f;
			} else {
				return inClassId==(int)0x7ccf8994;
			}
		} else {
			return inClassId==(int)0x7f162424;
		}
	}
}

void OriginalChartingState_obj::create(){
            	HX_GC_STACKFRAME(&_hx_pos_9a934f134b71b84f_95_create)
HXLINE(  96)		this->super::create();
HXLINE(  98)		this->curSection = ::meta::state::charting::OriginalChartingState_obj::lastSection;
HXLINE( 100)		this->gridBG = ::flixel::addons::display::FlxGridOverlay_obj::create(::meta::state::charting::OriginalChartingState_obj::GRID_SIZE,::meta::state::charting::OriginalChartingState_obj::GRID_SIZE,(::meta::state::charting::OriginalChartingState_obj::GRID_SIZE * 8),(::meta::state::charting::OriginalChartingState_obj::GRID_SIZE * 16),null(),null(),null());
HXLINE( 101)		this->add(this->gridBG);
HXLINE( 103)		Float gridBlackLine = this->gridBG->x;
HXDLIN( 103)		 ::flixel::FlxSprite gridBlackLine1 =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,(gridBlackLine + (this->gridBG->get_width() / ( (Float)(2) ))),null(),null());
HXDLIN( 103)		 ::flixel::FlxSprite gridBlackLine2 = gridBlackLine1->makeGraphic(2,::Std_obj::_hx_int(this->gridBG->get_height()),-16777216,null(),null());
HXLINE( 104)		this->add(gridBlackLine2);
HXLINE( 106)		this->curRenderedNotes =  ::flixel::group::FlxTypedGroup_obj::__alloc( HX_CTX ,null());
HXLINE( 107)		this->curRenderedSustains =  ::flixel::group::FlxTypedGroup_obj::__alloc( HX_CTX ,null());
HXLINE( 109)		if (::hx::IsNotNull( ::meta::state::PlayState_obj::SONG )) {
HXLINE( 110)			this->_song = ::meta::state::PlayState_obj::SONG;
            		}
HXLINE( 126)		this->leftIcon =  ::gameObjects::userInterface::HealthIcon_obj::__alloc( HX_CTX ,( (::String)(this->_song->__Field(HX_("player1",b0,09,15,8a),::hx::paccDynamic)) ),null());
HXLINE( 127)		this->rightIcon =  ::gameObjects::userInterface::HealthIcon_obj::__alloc( HX_CTX ,( (::String)(this->_song->__Field(HX_("player2",b1,09,15,8a),::hx::paccDynamic)) ),null());
HXLINE( 128)		this->leftIcon->scrollFactor->set(1,1);
HXLINE( 129)		this->rightIcon->scrollFactor->set(1,1);
HXLINE( 131)		this->leftIcon->setGraphicSize(0,45);
HXLINE( 132)		this->rightIcon->setGraphicSize(0,45);
HXLINE( 134)		this->add(this->leftIcon);
HXLINE( 135)		this->add(this->rightIcon);
HXLINE( 137)		this->leftIcon->setPosition(0,-100);
HXLINE( 138)		 ::gameObjects::userInterface::HealthIcon _hx_tmp = this->rightIcon;
HXDLIN( 138)		_hx_tmp->setPosition((this->gridBG->get_width() / ( (Float)(2) )),-100);
HXLINE( 140)		::flixel::FlxG_obj::mouse->set_visible(true);
HXLINE( 141)		::flixel::FlxG_obj::save->bind(HX_("funkin",31,b2,4f,6f),HX_("ninjamuffin99",f7,4c,e5,00));
HXLINE( 143)		this->tempBpm = ( (Float)(this->_song->__Field(HX_("bpm",df,be,4a,00),::hx::paccDynamic)) );
HXLINE( 145)		this->addSection(null());
HXLINE( 149)		this->updateGrid();
HXLINE( 151)		this->loadSong(( (::String)(this->_song->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic)) ));
HXLINE( 152)		::meta::data::Conductor_obj::changeBPM(( (Float)(this->_song->__Field(HX_("bpm",df,be,4a,00),::hx::paccDynamic)) ),null());
HXLINE( 153)		::meta::data::Conductor_obj::mapBPMChanges(this->_song);
HXLINE( 155)		this->bpmTxt =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,1000,50,0,HX_("",00,00,00,00),16,null());
HXLINE( 156)		this->bpmTxt->scrollFactor->set(null(),null());
HXLINE( 157)		this->add(this->bpmTxt);
HXLINE( 159)		 ::flixel::FlxSprite _hx_tmp1 =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,0,50,null());
HXDLIN( 159)		this->strumLine = _hx_tmp1->makeGraphic(::Std_obj::_hx_int((( (Float)(::flixel::FlxG_obj::width) ) / ( (Float)(2) ))),4,null(),null(),null());
HXLINE( 160)		this->add(this->strumLine);
HXLINE( 162)		this->dummyArrow =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,null(),null(),null())->makeGraphic(::meta::state::charting::OriginalChartingState_obj::GRID_SIZE,::meta::state::charting::OriginalChartingState_obj::GRID_SIZE,null(),null(),null());
HXLINE( 163)		this->add(this->dummyArrow);
HXLINE( 165)		::Array< ::Dynamic> tabs = ::Array_obj< ::Dynamic>::__new(3)->init(0, ::Dynamic(::hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("name",4b,72,ff,48),HX_("Song",f5,4f,31,37))
            			->setFixed(1,HX_("label",f4,0d,af,6f),HX_("Song",f5,4f,31,37))))->init(1, ::Dynamic(::hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("name",4b,72,ff,48),HX_("Section",c5,2d,29,2b))
            			->setFixed(1,HX_("label",f4,0d,af,6f),HX_("Section",c5,2d,29,2b))))->init(2, ::Dynamic(::hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("name",4b,72,ff,48),HX_("Note",12,44,e3,33))
            			->setFixed(1,HX_("label",f4,0d,af,6f),HX_("Note",12,44,e3,33))));
HXLINE( 171)		this->UI_box =  ::flixel::addons::ui::FlxUITabMenu_obj::__alloc( HX_CTX ,null(),null(),tabs,null(),true,null(),null());
HXLINE( 173)		this->UI_box->resize(( (Float)(300) ),( (Float)(400) ));
HXLINE( 174)		this->UI_box->set_x((( (Float)(::flixel::FlxG_obj::width) ) / ( (Float)(2) )));
HXLINE( 175)		this->UI_box->set_y(( (Float)(20) ));
HXLINE( 176)		this->add(this->UI_box);
HXLINE( 178)		this->addSongUI();
HXLINE( 179)		this->addSectionUI();
HXLINE( 180)		this->addNoteUI();
HXLINE( 182)		this->add(this->curRenderedNotes);
HXLINE( 183)		this->add(this->curRenderedSustains);
            	}


void OriginalChartingState_obj::addSongUI(){
            		HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_0, ::meta::state::charting::OriginalChartingState,_gthis, ::flixel::addons::ui::FlxUICheckBox,check_voices) HXARGC(0)
            		void _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_9a934f134b71b84f_195_addSongUI)
HXLINE( 196)			_gthis->_song->__SetField(HX_("needsVoices",be,05,e9,0d),check_voices->checked,::hx::paccDynamic);
HXLINE( 197)			::haxe::Log_obj::trace(HX_("CHECKED!",3a,9f,7d,06),::hx::SourceInfo(HX_("source/meta/state/charting/OriginalChartingState.hx",59,ce,18,a6),197,HX_("meta.state.charting.OriginalChartingState",58,5e,b8,8e),HX_("addSongUI",6a,02,ad,e5)));
            		}
            		HX_END_LOCAL_FUNC0((void))

            		HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_1, ::flixel::addons::ui::FlxUICheckBox,check_mute_inst, ::meta::state::charting::OriginalChartingState,_gthis) HXARGC(0)
            		void _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_9a934f134b71b84f_203_addSongUI)
HXLINE( 204)			Float vol = ( (Float)(1) );
HXLINE( 206)			if (check_mute_inst->checked) {
HXLINE( 207)				vol = ( (Float)(0) );
            			}
HXLINE( 209)			_gthis->songMusic->set_volume(vol);
            		}
            		HX_END_LOCAL_FUNC0((void))

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_2, ::meta::state::charting::OriginalChartingState,_gthis) HXARGC(0)
            		void _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_9a934f134b71b84f_214_addSongUI)
HXLINE( 214)			_gthis->saveLevel();
            		}
            		HX_END_LOCAL_FUNC0((void))

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_3, ::meta::state::charting::OriginalChartingState,_gthis) HXARGC(0)
            		void _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_9a934f134b71b84f_219_addSongUI)
HXLINE( 219)			_gthis->loadSong(( (::String)(_gthis->_song->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic)) ));
            		}
            		HX_END_LOCAL_FUNC0((void))

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_4, ::meta::state::charting::OriginalChartingState,_gthis) HXARGC(0)
            		void _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_9a934f134b71b84f_224_addSongUI)
HXLINE( 224)			 ::meta::state::charting::OriginalChartingState _gthis1 = _gthis;
HXDLIN( 224)			_gthis1->loadJson(( (::String)(_gthis->_song->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic)) ).toLowerCase());
            		}
            		HX_END_LOCAL_FUNC0((void))

            		HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_5, ::meta::state::charting::OriginalChartingState,_gthis,::Array< ::String >,characters) HXARGC(1)
            		void _hx_run(::String character){
            			HX_GC_STACKFRAME(&_hx_pos_9a934f134b71b84f_240_addSongUI)
HXLINE( 241)			::Array< ::String > characters1 = characters;
HXDLIN( 241)			 ::Dynamic player1DropDown = ::Std_obj::parseInt(character);
HXDLIN( 241)			_gthis->_song->__SetField(HX_("player1",b0,09,15,8a),characters1->__get(( (int)(player1DropDown) )),::hx::paccDynamic);
HXLINE( 242)			_gthis->updateHeads();
            		}
            		HX_END_LOCAL_FUNC1((void))

            		HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_6, ::meta::state::charting::OriginalChartingState,_gthis,::Array< ::String >,characters) HXARGC(1)
            		void _hx_run(::String character){
            			HX_GC_STACKFRAME(&_hx_pos_9a934f134b71b84f_247_addSongUI)
HXLINE( 248)			::Array< ::String > characters1 = characters;
HXDLIN( 248)			 ::Dynamic player2DropDown = ::Std_obj::parseInt(character);
HXDLIN( 248)			_gthis->_song->__SetField(HX_("player2",b1,09,15,8a),characters1->__get(( (int)(player2DropDown) )),::hx::paccDynamic);
HXLINE( 249)			_gthis->updateHeads();
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_GC_STACKFRAME(&_hx_pos_9a934f134b71b84f_187_addSongUI)
HXLINE( 186)		 ::meta::state::charting::OriginalChartingState _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE( 188)		 ::flixel::addons::ui::FlxUIInputText UI_songTitle =  ::flixel::addons::ui::FlxUIInputText_obj::__alloc( HX_CTX ,10,10,70,( (::String)(this->_song->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic)) ),8,null(),null(),null());
HXLINE( 189)		this->typingShit = UI_songTitle;
HXLINE( 191)		 ::flixel::addons::ui::FlxUICheckBox check_voices =  ::flixel::addons::ui::FlxUICheckBox_obj::__alloc( HX_CTX ,10,25,null(),null(),HX_("Has voice track",b7,2b,b0,eb),100,null(),null());
HXLINE( 192)		check_voices->set_checked(( (bool)(this->_song->__Field(HX_("needsVoices",be,05,e9,0d),::hx::paccDynamic)) ));
HXLINE( 194)		check_voices->callback =  ::Dynamic(new _hx_Closure_0(_gthis,check_voices));
HXLINE( 200)		 ::flixel::addons::ui::FlxUICheckBox check_mute_inst =  ::flixel::addons::ui::FlxUICheckBox_obj::__alloc( HX_CTX ,10,200,null(),null(),HX_("Mute Instrumental (in editor)",a2,93,a5,ab),100,null(),null());
HXLINE( 201)		check_mute_inst->set_checked(false);
HXLINE( 202)		check_mute_inst->callback =  ::Dynamic(new _hx_Closure_1(check_mute_inst,_gthis));
HXLINE( 212)		 ::flixel::ui::FlxButton saveButton =  ::flixel::ui::FlxButton_obj::__alloc( HX_CTX ,110,8,HX_("Save",5d,b7,26,37), ::Dynamic(new _hx_Closure_2(_gthis)));
HXLINE( 217)		Float saveButton1 = saveButton->x;
HXDLIN( 217)		Float reloadSong = ((saveButton1 + saveButton->get_width()) + 10);
HXDLIN( 217)		 ::flixel::ui::FlxButton reloadSong1 =  ::flixel::ui::FlxButton_obj::__alloc( HX_CTX ,reloadSong,saveButton->y,HX_("Reload Audio",cf,9c,c1,ed), ::Dynamic(new _hx_Closure_3(_gthis)));
HXLINE( 222)		 ::flixel::ui::FlxButton reloadSongJson =  ::flixel::ui::FlxButton_obj::__alloc( HX_CTX ,reloadSong1->x,(saveButton->y + 30),HX_("Reload JSON",2f,1c,a5,4a), ::Dynamic(new _hx_Closure_4(_gthis)));
HXLINE( 227)		 ::flixel::ui::FlxButton loadAutosaveBtn =  ::flixel::ui::FlxButton_obj::__alloc( HX_CTX ,reloadSongJson->x,(reloadSongJson->y + 30),HX_("load autosave",66,5f,5a,83),this->loadAutosave_dyn());
HXLINE( 229)		 ::flixel::addons::ui::FlxUINumericStepper stepperSpeed =  ::flixel::addons::ui::FlxUINumericStepper_obj::__alloc( HX_CTX ,10,80,((Float)0.1),1,((Float)0.1),10,1,null(),null(),null(),null(),null());
HXLINE( 230)		stepperSpeed->set_value(( (Float)(this->_song->__Field(HX_("speed",87,97,69,81),::hx::paccDynamic)) ));
HXLINE( 231)		stepperSpeed->name = HX_("song_speed",5d,10,41,a4);
HXLINE( 233)		 ::flixel::addons::ui::FlxUINumericStepper stepperBPM =  ::flixel::addons::ui::FlxUINumericStepper_obj::__alloc( HX_CTX ,10,65,1,1,1,339,0,null(),null(),null(),null(),null());
HXLINE( 234)		stepperBPM->set_value(::meta::data::Conductor_obj::bpm);
HXLINE( 235)		stepperBPM->name = HX_("song_bpm",35,36,15,42);
HXLINE( 237)		::String library = null();
HXDLIN( 237)		::Array< ::String > characters = ::meta::CoolUtil_obj::coolTextFile(::Paths_obj::getPath((HX_("characterList",a7,ac,9f,40) + HX_(".txt",02,3f,c0,1e)),HX_("TEXT",ad,94,ba,37),library));
HXLINE( 239)		 ::flixel::addons::ui::FlxUIDropDownMenu player1DropDown =  ::flixel::addons::ui::FlxUIDropDownMenu_obj::__alloc( HX_CTX ,10,100,::flixel::addons::ui::FlxUIDropDownMenu_obj::makeStrIdLabelArray(characters,true), ::Dynamic(new _hx_Closure_5(_gthis,characters)),null(),null(),null(),null());
HXLINE( 244)		player1DropDown->set_selectedLabel(( (::String)(this->_song->__Field(HX_("player1",b0,09,15,8a),::hx::paccDynamic)) ));
HXLINE( 246)		 ::flixel::addons::ui::FlxUIDropDownMenu player2DropDown =  ::flixel::addons::ui::FlxUIDropDownMenu_obj::__alloc( HX_CTX ,140,100,::flixel::addons::ui::FlxUIDropDownMenu_obj::makeStrIdLabelArray(characters,true), ::Dynamic(new _hx_Closure_6(_gthis,characters)),null(),null(),null(),null());
HXLINE( 252)		player2DropDown->set_selectedLabel(( (::String)(this->_song->__Field(HX_("player2",b1,09,15,8a),::hx::paccDynamic)) ));
HXLINE( 254)		 ::flixel::addons::ui::FlxUI tab_group_song =  ::flixel::addons::ui::FlxUI_obj::__alloc( HX_CTX ,null(),this->UI_box,null(),null(),null(),null());
HXLINE( 255)		tab_group_song->name = HX_("Song",f5,4f,31,37);
HXLINE( 256)		tab_group_song->add(UI_songTitle).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 258)		tab_group_song->add(check_voices).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 259)		tab_group_song->add(check_mute_inst).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 260)		tab_group_song->add(saveButton).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 261)		tab_group_song->add(reloadSong1).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 262)		tab_group_song->add(reloadSongJson).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 263)		tab_group_song->add(loadAutosaveBtn).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 264)		tab_group_song->add(stepperBPM).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 265)		tab_group_song->add(stepperSpeed).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 266)		tab_group_song->add(player1DropDown).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 267)		tab_group_song->add(player2DropDown).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 269)		this->UI_box->addGroup(tab_group_song);
HXLINE( 270)		this->UI_box->scrollFactor->set(null(),null());
HXLINE( 272)		::flixel::FlxG_obj::camera->follow(this->strumLine,null(),null());
            	}


HX_DEFINE_DYNAMIC_FUNC0(OriginalChartingState_obj,addSongUI,(void))

void OriginalChartingState_obj::addSectionUI(){
            		HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_0, ::meta::state::charting::OriginalChartingState,_gthis, ::flixel::addons::ui::FlxUINumericStepper,stepperCopy) HXARGC(0)
            		void _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_9a934f134b71b84f_298_addSectionUI)
HXLINE( 298)			 ::meta::state::charting::OriginalChartingState _gthis1 = _gthis;
HXDLIN( 298)			_gthis1->copySection(::Std_obj::_hx_int(stepperCopy->value));
            		}
            		HX_END_LOCAL_FUNC0((void))

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_1, ::meta::state::charting::OriginalChartingState,_gthis) HXARGC(0)
            		void _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_9a934f134b71b84f_305_addSectionUI)
HXLINE( 305)			int _g = 0;
HXDLIN( 305)			int _g1 = ( (::cpp::VirtualArray)( ::Dynamic(_gthis->_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(_gthis->curSection)->__Field(HX_("sectionNotes",1c,c8,a7,fe),::hx::paccDynamic)) )->get_length();
HXDLIN( 305)			while((_g < _g1)){
HXLINE( 305)				_g = (_g + 1);
HXDLIN( 305)				int i = (_g - 1);
HXLINE( 307)				::Array< int > note = ( (::Array< int >)( ::Dynamic( ::Dynamic(_gthis->_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(_gthis->curSection)->__Field(HX_("sectionNotes",1c,c8,a7,fe),::hx::paccDynamic))->__GetItem(i)) );
HXLINE( 308)				note[1] = ::hx::Mod((note->__get(1) + 4),8);
HXLINE( 309)				 ::Dynamic( ::Dynamic(_gthis->_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(_gthis->curSection)->__Field(HX_("sectionNotes",1c,c8,a7,fe),::hx::paccDynamic))->__SetItem(i,note);
HXLINE( 310)				_gthis->updateGrid();
            			}
            		}
            		HX_END_LOCAL_FUNC0((void))

            	HX_GC_STACKFRAME(&_hx_pos_9a934f134b71b84f_282_addSectionUI)
HXLINE( 281)		 ::meta::state::charting::OriginalChartingState _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE( 283)		 ::flixel::addons::ui::FlxUI tab_group_section =  ::flixel::addons::ui::FlxUI_obj::__alloc( HX_CTX ,null(),this->UI_box,null(),null(),null(),null());
HXLINE( 284)		tab_group_section->name = HX_("Section",c5,2d,29,2b);
HXLINE( 286)		this->stepperLength =  ::flixel::addons::ui::FlxUINumericStepper_obj::__alloc( HX_CTX ,10,10,4,0,0,999,0,null(),null(),null(),null(),null());
HXLINE( 287)		this->stepperLength->set_value(( (Float)( ::Dynamic(this->_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(this->curSection)->__Field(HX_("lengthInSteps",3c,ed,41,db),::hx::paccDynamic)) ));
HXLINE( 288)		this->stepperLength->name = HX_("section_length",40,57,01,c1);
HXLINE( 290)		this->stepperSectionBPM =  ::flixel::addons::ui::FlxUINumericStepper_obj::__alloc( HX_CTX ,10,80,1,::meta::data::Conductor_obj::bpm,0,999,0,null(),null(),null(),null(),null());
HXLINE( 291)		this->stepperSectionBPM->set_value(::meta::data::Conductor_obj::bpm);
HXLINE( 292)		this->stepperSectionBPM->name = HX_("section_bpm",45,60,97,44);
HXLINE( 294)		 ::flixel::addons::ui::FlxUINumericStepper stepperCopy =  ::flixel::addons::ui::FlxUINumericStepper_obj::__alloc( HX_CTX ,110,130,1,1,-999,999,0,null(),null(),null(),null(),null());
HXLINE( 296)		 ::flixel::ui::FlxButton copyButton =  ::flixel::ui::FlxButton_obj::__alloc( HX_CTX ,10,130,HX_("Copy last section",46,61,ca,99), ::Dynamic(new _hx_Closure_0(_gthis,stepperCopy)));
HXLINE( 301)		 ::flixel::ui::FlxButton clearSectionButton =  ::flixel::ui::FlxButton_obj::__alloc( HX_CTX ,10,150,HX_("Clear",6d,e1,88,db),this->clearSection_dyn());
HXLINE( 303)		 ::flixel::ui::FlxButton swapSection =  ::flixel::ui::FlxButton_obj::__alloc( HX_CTX ,10,170,HX_("Swap section",78,0b,70,e2), ::Dynamic(new _hx_Closure_1(_gthis)));
HXLINE( 314)		this->check_mustHitSection =  ::flixel::addons::ui::FlxUICheckBox_obj::__alloc( HX_CTX ,10,30,null(),null(),HX_("Must hit section",a1,02,f0,99),100,null(),null());
HXLINE( 315)		this->check_mustHitSection->name = HX_("check_mustHit",13,36,be,48);
HXLINE( 316)		this->check_mustHitSection->set_checked(true);
HXLINE( 319)		this->check_altAnim =  ::flixel::addons::ui::FlxUICheckBox_obj::__alloc( HX_CTX ,10,400,null(),null(),HX_("Alt Animation",0d,81,c1,cd),100,null(),null());
HXLINE( 320)		this->check_altAnim->name = HX_("check_altAnim",23,ee,53,2e);
HXLINE( 322)		this->check_changeBPM =  ::flixel::addons::ui::FlxUICheckBox_obj::__alloc( HX_CTX ,10,60,null(),null(),HX_("Change BPM",2f,3c,7a,fb),100,null(),null());
HXLINE( 323)		this->check_changeBPM->name = HX_("check_changeBPM",d8,2d,43,fc);
HXLINE( 325)		tab_group_section->add(this->stepperLength).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 326)		tab_group_section->add(this->stepperSectionBPM).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 327)		tab_group_section->add(stepperCopy).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 328)		tab_group_section->add(this->check_mustHitSection).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 329)		tab_group_section->add(this->check_altAnim).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 330)		tab_group_section->add(this->check_changeBPM).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 331)		tab_group_section->add(copyButton).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 332)		tab_group_section->add(clearSectionButton).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 333)		tab_group_section->add(swapSection).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 335)		this->UI_box->addGroup(tab_group_section);
            	}


HX_DEFINE_DYNAMIC_FUNC0(OriginalChartingState_obj,addSectionUI,(void))

void OriginalChartingState_obj::addNoteUI(){
            	HX_GC_STACKFRAME(&_hx_pos_9a934f134b71b84f_342_addNoteUI)
HXLINE( 343)		 ::flixel::addons::ui::FlxUI tab_group_note =  ::flixel::addons::ui::FlxUI_obj::__alloc( HX_CTX ,null(),this->UI_box,null(),null(),null(),null());
HXLINE( 344)		tab_group_note->name = HX_("Note",12,44,e3,33);
HXLINE( 346)		this->stepperSusLength =  ::flixel::addons::ui::FlxUINumericStepper_obj::__alloc( HX_CTX ,10,10,(::meta::data::Conductor_obj::stepCrochet / ( (Float)(2) )),0,0,(::meta::data::Conductor_obj::stepCrochet * ( (Float)(16) )),null(),null(),null(),null(),null(),null());
HXLINE( 347)		this->stepperSusLength->set_value(( (Float)(0) ));
HXLINE( 348)		this->stepperSusLength->name = HX_("note_susLength",8a,6b,51,4b);
HXLINE( 350)		 ::flixel::ui::FlxButton applyLength =  ::flixel::ui::FlxButton_obj::__alloc( HX_CTX ,100,10,HX_("Apply",4e,f5,68,b7),null());
HXLINE( 352)		tab_group_note->add(this->stepperSusLength).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 353)		tab_group_note->add(applyLength).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 356)		this->stepperType =  ::flixel::addons::ui::FlxUINumericStepper_obj::__alloc( HX_CTX ,10,30,(::meta::data::Conductor_obj::stepCrochet / ( (Float)(125) )),0,0,((::meta::data::Conductor_obj::stepCrochet / ( (Float)(125) )) + 10),null(),null(),null(),null(),null(),null());
HXLINE( 358)		this->stepperType->set_value(( (Float)(0) ));
HXLINE( 359)		this->stepperType->name = HX_("note_type",67,e9,79,aa);
HXLINE( 361)		tab_group_note->add(this->stepperType).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 363)		this->UI_box->addGroup(tab_group_note);
            	}


HX_DEFINE_DYNAMIC_FUNC0(OriginalChartingState_obj,addNoteUI,(void))

void OriginalChartingState_obj::loadSong(::String daSong){
            		HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_0, ::meta::state::charting::OriginalChartingState,_gthis,::String,daSong) HXARGC(0)
            		void _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_9a934f134b71b84f_391_loadSong)
HXLINE( 392)			::ForeverTools_obj::killMusic(::Array_obj< ::Dynamic>::__new(2)->init(0,_gthis->songMusic)->init(1,_gthis->vocals));
HXLINE( 393)			_gthis->loadSong(daSong);
            		}
            		HX_END_LOCAL_FUNC0((void))

            	HX_GC_STACKFRAME(&_hx_pos_9a934f134b71b84f_370_loadSong)
HXLINE( 369)		 ::meta::state::charting::OriginalChartingState _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE( 371)		if (::hx::IsNotNull( this->songMusic )) {
HXLINE( 372)			 ::flixel::_hx_system::FlxSound _this = this->songMusic;
HXDLIN( 372)			_this->cleanup(_this->autoDestroy,true);
            		}
HXLINE( 374)		if (::hx::IsNotNull( this->vocals )) {
HXLINE( 375)			 ::flixel::_hx_system::FlxSound _this = this->vocals;
HXDLIN( 375)			_this->cleanup(_this->autoDestroy,true);
            		}
HXLINE( 377)		 ::flixel::_hx_system::FlxSound _hx_tmp =  ::flixel::_hx_system::FlxSound_obj::__alloc( HX_CTX );
HXDLIN( 377)		::String instPath = (((HX_("songs/",71,e7,88,2d) + daSong.toLowerCase()) + HX_("/Inst.",f9,6e,13,1c)) + HX_("ogg",4f,94,54,00));
HXDLIN( 377)		if (!(::sys::FileSystem_obj::exists(::Paths_obj::getPath(instPath,HX_("MUSIC",85,08,49,8e),null())))) {
HXLINE( 377)			instPath = (((HX_("songs/",71,e7,88,2d) + ::meta::CoolUtil_obj::swapSpaceDash(daSong.toLowerCase())) + HX_("/Inst.",f9,6e,13,1c)) + HX_("ogg",4f,94,54,00));
            		}
HXDLIN( 377)		this->songMusic = _hx_tmp->loadEmbedded(::openfl::media::Sound_obj::fromFile((HX_("./",41,28,00,00) + ::Paths_obj::getPath(instPath,HX_("MUSIC",85,08,49,8e),null()))),false,true,null());
HXLINE( 378)		if (( (bool)(this->_song->__Field(HX_("needsVoices",be,05,e9,0d),::hx::paccDynamic)) )) {
HXLINE( 379)			 ::flixel::_hx_system::FlxSound _hx_tmp =  ::flixel::_hx_system::FlxSound_obj::__alloc( HX_CTX );
HXDLIN( 379)			::String voicePath = (((HX_("songs/",71,e7,88,2d) + daSong.toLowerCase()) + HX_("/Voices.",1e,f6,e5,90)) + HX_("ogg",4f,94,54,00));
HXDLIN( 379)			if (!(::sys::FileSystem_obj::exists(::Paths_obj::getPath(voicePath,HX_("MUSIC",85,08,49,8e),null())))) {
HXLINE( 379)				voicePath = (((HX_("songs/",71,e7,88,2d) + ::meta::CoolUtil_obj::swapSpaceDash(daSong.toLowerCase())) + HX_("/Voices.",1e,f6,e5,90)) + HX_("ogg",4f,94,54,00));
            			}
HXDLIN( 379)			this->vocals = _hx_tmp->loadEmbedded(::openfl::media::Sound_obj::fromFile((HX_("./",41,28,00,00) + ::Paths_obj::getPath(voicePath,HX_("MUSIC",85,08,49,8e),null()))),false,true,null());
            		}
            		else {
HXLINE( 381)			this->vocals =  ::flixel::_hx_system::FlxSound_obj::__alloc( HX_CTX );
            		}
HXLINE( 382)		::flixel::FlxG_obj::sound->list->add(this->songMusic).StaticCast<  ::flixel::_hx_system::FlxSound >();
HXLINE( 383)		::flixel::FlxG_obj::sound->list->add(this->vocals).StaticCast<  ::flixel::_hx_system::FlxSound >();
HXLINE( 385)		this->songMusic->play(null(),null(),null());
HXLINE( 386)		this->vocals->play(null(),null(),null());
HXLINE( 388)		this->pauseMusic();
HXLINE( 390)		this->songMusic->onComplete =  ::Dynamic(new _hx_Closure_0(_gthis,daSong));
            	}


HX_DEFINE_DYNAMIC_FUNC1(OriginalChartingState_obj,loadSong,(void))

void OriginalChartingState_obj::pauseMusic(){
            	HX_STACKFRAME(&_hx_pos_9a934f134b71b84f_399_pauseMusic)
HXLINE( 400)		this->songMusic->set_time(::Math_obj::max(this->songMusic->_time,( (Float)(0) )));
HXLINE( 401)		this->songMusic->set_time(::Math_obj::min(this->songMusic->_time,this->songMusic->_length));
HXLINE( 403)		this->songMusic->pause();
HXLINE( 404)		this->vocals->pause();
            	}


HX_DEFINE_DYNAMIC_FUNC0(OriginalChartingState_obj,pauseMusic,(void))

void OriginalChartingState_obj::generateUI(){
            	HX_GC_STACKFRAME(&_hx_pos_9a934f134b71b84f_408_generateUI)
HXLINE( 409)		while((this->bullshitUI->members->get_length() > 0)){
HXLINE( 411)			this->bullshitUI->remove(Dynamic( this->bullshitUI->members->__get(0)).StaticCast<  ::flixel::FlxBasic >(),true).StaticCast<  ::flixel::FlxBasic >();
            		}
HXLINE( 415)		 ::flixel::text::FlxText title =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,(this->UI_box->x + 20),(this->UI_box->y + 20),0,null(),null(),null());
HXLINE( 416)		this->bullshitUI->add(title).StaticCast<  ::flixel::FlxBasic >();
            	}


HX_DEFINE_DYNAMIC_FUNC0(OriginalChartingState_obj,generateUI,(void))

void OriginalChartingState_obj::getEvent(::String id, ::Dynamic sender, ::Dynamic data,::cpp::VirtualArray params){
            	HX_STACKFRAME(&_hx_pos_9a934f134b71b84f_428_getEvent)
HXDLIN( 428)		if ((id == HX_("click_check_box",dd,c1,1e,a8))) {
HXLINE( 430)			 ::flixel::addons::ui::FlxUICheckBox check = ( ( ::flixel::addons::ui::FlxUICheckBox)(sender) );
HXLINE( 431)			::String label = check->getLabel()->text;
HXLINE( 432)			::String _hx_switch_0 = label;
            			if (  (_hx_switch_0==HX_("Alt Animation",0d,81,c1,cd)) ){
HXLINE( 443)				 ::Dynamic(this->_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(this->curSection)->__SetField(HX_("altAnim",da,f3,f2,e5),check->checked,::hx::paccDynamic);
HXDLIN( 443)				goto _hx_goto_20;
            			}
            			if (  (_hx_switch_0==HX_("Change BPM",2f,3c,7a,fb)) ){
HXLINE( 440)				 ::Dynamic(this->_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(this->curSection)->__SetField(HX_("changeBPM",4f,4f,f8,1d),check->checked,::hx::paccDynamic);
HXDLIN( 440)				goto _hx_goto_20;
            			}
            			if (  (_hx_switch_0==HX_("Must hit section",a1,02,f0,99)) ){
HXLINE( 435)				 ::Dynamic(this->_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(this->curSection)->__SetField(HX_("mustHitSection",3b,5f,87,62),check->checked,::hx::paccDynamic);
HXLINE( 437)				this->updateHeads();
HXLINE( 434)				goto _hx_goto_20;
            			}
            			_hx_goto_20:;
            		}
            		else {
HXLINE( 446)			bool _hx_tmp;
HXDLIN( 446)			if ((id == HX_("change_numeric_stepper",50,0a,cc,bb))) {
HXLINE( 446)				_hx_tmp = ::Std_obj::isOfType(sender,::hx::ClassOf< ::flixel::addons::ui::FlxUINumericStepper >());
            			}
            			else {
HXLINE( 446)				_hx_tmp = false;
            			}
HXDLIN( 446)			if (_hx_tmp) {
HXLINE( 448)				 ::flixel::addons::ui::FlxUINumericStepper nums = ( ( ::flixel::addons::ui::FlxUINumericStepper)(sender) );
HXLINE( 449)				::String wname = nums->name;
HXLINE( 452)				::String _hx_switch_1 = wname;
            				if (  (_hx_switch_1==HX_("note_susLength",8a,6b,51,4b)) ){
HXLINE( 464)					this->curSelectedNote->set(2,nums->value);
HXLINE( 465)					this->updateGrid();
HXLINE( 463)					goto _hx_goto_21;
            				}
            				if (  (_hx_switch_1==HX_("note_type",67,e9,79,aa)) ){
HXLINE( 467)					this->curNoteType = ::Std_obj::_hx_int(nums->value);
HXDLIN( 467)					goto _hx_goto_21;
            				}
            				if (  (_hx_switch_1==HX_("section_bpm",45,60,97,44)) ){
HXLINE( 470)					 ::Dynamic(this->_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(this->curSection)->__SetField(HX_("bpm",df,be,4a,00),::Std_obj::_hx_int(nums->value),::hx::paccDynamic);
HXLINE( 471)					this->updateGrid();
HXLINE( 469)					goto _hx_goto_21;
            				}
            				if (  (_hx_switch_1==HX_("section_length",40,57,01,c1)) ){
HXLINE( 455)					 ::Dynamic(this->_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(this->curSection)->__SetField(HX_("lengthInSteps",3c,ed,41,db),::Std_obj::_hx_int(nums->value),::hx::paccDynamic);
HXLINE( 456)					this->updateGrid();
HXLINE( 454)					goto _hx_goto_21;
            				}
            				if (  (_hx_switch_1==HX_("song_bpm",35,36,15,42)) ){
HXLINE( 460)					this->tempBpm = ( (Float)(::Std_obj::_hx_int(nums->value)) );
HXLINE( 461)					::meta::data::Conductor_obj::mapBPMChanges(this->_song);
HXLINE( 462)					::meta::data::Conductor_obj::changeBPM(( (Float)(::Std_obj::_hx_int(nums->value)) ),null());
HXLINE( 459)					goto _hx_goto_21;
            				}
            				if (  (_hx_switch_1==HX_("song_speed",5d,10,41,a4)) ){
HXLINE( 458)					this->_song->__SetField(HX_("speed",87,97,69,81),nums->value,::hx::paccDynamic);
HXDLIN( 458)					goto _hx_goto_21;
            				}
            				_hx_goto_21:;
            			}
            		}
            	}


Float OriginalChartingState_obj::sectionStartTime(){
            	HX_STACKFRAME(&_hx_pos_9a934f134b71b84f_489_sectionStartTime)
HXLINE( 490)		Float daBPM = ( (Float)(this->_song->__Field(HX_("bpm",df,be,4a,00),::hx::paccDynamic)) );
HXLINE( 491)		Float daPos = ( (Float)(0) );
HXLINE( 492)		{
HXLINE( 492)			int _g = 0;
HXDLIN( 492)			int _g1 = this->curSection;
HXDLIN( 492)			while((_g < _g1)){
HXLINE( 492)				_g = (_g + 1);
HXDLIN( 492)				int i = (_g - 1);
HXLINE( 494)				if (( (bool)( ::Dynamic(this->_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(i)->__Field(HX_("changeBPM",4f,4f,f8,1d),::hx::paccDynamic)) )) {
HXLINE( 496)					daBPM = ( (Float)( ::Dynamic(this->_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(i)->__Field(HX_("bpm",df,be,4a,00),::hx::paccDynamic)) );
            				}
HXLINE( 498)				daPos = (daPos + (( (Float)(4) ) * (( (Float)(60000) ) / daBPM)));
            			}
            		}
HXLINE( 500)		return daPos;
            	}


HX_DEFINE_DYNAMIC_FUNC0(OriginalChartingState_obj,sectionStartTime,return )

void OriginalChartingState_obj::update(Float elapsed){
            	HX_GC_STACKFRAME(&_hx_pos_9a934f134b71b84f_504_update)
HXLINE( 503)		 ::meta::state::charting::OriginalChartingState _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE( 505)		this->curStep = this->recalculateSteps();
HXLINE( 507)		::meta::data::Conductor_obj::songPosition = this->songMusic->_time;
HXLINE( 508)		this->_song->__SetField(HX_("song",d5,23,58,4c),this->typingShit->text,::hx::paccDynamic);
HXLINE( 510)		 ::flixel::FlxSprite _hx_tmp = this->strumLine;
HXDLIN( 510)		Float _hx_tmp1 = ::meta::data::Conductor_obj::songPosition;
HXDLIN( 510)		Float _hx_tmp2 = (_hx_tmp1 - this->sectionStartTime());
HXDLIN( 510)		_hx_tmp->set_y(this->getYfromStrum(::hx::Mod(_hx_tmp2,(::meta::data::Conductor_obj::stepCrochet * ( (Float)( ::Dynamic(this->_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(this->curSection)->__Field(HX_("lengthInSteps",3c,ed,41,db),::hx::paccDynamic)) )))));
HXLINE( 512)		bool _hx_tmp3;
HXDLIN( 512)		if ((::hx::Mod(this->curBeat,4) == 0)) {
HXLINE( 512)			_hx_tmp3 = (this->curStep >= (16 * (this->curSection + 1)));
            		}
            		else {
HXLINE( 512)			_hx_tmp3 = false;
            		}
HXDLIN( 512)		if (_hx_tmp3) {
HXLINE( 514)			::haxe::Log_obj::trace(this->curStep,::hx::SourceInfo(HX_("source/meta/state/charting/OriginalChartingState.hx",59,ce,18,a6),514,HX_("meta.state.charting.OriginalChartingState",58,5e,b8,8e),HX_("update",09,86,05,87)));
HXLINE( 515)			::haxe::Log_obj::trace((( (int)( ::Dynamic(this->_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(this->curSection)->__Field(HX_("lengthInSteps",3c,ed,41,db),::hx::paccDynamic)) ) * (this->curSection + 1)),::hx::SourceInfo(HX_("source/meta/state/charting/OriginalChartingState.hx",59,ce,18,a6),515,HX_("meta.state.charting.OriginalChartingState",58,5e,b8,8e),HX_("update",09,86,05,87)));
HXLINE( 516)			::haxe::Log_obj::trace(HX_("DUMBSHIT",e6,67,07,01),::hx::SourceInfo(HX_("source/meta/state/charting/OriginalChartingState.hx",59,ce,18,a6),516,HX_("meta.state.charting.OriginalChartingState",58,5e,b8,8e),HX_("update",09,86,05,87)));
HXLINE( 518)			if (::hx::IsNull(  ::Dynamic(this->_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem((this->curSection + 1)) )) {
HXLINE( 520)				this->addSection(null());
            			}
HXLINE( 523)			this->changeSection((this->curSection + 1),false);
            		}
HXLINE( 529)		if ((::flixel::FlxG_obj::mouse->_leftButton->current == 2)) {
HXLINE( 531)			if (::flixel::FlxG_obj::mouse->overlaps(this->curRenderedNotes,null())) {
            				HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::meta::state::charting::OriginalChartingState,_gthis) HXARGC(1)
            				void _hx_run( ::gameObjects::userInterface::notes::Note note){
            					HX_STACKFRAME(&_hx_pos_9a934f134b71b84f_535_update)
HXLINE( 535)					if (::flixel::FlxG_obj::mouse->overlaps(note,null())) {
HXLINE( 537)						 ::flixel::input::keyboard::FlxKeyList _this = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN( 537)						if (_this->keyManager->checkStatus(17,_this->status)) {
HXLINE( 539)							_gthis->selectNote(note);
            						}
            						else {
HXLINE( 543)							::haxe::Log_obj::trace(HX_("tryin to delete note...",0c,35,c3,ba),::hx::SourceInfo(HX_("source/meta/state/charting/OriginalChartingState.hx",59,ce,18,a6),543,HX_("meta.state.charting.OriginalChartingState",58,5e,b8,8e),HX_("update",09,86,05,87)));
HXLINE( 544)							_gthis->deleteNote(note);
            						}
            					}
            				}
            				HX_END_LOCAL_FUNC1((void))

HXLINE( 533)				this->curRenderedNotes->forEach( ::Dynamic(new _hx_Closure_0(_gthis)),null());
            			}
            			else {
HXLINE( 551)				bool _hx_tmp;
HXDLIN( 551)				bool _hx_tmp1;
HXDLIN( 551)				bool _hx_tmp2;
HXDLIN( 551)				if ((::flixel::FlxG_obj::mouse->x > this->gridBG->x)) {
HXLINE( 552)					int _hx_tmp = ::flixel::FlxG_obj::mouse->x;
HXDLIN( 552)					Float _hx_tmp1 = this->gridBG->x;
HXLINE( 551)					_hx_tmp2 = (_hx_tmp < (_hx_tmp1 + this->gridBG->get_width()));
            				}
            				else {
HXLINE( 551)					_hx_tmp2 = false;
            				}
HXDLIN( 551)				if (_hx_tmp2) {
HXLINE( 551)					_hx_tmp1 = (::flixel::FlxG_obj::mouse->y > this->gridBG->y);
            				}
            				else {
HXLINE( 551)					_hx_tmp1 = false;
            				}
HXDLIN( 551)				if (_hx_tmp1) {
HXLINE( 551)					_hx_tmp = (::flixel::FlxG_obj::mouse->y < (this->gridBG->y + (::meta::state::charting::OriginalChartingState_obj::GRID_SIZE * ( (int)( ::Dynamic(this->_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(this->curSection)->__Field(HX_("lengthInSteps",3c,ed,41,db),::hx::paccDynamic)) ))));
            				}
            				else {
HXLINE( 551)					_hx_tmp = false;
            				}
HXDLIN( 551)				if (_hx_tmp) {
HXLINE( 557)					this->addNote();
            				}
            			}
            		}
HXLINE( 562)		bool _hx_tmp4;
HXDLIN( 562)		bool _hx_tmp5;
HXDLIN( 562)		bool _hx_tmp6;
HXDLIN( 562)		if ((::flixel::FlxG_obj::mouse->x > this->gridBG->x)) {
HXLINE( 563)			int _hx_tmp = ::flixel::FlxG_obj::mouse->x;
HXDLIN( 563)			Float _hx_tmp1 = this->gridBG->x;
HXLINE( 562)			_hx_tmp6 = (_hx_tmp < (_hx_tmp1 + this->gridBG->get_width()));
            		}
            		else {
HXLINE( 562)			_hx_tmp6 = false;
            		}
HXDLIN( 562)		if (_hx_tmp6) {
HXLINE( 562)			_hx_tmp5 = (::flixel::FlxG_obj::mouse->y > this->gridBG->y);
            		}
            		else {
HXLINE( 562)			_hx_tmp5 = false;
            		}
HXDLIN( 562)		if (_hx_tmp5) {
HXLINE( 562)			_hx_tmp4 = (::flixel::FlxG_obj::mouse->y < (this->gridBG->y + (::meta::state::charting::OriginalChartingState_obj::GRID_SIZE * ( (int)( ::Dynamic(this->_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(this->curSection)->__Field(HX_("lengthInSteps",3c,ed,41,db),::hx::paccDynamic)) ))));
            		}
            		else {
HXLINE( 562)			_hx_tmp4 = false;
            		}
HXDLIN( 562)		if (_hx_tmp4) {
HXLINE( 567)			this->dummyArrow->set_x(( (Float)((::Math_obj::floor((( (Float)(::flixel::FlxG_obj::mouse->x) ) / ( (Float)(::meta::state::charting::OriginalChartingState_obj::GRID_SIZE) ))) * ::meta::state::charting::OriginalChartingState_obj::GRID_SIZE)) ));
HXLINE( 568)			 ::flixel::input::keyboard::FlxKeyList _this = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN( 568)			if (_this->keyManager->checkStatus(16,_this->status)) {
HXLINE( 569)				this->dummyArrow->set_y(( (Float)(::flixel::FlxG_obj::mouse->y) ));
            			}
            			else {
HXLINE( 571)				this->dummyArrow->set_y(( (Float)((::Math_obj::floor((( (Float)(::flixel::FlxG_obj::mouse->y) ) / ( (Float)(::meta::state::charting::OriginalChartingState_obj::GRID_SIZE) ))) * ::meta::state::charting::OriginalChartingState_obj::GRID_SIZE)) ));
            			}
            		}
HXLINE( 574)		 ::flixel::input::keyboard::FlxKeyList _this = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 574)		if (_this->keyManager->checkStatus(13,_this->status)) {
HXLINE( 576)			::meta::state::charting::OriginalChartingState_obj::lastSection = this->curSection;
HXLINE( 578)			::meta::state::PlayState_obj::SONG = this->_song;
HXLINE( 579)			{
HXLINE( 579)				 ::flixel::_hx_system::FlxSound _this = this->songMusic;
HXDLIN( 579)				_this->cleanup(_this->autoDestroy,true);
            			}
HXLINE( 580)			{
HXLINE( 580)				 ::flixel::_hx_system::FlxSound _this1 = this->vocals;
HXDLIN( 580)				_this1->cleanup(_this1->autoDestroy,true);
            			}
HXLINE( 581)			::Main_obj::switchState(::hx::ObjectPtr<OBJ_>(this), ::meta::state::PlayState_obj::__alloc( HX_CTX ,null(),null()));
            		}
HXLINE( 584)		 ::flixel::input::keyboard::FlxKeyList _this1 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 584)		if (_this1->keyManager->checkStatus(69,_this1->status)) {
HXLINE( 586)			this->changeNoteSustain(::meta::data::Conductor_obj::stepCrochet);
            		}
HXLINE( 588)		 ::flixel::input::keyboard::FlxKeyList _this2 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 588)		if (_this2->keyManager->checkStatus(81,_this2->status)) {
HXLINE( 590)			this->changeNoteSustain(-(::meta::data::Conductor_obj::stepCrochet));
            		}
HXLINE( 593)		 ::flixel::input::keyboard::FlxKeyList _this3 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 593)		if (_this3->keyManager->checkStatus(9,_this3->status)) {
HXLINE( 595)			 ::flixel::input::keyboard::FlxKeyList _this = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN( 595)			if (_this->keyManager->checkStatus(16,_this->status)) {
HXLINE( 597)				{
HXLINE( 597)					 ::flixel::addons::ui::FlxUITabMenu _g = this->UI_box;
HXDLIN( 597)					_g->set_selected_tab((_g->get_selected_tab() - 1));
            				}
HXLINE( 598)				if ((this->UI_box->get_selected_tab() < 0)) {
HXLINE( 599)					this->UI_box->set_selected_tab(2);
            				}
            			}
            			else {
HXLINE( 603)				{
HXLINE( 603)					 ::flixel::addons::ui::FlxUITabMenu _g = this->UI_box;
HXDLIN( 603)					_g->set_selected_tab((_g->get_selected_tab() + 1));
            				}
HXLINE( 604)				if ((this->UI_box->get_selected_tab() >= 3)) {
HXLINE( 605)					this->UI_box->set_selected_tab(0);
            				}
            			}
            		}
HXLINE( 609)		if (!(this->typingShit->hasFocus)) {
HXLINE( 611)			 ::flixel::input::keyboard::FlxKeyList _this = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 611)			if (_this->keyManager->checkStatus(32,_this->status)) {
HXLINE( 613)				if (::hx::IsNotNull( this->songMusic->_channel )) {
HXLINE( 615)					this->songMusic->pause();
HXLINE( 616)					this->vocals->pause();
            				}
            				else {
HXLINE( 620)					this->vocals->play(null(),null(),null());
HXLINE( 621)					this->songMusic->play(null(),null(),null());
            				}
            			}
HXLINE( 625)			 ::flixel::input::keyboard::FlxKeyList _this1 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 625)			if (_this1->keyManager->checkStatus(82,_this1->status)) {
HXLINE( 627)				 ::flixel::input::keyboard::FlxKeyList _this = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN( 627)				if (_this->keyManager->checkStatus(16,_this->status)) {
HXLINE( 628)					this->resetSection(true);
            				}
            				else {
HXLINE( 630)					this->resetSection(null());
            				}
            			}
HXLINE( 633)			if ((::flixel::FlxG_obj::mouse->wheel != 0)) {
HXLINE( 635)				this->songMusic->pause();
HXLINE( 636)				this->vocals->pause();
HXLINE( 638)				{
HXLINE( 638)					 ::flixel::_hx_system::FlxSound _g = this->songMusic;
HXDLIN( 638)					_g->set_time((_g->_time - ((( (Float)(::flixel::FlxG_obj::mouse->wheel) ) * ::meta::data::Conductor_obj::stepCrochet) * ((Float)0.4))));
            				}
HXLINE( 639)				this->vocals->set_time(this->songMusic->_time);
            			}
HXLINE( 642)			 ::flixel::input::keyboard::FlxKeyList _this2 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN( 642)			if (!(_this2->keyManager->checkStatus(16,_this2->status))) {
HXLINE( 644)				bool _hx_tmp;
HXDLIN( 644)				 ::flixel::input::keyboard::FlxKeyList _this = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN( 644)				if (!(_this->keyManager->checkStatus(87,_this->status))) {
HXLINE( 644)					 ::flixel::input::keyboard::FlxKeyList _this = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN( 644)					_hx_tmp = _this->keyManager->checkStatus(83,_this->status);
            				}
            				else {
HXLINE( 644)					_hx_tmp = true;
            				}
HXDLIN( 644)				if (_hx_tmp) {
HXLINE( 646)					this->songMusic->pause();
HXLINE( 647)					this->vocals->pause();
HXLINE( 649)					Float daTime = (( (Float)(700) ) * ::flixel::FlxG_obj::elapsed);
HXLINE( 651)					 ::flixel::input::keyboard::FlxKeyList _this = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN( 651)					if (_this->keyManager->checkStatus(87,_this->status)) {
HXLINE( 653)						 ::flixel::_hx_system::FlxSound _g = this->songMusic;
HXDLIN( 653)						_g->set_time((_g->_time - daTime));
            					}
            					else {
HXLINE( 656)						 ::flixel::_hx_system::FlxSound _g = this->songMusic;
HXDLIN( 656)						_g->set_time((_g->_time + daTime));
            					}
HXLINE( 658)					this->vocals->set_time(this->songMusic->_time);
            				}
            			}
            			else {
HXLINE( 663)				bool _hx_tmp;
HXDLIN( 663)				 ::flixel::input::keyboard::FlxKeyList _this = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 663)				if (!(_this->keyManager->checkStatus(87,_this->status))) {
HXLINE( 663)					 ::flixel::input::keyboard::FlxKeyList _this = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 663)					_hx_tmp = _this->keyManager->checkStatus(83,_this->status);
            				}
            				else {
HXLINE( 663)					_hx_tmp = true;
            				}
HXDLIN( 663)				if (_hx_tmp) {
HXLINE( 665)					this->songMusic->pause();
HXLINE( 666)					this->vocals->pause();
HXLINE( 668)					Float daTime = (::meta::data::Conductor_obj::stepCrochet * ( (Float)(2) ));
HXLINE( 670)					 ::flixel::input::keyboard::FlxKeyList _this = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 670)					if (_this->keyManager->checkStatus(87,_this->status)) {
HXLINE( 672)						 ::flixel::_hx_system::FlxSound _g = this->songMusic;
HXDLIN( 672)						_g->set_time((_g->_time - daTime));
            					}
            					else {
HXLINE( 675)						 ::flixel::_hx_system::FlxSound _g = this->songMusic;
HXDLIN( 675)						_g->set_time((_g->_time + daTime));
            					}
HXLINE( 677)					this->vocals->set_time(this->songMusic->_time);
            				}
            			}
            		}
HXLINE( 682)		this->_song->__SetField(HX_("bpm",df,be,4a,00),this->tempBpm,::hx::paccDynamic);
HXLINE( 689)		int shiftThing = 1;
HXLINE( 690)		 ::flixel::input::keyboard::FlxKeyList _this4 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN( 690)		if (_this4->keyManager->checkStatus(16,_this4->status)) {
HXLINE( 691)			shiftThing = 4;
            		}
HXLINE( 692)		bool _hx_tmp7;
HXDLIN( 692)		 ::flixel::input::keyboard::FlxKeyList _this5 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 692)		if (!(_this5->keyManager->checkStatus(39,_this5->status))) {
HXLINE( 692)			 ::flixel::input::keyboard::FlxKeyList _this = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 692)			_hx_tmp7 = _this->keyManager->checkStatus(68,_this->status);
            		}
            		else {
HXLINE( 692)			_hx_tmp7 = true;
            		}
HXDLIN( 692)		if (_hx_tmp7) {
HXLINE( 693)			this->changeSection((this->curSection + shiftThing),null());
            		}
HXLINE( 694)		bool _hx_tmp8;
HXDLIN( 694)		 ::flixel::input::keyboard::FlxKeyList _this6 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 694)		if (!(_this6->keyManager->checkStatus(37,_this6->status))) {
HXLINE( 694)			 ::flixel::input::keyboard::FlxKeyList _this = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 694)			_hx_tmp8 = _this->keyManager->checkStatus(65,_this->status);
            		}
            		else {
HXLINE( 694)			_hx_tmp8 = true;
            		}
HXDLIN( 694)		if (_hx_tmp8) {
HXLINE( 695)			this->changeSection((this->curSection - shiftThing),null());
            		}
HXLINE( 697)		 ::flixel::text::FlxText _hx_tmp9 = this->bpmTxt;
HXDLIN( 697)		 ::flixel::text::FlxText _hx_tmp10 = this->bpmTxt;
HXDLIN( 697)		::String _hx_tmp11 = (::Std_obj::string(::flixel::math::FlxMath_obj::roundDecimal((::meta::data::Conductor_obj::songPosition / ( (Float)(1000) )),2)) + HX_(" / ",31,71,18,00));
HXDLIN( 697)		::String _hx_tmp12 = ((_hx_tmp11 + ::Std_obj::string(::flixel::math::FlxMath_obj::roundDecimal((this->songMusic->_length / ( (Float)(1000) )),2))) + HX_("\nSection: ",61,ca,0c,ad));
HXDLIN( 697)		_hx_tmp9->set_text(_hx_tmp10->set_text((_hx_tmp12 + this->curSection)));
HXLINE( 702)		this->super::update(elapsed);
            	}


void OriginalChartingState_obj::changeNoteSustain(Float value){
            	HX_STACKFRAME(&_hx_pos_9a934f134b71b84f_706_changeNoteSustain)
HXLINE( 707)		if (::hx::IsNotNull( this->curSelectedNote )) {
HXLINE( 709)			if (::hx::IsNotNull( this->curSelectedNote->__get(2) )) {
HXLINE( 711)				::cpp::VirtualArray _hx_tmp = this->curSelectedNote;
HXDLIN( 711)				int _hx_tmp1 = 2;
HXDLIN( 711)				_hx_tmp->set(_hx_tmp1,(_hx_tmp->__get(_hx_tmp1) + value));
HXLINE( 712)				this->curSelectedNote->set(2,::Math_obj::max(( (Float)(this->curSelectedNote->__get(2)) ),( (Float)(0) )));
            			}
            		}
HXLINE( 716)		this->updateNoteUI();
HXLINE( 717)		this->updateGrid();
            	}


HX_DEFINE_DYNAMIC_FUNC1(OriginalChartingState_obj,changeNoteSustain,(void))

int OriginalChartingState_obj::recalculateSteps(){
            	HX_STACKFRAME(&_hx_pos_9a934f134b71b84f_721_recalculateSteps)
HXLINE( 722)		 ::Dynamic lastChange =  ::Dynamic(::hx::Anon_obj::Create(3)
            			->setFixed(0,HX_("stepTime",79,75,25,a0),0)
            			->setFixed(1,HX_("bpm",df,be,4a,00),( (Float)(0) ))
            			->setFixed(2,HX_("songTime",82,2a,d5,3a),( (Float)(0) )));
HXLINE( 727)		{
HXLINE( 727)			int _g = 0;
HXDLIN( 727)			int _g1 = ::meta::data::Conductor_obj::bpmChangeMap->length;
HXDLIN( 727)			while((_g < _g1)){
HXLINE( 727)				_g = (_g + 1);
HXDLIN( 727)				int i = (_g - 1);
HXLINE( 729)				if (::hx::IsGreater( this->songMusic->_time,::meta::data::Conductor_obj::bpmChangeMap->__get(i)->__Field(HX_("songTime",82,2a,d5,3a),::hx::paccDynamic) )) {
HXLINE( 730)					lastChange = ::meta::data::Conductor_obj::bpmChangeMap->__get(i);
            				}
            			}
            		}
HXLINE( 733)		this->curStep = ( (int)((lastChange->__Field(HX_("stepTime",79,75,25,a0),::hx::paccDynamic) + ::Math_obj::floor(((this->songMusic->_time - ( (Float)(lastChange->__Field(HX_("songTime",82,2a,d5,3a),::hx::paccDynamic)) )) / ::meta::data::Conductor_obj::stepCrochet)))) );
HXLINE( 734)		this->updateBeat();
HXLINE( 736)		return this->curStep;
            	}


HX_DEFINE_DYNAMIC_FUNC0(OriginalChartingState_obj,recalculateSteps,return )

void OriginalChartingState_obj::resetSection(::hx::Null< bool >  __o_songBeginning){
            		bool songBeginning = __o_songBeginning.Default(false);
            	HX_STACKFRAME(&_hx_pos_9a934f134b71b84f_740_resetSection)
HXLINE( 741)		this->updateGrid();
HXLINE( 743)		this->songMusic->pause();
HXLINE( 744)		this->vocals->pause();
HXLINE( 747)		 ::flixel::_hx_system::FlxSound _hx_tmp = this->songMusic;
HXDLIN( 747)		_hx_tmp->set_time(this->sectionStartTime());
HXLINE( 749)		if (songBeginning) {
HXLINE( 751)			this->songMusic->set_time(( (Float)(0) ));
HXLINE( 752)			this->curSection = 0;
            		}
HXLINE( 755)		this->vocals->set_time(this->songMusic->_time);
HXLINE( 756)		this->updateCurStep();
HXLINE( 758)		this->updateGrid();
HXLINE( 759)		this->updateSectionUI();
            	}


HX_DEFINE_DYNAMIC_FUNC1(OriginalChartingState_obj,resetSection,(void))

void OriginalChartingState_obj::changeSection(::hx::Null< int >  __o_sec, ::Dynamic __o_updateMusic){
            		int sec = __o_sec.Default(0);
            		 ::Dynamic updateMusic = __o_updateMusic;
            		if (::hx::IsNull(__o_updateMusic)) updateMusic = true;
            	HX_STACKFRAME(&_hx_pos_9a934f134b71b84f_763_changeSection)
HXLINE( 764)		::haxe::Log_obj::trace((HX_("changing section",72,75,c1,9c) + sec),::hx::SourceInfo(HX_("source/meta/state/charting/OriginalChartingState.hx",59,ce,18,a6),764,HX_("meta.state.charting.OriginalChartingState",58,5e,b8,8e),HX_("changeSection",55,aa,ac,be)));
HXLINE( 766)		if (::hx::IsNotNull(  ::Dynamic(this->_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(sec) )) {
HXLINE( 768)			this->curSection = sec;
HXLINE( 770)			this->updateGrid();
HXLINE( 772)			if (( (bool)(updateMusic) )) {
HXLINE( 774)				this->songMusic->pause();
HXLINE( 775)				this->vocals->pause();
HXLINE( 785)				 ::flixel::_hx_system::FlxSound _hx_tmp = this->songMusic;
HXDLIN( 785)				_hx_tmp->set_time(this->sectionStartTime());
HXLINE( 786)				this->vocals->set_time(this->songMusic->_time);
HXLINE( 787)				this->updateCurStep();
            			}
HXLINE( 790)			this->updateGrid();
HXLINE( 791)			this->updateSectionUI();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(OriginalChartingState_obj,changeSection,(void))

void OriginalChartingState_obj::copySection( ::Dynamic __o_sectionNum){
            		 ::Dynamic sectionNum = __o_sectionNum;
            		if (::hx::IsNull(__o_sectionNum)) sectionNum = 1;
            	HX_STACKFRAME(&_hx_pos_9a934f134b71b84f_796_copySection)
HXLINE( 797)		int a = this->curSection;
HXDLIN( 797)		int b = ( (int)(sectionNum) );
HXDLIN( 797)		int daSec;
HXDLIN( 797)		if ((a > b)) {
HXLINE( 797)			daSec = a;
            		}
            		else {
HXLINE( 797)			daSec = b;
            		}
HXLINE( 799)		{
HXLINE( 799)			int _g = 0;
HXDLIN( 799)			::cpp::VirtualArray _g1 = ( (::cpp::VirtualArray)( ::Dynamic(this->_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem((daSec - ( (int)(sectionNum) )))->__Field(HX_("sectionNotes",1c,c8,a7,fe),::hx::paccDynamic)) );
HXDLIN( 799)			while((_g < _g1->get_length())){
HXLINE( 799)				 ::Dynamic note = _g1->__get(_g);
HXDLIN( 799)				_g = (_g + 1);
HXLINE( 801)				Float strum = (note->__GetItem(0) + (::meta::data::Conductor_obj::stepCrochet * ( (Float)((( (int)( ::Dynamic(this->_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(daSec)->__Field(HX_("lengthInSteps",3c,ed,41,db),::hx::paccDynamic)) ) * ( (int)(sectionNum) ))) )));
HXLINE( 803)				::cpp::VirtualArray copiedNote = ::cpp::VirtualArray_obj::__new(3)->init(0,strum)->init(1,note->__GetItem(1))->init(2,note->__GetItem(2));
HXLINE( 804)				( (::cpp::VirtualArray)( ::Dynamic(this->_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(daSec)->__Field(HX_("sectionNotes",1c,c8,a7,fe),::hx::paccDynamic)) )->push(copiedNote);
            			}
            		}
HXLINE( 807)		this->updateGrid();
            	}


HX_DEFINE_DYNAMIC_FUNC1(OriginalChartingState_obj,copySection,(void))

void OriginalChartingState_obj::updateSectionUI(){
            	HX_STACKFRAME(&_hx_pos_9a934f134b71b84f_811_updateSectionUI)
HXLINE( 812)		 ::Dynamic sec =  ::Dynamic(this->_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(this->curSection);
HXLINE( 814)		this->stepperLength->set_value(( (Float)(sec->__Field(HX_("lengthInSteps",3c,ed,41,db),::hx::paccDynamic)) ));
HXLINE( 815)		this->check_mustHitSection->set_checked(( (bool)(sec->__Field(HX_("mustHitSection",3b,5f,87,62),::hx::paccDynamic)) ));
HXLINE( 816)		this->check_altAnim->set_checked(( (bool)(sec->__Field(HX_("altAnim",da,f3,f2,e5),::hx::paccDynamic)) ));
HXLINE( 817)		this->check_changeBPM->set_checked(( (bool)(sec->__Field(HX_("changeBPM",4f,4f,f8,1d),::hx::paccDynamic)) ));
HXLINE( 818)		this->stepperSectionBPM->set_value(( (Float)(sec->__Field(HX_("bpm",df,be,4a,00),::hx::paccDynamic)) ));
HXLINE( 820)		this->updateHeads();
            	}


HX_DEFINE_DYNAMIC_FUNC0(OriginalChartingState_obj,updateSectionUI,(void))

void OriginalChartingState_obj::updateHeads(){
            	HX_STACKFRAME(&_hx_pos_9a934f134b71b84f_825_updateHeads)
HXDLIN( 825)		if (this->check_mustHitSection->checked) {
HXLINE( 827)			this->leftIcon->animation->play(( (::String)(this->_song->__Field(HX_("player1",b0,09,15,8a),::hx::paccDynamic)) ),null(),null(),null());
HXLINE( 828)			this->rightIcon->animation->play(( (::String)(this->_song->__Field(HX_("player2",b1,09,15,8a),::hx::paccDynamic)) ),null(),null(),null());
            		}
            		else {
HXLINE( 832)			this->leftIcon->animation->play(( (::String)(this->_song->__Field(HX_("player2",b1,09,15,8a),::hx::paccDynamic)) ),null(),null(),null());
HXLINE( 833)			this->rightIcon->animation->play(( (::String)(this->_song->__Field(HX_("player1",b0,09,15,8a),::hx::paccDynamic)) ),null(),null(),null());
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(OriginalChartingState_obj,updateHeads,(void))

void OriginalChartingState_obj::updateNoteUI(){
            	HX_STACKFRAME(&_hx_pos_9a934f134b71b84f_839_updateNoteUI)
HXDLIN( 839)		if (::hx::IsNotNull( this->curSelectedNote )) {
HXLINE( 840)			this->stepperSusLength->set_value(( (Float)(this->curSelectedNote->__get(2)) ));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(OriginalChartingState_obj,updateNoteUI,(void))

void OriginalChartingState_obj::updateGrid(){
            	HX_GC_STACKFRAME(&_hx_pos_9a934f134b71b84f_844_updateGrid)
HXLINE( 845)		while((this->curRenderedNotes->members->get_length() > 0)){
HXLINE( 847)			this->curRenderedNotes->remove(Dynamic( this->curRenderedNotes->members->__get(0)).StaticCast<  ::gameObjects::userInterface::notes::Note >(),true).StaticCast<  ::gameObjects::userInterface::notes::Note >();
            		}
HXLINE( 850)		while((this->curRenderedSustains->members->get_length() > 0)){
HXLINE( 852)			this->curRenderedSustains->remove(Dynamic( this->curRenderedSustains->members->__get(0)).StaticCast<  ::flixel::FlxSprite >(),true).StaticCast<  ::flixel::FlxSprite >();
            		}
HXLINE( 855)		::cpp::VirtualArray sectionInfo = ( (::cpp::VirtualArray)( ::Dynamic(this->_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(this->curSection)->__Field(HX_("sectionNotes",1c,c8,a7,fe),::hx::paccDynamic)) );
HXLINE( 857)		bool _hx_tmp;
HXDLIN( 857)		if (( (bool)( ::Dynamic(this->_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(this->curSection)->__Field(HX_("changeBPM",4f,4f,f8,1d),::hx::paccDynamic)) )) {
HXLINE( 857)			_hx_tmp = ::hx::IsGreater(  ::Dynamic(this->_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(this->curSection)->__Field(HX_("bpm",df,be,4a,00),::hx::paccDynamic),0 );
            		}
            		else {
HXLINE( 857)			_hx_tmp = false;
            		}
HXDLIN( 857)		if (_hx_tmp) {
HXLINE( 859)			::meta::data::Conductor_obj::changeBPM(( (Float)( ::Dynamic(this->_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(this->curSection)->__Field(HX_("bpm",df,be,4a,00),::hx::paccDynamic)) ),null());
            		}
            		else {
HXLINE( 865)			Float daBPM = ( (Float)(this->_song->__Field(HX_("bpm",df,be,4a,00),::hx::paccDynamic)) );
HXLINE( 866)			{
HXLINE( 866)				int _g = 0;
HXDLIN( 866)				int _g1 = this->curSection;
HXDLIN( 866)				while((_g < _g1)){
HXLINE( 866)					_g = (_g + 1);
HXDLIN( 866)					int i = (_g - 1);
HXLINE( 867)					if (( (bool)( ::Dynamic(this->_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(i)->__Field(HX_("changeBPM",4f,4f,f8,1d),::hx::paccDynamic)) )) {
HXLINE( 868)						daBPM = ( (Float)( ::Dynamic(this->_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(i)->__Field(HX_("bpm",df,be,4a,00),::hx::paccDynamic)) );
            					}
            				}
            			}
HXLINE( 869)			::meta::data::Conductor_obj::changeBPM(daBPM,null());
            		}
HXLINE( 886)		{
HXLINE( 886)			int _g = 0;
HXDLIN( 886)			while((_g < sectionInfo->get_length())){
HXLINE( 886)				 ::Dynamic i = sectionInfo->__get(_g);
HXDLIN( 886)				_g = (_g + 1);
HXLINE( 888)				int daNoteInfo = ( (int)(i->__GetItem(1)) );
HXLINE( 889)				Float daStrumTime = ( (Float)(i->__GetItem(0)) );
HXLINE( 890)				Float daSus = ( (Float)(i->__GetItem(2)) );
HXLINE( 891)				int daNoteType = 0;
HXLINE( 893)				if (::hx::IsGreater( i->__Field(HX_("length",e6,94,07,9f),::hx::paccDynamic),2 )) {
HXLINE( 894)					daNoteType = ( (int)(i->__GetItem(3)) );
            				}
HXLINE( 896)				 ::gameObjects::userInterface::notes::Note note = ::ForeverAssets_obj::generateArrow(::meta::state::PlayState_obj::assetModifier,daStrumTime,::hx::Mod(daNoteInfo,4),daNoteType,( (Float)(0) ),null(),null());
HXLINE( 897)				note->sustainLength = daSus;
HXLINE( 898)				note->noteType = ( (Float)(daNoteType) );
HXLINE( 899)				note->setGraphicSize(::meta::state::charting::OriginalChartingState_obj::GRID_SIZE,::meta::state::charting::OriginalChartingState_obj::GRID_SIZE);
HXLINE( 900)				note->updateHitbox();
HXLINE( 901)				note->set_x(( (Float)(::Math_obj::floor(( (Float)((daNoteInfo * ::meta::state::charting::OriginalChartingState_obj::GRID_SIZE)) ))) ));
HXLINE( 902)				Float _hx_tmp = (daStrumTime - this->sectionStartTime());
HXDLIN( 902)				note->set_y(( (Float)(::Math_obj::floor(this->getYfromStrum(::hx::Mod(_hx_tmp,(::meta::data::Conductor_obj::stepCrochet * ( (Float)( ::Dynamic(this->_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(this->curSection)->__Field(HX_("lengthInSteps",3c,ed,41,db),::hx::paccDynamic)) )))))) ));
HXLINE( 904)				this->curRenderedNotes->add(note).StaticCast<  ::gameObjects::userInterface::notes::Note >();
HXLINE( 906)				if ((daSus > 0)) {
HXLINE( 908)					 ::flixel::FlxSprite sustainVis =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,(note->x + (( (Float)(::meta::state::charting::OriginalChartingState_obj::GRID_SIZE) ) / ( (Float)(2) ))),(note->y + ::meta::state::charting::OriginalChartingState_obj::GRID_SIZE),null());
HXLINE( 909)					Float sustainVis1 = (::meta::data::Conductor_obj::stepCrochet * ( (Float)(16) ));
HXLINE( 908)					 ::flixel::FlxSprite sustainVis2 = sustainVis->makeGraphic(8,::Math_obj::floor(::flixel::math::FlxMath_obj::remapToRange(daSus,( (Float)(0) ),sustainVis1,( (Float)(0) ),this->gridBG->get_height())),null(),null(),null());
HXLINE( 910)					this->curRenderedSustains->add(sustainVis2).StaticCast<  ::flixel::FlxSprite >();
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(OriginalChartingState_obj,updateGrid,(void))

void OriginalChartingState_obj::addSection(::hx::Null< int >  __o_lengthInSteps){
            		int lengthInSteps = __o_lengthInSteps.Default(16);
            	HX_STACKFRAME(&_hx_pos_9a934f134b71b84f_916_addSection)
HXLINE( 917)		 ::Dynamic sec =  ::Dynamic(::hx::Anon_obj::Create(7)
            			->setFixed(0,HX_("lengthInSteps",3c,ed,41,db),lengthInSteps)
            			->setFixed(1,HX_("altAnim",da,f3,f2,e5),false)
            			->setFixed(2,HX_("typeOfSection",74,f3,25,fb),0)
            			->setFixed(3,HX_("sectionNotes",1c,c8,a7,fe),::cpp::VirtualArray_obj::__new(0))
            			->setFixed(4,HX_("bpm",df,be,4a,00), ::Dynamic(this->_song->__Field(HX_("bpm",df,be,4a,00),::hx::paccDynamic)))
            			->setFixed(5,HX_("changeBPM",4f,4f,f8,1d),false)
            			->setFixed(6,HX_("mustHitSection",3b,5f,87,62),true));
HXLINE( 927)		( (::Array< ::Dynamic>)(this->_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic)) )->push(sec);
            	}


HX_DEFINE_DYNAMIC_FUNC1(OriginalChartingState_obj,addSection,(void))

void OriginalChartingState_obj::selectNote( ::gameObjects::userInterface::notes::Note note){
            	HX_STACKFRAME(&_hx_pos_9a934f134b71b84f_931_selectNote)
HXLINE( 932)		int swagNum = 0;
HXLINE( 934)		{
HXLINE( 934)			int _g = 0;
HXDLIN( 934)			::cpp::VirtualArray _g1 = ( (::cpp::VirtualArray)( ::Dynamic(this->_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(this->curSection)->__Field(HX_("sectionNotes",1c,c8,a7,fe),::hx::paccDynamic)) );
HXDLIN( 934)			while((_g < _g1->get_length())){
HXLINE( 934)				 ::Dynamic i = _g1->__get(_g);
HXDLIN( 934)				_g = (_g + 1);
HXLINE( 936)				bool _hx_tmp;
HXDLIN( 936)				if (::hx::IsEq( i->__Field(HX_("strumTime",f6,2d,21,f4),::hx::paccDynamic),note->strumTime )) {
HXLINE( 936)					_hx_tmp = (::hx::Mod(i->__Field(HX_("noteData",3c,7b,96,51),::hx::paccDynamic),4) == note->noteData);
            				}
            				else {
HXLINE( 936)					_hx_tmp = false;
            				}
HXDLIN( 936)				if (_hx_tmp) {
HXLINE( 938)					this->curSelectedNote = ( (::cpp::VirtualArray)( ::Dynamic( ::Dynamic(this->_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(this->curSection)->__Field(HX_("sectionNotes",1c,c8,a7,fe),::hx::paccDynamic))->__GetItem(swagNum)) );
            				}
HXLINE( 941)				swagNum = (swagNum + 1);
            			}
            		}
HXLINE( 944)		this->updateGrid();
HXLINE( 945)		this->updateNoteUI();
            	}


HX_DEFINE_DYNAMIC_FUNC1(OriginalChartingState_obj,selectNote,(void))

void OriginalChartingState_obj::deleteNote( ::gameObjects::userInterface::notes::Note note){
            	HX_STACKFRAME(&_hx_pos_9a934f134b71b84f_949_deleteNote)
HXLINE( 950)		{
HXLINE( 950)			int _g = 0;
HXDLIN( 950)			::cpp::VirtualArray _g1 = ( (::cpp::VirtualArray)( ::Dynamic(this->_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(this->curSection)->__Field(HX_("sectionNotes",1c,c8,a7,fe),::hx::paccDynamic)) );
HXDLIN( 950)			while((_g < _g1->get_length())){
HXLINE( 950)				 ::Dynamic i = _g1->__get(_g);
HXDLIN( 950)				_g = (_g + 1);
HXLINE( 952)				bool _hx_tmp;
HXDLIN( 952)				if (::hx::IsEq( i->__GetItem(0),note->strumTime )) {
HXLINE( 952)					_hx_tmp = (::hx::Mod(i->__GetItem(1),4) == note->noteData);
            				}
            				else {
HXLINE( 952)					_hx_tmp = false;
            				}
HXDLIN( 952)				if (_hx_tmp) {
HXLINE( 955)					( (::cpp::VirtualArray)( ::Dynamic(this->_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(this->curSection)->__Field(HX_("sectionNotes",1c,c8,a7,fe),::hx::paccDynamic)) )->remove(i);
            				}
            			}
            		}
HXLINE( 959)		this->updateGrid();
            	}


HX_DEFINE_DYNAMIC_FUNC1(OriginalChartingState_obj,deleteNote,(void))

void OriginalChartingState_obj::clearSection(){
            	HX_STACKFRAME(&_hx_pos_9a934f134b71b84f_963_clearSection)
HXLINE( 964)		 ::Dynamic(this->_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(this->curSection)->__SetField(HX_("sectionNotes",1c,c8,a7,fe),::cpp::VirtualArray_obj::__new(0),::hx::paccDynamic);
HXLINE( 966)		this->updateGrid();
            	}


HX_DEFINE_DYNAMIC_FUNC0(OriginalChartingState_obj,clearSection,(void))

void OriginalChartingState_obj::clearSong(){
            	HX_STACKFRAME(&_hx_pos_9a934f134b71b84f_970_clearSong)
HXLINE( 971)		{
HXLINE( 971)			int _g = 0;
HXDLIN( 971)			int _g1 = ( (::Array< ::Dynamic>)(this->_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic)) )->length;
HXDLIN( 971)			while((_g < _g1)){
HXLINE( 971)				_g = (_g + 1);
HXDLIN( 971)				int daSection = (_g - 1);
HXLINE( 973)				 ::Dynamic(this->_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(daSection)->__SetField(HX_("sectionNotes",1c,c8,a7,fe),::cpp::VirtualArray_obj::__new(0),::hx::paccDynamic);
            			}
            		}
HXLINE( 976)		this->updateGrid();
            	}


HX_DEFINE_DYNAMIC_FUNC0(OriginalChartingState_obj,clearSong,(void))

void OriginalChartingState_obj::addNote(){
            	HX_STACKFRAME(&_hx_pos_9a934f134b71b84f_980_addNote)
HXLINE( 981)		Float noteStrum = this->getStrumTime(this->dummyArrow->y);
HXDLIN( 981)		Float noteStrum1 = (noteStrum + this->sectionStartTime());
HXLINE( 982)		int noteData = ::Math_obj::floor((( (Float)(::flixel::FlxG_obj::mouse->x) ) / ( (Float)(::meta::state::charting::OriginalChartingState_obj::GRID_SIZE) )));
HXLINE( 983)		int noteType = this->curNoteType;
HXLINE( 984)		int noteSus = 0;
HXLINE( 986)		( (::cpp::VirtualArray)( ::Dynamic(this->_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(this->curSection)->__Field(HX_("sectionNotes",1c,c8,a7,fe),::hx::paccDynamic)) )->push(::cpp::VirtualArray_obj::__new(4)->init(0,noteStrum1)->init(1,noteData)->init(2,noteSus)->init(3,noteType));
HXLINE( 988)		this->curSelectedNote = ( (::cpp::VirtualArray)( ::Dynamic( ::Dynamic(this->_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(this->curSection)->__Field(HX_("sectionNotes",1c,c8,a7,fe),::hx::paccDynamic))->__GetItem((( (::cpp::VirtualArray)( ::Dynamic(this->_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(this->curSection)->__Field(HX_("sectionNotes",1c,c8,a7,fe),::hx::paccDynamic)) )->get_length() - 1))) );
HXLINE( 990)		 ::flixel::input::keyboard::FlxKeyList _this = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN( 990)		if (_this->keyManager->checkStatus(17,_this->status)) {
HXLINE( 992)			( (::cpp::VirtualArray)( ::Dynamic(this->_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(this->curSection)->__Field(HX_("sectionNotes",1c,c8,a7,fe),::hx::paccDynamic)) )->push(::cpp::VirtualArray_obj::__new(4)->init(0,noteStrum1)->init(1,::hx::Mod((noteData + 4),8))->init(2,noteSus)->init(3,noteType));
            		}
HXLINE( 995)		::haxe::Log_obj::trace(noteStrum1,::hx::SourceInfo(HX_("source/meta/state/charting/OriginalChartingState.hx",59,ce,18,a6),995,HX_("meta.state.charting.OriginalChartingState",58,5e,b8,8e),HX_("addNote",b3,5a,47,85)));
HXLINE( 996)		::haxe::Log_obj::trace(this->curSection,::hx::SourceInfo(HX_("source/meta/state/charting/OriginalChartingState.hx",59,ce,18,a6),996,HX_("meta.state.charting.OriginalChartingState",58,5e,b8,8e),HX_("addNote",b3,5a,47,85)));
HXLINE( 998)		this->updateGrid();
HXLINE( 999)		this->updateNoteUI();
HXLINE(1001)		this->autosaveSong();
            	}


HX_DEFINE_DYNAMIC_FUNC0(OriginalChartingState_obj,addNote,(void))

Float OriginalChartingState_obj::getStrumTime(Float yPos){
            	HX_STACKFRAME(&_hx_pos_9a934f134b71b84f_1006_getStrumTime)
HXDLIN(1006)		Float _hx_tmp = this->gridBG->y;
HXDLIN(1006)		Float _hx_tmp1 = this->gridBG->y;
HXDLIN(1006)		Float _hx_tmp2 = (_hx_tmp1 + this->gridBG->get_height());
HXDLIN(1006)		return ::flixel::math::FlxMath_obj::remapToRange(yPos,_hx_tmp,_hx_tmp2,( (Float)(0) ),(( (Float)(16) ) * ::meta::data::Conductor_obj::stepCrochet));
            	}


HX_DEFINE_DYNAMIC_FUNC1(OriginalChartingState_obj,getStrumTime,return )

Float OriginalChartingState_obj::getYfromStrum(Float strumTime){
            	HX_STACKFRAME(&_hx_pos_9a934f134b71b84f_1011_getYfromStrum)
HXDLIN(1011)		Float _hx_tmp = (( (Float)(16) ) * ::meta::data::Conductor_obj::stepCrochet);
HXDLIN(1011)		Float _hx_tmp1 = this->gridBG->y;
HXDLIN(1011)		Float _hx_tmp2 = this->gridBG->y;
HXDLIN(1011)		return ::flixel::math::FlxMath_obj::remapToRange(strumTime,( (Float)(0) ),_hx_tmp,_hx_tmp1,(_hx_tmp2 + this->gridBG->get_height()));
            	}


HX_DEFINE_DYNAMIC_FUNC1(OriginalChartingState_obj,getYfromStrum,return )

void OriginalChartingState_obj::loadLevel(){
            	HX_STACKFRAME(&_hx_pos_9a934f134b71b84f_1041_loadLevel)
HXDLIN(1041)		::haxe::Log_obj::trace( ::Dynamic(this->_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic)),::hx::SourceInfo(HX_("source/meta/state/charting/OriginalChartingState.hx",59,ce,18,a6),1041,HX_("meta.state.charting.OriginalChartingState",58,5e,b8,8e),HX_("loadLevel",7e,61,9a,8d)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(OriginalChartingState_obj,loadLevel,(void))

::cpp::VirtualArray OriginalChartingState_obj::getNotes(){
            	HX_STACKFRAME(&_hx_pos_9a934f134b71b84f_1045_getNotes)
HXLINE(1046)		::cpp::VirtualArray noteData = ::cpp::VirtualArray_obj::__new(0);
HXLINE(1048)		{
HXLINE(1048)			int _g = 0;
HXDLIN(1048)			::Array< ::Dynamic> _g1 = ( (::Array< ::Dynamic>)(this->_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic)) );
HXDLIN(1048)			while((_g < _g1->length)){
HXLINE(1048)				 ::Dynamic i = _g1->__get(_g);
HXDLIN(1048)				_g = (_g + 1);
HXLINE(1050)				noteData->push( ::Dynamic(i->__Field(HX_("sectionNotes",1c,c8,a7,fe),::hx::paccDynamic)));
            			}
            		}
HXLINE(1053)		return noteData;
            	}


HX_DEFINE_DYNAMIC_FUNC0(OriginalChartingState_obj,getNotes,return )

void OriginalChartingState_obj::loadJson(::String song){
            	HX_STACKFRAME(&_hx_pos_9a934f134b71b84f_1057_loadJson)
HXLINE(1058)		::String _hx_tmp = song.toLowerCase();
HXDLIN(1058)		::meta::state::PlayState_obj::SONG = ::meta::data::Song_obj::loadFromJson(_hx_tmp,song.toLowerCase());
HXLINE(1059)		{
HXLINE(1059)			 ::flixel::FlxState nextState = ( ( ::flixel::FlxState)(::Type_obj::createInstance(::Type_obj::getClass(::flixel::FlxG_obj::game->_state),::cpp::VirtualArray_obj::__new(0))) );
HXDLIN(1059)			if (::flixel::FlxG_obj::game->_state->switchTo(nextState)) {
HXLINE(1059)				::flixel::FlxG_obj::game->_requestedState = nextState;
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(OriginalChartingState_obj,loadJson,(void))

void OriginalChartingState_obj::loadAutosave(){
            	HX_STACKFRAME(&_hx_pos_9a934f134b71b84f_1063_loadAutosave)
HXLINE(1064)		::meta::state::PlayState_obj::SONG = ::meta::data::Song_obj::parseJSONshit(( (::String)(::flixel::FlxG_obj::save->data->__Field(HX_("autosave",2c,4e,9a,44),::hx::paccDynamic)) ));
HXLINE(1065)		{
HXLINE(1065)			 ::flixel::FlxState nextState = ( ( ::flixel::FlxState)(::Type_obj::createInstance(::Type_obj::getClass(::flixel::FlxG_obj::game->_state),::cpp::VirtualArray_obj::__new(0))) );
HXDLIN(1065)			if (::flixel::FlxG_obj::game->_state->switchTo(nextState)) {
HXLINE(1065)				::flixel::FlxG_obj::game->_requestedState = nextState;
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(OriginalChartingState_obj,loadAutosave,(void))

void OriginalChartingState_obj::autosaveSong(){
            	HX_STACKFRAME(&_hx_pos_9a934f134b71b84f_1069_autosaveSong)
HXLINE(1070)		 ::Dynamic replacer = null();
HXDLIN(1070)		::String space = null();
HXDLIN(1070)		::String _hx_tmp = ::haxe::format::JsonPrinter_obj::print( ::Dynamic(::hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("song",d5,23,58,4c),this->_song)),replacer,space);
HXDLIN(1070)		::flixel::FlxG_obj::save->data->__SetField(HX_("autosave",2c,4e,9a,44),_hx_tmp,::hx::paccDynamic);
HXLINE(1073)		::flixel::FlxG_obj::save->flush(null(),null());
            	}


HX_DEFINE_DYNAMIC_FUNC0(OriginalChartingState_obj,autosaveSong,(void))

void OriginalChartingState_obj::saveLevel(){
            	HX_GC_STACKFRAME(&_hx_pos_9a934f134b71b84f_1077_saveLevel)
HXLINE(1078)		 ::Dynamic json =  ::Dynamic(::hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("song",d5,23,58,4c),this->_song));
HXLINE(1082)		 ::Dynamic replacer = null();
HXDLIN(1082)		::String space = null();
HXDLIN(1082)		::String data = ::haxe::format::JsonPrinter_obj::print(json,replacer,space);
HXLINE(1084)		bool _hx_tmp;
HXDLIN(1084)		if (::hx::IsNotNull( data )) {
HXLINE(1084)			_hx_tmp = (data.length > 0);
            		}
            		else {
HXLINE(1084)			_hx_tmp = false;
            		}
HXDLIN(1084)		if (_hx_tmp) {
HXLINE(1086)			this->_file =  ::openfl::net::FileReference_obj::__alloc( HX_CTX );
HXLINE(1087)			this->_file->addEventListener(HX_("complete",b9,00,c8,7f),this->onSaveComplete_dyn(),null(),null(),null());
HXLINE(1088)			this->_file->addEventListener(HX_("cancel",7a,ed,33,b8),this->onSaveCancel_dyn(),null(),null(),null());
HXLINE(1089)			this->_file->addEventListener(HX_("ioError",02,fe,41,76),this->onSaveError_dyn(),null(),null(),null());
HXLINE(1090)			 ::openfl::net::FileReference _hx_tmp = this->_file;
HXDLIN(1090)			::String _hx_tmp1 = ::StringTools_obj::trim(data);
HXDLIN(1090)			_hx_tmp->save(_hx_tmp1,(( (::String)(this->_song->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic)) ).toLowerCase() + HX_(".json",56,f1,d6,c2)));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(OriginalChartingState_obj,saveLevel,(void))

void OriginalChartingState_obj::onSaveComplete( ::openfl::events::Event _){
            	HX_STACKFRAME(&_hx_pos_9a934f134b71b84f_1095_onSaveComplete)
HXLINE(1096)		this->_file->removeEventListener(HX_("complete",b9,00,c8,7f),this->onSaveComplete_dyn(),null());
HXLINE(1097)		this->_file->removeEventListener(HX_("cancel",7a,ed,33,b8),this->onSaveCancel_dyn(),null());
HXLINE(1098)		this->_file->removeEventListener(HX_("ioError",02,fe,41,76),this->onSaveError_dyn(),null());
HXLINE(1099)		this->_file = null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(OriginalChartingState_obj,onSaveComplete,(void))

void OriginalChartingState_obj::onSaveCancel( ::openfl::events::Event _){
            	HX_STACKFRAME(&_hx_pos_9a934f134b71b84f_1107_onSaveCancel)
HXLINE(1108)		this->_file->removeEventListener(HX_("complete",b9,00,c8,7f),this->onSaveComplete_dyn(),null());
HXLINE(1109)		this->_file->removeEventListener(HX_("cancel",7a,ed,33,b8),this->onSaveCancel_dyn(),null());
HXLINE(1110)		this->_file->removeEventListener(HX_("ioError",02,fe,41,76),this->onSaveError_dyn(),null());
HXLINE(1111)		this->_file = null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(OriginalChartingState_obj,onSaveCancel,(void))

void OriginalChartingState_obj::onSaveError( ::openfl::events::IOErrorEvent _){
            	HX_STACKFRAME(&_hx_pos_9a934f134b71b84f_1118_onSaveError)
HXLINE(1119)		this->_file->removeEventListener(HX_("complete",b9,00,c8,7f),this->onSaveComplete_dyn(),null());
HXLINE(1120)		this->_file->removeEventListener(HX_("cancel",7a,ed,33,b8),this->onSaveCancel_dyn(),null());
HXLINE(1121)		this->_file->removeEventListener(HX_("ioError",02,fe,41,76),this->onSaveError_dyn(),null());
HXLINE(1122)		this->_file = null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(OriginalChartingState_obj,onSaveError,(void))

int OriginalChartingState_obj::lastSection;

int OriginalChartingState_obj::GRID_SIZE;


::hx::ObjectPtr< OriginalChartingState_obj > OriginalChartingState_obj::__new( ::flixel::addons::transition::TransitionData TransIn, ::flixel::addons::transition::TransitionData TransOut) {
	::hx::ObjectPtr< OriginalChartingState_obj > __this = new OriginalChartingState_obj();
	__this->__construct(TransIn,TransOut);
	return __this;
}

::hx::ObjectPtr< OriginalChartingState_obj > OriginalChartingState_obj::__alloc(::hx::Ctx *_hx_ctx, ::flixel::addons::transition::TransitionData TransIn, ::flixel::addons::transition::TransitionData TransOut) {
	OriginalChartingState_obj *__this = (OriginalChartingState_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(OriginalChartingState_obj), true, "meta.state.charting.OriginalChartingState"));
	*(void **)__this = OriginalChartingState_obj::_hx_vtable;
	__this->__construct(TransIn,TransOut);
	return __this;
}

OriginalChartingState_obj::OriginalChartingState_obj()
{
}

void OriginalChartingState_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(OriginalChartingState);
	HX_MARK_MEMBER_NAME(_file,"_file");
	HX_MARK_MEMBER_NAME(UI_box,"UI_box");
	HX_MARK_MEMBER_NAME(curSection,"curSection");
	HX_MARK_MEMBER_NAME(curNoteType,"curNoteType");
	HX_MARK_MEMBER_NAME(bpmTxt,"bpmTxt");
	HX_MARK_MEMBER_NAME(strumLine,"strumLine");
	HX_MARK_MEMBER_NAME(curSong,"curSong");
	HX_MARK_MEMBER_NAME(amountSteps,"amountSteps");
	HX_MARK_MEMBER_NAME(bullshitUI,"bullshitUI");
	HX_MARK_MEMBER_NAME(highlight,"highlight");
	HX_MARK_MEMBER_NAME(dummyArrow,"dummyArrow");
	HX_MARK_MEMBER_NAME(curRenderedNotes,"curRenderedNotes");
	HX_MARK_MEMBER_NAME(curRenderedSustains,"curRenderedSustains");
	HX_MARK_MEMBER_NAME(gridBG,"gridBG");
	HX_MARK_MEMBER_NAME(_song,"_song");
	HX_MARK_MEMBER_NAME(typingShit,"typingShit");
	HX_MARK_MEMBER_NAME(curSelectedNote,"curSelectedNote");
	HX_MARK_MEMBER_NAME(tempBpm,"tempBpm");
	HX_MARK_MEMBER_NAME(vocals,"vocals");
	HX_MARK_MEMBER_NAME(leftIcon,"leftIcon");
	HX_MARK_MEMBER_NAME(rightIcon,"rightIcon");
	HX_MARK_MEMBER_NAME(stepperLength,"stepperLength");
	HX_MARK_MEMBER_NAME(check_mustHitSection,"check_mustHitSection");
	HX_MARK_MEMBER_NAME(check_changeBPM,"check_changeBPM");
	HX_MARK_MEMBER_NAME(stepperSectionBPM,"stepperSectionBPM");
	HX_MARK_MEMBER_NAME(check_altAnim,"check_altAnim");
	HX_MARK_MEMBER_NAME(stepperSusLength,"stepperSusLength");
	HX_MARK_MEMBER_NAME(stepperType,"stepperType");
	HX_MARK_MEMBER_NAME(songMusic,"songMusic");
	HX_MARK_MEMBER_NAME(updatedSection,"updatedSection");
	HX_MARK_MEMBER_NAME(daSpacing,"daSpacing");
	 ::flixel::addons::ui::FlxUIState_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void OriginalChartingState_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(_file,"_file");
	HX_VISIT_MEMBER_NAME(UI_box,"UI_box");
	HX_VISIT_MEMBER_NAME(curSection,"curSection");
	HX_VISIT_MEMBER_NAME(curNoteType,"curNoteType");
	HX_VISIT_MEMBER_NAME(bpmTxt,"bpmTxt");
	HX_VISIT_MEMBER_NAME(strumLine,"strumLine");
	HX_VISIT_MEMBER_NAME(curSong,"curSong");
	HX_VISIT_MEMBER_NAME(amountSteps,"amountSteps");
	HX_VISIT_MEMBER_NAME(bullshitUI,"bullshitUI");
	HX_VISIT_MEMBER_NAME(highlight,"highlight");
	HX_VISIT_MEMBER_NAME(dummyArrow,"dummyArrow");
	HX_VISIT_MEMBER_NAME(curRenderedNotes,"curRenderedNotes");
	HX_VISIT_MEMBER_NAME(curRenderedSustains,"curRenderedSustains");
	HX_VISIT_MEMBER_NAME(gridBG,"gridBG");
	HX_VISIT_MEMBER_NAME(_song,"_song");
	HX_VISIT_MEMBER_NAME(typingShit,"typingShit");
	HX_VISIT_MEMBER_NAME(curSelectedNote,"curSelectedNote");
	HX_VISIT_MEMBER_NAME(tempBpm,"tempBpm");
	HX_VISIT_MEMBER_NAME(vocals,"vocals");
	HX_VISIT_MEMBER_NAME(leftIcon,"leftIcon");
	HX_VISIT_MEMBER_NAME(rightIcon,"rightIcon");
	HX_VISIT_MEMBER_NAME(stepperLength,"stepperLength");
	HX_VISIT_MEMBER_NAME(check_mustHitSection,"check_mustHitSection");
	HX_VISIT_MEMBER_NAME(check_changeBPM,"check_changeBPM");
	HX_VISIT_MEMBER_NAME(stepperSectionBPM,"stepperSectionBPM");
	HX_VISIT_MEMBER_NAME(check_altAnim,"check_altAnim");
	HX_VISIT_MEMBER_NAME(stepperSusLength,"stepperSusLength");
	HX_VISIT_MEMBER_NAME(stepperType,"stepperType");
	HX_VISIT_MEMBER_NAME(songMusic,"songMusic");
	HX_VISIT_MEMBER_NAME(updatedSection,"updatedSection");
	HX_VISIT_MEMBER_NAME(daSpacing,"daSpacing");
	 ::flixel::addons::ui::FlxUIState_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val OriginalChartingState_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"_file") ) { return ::hx::Val( _file ); }
		if (HX_FIELD_EQ(inName,"_song") ) { return ::hx::Val( _song ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"UI_box") ) { return ::hx::Val( UI_box ); }
		if (HX_FIELD_EQ(inName,"bpmTxt") ) { return ::hx::Val( bpmTxt ); }
		if (HX_FIELD_EQ(inName,"gridBG") ) { return ::hx::Val( gridBG ); }
		if (HX_FIELD_EQ(inName,"vocals") ) { return ::hx::Val( vocals ); }
		if (HX_FIELD_EQ(inName,"create") ) { return ::hx::Val( create_dyn() ); }
		if (HX_FIELD_EQ(inName,"update") ) { return ::hx::Val( update_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"curSong") ) { return ::hx::Val( curSong ); }
		if (HX_FIELD_EQ(inName,"tempBpm") ) { return ::hx::Val( tempBpm ); }
		if (HX_FIELD_EQ(inName,"addNote") ) { return ::hx::Val( addNote_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"leftIcon") ) { return ::hx::Val( leftIcon ); }
		if (HX_FIELD_EQ(inName,"loadSong") ) { return ::hx::Val( loadSong_dyn() ); }
		if (HX_FIELD_EQ(inName,"getEvent") ) { return ::hx::Val( getEvent_dyn() ); }
		if (HX_FIELD_EQ(inName,"getNotes") ) { return ::hx::Val( getNotes_dyn() ); }
		if (HX_FIELD_EQ(inName,"loadJson") ) { return ::hx::Val( loadJson_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"strumLine") ) { return ::hx::Val( strumLine ); }
		if (HX_FIELD_EQ(inName,"highlight") ) { return ::hx::Val( highlight ); }
		if (HX_FIELD_EQ(inName,"rightIcon") ) { return ::hx::Val( rightIcon ); }
		if (HX_FIELD_EQ(inName,"addSongUI") ) { return ::hx::Val( addSongUI_dyn() ); }
		if (HX_FIELD_EQ(inName,"addNoteUI") ) { return ::hx::Val( addNoteUI_dyn() ); }
		if (HX_FIELD_EQ(inName,"songMusic") ) { return ::hx::Val( songMusic ); }
		if (HX_FIELD_EQ(inName,"clearSong") ) { return ::hx::Val( clearSong_dyn() ); }
		if (HX_FIELD_EQ(inName,"daSpacing") ) { return ::hx::Val( daSpacing ); }
		if (HX_FIELD_EQ(inName,"loadLevel") ) { return ::hx::Val( loadLevel_dyn() ); }
		if (HX_FIELD_EQ(inName,"saveLevel") ) { return ::hx::Val( saveLevel_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"curSection") ) { return ::hx::Val( curSection ); }
		if (HX_FIELD_EQ(inName,"bullshitUI") ) { return ::hx::Val( bullshitUI ); }
		if (HX_FIELD_EQ(inName,"dummyArrow") ) { return ::hx::Val( dummyArrow ); }
		if (HX_FIELD_EQ(inName,"typingShit") ) { return ::hx::Val( typingShit ); }
		if (HX_FIELD_EQ(inName,"pauseMusic") ) { return ::hx::Val( pauseMusic_dyn() ); }
		if (HX_FIELD_EQ(inName,"generateUI") ) { return ::hx::Val( generateUI_dyn() ); }
		if (HX_FIELD_EQ(inName,"updateGrid") ) { return ::hx::Val( updateGrid_dyn() ); }
		if (HX_FIELD_EQ(inName,"addSection") ) { return ::hx::Val( addSection_dyn() ); }
		if (HX_FIELD_EQ(inName,"selectNote") ) { return ::hx::Val( selectNote_dyn() ); }
		if (HX_FIELD_EQ(inName,"deleteNote") ) { return ::hx::Val( deleteNote_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"curNoteType") ) { return ::hx::Val( curNoteType ); }
		if (HX_FIELD_EQ(inName,"amountSteps") ) { return ::hx::Val( amountSteps ); }
		if (HX_FIELD_EQ(inName,"stepperType") ) { return ::hx::Val( stepperType ); }
		if (HX_FIELD_EQ(inName,"copySection") ) { return ::hx::Val( copySection_dyn() ); }
		if (HX_FIELD_EQ(inName,"updateHeads") ) { return ::hx::Val( updateHeads_dyn() ); }
		if (HX_FIELD_EQ(inName,"onSaveError") ) { return ::hx::Val( onSaveError_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"addSectionUI") ) { return ::hx::Val( addSectionUI_dyn() ); }
		if (HX_FIELD_EQ(inName,"resetSection") ) { return ::hx::Val( resetSection_dyn() ); }
		if (HX_FIELD_EQ(inName,"updateNoteUI") ) { return ::hx::Val( updateNoteUI_dyn() ); }
		if (HX_FIELD_EQ(inName,"clearSection") ) { return ::hx::Val( clearSection_dyn() ); }
		if (HX_FIELD_EQ(inName,"getStrumTime") ) { return ::hx::Val( getStrumTime_dyn() ); }
		if (HX_FIELD_EQ(inName,"loadAutosave") ) { return ::hx::Val( loadAutosave_dyn() ); }
		if (HX_FIELD_EQ(inName,"autosaveSong") ) { return ::hx::Val( autosaveSong_dyn() ); }
		if (HX_FIELD_EQ(inName,"onSaveCancel") ) { return ::hx::Val( onSaveCancel_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"stepperLength") ) { return ::hx::Val( stepperLength ); }
		if (HX_FIELD_EQ(inName,"check_altAnim") ) { return ::hx::Val( check_altAnim ); }
		if (HX_FIELD_EQ(inName,"changeSection") ) { return ::hx::Val( changeSection_dyn() ); }
		if (HX_FIELD_EQ(inName,"getYfromStrum") ) { return ::hx::Val( getYfromStrum_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"updatedSection") ) { return ::hx::Val( updatedSection ); }
		if (HX_FIELD_EQ(inName,"onSaveComplete") ) { return ::hx::Val( onSaveComplete_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"curSelectedNote") ) { return ::hx::Val( curSelectedNote ); }
		if (HX_FIELD_EQ(inName,"check_changeBPM") ) { return ::hx::Val( check_changeBPM ); }
		if (HX_FIELD_EQ(inName,"updateSectionUI") ) { return ::hx::Val( updateSectionUI_dyn() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"curRenderedNotes") ) { return ::hx::Val( curRenderedNotes ); }
		if (HX_FIELD_EQ(inName,"stepperSusLength") ) { return ::hx::Val( stepperSusLength ); }
		if (HX_FIELD_EQ(inName,"sectionStartTime") ) { return ::hx::Val( sectionStartTime_dyn() ); }
		if (HX_FIELD_EQ(inName,"recalculateSteps") ) { return ::hx::Val( recalculateSteps_dyn() ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"stepperSectionBPM") ) { return ::hx::Val( stepperSectionBPM ); }
		if (HX_FIELD_EQ(inName,"changeNoteSustain") ) { return ::hx::Val( changeNoteSustain_dyn() ); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"curRenderedSustains") ) { return ::hx::Val( curRenderedSustains ); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"check_mustHitSection") ) { return ::hx::Val( check_mustHitSection ); }
	}
	return super::__Field(inName,inCallProp);
}

bool OriginalChartingState_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 9:
		if (HX_FIELD_EQ(inName,"GRID_SIZE") ) { outValue = ( GRID_SIZE ); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"lastSection") ) { outValue = ( lastSection ); return true; }
	}
	return false;
}

::hx::Val OriginalChartingState_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"_file") ) { _file=inValue.Cast<  ::openfl::net::FileReference >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_song") ) { _song=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"UI_box") ) { UI_box=inValue.Cast<  ::flixel::addons::ui::FlxUITabMenu >(); return inValue; }
		if (HX_FIELD_EQ(inName,"bpmTxt") ) { bpmTxt=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		if (HX_FIELD_EQ(inName,"gridBG") ) { gridBG=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"vocals") ) { vocals=inValue.Cast<  ::flixel::_hx_system::FlxSound >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"curSong") ) { curSong=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"tempBpm") ) { tempBpm=inValue.Cast< Float >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"leftIcon") ) { leftIcon=inValue.Cast<  ::gameObjects::userInterface::HealthIcon >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"strumLine") ) { strumLine=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"highlight") ) { highlight=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"rightIcon") ) { rightIcon=inValue.Cast<  ::gameObjects::userInterface::HealthIcon >(); return inValue; }
		if (HX_FIELD_EQ(inName,"songMusic") ) { songMusic=inValue.Cast<  ::flixel::_hx_system::FlxSound >(); return inValue; }
		if (HX_FIELD_EQ(inName,"daSpacing") ) { daSpacing=inValue.Cast< Float >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"curSection") ) { curSection=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"bullshitUI") ) { bullshitUI=inValue.Cast<  ::flixel::group::FlxTypedGroup >(); return inValue; }
		if (HX_FIELD_EQ(inName,"dummyArrow") ) { dummyArrow=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"typingShit") ) { typingShit=inValue.Cast<  ::flixel::addons::ui::FlxInputText >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"curNoteType") ) { curNoteType=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"amountSteps") ) { amountSteps=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"stepperType") ) { stepperType=inValue.Cast<  ::flixel::addons::ui::FlxUINumericStepper >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"stepperLength") ) { stepperLength=inValue.Cast<  ::flixel::addons::ui::FlxUINumericStepper >(); return inValue; }
		if (HX_FIELD_EQ(inName,"check_altAnim") ) { check_altAnim=inValue.Cast<  ::flixel::addons::ui::FlxUICheckBox >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"updatedSection") ) { updatedSection=inValue.Cast< bool >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"curSelectedNote") ) { curSelectedNote=inValue.Cast< ::cpp::VirtualArray >(); return inValue; }
		if (HX_FIELD_EQ(inName,"check_changeBPM") ) { check_changeBPM=inValue.Cast<  ::flixel::addons::ui::FlxUICheckBox >(); return inValue; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"curRenderedNotes") ) { curRenderedNotes=inValue.Cast<  ::flixel::group::FlxTypedGroup >(); return inValue; }
		if (HX_FIELD_EQ(inName,"stepperSusLength") ) { stepperSusLength=inValue.Cast<  ::flixel::addons::ui::FlxUINumericStepper >(); return inValue; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"stepperSectionBPM") ) { stepperSectionBPM=inValue.Cast<  ::flixel::addons::ui::FlxUINumericStepper >(); return inValue; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"curRenderedSustains") ) { curRenderedSustains=inValue.Cast<  ::flixel::group::FlxTypedGroup >(); return inValue; }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"check_mustHitSection") ) { check_mustHitSection=inValue.Cast<  ::flixel::addons::ui::FlxUICheckBox >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool OriginalChartingState_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 9:
		if (HX_FIELD_EQ(inName,"GRID_SIZE") ) { GRID_SIZE=ioValue.Cast< int >(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"lastSection") ) { lastSection=ioValue.Cast< int >(); return true; }
	}
	return false;
}

void OriginalChartingState_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("_file",5b,ea,cc,f6));
	outFields->push(HX_("UI_box",60,07,ac,43));
	outFields->push(HX_("curSection",45,58,c1,68));
	outFields->push(HX_("curNoteType",6c,d9,7a,dd));
	outFields->push(HX_("bpmTxt",d1,bc,26,f4));
	outFields->push(HX_("strumLine",dd,79,d7,ee));
	outFields->push(HX_("curSong",75,95,6d,b7));
	outFields->push(HX_("amountSteps",af,2a,91,a5));
	outFields->push(HX_("bullshitUI",67,a9,a3,d3));
	outFields->push(HX_("highlight",34,56,00,ed));
	outFields->push(HX_("dummyArrow",81,8a,75,ae));
	outFields->push(HX_("curRenderedNotes",2c,e1,fb,dc));
	outFields->push(HX_("curRenderedSustains",65,b2,8a,50));
	outFields->push(HX_("gridBG",0b,ce,23,18));
	outFields->push(HX_("_song",b4,3f,69,ff));
	outFields->push(HX_("typingShit",d7,01,ec,6a));
	outFields->push(HX_("curSelectedNote",8d,49,f4,47));
	outFields->push(HX_("tempBpm",2b,d8,ac,46));
	outFields->push(HX_("vocals",5e,10,51,59));
	outFields->push(HX_("leftIcon",20,2b,ae,4c));
	outFields->push(HX_("rightIcon",75,3d,79,b0));
	outFields->push(HX_("stepperLength",d7,b0,3a,4b));
	outFields->push(HX_("check_mustHitSection",12,30,fc,78));
	outFields->push(HX_("check_changeBPM",d8,2d,43,fc));
	outFields->push(HX_("stepperSectionBPM",6b,ba,b7,95));
	outFields->push(HX_("check_altAnim",23,ee,53,2e));
	outFields->push(HX_("stepperSusLength",06,e6,fc,95));
	outFields->push(HX_("stepperType",6b,80,f8,b3));
	outFields->push(HX_("songMusic",90,18,d5,3f));
	outFields->push(HX_("updatedSection",ea,f8,55,de));
	outFields->push(HX_("daSpacing",86,9d,76,71));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo OriginalChartingState_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::openfl::net::FileReference */ ,(int)offsetof(OriginalChartingState_obj,_file),HX_("_file",5b,ea,cc,f6)},
	{::hx::fsObject /*  ::flixel::addons::ui::FlxUITabMenu */ ,(int)offsetof(OriginalChartingState_obj,UI_box),HX_("UI_box",60,07,ac,43)},
	{::hx::fsInt,(int)offsetof(OriginalChartingState_obj,curSection),HX_("curSection",45,58,c1,68)},
	{::hx::fsInt,(int)offsetof(OriginalChartingState_obj,curNoteType),HX_("curNoteType",6c,d9,7a,dd)},
	{::hx::fsObject /*  ::flixel::text::FlxText */ ,(int)offsetof(OriginalChartingState_obj,bpmTxt),HX_("bpmTxt",d1,bc,26,f4)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(OriginalChartingState_obj,strumLine),HX_("strumLine",dd,79,d7,ee)},
	{::hx::fsString,(int)offsetof(OriginalChartingState_obj,curSong),HX_("curSong",75,95,6d,b7)},
	{::hx::fsInt,(int)offsetof(OriginalChartingState_obj,amountSteps),HX_("amountSteps",af,2a,91,a5)},
	{::hx::fsObject /*  ::flixel::group::FlxTypedGroup */ ,(int)offsetof(OriginalChartingState_obj,bullshitUI),HX_("bullshitUI",67,a9,a3,d3)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(OriginalChartingState_obj,highlight),HX_("highlight",34,56,00,ed)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(OriginalChartingState_obj,dummyArrow),HX_("dummyArrow",81,8a,75,ae)},
	{::hx::fsObject /*  ::flixel::group::FlxTypedGroup */ ,(int)offsetof(OriginalChartingState_obj,curRenderedNotes),HX_("curRenderedNotes",2c,e1,fb,dc)},
	{::hx::fsObject /*  ::flixel::group::FlxTypedGroup */ ,(int)offsetof(OriginalChartingState_obj,curRenderedSustains),HX_("curRenderedSustains",65,b2,8a,50)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(OriginalChartingState_obj,gridBG),HX_("gridBG",0b,ce,23,18)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(OriginalChartingState_obj,_song),HX_("_song",b4,3f,69,ff)},
	{::hx::fsObject /*  ::flixel::addons::ui::FlxInputText */ ,(int)offsetof(OriginalChartingState_obj,typingShit),HX_("typingShit",d7,01,ec,6a)},
	{::hx::fsObject /* ::cpp::VirtualArray */ ,(int)offsetof(OriginalChartingState_obj,curSelectedNote),HX_("curSelectedNote",8d,49,f4,47)},
	{::hx::fsFloat,(int)offsetof(OriginalChartingState_obj,tempBpm),HX_("tempBpm",2b,d8,ac,46)},
	{::hx::fsObject /*  ::flixel::_hx_system::FlxSound */ ,(int)offsetof(OriginalChartingState_obj,vocals),HX_("vocals",5e,10,51,59)},
	{::hx::fsObject /*  ::gameObjects::userInterface::HealthIcon */ ,(int)offsetof(OriginalChartingState_obj,leftIcon),HX_("leftIcon",20,2b,ae,4c)},
	{::hx::fsObject /*  ::gameObjects::userInterface::HealthIcon */ ,(int)offsetof(OriginalChartingState_obj,rightIcon),HX_("rightIcon",75,3d,79,b0)},
	{::hx::fsObject /*  ::flixel::addons::ui::FlxUINumericStepper */ ,(int)offsetof(OriginalChartingState_obj,stepperLength),HX_("stepperLength",d7,b0,3a,4b)},
	{::hx::fsObject /*  ::flixel::addons::ui::FlxUICheckBox */ ,(int)offsetof(OriginalChartingState_obj,check_mustHitSection),HX_("check_mustHitSection",12,30,fc,78)},
	{::hx::fsObject /*  ::flixel::addons::ui::FlxUICheckBox */ ,(int)offsetof(OriginalChartingState_obj,check_changeBPM),HX_("check_changeBPM",d8,2d,43,fc)},
	{::hx::fsObject /*  ::flixel::addons::ui::FlxUINumericStepper */ ,(int)offsetof(OriginalChartingState_obj,stepperSectionBPM),HX_("stepperSectionBPM",6b,ba,b7,95)},
	{::hx::fsObject /*  ::flixel::addons::ui::FlxUICheckBox */ ,(int)offsetof(OriginalChartingState_obj,check_altAnim),HX_("check_altAnim",23,ee,53,2e)},
	{::hx::fsObject /*  ::flixel::addons::ui::FlxUINumericStepper */ ,(int)offsetof(OriginalChartingState_obj,stepperSusLength),HX_("stepperSusLength",06,e6,fc,95)},
	{::hx::fsObject /*  ::flixel::addons::ui::FlxUINumericStepper */ ,(int)offsetof(OriginalChartingState_obj,stepperType),HX_("stepperType",6b,80,f8,b3)},
	{::hx::fsObject /*  ::flixel::_hx_system::FlxSound */ ,(int)offsetof(OriginalChartingState_obj,songMusic),HX_("songMusic",90,18,d5,3f)},
	{::hx::fsBool,(int)offsetof(OriginalChartingState_obj,updatedSection),HX_("updatedSection",ea,f8,55,de)},
	{::hx::fsFloat,(int)offsetof(OriginalChartingState_obj,daSpacing),HX_("daSpacing",86,9d,76,71)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo OriginalChartingState_obj_sStaticStorageInfo[] = {
	{::hx::fsInt,(void *) &OriginalChartingState_obj::lastSection,HX_("lastSection",2f,ba,83,12)},
	{::hx::fsInt,(void *) &OriginalChartingState_obj::GRID_SIZE,HX_("GRID_SIZE",1a,98,25,c9)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static ::String OriginalChartingState_obj_sMemberFields[] = {
	HX_("_file",5b,ea,cc,f6),
	HX_("UI_box",60,07,ac,43),
	HX_("curSection",45,58,c1,68),
	HX_("curNoteType",6c,d9,7a,dd),
	HX_("bpmTxt",d1,bc,26,f4),
	HX_("strumLine",dd,79,d7,ee),
	HX_("curSong",75,95,6d,b7),
	HX_("amountSteps",af,2a,91,a5),
	HX_("bullshitUI",67,a9,a3,d3),
	HX_("highlight",34,56,00,ed),
	HX_("dummyArrow",81,8a,75,ae),
	HX_("curRenderedNotes",2c,e1,fb,dc),
	HX_("curRenderedSustains",65,b2,8a,50),
	HX_("gridBG",0b,ce,23,18),
	HX_("_song",b4,3f,69,ff),
	HX_("typingShit",d7,01,ec,6a),
	HX_("curSelectedNote",8d,49,f4,47),
	HX_("tempBpm",2b,d8,ac,46),
	HX_("vocals",5e,10,51,59),
	HX_("leftIcon",20,2b,ae,4c),
	HX_("rightIcon",75,3d,79,b0),
	HX_("create",fc,66,0f,7c),
	HX_("addSongUI",6a,02,ad,e5),
	HX_("stepperLength",d7,b0,3a,4b),
	HX_("check_mustHitSection",12,30,fc,78),
	HX_("check_changeBPM",d8,2d,43,fc),
	HX_("stepperSectionBPM",6b,ba,b7,95),
	HX_("check_altAnim",23,ee,53,2e),
	HX_("addSectionUI",18,75,a5,87),
	HX_("stepperSusLength",06,e6,fc,95),
	HX_("stepperType",6b,80,f8,b3),
	HX_("addNoteUI",c7,f7,d9,e9),
	HX_("songMusic",90,18,d5,3f),
	HX_("loadSong",1b,f5,f7,bc),
	HX_("pauseMusic",cf,6d,d3,e5),
	HX_("generateUI",c9,a0,60,4e),
	HX_("getEvent",a4,d7,9b,d5),
	HX_("updatedSection",ea,f8,55,de),
	HX_("sectionStartTime",ea,ba,df,45),
	HX_("update",09,86,05,87),
	HX_("changeNoteSustain",41,6b,40,3c),
	HX_("recalculateSteps",54,5b,74,a1),
	HX_("resetSection",d6,4b,b6,cf),
	HX_("changeSection",55,aa,ac,be),
	HX_("copySection",b0,82,ec,b3),
	HX_("updateSectionUI",30,24,dc,d7),
	HX_("updateHeads",8a,3c,51,0a),
	HX_("updateNoteUI",af,69,79,31),
	HX_("updateGrid",6f,c1,20,fd),
	HX_("addSection",c4,31,62,c5),
	HX_("selectNote",0e,8d,a5,b7),
	HX_("deleteNote",bd,f5,56,9c),
	HX_("clearSection",d8,b7,56,39),
	HX_("clearSong",02,0c,19,c0),
	HX_("addNote",b3,5a,47,85),
	HX_("getStrumTime",80,ca,77,03),
	HX_("getYfromStrum",1c,4c,46,78),
	HX_("daSpacing",86,9d,76,71),
	HX_("loadLevel",7e,61,9a,8d),
	HX_("getNotes",cb,eb,a1,ff),
	HX_("loadJson",6e,13,08,b7),
	HX_("loadAutosave",72,3a,03,fe),
	HX_("autosaveSong",21,24,ac,67),
	HX_("saveLevel",07,1d,10,01),
	HX_("onSaveComplete",d5,ac,3f,bc),
	HX_("onSaveCancel",96,1a,31,d9),
	HX_("onSaveError",2c,b6,19,24),
	::String(null()) };

static void OriginalChartingState_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(OriginalChartingState_obj::lastSection,"lastSection");
	HX_MARK_MEMBER_NAME(OriginalChartingState_obj::GRID_SIZE,"GRID_SIZE");
};

#ifdef HXCPP_VISIT_ALLOCS
static void OriginalChartingState_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(OriginalChartingState_obj::lastSection,"lastSection");
	HX_VISIT_MEMBER_NAME(OriginalChartingState_obj::GRID_SIZE,"GRID_SIZE");
};

#endif

::hx::Class OriginalChartingState_obj::__mClass;

static ::String OriginalChartingState_obj_sStaticFields[] = {
	HX_("lastSection",2f,ba,83,12),
	HX_("GRID_SIZE",1a,98,25,c9),
	::String(null())
};

void OriginalChartingState_obj::__register()
{
	OriginalChartingState_obj _hx_dummy;
	OriginalChartingState_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("meta.state.charting.OriginalChartingState",58,5e,b8,8e);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &OriginalChartingState_obj::__GetStatic;
	__mClass->mSetStaticField = &OriginalChartingState_obj::__SetStatic;
	__mClass->mMarkFunc = OriginalChartingState_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(OriginalChartingState_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(OriginalChartingState_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< OriginalChartingState_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = OriginalChartingState_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = OriginalChartingState_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = OriginalChartingState_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void OriginalChartingState_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_9a934f134b71b84f_59_boot)
HXDLIN(  59)		lastSection = 0;
            	}
{
            	HX_STACKFRAME(&_hx_pos_9a934f134b71b84f_70_boot)
HXDLIN(  70)		GRID_SIZE = 40;
            	}
}

} // end namespace meta
} // end namespace state
} // end namespace charting

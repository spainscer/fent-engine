// Generated by Haxe 4.1.5
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_ForeverAssets
#include <ForeverAssets.h>
#endif
#ifndef INCLUDED_ForeverTools
#include <ForeverTools.h>
#endif
#ifndef INCLUDED_Main
#include <Main.h>
#endif
#ifndef INCLUDED_Paths
#include <Paths.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxCamera
#include <flixel/FlxCamera.h>
#endif
#ifndef INCLUDED_flixel_FlxCameraFollowStyle
#include <flixel/FlxCameraFollowStyle.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
#ifndef INCLUDED_flixel_FlxStrip
#include <flixel/FlxStrip.h>
#endif
#ifndef INCLUDED_flixel_addons_display_FlxBackdrop
#include <flixel/addons/display/FlxBackdrop.h>
#endif
#ifndef INCLUDED_flixel_addons_display_FlxGridOverlay
#include <flixel/addons/display/FlxGridOverlay.h>
#endif
#ifndef INCLUDED_flixel_addons_display_FlxTiledSprite
#include <flixel/addons/display/FlxTiledSprite.h>
#endif
#ifndef INCLUDED_flixel_addons_transition_FlxTransitionableState
#include <flixel/addons/transition/FlxTransitionableState.h>
#endif
#ifndef INCLUDED_flixel_addons_transition_TransitionData
#include <flixel/addons/transition/TransitionData.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUIState
#include <flixel/addons/ui/FlxUIState.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IEventGetter
#include <flixel/addons/ui/interfaces/IEventGetter.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IFlxUIState
#include <flixel/addons/ui/interfaces/IFlxUIState.h>
#endif
#ifndef INCLUDED_flixel_graphics_FlxGraphic
#include <flixel/graphics/FlxGraphic.h>
#endif
#ifndef INCLUDED_flixel_graphics_frames_FlxFramesCollection
#include <flixel/graphics/frames/FlxFramesCollection.h>
#endif
#ifndef INCLUDED_flixel_graphics_frames_FlxImageFrame
#include <flixel/graphics/frames/FlxImageFrame.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedSpriteGroup
#include <flixel/group/FlxTypedSpriteGroup.h>
#endif
#ifndef INCLUDED_flixel_input_FlxBaseKeyList
#include <flixel/input/FlxBaseKeyList.h>
#endif
#ifndef INCLUDED_flixel_input_FlxInput
#include <flixel/input/FlxInput.h>
#endif
#ifndef INCLUDED_flixel_input_FlxKeyManager
#include <flixel/input/FlxKeyManager.h>
#endif
#ifndef INCLUDED_flixel_input_FlxPointer
#include <flixel/input/FlxPointer.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInput
#include <flixel/input/IFlxInput.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInputManager
#include <flixel/input/IFlxInputManager.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard_FlxKeyList
#include <flixel/input/keyboard/FlxKeyList.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard_FlxKeyboard
#include <flixel/input/keyboard/FlxKeyboard.h>
#endif
#ifndef INCLUDED_flixel_input_mouse_FlxMouse
#include <flixel/input/mouse/FlxMouse.h>
#endif
#ifndef INCLUDED_flixel_input_mouse_FlxMouseButton
#include <flixel/input/mouse/FlxMouseButton.h>
#endif
#ifndef INCLUDED_flixel_math_FlxMath
#include <flixel/math/FlxMath.h>
#endif
#ifndef INCLUDED_flixel_system_FlxSound
#include <flixel/system/FlxSound.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_BitmapFrontEnd
#include <flixel/system/frontEnds/BitmapFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_CameraFrontEnd
#include <flixel/system/frontEnds/CameraFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_SoundFrontEnd
#include <flixel/system/frontEnds/SoundFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_text_FlxText
#include <flixel/text/FlxText.h>
#endif
#ifndef INCLUDED_flixel_text_FlxTextBorderStyle
#include <flixel/text/FlxTextBorderStyle.h>
#endif
#ifndef INCLUDED_flixel_util_FlxAxes
#include <flixel/util/FlxAxes.h>
#endif
#ifndef INCLUDED_flixel_util_FlxGradient
#include <flixel/util/FlxGradient.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util__FlxColor_FlxColor_Impl_
#include <flixel/util/_FlxColor/FlxColor_Impl_.h>
#endif
#ifndef INCLUDED_gameObjects_userInterface_notes_Note
#include <gameObjects/userInterface/notes/Note.h>
#endif
#ifndef INCLUDED_gameObjects_userInterface_notes_UIStaticArrow
#include <gameObjects/userInterface/notes/UIStaticArrow.h>
#endif
#ifndef INCLUDED_meta_CoolUtil
#include <meta/CoolUtil.h>
#endif
#ifndef INCLUDED_meta_MusicBeatState
#include <meta/MusicBeatState.h>
#endif
#ifndef INCLUDED_meta_data_Conductor
#include <meta/data/Conductor.h>
#endif
#ifndef INCLUDED_meta_data_Song
#include <meta/data/Song.h>
#endif
#ifndef INCLUDED_meta_data_dependency_FNFSprite
#include <meta/data/dependency/FNFSprite.h>
#endif
#ifndef INCLUDED_meta_data_dependency_FNFUIState
#include <meta/data/dependency/FNFUIState.h>
#endif
#ifndef INCLUDED_meta_state_PlayState
#include <meta/state/PlayState.h>
#endif
#ifndef INCLUDED_meta_state_charting_ChartingState
#include <meta/state/charting/ChartingState.h>
#endif
#ifndef INCLUDED_openfl_display_BitmapData
#include <openfl/display/BitmapData.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_geom_ColorTransform
#include <openfl/geom/ColorTransform.h>
#endif
#ifndef INCLUDED_openfl_geom_Rectangle
#include <openfl/geom/Rectangle.h>
#endif
#ifndef INCLUDED_openfl_media_Sound
#include <openfl/media/Sound.h>
#endif
#ifndef INCLUDED_openfl_media_SoundChannel
#include <openfl/media/SoundChannel.h>
#endif
#ifndef INCLUDED_sys_FileSystem
#include <sys/FileSystem.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_7b00649c1d13f94d_60_new,"meta.state.charting.ChartingState","new",0x25a14edb,"meta.state.charting.ChartingState.new","meta/state/charting/ChartingState.hx",60,0xe29053f4)
HX_LOCAL_STACK_FRAME(_hx_pos_7b00649c1d13f94d_87_create,"meta.state.charting.ChartingState","create",0x7f11e761,"meta.state.charting.ChartingState.create","meta/state/charting/ChartingState.hx",87,0xe29053f4)
HX_LOCAL_STACK_FRAME(_hx_pos_7b00649c1d13f94d_169_update,"meta.state.charting.ChartingState","update",0x8a08066e,"meta.state.charting.ChartingState.update","meta/state/charting/ChartingState.hx",169,0xe29053f4)
HX_LOCAL_STACK_FRAME(_hx_pos_7b00649c1d13f94d_250_update,"meta.state.charting.ChartingState","update",0x8a08066e,"meta.state.charting.ChartingState.update","meta/state/charting/ChartingState.hx",250,0xe29053f4)
HX_LOCAL_STACK_FRAME(_hx_pos_7b00649c1d13f94d_292_stepHit,"meta.state.charting.ChartingState","stepHit",0x206f8662,"meta.state.charting.ChartingState.stepHit","meta/state/charting/ChartingState.hx",292,0xe29053f4)
HX_LOCAL_STACK_FRAME(_hx_pos_7b00649c1d13f94d_288_stepHit,"meta.state.charting.ChartingState","stepHit",0x206f8662,"meta.state.charting.ChartingState.stepHit","meta/state/charting/ChartingState.hx",288,0xe29053f4)
HX_LOCAL_STACK_FRAME(_hx_pos_7b00649c1d13f94d_314_getStrumTime,"meta.state.charting.ChartingState","getStrumTime",0x575224a5,"meta.state.charting.ChartingState.getStrumTime","meta/state/charting/ChartingState.hx",314,0xe29053f4)
HX_LOCAL_STACK_FRAME(_hx_pos_7b00649c1d13f94d_319_getYfromStrum,"meta.state.charting.ChartingState","getYfromStrum",0x837ad257,"meta.state.charting.ChartingState.getYfromStrum","meta/state/charting/ChartingState.hx",319,0xe29053f4)
HX_LOCAL_STACK_FRAME(_hx_pos_7b00649c1d13f94d_325_generateGrid,"meta.state.charting.ChartingState","generateGrid",0x6b19fac0,"meta.state.charting.ChartingState.generateGrid","meta/state/charting/ChartingState.hx",325,0xe29053f4)
HX_LOCAL_STACK_FRAME(_hx_pos_7b00649c1d13f94d_346_regenerateSection,"meta.state.charting.ChartingState","regenerateSection",0x7fb9cc98,"meta.state.charting.ChartingState.regenerateSection","meta/state/charting/ChartingState.hx",346,0xe29053f4)
HX_LOCAL_STACK_FRAME(_hx_pos_7b00649c1d13f94d_395_generateNotes,"meta.state.charting.ChartingState","generateNotes",0x517c3307,"meta.state.charting.ChartingState.generateNotes","meta/state/charting/ChartingState.hx",395,0xe29053f4)
HX_LOCAL_STACK_FRAME(_hx_pos_7b00649c1d13f94d_422_generateSection,"meta.state.charting.ChartingState","generateSection",0xdfa11a2b,"meta.state.charting.ChartingState.generateSection","meta/state/charting/ChartingState.hx",422,0xe29053f4)
HX_LOCAL_STACK_FRAME(_hx_pos_7b00649c1d13f94d_456_loadSong,"meta.state.charting.ChartingState","loadSong",0x65e718c0,"meta.state.charting.ChartingState.loadSong","meta/state/charting/ChartingState.hx",456,0xe29053f4)
HX_LOCAL_STACK_FRAME(_hx_pos_7b00649c1d13f94d_430_loadSong,"meta.state.charting.ChartingState","loadSong",0x65e718c0,"meta.state.charting.ChartingState.loadSong","meta/state/charting/ChartingState.hx",430,0xe29053f4)
HX_LOCAL_STACK_FRAME(_hx_pos_7b00649c1d13f94d_464_generateChartNote,"meta.state.charting.ChartingState","generateChartNote",0x79f4d9b6,"meta.state.charting.ChartingState.generateChartNote","meta/state/charting/ChartingState.hx",464,0xe29053f4)
HX_LOCAL_STACK_FRAME(_hx_pos_7b00649c1d13f94d_483_generateSustain,"meta.state.charting.ChartingState","generateSustain",0x7bba10e9,"meta.state.charting.ChartingState.generateSustain","meta/state/charting/ChartingState.hx",483,0xe29053f4)
HX_LOCAL_STACK_FRAME(_hx_pos_7b00649c1d13f94d_522_generateBackground,"meta.state.charting.ChartingState","generateBackground",0x8e7def68,"meta.state.charting.ChartingState.generateBackground","meta/state/charting/ChartingState.hx",522,0xe29053f4)
HX_LOCAL_STACK_FRAME(_hx_pos_7b00649c1d13f94d_537_adjustSide,"meta.state.charting.ChartingState","adjustSide",0x0d2490ab,"meta.state.charting.ChartingState.adjustSide","meta/state/charting/ChartingState.hx",537,0xe29053f4)
HX_LOCAL_STACK_FRAME(_hx_pos_7b00649c1d13f94d_541_pauseMusic,"meta.state.charting.ChartingState","pauseMusic",0x038e84b4,"meta.state.charting.ChartingState.pauseMusic","meta/state/charting/ChartingState.hx",541,0xe29053f4)
HX_LOCAL_STACK_FRAME(_hx_pos_7b00649c1d13f94d_551_resyncVocals,"meta.state.charting.ChartingState","resyncVocals",0xbec770b1,"meta.state.charting.ChartingState.resyncVocals","meta/state/charting/ChartingState.hx",551,0xe29053f4)
HX_LOCAL_STACK_FRAME(_hx_pos_7b00649c1d13f94d_74_boot,"meta.state.charting.ChartingState","boot",0xbf9cb157,"meta.state.charting.ChartingState.boot","meta/state/charting/ChartingState.hx",74,0xe29053f4)
HX_LOCAL_STACK_FRAME(_hx_pos_7b00649c1d13f94d_77_boot,"meta.state.charting.ChartingState","boot",0xbf9cb157,"meta.state.charting.ChartingState.boot","meta/state/charting/ChartingState.hx",77,0xe29053f4)
namespace meta{
namespace state{
namespace charting{

void ChartingState_obj::__construct( ::flixel::addons::transition::TransitionData TransIn, ::flixel::addons::transition::TransitionData TransOut){
            	HX_STACKFRAME(&_hx_pos_7b00649c1d13f94d_60_new)
HXLINE( 420)		this->extraSize = 6;
HXLINE( 392)		this->sectionsMax = 0;
HXLINE( 166)		this->hitSoundsPlayed = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(  66)		this->keysTotal = 8;
HXLINE(  60)		super::__construct(TransIn,TransOut);
            	}

Dynamic ChartingState_obj::__CreateEmpty() { return new ChartingState_obj; }

void *ChartingState_obj::_hx_vtable = 0;

Dynamic ChartingState_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< ChartingState_obj > _hx_result = new ChartingState_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool ChartingState_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x2f064378) {
		if (inClassId<=(int)0x0f8d4977) {
			if (inClassId<=(int)0x0225b2d9) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x0225b2d9;
			} else {
				return inClassId==(int)0x0f8d4977;
			}
		} else {
			return inClassId==(int)0x23a57bae || inClassId==(int)0x2f064378;
		}
	} else {
		if (inClassId<=(int)0x7c795c9f) {
			if (inClassId<=(int)0x66451e41) {
				return inClassId==(int)0x62817b24 || inClassId==(int)0x66451e41;
			} else {
				return inClassId==(int)0x7c795c9f;
			}
		} else {
			return inClassId==(int)0x7ccf8994;
		}
	}
}

void ChartingState_obj::create(){
            	HX_GC_STACKFRAME(&_hx_pos_7b00649c1d13f94d_87_create)
HXLINE(  89)		this->super::create();
HXLINE(  91)		this->generateBackground();
HXLINE(  93)		if (::hx::IsNotNull( ::meta::state::PlayState_obj::SONG )) {
HXLINE(  94)			this->_song = ::meta::state::PlayState_obj::SONG;
            		}
            		else {
HXLINE(  96)			this->_song = ::meta::data::Song_obj::loadFromJson(HX_("test",52,c8,f9,4c),HX_("test",52,c8,f9,4c));
            		}
HXLINE(  98)		this->loadSong(( (::String)(this->_song->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic)) ));
HXLINE(  99)		::meta::data::Conductor_obj::changeBPM(( (Float)(this->_song->__Field(HX_("bpm",df,be,4a,00),::hx::paccDynamic)) ),null());
HXLINE( 100)		::meta::data::Conductor_obj::mapBPMChanges(this->_song);
HXLINE( 102)		this->generateGrid();
HXLINE( 104)		this->curRenderedNotes =  ::flixel::group::FlxTypedGroup_obj::__alloc( HX_CTX ,null());
HXLINE( 105)		this->curRenderedSustains =  ::flixel::group::FlxTypedGroup_obj::__alloc( HX_CTX ,null());
HXLINE( 106)		this->curRenderedSections =  ::flixel::group::FlxTypedGroup_obj::__alloc( HX_CTX ,null());
HXLINE( 108)		this->generateNotes();
HXLINE( 110)		this->add(this->curRenderedSections);
HXLINE( 111)		this->add(this->curRenderedSustains);
HXLINE( 112)		this->add(this->curRenderedNotes);
HXLINE( 114)		this->strumLineCam =  ::flixel::FlxObject_obj::__alloc( HX_CTX ,0,0,null(),null());
HXLINE( 115)		this->strumLineCam->screenCenter(::flixel::util::FlxAxes_obj::X_dyn());
HXLINE( 118)		 ::flixel::FlxSprite _hx_tmp =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,0,0,null());
HXDLIN( 118)		this->strumLine = _hx_tmp->makeGraphic(::Std_obj::_hx_int((( (Float)(::flixel::FlxG_obj::width) ) / ( (Float)(2) ))),2,null(),null(),null());
HXLINE( 119)		this->add(this->strumLine);
HXLINE( 120)		this->strumLine->screenCenter(::flixel::util::FlxAxes_obj::X_dyn());
HXLINE( 123)		this->dummyArrow =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,null(),null(),null())->makeGraphic(::meta::state::charting::ChartingState_obj::gridSize,::meta::state::charting::ChartingState_obj::gridSize,null(),null(),null());
HXLINE( 124)		this->add(this->dummyArrow);
HXLINE( 127)		this->arrowGroup =  ::flixel::group::FlxTypedSpriteGroup_obj::__alloc( HX_CTX ,0,0,null());
HXLINE( 128)		{
HXLINE( 128)			int _g = 0;
HXDLIN( 128)			int _g1 = this->keysTotal;
HXDLIN( 128)			while((_g < _g1)){
HXLINE( 128)				_g = (_g + 1);
HXDLIN( 128)				int i = (_g - 1);
HXLINE( 130)				int typeReal = i;
HXLINE( 131)				if ((typeReal > 3)) {
HXLINE( 132)					typeReal = (typeReal - 4);
            				}
HXLINE( 134)				 ::gameObjects::userInterface::notes::UIStaticArrow newArrow = ::ForeverAssets_obj::generateUIArrows((((( (Float)(::flixel::FlxG_obj::width) ) / ( (Float)(2) )) - ((( (Float)(this->keysTotal) ) / ( (Float)(2) )) * ( (Float)(::meta::state::charting::ChartingState_obj::gridSize) ))) + ((i - 1) * ::meta::state::charting::ChartingState_obj::gridSize)),( (Float)(-76) ),typeReal,HX_("chart editor",af,f4,82,ec));
HXLINE( 137)				newArrow->ID = i;
HXLINE( 138)				newArrow->setGraphicSize(::meta::state::charting::ChartingState_obj::gridSize,null());
HXLINE( 139)				newArrow->updateHitbox();
HXLINE( 140)				newArrow->set_alpha(((Float)0.9));
HXLINE( 141)				newArrow->set_antialiasing(true);
HXLINE( 144)				newArrow->playAnim(HX_("static",ae,dc,fb,05),null(),null(),null());
HXLINE( 146)				this->arrowGroup->add(newArrow).StaticCast<  ::gameObjects::userInterface::notes::UIStaticArrow >();
            			}
            		}
HXLINE( 148)		this->add(this->arrowGroup);
HXLINE( 149)		{
HXLINE( 149)			 ::flixel::group::FlxTypedSpriteGroup _g2 = this->arrowGroup;
HXDLIN( 149)			_g2->set_x((_g2->x - ( (Float)(1) )));
            		}
HXLINE( 152)		this->camGame =  ::flixel::FlxCamera_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null());
HXLINE( 153)		this->camHUD =  ::flixel::FlxCamera_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null());
HXLINE( 154)		{
HXLINE( 154)			 ::flixel::FlxCamera _hx_tmp1 = this->camHUD;
HXDLIN( 154)			_hx_tmp1->bgColor = (_hx_tmp1->bgColor & 16777215);
HXDLIN( 154)			 ::flixel::FlxCamera _hx_tmp2 = this->camHUD;
HXDLIN( 154)			_hx_tmp2->bgColor = (_hx_tmp2->bgColor | 0);
            		}
HXLINE( 156)		::flixel::FlxG_obj::cameras->reset(this->camGame);
HXLINE( 157)		::flixel::FlxG_obj::cameras->add(this->camHUD).StaticCast<  ::flixel::FlxCamera >();
HXLINE( 158)		::flixel::FlxCamera_obj::defaultCameras = ::Array_obj< ::Dynamic>::__new(1)->init(0,this->camGame);
HXLINE( 160)		::flixel::FlxG_obj::camera->follow(this->strumLineCam,null(),null());
HXLINE( 162)		::flixel::FlxG_obj::mouse->set_useSystemCursor(false);
HXLINE( 163)		::flixel::FlxG_obj::mouse->set_visible(true);
            	}


void ChartingState_obj::update(Float elapsed){
            	HX_GC_STACKFRAME(&_hx_pos_7b00649c1d13f94d_169_update)
HXLINE( 168)		 ::meta::state::charting::ChartingState _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE( 170)		 ::flixel::input::keyboard::FlxKeyList _this = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 170)		if (_this->keyManager->checkStatus(32,_this->status)) {
HXLINE( 172)			if (::hx::IsNotNull( this->songMusic->_channel )) {
HXLINE( 174)				this->songMusic->pause();
HXLINE( 175)				this->vocals->pause();
            			}
            			else {
HXLINE( 180)				this->vocals->play(null(),null(),null());
HXLINE( 181)				this->songMusic->play(null(),null(),null());
HXLINE( 184)				this->hitSoundsPlayed = ::Array_obj< ::Dynamic>::__new(0);
            			}
            		}
HXLINE( 190)		Float scrollSpeed = ((Float)0.75);
HXLINE( 191)		if ((::flixel::FlxG_obj::mouse->wheel != 0)) {
HXLINE( 193)			this->songMusic->pause();
HXLINE( 194)			this->vocals->pause();
HXLINE( 196)			this->songMusic->set_time(::Math_obj::max((this->songMusic->_time - ((( (Float)(::flixel::FlxG_obj::mouse->wheel) ) * ::meta::data::Conductor_obj::stepCrochet) * scrollSpeed)),( (Float)(0) )));
HXLINE( 197)			this->songMusic->set_time(::Math_obj::min(this->songMusic->_time,this->songMusic->_length));
HXLINE( 198)			this->vocals->set_time(this->songMusic->_time);
            		}
HXLINE( 202)		::meta::data::Conductor_obj::songPosition = this->songMusic->_time;
HXLINE( 204)		 ::flixel::FlxSprite _hx_tmp = this->strumLine;
HXDLIN( 204)		_hx_tmp->set_y(this->getYfromStrum(::meta::data::Conductor_obj::songPosition));
HXLINE( 205)		this->strumLineCam->set_y((this->strumLine->y + (( (Float)(::flixel::FlxG_obj::height) ) / ( (Float)(3) ))));
HXLINE( 206)		this->arrowGroup->set_y(this->strumLine->y);
HXLINE( 208)		this->coolGradient->set_y((this->strumLineCam->y - (( (Float)(::flixel::FlxG_obj::height) ) / ( (Float)(2) ))));
HXLINE( 209)		this->coolGrid->set_y((this->strumLineCam->y - (( (Float)(::flixel::FlxG_obj::height) ) / ( (Float)(2) ))));
HXLINE( 211)		this->super::update(elapsed);
HXLINE( 214)		bool _hx_tmp1;
HXDLIN( 214)		bool _hx_tmp2;
HXDLIN( 214)		bool _hx_tmp3;
HXDLIN( 214)		if ((::flixel::FlxG_obj::mouse->x > this->fullGrid->x)) {
HXLINE( 215)			int _hx_tmp = ::flixel::FlxG_obj::mouse->x;
HXDLIN( 215)			Float _hx_tmp1 = this->fullGrid->x;
HXLINE( 214)			_hx_tmp3 = (_hx_tmp < (_hx_tmp1 + this->fullGrid->get_width()));
            		}
            		else {
HXLINE( 214)			_hx_tmp3 = false;
            		}
HXDLIN( 214)		if (_hx_tmp3) {
HXLINE( 214)			_hx_tmp2 = (::flixel::FlxG_obj::mouse->y > 0);
            		}
            		else {
HXLINE( 214)			_hx_tmp2 = false;
            		}
HXDLIN( 214)		if (_hx_tmp2) {
HXLINE( 217)			int _hx_tmp = ::flixel::FlxG_obj::mouse->y;
HXLINE( 214)			_hx_tmp1 = (_hx_tmp < this->getYfromStrum(this->songMusic->_length));
            		}
            		else {
HXLINE( 214)			_hx_tmp1 = false;
            		}
HXDLIN( 214)		if (_hx_tmp1) {
HXLINE( 219)			Float fakeMouseX = (( (Float)(::flixel::FlxG_obj::mouse->x) ) - this->fullGrid->x);
HXLINE( 220)			this->dummyArrow->set_x(((::Math_obj::floor((fakeMouseX / ( (Float)(::meta::state::charting::ChartingState_obj::gridSize) ))) * ::meta::state::charting::ChartingState_obj::gridSize) + this->fullGrid->x));
HXLINE( 221)			 ::flixel::input::keyboard::FlxKeyList _this = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN( 221)			if (_this->keyManager->checkStatus(16,_this->status)) {
HXLINE( 222)				this->dummyArrow->set_y(( (Float)(::flixel::FlxG_obj::mouse->y) ));
            			}
            			else {
HXLINE( 224)				this->dummyArrow->set_y(( (Float)((::Math_obj::floor((( (Float)(::flixel::FlxG_obj::mouse->y) ) / ( (Float)(::meta::state::charting::ChartingState_obj::gridSize) ))) * ::meta::state::charting::ChartingState_obj::gridSize)) ));
            			}
HXLINE( 227)			if ((::flixel::FlxG_obj::mouse->_leftButton->current == 2)) {
HXLINE( 229)				if (!(::flixel::FlxG_obj::mouse->overlaps(this->curRenderedNotes,null()))) {
HXLINE( 232)					Float noteStrum = this->getStrumTime(this->dummyArrow->y);
HXLINE( 234)					int notesSection = ::Math_obj::floor((noteStrum / (::meta::data::Conductor_obj::stepCrochet * ( (Float)(16) ))));
HXLINE( 235)					int noteData = this->adjustSide(::Math_obj::floor(((this->dummyArrow->x - this->fullGrid->x) / ( (Float)(::meta::state::charting::ChartingState_obj::gridSize) ))),( (bool)( ::Dynamic(this->_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(notesSection)->__Field(HX_("mustHitSection",3b,5f,87,62),::hx::paccDynamic)) ));
HXLINE( 236)					int noteSus = 0;
HXLINE( 241)					this->generateChartNote(noteData,noteStrum,( (Float)(noteSus) ),( (Float)(0) ),notesSection);
            				}
            				else {
            					HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::meta::state::charting::ChartingState,_gthis) HXARGC(1)
            					void _hx_run( ::gameObjects::userInterface::notes::Note note){
            						HX_STACKFRAME(&_hx_pos_7b00649c1d13f94d_250_update)
HXLINE( 250)						if (::flixel::FlxG_obj::mouse->overlaps(note,null())) {
HXLINE( 252)							 ::flixel::input::keyboard::FlxKeyList _this = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN( 252)							if (!(_this->keyManager->checkStatus(17,_this->status))) {
HXLINE( 265)								note->kill();
HXLINE( 266)								_gthis->curRenderedNotes->remove(note,null()).StaticCast<  ::gameObjects::userInterface::notes::Note >();
HXLINE( 267)								note->destroy();
            							}
            						}
            					}
            					HX_END_LOCAL_FUNC1((void))

HXLINE( 248)					this->curRenderedNotes->forEachAlive( ::Dynamic(new _hx_Closure_0(_gthis)),null());
            				}
            			}
            		}
HXLINE( 278)		 ::flixel::input::keyboard::FlxKeyList _this1 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 278)		if (_this1->keyManager->checkStatus(13,_this1->status)) {
HXLINE( 280)			::meta::state::charting::ChartingState_obj::songPosition = this->songMusic->_time;
HXLINE( 282)			::meta::state::PlayState_obj::SONG = this->_song;
HXLINE( 283)			::ForeverTools_obj::killMusic(::Array_obj< ::Dynamic>::__new(2)->init(0,this->songMusic)->init(1,this->vocals));
HXLINE( 284)			::Main_obj::switchState(::hx::ObjectPtr<OBJ_>(this), ::meta::state::PlayState_obj::__alloc( HX_CTX ,null(),null()));
            		}
            	}


void ChartingState_obj::stepHit(){
            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::meta::state::charting::ChartingState,_gthis) HXARGC(1)
            		void _hx_run( ::gameObjects::userInterface::notes::Note epicNote){
            			HX_STACKFRAME(&_hx_pos_7b00649c1d13f94d_292_stepHit)
HXLINE( 292)			bool _hx_tmp;
HXDLIN( 292)			Float epicNote1 = epicNote->y;
HXDLIN( 292)			Float _hx_tmp1 = (_gthis->strumLineCam->y - (( (Float)(::flixel::FlxG_obj::height) ) / ( (Float)(2) )));
HXDLIN( 292)			if (!((epicNote1 > (_hx_tmp1 - epicNote->get_height())))) {
HXLINE( 292)				_hx_tmp = (epicNote->y < (_gthis->strumLineCam->y + (( (Float)(::flixel::FlxG_obj::height) ) / ( (Float)(2) ))));
            			}
            			else {
HXLINE( 292)				_hx_tmp = true;
            			}
HXDLIN( 292)			if (_hx_tmp) {
HXLINE( 295)				epicNote->set_alive(true);
HXLINE( 296)				epicNote->set_visible(true);
HXLINE( 298)				bool _hx_tmp;
HXDLIN( 298)				if ((::Math_obj::floor((::meta::data::Conductor_obj::songPosition / ::meta::data::Conductor_obj::stepCrochet)) == ::Math_obj::floor((epicNote->strumTime / ::meta::data::Conductor_obj::stepCrochet)))) {
HXLINE( 298)					_hx_tmp = !(_gthis->hitSoundsPlayed->contains(epicNote));
            				}
            				else {
HXLINE( 298)					_hx_tmp = false;
            				}
HXDLIN( 298)				if (_hx_tmp) {
HXLINE( 301)					_gthis->hitSoundsPlayed->push(epicNote);
            				}
            			}
            			else {
HXLINE( 304)				epicNote->set_alive(false);
HXLINE( 305)				epicNote->set_visible(false);
            			}
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_STACKFRAME(&_hx_pos_7b00649c1d13f94d_288_stepHit)
HXDLIN( 288)		 ::meta::state::charting::ChartingState _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE( 290)		this->curRenderedNotes->forEach( ::Dynamic(new _hx_Closure_0(_gthis)),null());
HXLINE( 309)		this->super::stepHit();
            	}


Float ChartingState_obj::getStrumTime(Float yPos){
            	HX_STACKFRAME(&_hx_pos_7b00649c1d13f94d_314_getStrumTime)
HXDLIN( 314)		return ::flixel::math::FlxMath_obj::remapToRange(yPos,( (Float)(0) ),((this->songMusic->_length / ::meta::data::Conductor_obj::stepCrochet) * ( (Float)(::meta::state::charting::ChartingState_obj::gridSize) )),( (Float)(0) ),this->songMusic->_length);
            	}


HX_DEFINE_DYNAMIC_FUNC1(ChartingState_obj,getStrumTime,return )

Float ChartingState_obj::getYfromStrum(Float strumTime){
            	HX_STACKFRAME(&_hx_pos_7b00649c1d13f94d_319_getYfromStrum)
HXDLIN( 319)		return ::flixel::math::FlxMath_obj::remapToRange(strumTime,( (Float)(0) ),this->songMusic->_length,( (Float)(0) ),((this->songMusic->_length / ::meta::data::Conductor_obj::stepCrochet) * ( (Float)(::meta::state::charting::ChartingState_obj::gridSize) )));
            	}


HX_DEFINE_DYNAMIC_FUNC1(ChartingState_obj,getYfromStrum,return )

void ChartingState_obj::generateGrid(){
            	HX_GC_STACKFRAME(&_hx_pos_7b00649c1d13f94d_325_generateGrid)
HXLINE( 327)		 ::flixel::FlxSprite base = ::flixel::addons::display::FlxGridOverlay_obj::create(::meta::state::charting::ChartingState_obj::gridSize,::meta::state::charting::ChartingState_obj::gridSize,(::meta::state::charting::ChartingState_obj::gridSize * 2),(::meta::state::charting::ChartingState_obj::gridSize * 2),true,-1,-16777216);
HXLINE( 328)		this->fullGrid =  ::flixel::addons::display::FlxTiledSprite_obj::__alloc( HX_CTX ,null(),( (Float)((::meta::state::charting::ChartingState_obj::gridSize * this->keysTotal)) ),( (Float)(::meta::state::charting::ChartingState_obj::gridSize) ),null(),null());
HXLINE( 330)		Float newAlpha = ((Float)0.10196078431372549);
HXLINE( 331)		 ::openfl::display::BitmapData base1 = base->graphic->bitmap;
HXDLIN( 331)		 ::openfl::geom::Rectangle base2 = base->graphic->bitmap->rect;
HXDLIN( 331)		base1->colorTransform(base2, ::openfl::geom::ColorTransform_obj::__alloc( HX_CTX ,1,1,1,newAlpha,null(),null(),null(),null()));
HXLINE( 332)		this->fullGrid->loadGraphic(base->graphic,null(),null(),null(),null(),null());
HXLINE( 333)		this->fullGrid->screenCenter(::flixel::util::FlxAxes_obj::X_dyn());
HXLINE( 336)		this->fullGrid->set_height(((this->songMusic->_length / ::meta::data::Conductor_obj::stepCrochet) * ( (Float)(::meta::state::charting::ChartingState_obj::gridSize) )));
HXLINE( 338)		this->add(this->fullGrid);
            	}


HX_DEFINE_DYNAMIC_FUNC0(ChartingState_obj,generateGrid,(void))

void ChartingState_obj::regenerateSection(int section,Float placement){
            	HX_GC_STACKFRAME(&_hx_pos_7b00649c1d13f94d_346_regenerateSection)
HXLINE( 350)		 ::flixel::FlxSprite sectionLine =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,(((( (Float)(::flixel::FlxG_obj::width) ) / ( (Float)(2) )) - (( (Float)(::meta::state::charting::ChartingState_obj::gridSize) ) * (( (Float)(this->keysTotal) ) / ( (Float)(2) )))) - (( (Float)(this->extraSize) ) / ( (Float)(2) ))),placement,null());
HXLINE( 351)		sectionLine->set_frames(this->sectionLineGraphic->get_imageFrame());
HXLINE( 352)		sectionLine->set_alpha(((Float)0.34509803921568627));
HXLINE( 355)		Float sectionExtend = ( (Float)(0) );
HXLINE( 356)		if (( (bool)( ::Dynamic(this->_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(section)->__Field(HX_("mustHitSection",3b,5f,87,62),::hx::paccDynamic)) )) {
HXLINE( 357)			sectionExtend = (( (Float)(::meta::state::charting::ChartingState_obj::gridSize) ) * (( (Float)(this->keysTotal) ) / ( (Float)(2) )));
            		}
HXLINE( 359)		 ::flixel::FlxSprite sectionCamera =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,(((( (Float)(::flixel::FlxG_obj::width) ) / ( (Float)(2) )) - (( (Float)(::meta::state::charting::ChartingState_obj::gridSize) ) * (( (Float)(this->keysTotal) ) / ( (Float)(2) )))) + sectionExtend),placement,null());
HXLINE( 360)		sectionCamera->set_frames(this->sectionCameraGraphic->get_imageFrame());
HXLINE( 361)		sectionCamera->set_alpha(((Float)0.34509803921568627));
HXLINE( 362)		this->curRenderedSections->add(sectionCamera).StaticCast<  ::flixel::FlxBasic >();
HXLINE( 365)		{
HXLINE( 366)			{
HXLINE( 367)				Float sectionNumber = (sectionLine->y - ( (Float)(12) ));
HXDLIN( 367)				 ::flixel::text::FlxText sectionNumber1 =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,0,sectionNumber,0,::Std_obj::string(section),20,null());
HXLINE( 369)				Float sectionLine1 = sectionLine->x;
HXDLIN( 369)				sectionNumber1->set_x(((sectionLine1 - sectionNumber1->get_width()) - ( (Float)(5) )));
HXLINE( 373)				sectionNumber1->setFormat((HX_("assets/fonts/",37,ff,a5,9c) + HX_("vcr.ttf",9d,d2,a7,82)),24,-1,null(),null(),null(),null());
HXLINE( 374)				sectionNumber1->set_antialiasing(false);
HXLINE( 375)				sectionNumber1->set_alpha(sectionLine->alpha);
HXLINE( 376)				this->curRenderedSections->add(sectionNumber1).StaticCast<  ::flixel::FlxBasic >();
            			}
HXLINE( 366)			{
HXLINE( 367)				Float sectionNumber2 = (sectionLine->y - ( (Float)(12) ));
HXDLIN( 367)				 ::flixel::text::FlxText sectionNumber3 =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,0,sectionNumber2,0,::Std_obj::string(section),20,null());
HXLINE( 369)				Float sectionLine2 = sectionLine->x;
HXDLIN( 369)				sectionNumber3->set_x(((sectionLine2 - sectionNumber3->get_width()) - ( (Float)(5) )));
HXLINE( 371)				Float sectionLine3 = sectionLine->x;
HXDLIN( 371)				sectionNumber3->set_x(((sectionLine3 + sectionLine->get_width()) + 5));
HXLINE( 373)				sectionNumber3->setFormat((HX_("assets/fonts/",37,ff,a5,9c) + HX_("vcr.ttf",9d,d2,a7,82)),24,-1,null(),null(),null(),null());
HXLINE( 374)				sectionNumber3->set_antialiasing(false);
HXLINE( 375)				sectionNumber3->set_alpha(sectionLine->alpha);
HXLINE( 376)				this->curRenderedSections->add(sectionNumber3).StaticCast<  ::flixel::FlxBasic >();
            			}
            		}
HXLINE( 379)		{
HXLINE( 379)			int _g = 1;
HXDLIN( 379)			int _g1 = ::Std_obj::_hx_int((( (Float)( ::Dynamic(this->_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(section)->__Field(HX_("lengthInSteps",3c,ed,41,db),::hx::paccDynamic)) ) / ( (Float)(4) )));
HXDLIN( 379)			while((_g < _g1)){
HXLINE( 379)				_g = (_g + 1);
HXDLIN( 379)				int i = (_g - 1);
HXLINE( 382)				 ::flixel::FlxSprite sectionStep =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,(((( (Float)(::flixel::FlxG_obj::width) ) / ( (Float)(2) )) - (( (Float)(::meta::state::charting::ChartingState_obj::gridSize) ) * (( (Float)(this->keysTotal) ) / ( (Float)(2) )))) - (( (Float)(this->extraSize) ) / ( (Float)(2) ))),(placement + (i * (::meta::state::charting::ChartingState_obj::gridSize * 4))),null());
HXLINE( 384)				sectionStep->set_frames(this->sectionStepGraphic->get_imageFrame());
HXLINE( 385)				sectionStep->set_alpha(sectionLine->alpha);
HXLINE( 386)				this->curRenderedSections->add(sectionStep).StaticCast<  ::flixel::FlxBasic >();
            			}
            		}
HXLINE( 389)		this->curRenderedSections->add(sectionLine).StaticCast<  ::flixel::FlxBasic >();
            	}


HX_DEFINE_DYNAMIC_FUNC2(ChartingState_obj,regenerateSection,(void))

void ChartingState_obj::generateNotes(){
            	HX_STACKFRAME(&_hx_pos_7b00649c1d13f94d_395_generateNotes)
HXLINE( 397)		this->curRenderedNotes->clear();
HXLINE( 398)		this->curRenderedSustains->clear();
HXLINE( 401)		this->generateSection();
HXLINE( 402)		{
HXLINE( 402)			int _g = 0;
HXDLIN( 402)			int _g1 = ( (::Array< ::Dynamic>)(this->_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic)) )->length;
HXDLIN( 402)			while((_g < _g1)){
HXLINE( 402)				_g = (_g + 1);
HXDLIN( 402)				int section = (_g - 1);
HXLINE( 404)				this->sectionsMax = section;
HXLINE( 405)				this->regenerateSection(section,( (Float)(((16 * ::meta::state::charting::ChartingState_obj::gridSize) * section)) ));
HXLINE( 406)				{
HXLINE( 406)					int _g1 = 0;
HXDLIN( 406)					::cpp::VirtualArray _g2 = ( (::cpp::VirtualArray)( ::Dynamic(this->_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(section)->__Field(HX_("sectionNotes",1c,c8,a7,fe),::hx::paccDynamic)) );
HXDLIN( 406)					while((_g1 < _g2->get_length())){
HXLINE( 406)						 ::Dynamic i = _g2->__get(_g1);
HXDLIN( 406)						_g1 = (_g1 + 1);
HXLINE( 409)						int daNoteAlt = 0;
HXLINE( 410)						if (::hx::IsGreater( i->__Field(HX_("length",e6,94,07,9f),::hx::paccDynamic),2 )) {
HXLINE( 411)							daNoteAlt = ( (int)(i->__GetItem(3)) );
            						}
HXLINE( 412)						this->generateChartNote(( (int)(i->__GetItem(1)) ),( (Float)(i->__GetItem(0)) ),( (Float)(i->__GetItem(2)) ),( (Float)(daNoteAlt) ),section);
            					}
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(ChartingState_obj,generateNotes,(void))

void ChartingState_obj::generateSection(){
            	HX_STACKFRAME(&_hx_pos_7b00649c1d13f94d_422_generateSection)
HXLINE( 424)		this->sectionLineGraphic = ::flixel::FlxG_obj::bitmap->create(((::meta::state::charting::ChartingState_obj::gridSize * this->keysTotal) + this->extraSize),2,-1,null(),null());
HXLINE( 425)		 ::flixel::_hx_system::frontEnds::BitmapFrontEnd _hx_tmp = ::flixel::FlxG_obj::bitmap;
HXDLIN( 425)		int _hx_tmp1 = ::Std_obj::_hx_int((( (Float)(::meta::state::charting::ChartingState_obj::gridSize) ) * (( (Float)(this->keysTotal) ) / ( (Float)(2) ))));
HXDLIN( 425)		int _hx_tmp2 = (16 * ::meta::state::charting::ChartingState_obj::gridSize);
HXDLIN( 425)		int Alpha = 255;
HXDLIN( 425)		int color = ::flixel::util::_FlxColor::FlxColor_Impl__obj::_new(null());
HXDLIN( 425)		{
HXLINE( 425)			color = (color & -16711681);
HXDLIN( 425)			color = (color | 2818048);
            		}
HXDLIN( 425)		{
HXLINE( 425)			color = (color & -65281);
HXDLIN( 425)			color = (color | 29696);
            		}
HXDLIN( 425)		{
HXLINE( 425)			color = (color & -256);
HXDLIN( 425)			color = (color | 219);
            		}
HXDLIN( 425)		{
HXLINE( 425)			color = (color & 16777215);
HXDLIN( 425)			int color1;
HXDLIN( 425)			if ((Alpha > 255)) {
HXLINE( 425)				color1 = 255;
            			}
            			else {
HXLINE( 425)				if ((Alpha < 0)) {
HXLINE( 425)					color1 = 0;
            				}
            				else {
HXLINE( 425)					color1 = Alpha;
            				}
            			}
HXDLIN( 425)			color = (color | (color1 << 24));
            		}
HXDLIN( 425)		this->sectionCameraGraphic = _hx_tmp->create(_hx_tmp1,_hx_tmp2,color,null(),null());
HXLINE( 426)		this->sectionStepGraphic = ::flixel::FlxG_obj::bitmap->create(((::meta::state::charting::ChartingState_obj::gridSize * this->keysTotal) + this->extraSize),1,-1,null(),null());
            	}


HX_DEFINE_DYNAMIC_FUNC0(ChartingState_obj,generateSection,(void))

void ChartingState_obj::loadSong(::String daSong){
            		HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_0, ::meta::state::charting::ChartingState,_gthis,::String,daSong) HXARGC(0)
            		void _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_7b00649c1d13f94d_456_loadSong)
HXLINE( 457)			::ForeverTools_obj::killMusic(::Array_obj< ::Dynamic>::__new(2)->init(0,_gthis->songMusic)->init(1,_gthis->vocals));
HXLINE( 458)			_gthis->loadSong(daSong);
            		}
            		HX_END_LOCAL_FUNC0((void))

            	HX_GC_STACKFRAME(&_hx_pos_7b00649c1d13f94d_430_loadSong)
HXLINE( 429)		 ::meta::state::charting::ChartingState _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE( 431)		if (::hx::IsNotNull( this->songMusic )) {
HXLINE( 432)			 ::flixel::_hx_system::FlxSound _this = this->songMusic;
HXDLIN( 432)			_this->cleanup(_this->autoDestroy,true);
            		}
HXLINE( 434)		if (::hx::IsNotNull( this->vocals )) {
HXLINE( 435)			 ::flixel::_hx_system::FlxSound _this = this->vocals;
HXDLIN( 435)			_this->cleanup(_this->autoDestroy,true);
            		}
HXLINE( 437)		 ::flixel::_hx_system::FlxSound _hx_tmp =  ::flixel::_hx_system::FlxSound_obj::__alloc( HX_CTX );
HXDLIN( 437)		::String instPath = (((HX_("songs/",71,e7,88,2d) + daSong.toLowerCase()) + HX_("/Inst.",f9,6e,13,1c)) + HX_("ogg",4f,94,54,00));
HXDLIN( 437)		if (!(::sys::FileSystem_obj::exists(::Paths_obj::getPath(instPath,HX_("MUSIC",85,08,49,8e),null())))) {
HXLINE( 437)			instPath = (((HX_("songs/",71,e7,88,2d) + ::meta::CoolUtil_obj::swapSpaceDash(daSong.toLowerCase())) + HX_("/Inst.",f9,6e,13,1c)) + HX_("ogg",4f,94,54,00));
            		}
HXDLIN( 437)		this->songMusic = _hx_tmp->loadEmbedded(::openfl::media::Sound_obj::fromFile((HX_("./",41,28,00,00) + ::Paths_obj::getPath(instPath,HX_("MUSIC",85,08,49,8e),null()))),false,true,null());
HXLINE( 438)		if (( (bool)(this->_song->__Field(HX_("needsVoices",be,05,e9,0d),::hx::paccDynamic)) )) {
HXLINE( 439)			 ::flixel::_hx_system::FlxSound _hx_tmp =  ::flixel::_hx_system::FlxSound_obj::__alloc( HX_CTX );
HXDLIN( 439)			::String voicePath = (((HX_("songs/",71,e7,88,2d) + daSong.toLowerCase()) + HX_("/Voices.",1e,f6,e5,90)) + HX_("ogg",4f,94,54,00));
HXDLIN( 439)			if (!(::sys::FileSystem_obj::exists(::Paths_obj::getPath(voicePath,HX_("MUSIC",85,08,49,8e),null())))) {
HXLINE( 439)				voicePath = (((HX_("songs/",71,e7,88,2d) + ::meta::CoolUtil_obj::swapSpaceDash(daSong.toLowerCase())) + HX_("/Voices.",1e,f6,e5,90)) + HX_("ogg",4f,94,54,00));
            			}
HXDLIN( 439)			this->vocals = _hx_tmp->loadEmbedded(::openfl::media::Sound_obj::fromFile((HX_("./",41,28,00,00) + ::Paths_obj::getPath(voicePath,HX_("MUSIC",85,08,49,8e),null()))),false,true,null());
            		}
            		else {
HXLINE( 441)			this->vocals =  ::flixel::_hx_system::FlxSound_obj::__alloc( HX_CTX );
            		}
HXLINE( 442)		::flixel::FlxG_obj::sound->list->add(this->songMusic).StaticCast<  ::flixel::_hx_system::FlxSound >();
HXLINE( 443)		::flixel::FlxG_obj::sound->list->add(this->vocals).StaticCast<  ::flixel::_hx_system::FlxSound >();
HXLINE( 445)		this->songMusic->play(null(),null(),null());
HXLINE( 446)		this->vocals->play(null(),null(),null());
HXLINE( 448)		if (::hx::IsEq( ::meta::state::charting::ChartingState_obj::curSong,this->_song )) {
HXLINE( 449)			this->songMusic->set_time(::meta::state::charting::ChartingState_obj::songPosition);
            		}
HXLINE( 450)		::meta::state::charting::ChartingState_obj::curSong = this->_song;
HXLINE( 451)		::meta::state::charting::ChartingState_obj::songPosition = ( (Float)(0) );
HXLINE( 453)		this->pauseMusic();
HXLINE( 455)		this->songMusic->onComplete =  ::Dynamic(new _hx_Closure_0(_gthis,daSong));
            	}


HX_DEFINE_DYNAMIC_FUNC1(ChartingState_obj,loadSong,(void))

void ChartingState_obj::generateChartNote(int daNoteInfo,Float daStrumTime,Float daSus,Float daNoteAlt,int noteSection){
            	HX_STACKFRAME(&_hx_pos_7b00649c1d13f94d_464_generateChartNote)
HXLINE( 465)		 ::gameObjects::userInterface::notes::Note note = ::ForeverAssets_obj::generateArrow(::meta::state::PlayState_obj::assetModifier,daStrumTime,::hx::Mod(daNoteInfo,4),0,daNoteAlt,false,null());
HXLINE( 467)		note->rawNoteData = daNoteInfo;
HXLINE( 468)		note->sustainLength = daSus;
HXLINE( 469)		note->setGraphicSize(::meta::state::charting::ChartingState_obj::gridSize,::meta::state::charting::ChartingState_obj::gridSize);
HXLINE( 470)		note->updateHitbox();
HXLINE( 472)		note->screenCenter(::flixel::util::FlxAxes_obj::X_dyn());
HXLINE( 473)		{
HXLINE( 473)			 ::gameObjects::userInterface::notes::Note _g = note;
HXDLIN( 473)			_g->set_x((_g->x - ((( (Float)(::meta::state::charting::ChartingState_obj::gridSize) ) * (( (Float)(this->keysTotal) ) / ( (Float)(2) ))) - (( (Float)(::meta::state::charting::ChartingState_obj::gridSize) ) / ( (Float)(2) )))));
            		}
HXLINE( 474)		{
HXLINE( 474)			 ::gameObjects::userInterface::notes::Note _g1 = note;
HXDLIN( 474)			Float _g2 = _g1->x;
HXDLIN( 474)			int _hx_tmp = this->adjustSide(daNoteInfo,( (bool)( ::Dynamic(this->_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(noteSection)->__Field(HX_("mustHitSection",3b,5f,87,62),::hx::paccDynamic)) ));
HXDLIN( 474)			_g1->set_x((_g2 + ::Math_obj::floor(( (Float)((_hx_tmp * ::meta::state::charting::ChartingState_obj::gridSize)) ))));
            		}
HXLINE( 476)		note->set_y(( (Float)(::Math_obj::floor(this->getYfromStrum(daStrumTime))) ));
HXLINE( 478)		this->curRenderedNotes->add(note).StaticCast<  ::gameObjects::userInterface::notes::Note >();
HXLINE( 479)		this->generateSustain(daStrumTime,daNoteInfo,daSus,daNoteAlt,note);
            	}


HX_DEFINE_DYNAMIC_FUNC5(ChartingState_obj,generateChartNote,(void))

void ChartingState_obj::generateSustain(::hx::Null< Float >  __o_daStrumTime,::hx::Null< int >  __o_daNoteInfo,::hx::Null< Float >  __o_daSus,::hx::Null< Float >  __o_daNoteAlt, ::gameObjects::userInterface::notes::Note note){
            		Float daStrumTime = __o_daStrumTime.Default(0);
            		int daNoteInfo = __o_daNoteInfo.Default(0);
            		Float daSus = __o_daSus.Default(0);
            		Float daNoteAlt = __o_daNoteAlt.Default(0);
            	HX_STACKFRAME(&_hx_pos_7b00649c1d13f94d_483_generateSustain)
            	}


HX_DEFINE_DYNAMIC_FUNC5(ChartingState_obj,generateSustain,(void))

void ChartingState_obj::generateBackground(){
            	HX_GC_STACKFRAME(&_hx_pos_7b00649c1d13f94d_522_generateBackground)
HXLINE( 523)		this->coolGrid =  ::flixel::addons::display::FlxBackdrop_obj::__alloc( HX_CTX ,null(),1,1,true,true,1,1);
HXLINE( 524)		 ::flixel::addons::display::FlxBackdrop _hx_tmp = this->coolGrid;
HXDLIN( 524)		::String library = null();
HXDLIN( 524)		_hx_tmp->loadGraphic(::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("UI/forever/base/chart editor/grid",eb,b6,24,60)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),library),null(),null(),null(),null(),null());
HXLINE( 525)		this->coolGrid->set_alpha(((Float)0.12549019607843137));
HXLINE( 526)		this->add(this->coolGrid);
HXLINE( 529)		int _hx_tmp1 = ::flixel::FlxG_obj::width;
HXDLIN( 529)		int _hx_tmp2 = ::flixel::FlxG_obj::height;
HXLINE( 530)		int color = ::flixel::util::_FlxColor::FlxColor_Impl__obj::_new(null());
HXDLIN( 530)		{
HXLINE( 530)			color = (color & -16711681);
HXDLIN( 530)			color = (color | 12320768);
            		}
HXDLIN( 530)		{
HXLINE( 530)			color = (color & -65281);
HXDLIN( 530)			color = (color | 40448);
            		}
HXDLIN( 530)		{
HXLINE( 530)			color = (color & -256);
HXDLIN( 530)			color = (color | 255);
            		}
HXDLIN( 530)		{
HXLINE( 530)			color = (color & 16777215);
HXDLIN( 530)			color = (color | -939524096);
            		}
HXDLIN( 530)		int color1 = ::flixel::util::_FlxColor::FlxColor_Impl__obj::_new(null());
HXDLIN( 530)		{
HXLINE( 530)			color1 = (color1 & -16711681);
HXDLIN( 530)			color1 = (color1 | 5242880);
            		}
HXDLIN( 530)		{
HXLINE( 530)			color1 = (color1 & -65281);
HXDLIN( 530)			color1 = (color1 | 3072);
            		}
HXDLIN( 530)		{
HXLINE( 530)			color1 = (color1 & -256);
HXDLIN( 530)			color1 = (color1 | 108);
            		}
HXDLIN( 530)		{
HXLINE( 530)			color1 = (color1 & 16777215);
HXDLIN( 530)			color1 = (color1 | -16777216);
            		}
HXLINE( 529)		this->coolGradient = ::flixel::util::FlxGradient_obj::createGradientFlxSprite(_hx_tmp1,_hx_tmp2,::flixel::util::_FlxColor::FlxColor_Impl__obj::gradient(color,color1,16,null()),null(),null(),null());
HXLINE( 531)		this->coolGradient->set_alpha(((Float)0.12549019607843137));
HXLINE( 532)		this->add(this->coolGradient);
            	}


HX_DEFINE_DYNAMIC_FUNC0(ChartingState_obj,generateBackground,(void))

int ChartingState_obj::adjustSide(int noteData,bool sectionTemp){
            	HX_STACKFRAME(&_hx_pos_7b00649c1d13f94d_537_adjustSide)
HXDLIN( 537)		if (sectionTemp) {
HXDLIN( 537)			return ::hx::Mod((noteData + 4),8);
            		}
            		else {
HXDLIN( 537)			return noteData;
            		}
HXDLIN( 537)		return 0;
            	}


HX_DEFINE_DYNAMIC_FUNC2(ChartingState_obj,adjustSide,return )

void ChartingState_obj::pauseMusic(){
            	HX_STACKFRAME(&_hx_pos_7b00649c1d13f94d_541_pauseMusic)
HXLINE( 542)		this->songMusic->set_time(::Math_obj::max(this->songMusic->_time,( (Float)(0) )));
HXLINE( 543)		this->songMusic->set_time(::Math_obj::min(this->songMusic->_time,this->songMusic->_length));
HXLINE( 545)		this->resyncVocals();
HXLINE( 546)		this->songMusic->pause();
HXLINE( 547)		this->vocals->pause();
            	}


HX_DEFINE_DYNAMIC_FUNC0(ChartingState_obj,pauseMusic,(void))

void ChartingState_obj::resyncVocals(){
            	HX_STACKFRAME(&_hx_pos_7b00649c1d13f94d_551_resyncVocals)
HXLINE( 552)		this->vocals->pause();
HXLINE( 554)		this->songMusic->play(null(),null(),null());
HXLINE( 555)		::meta::data::Conductor_obj::songPosition = this->songMusic->_time;
HXLINE( 556)		this->vocals->set_time(::meta::data::Conductor_obj::songPosition);
HXLINE( 557)		this->vocals->play(null(),null(),null());
            	}


HX_DEFINE_DYNAMIC_FUNC0(ChartingState_obj,resyncVocals,(void))

Float ChartingState_obj::songPosition;

 ::Dynamic ChartingState_obj::curSong;

int ChartingState_obj::gridSize;


::hx::ObjectPtr< ChartingState_obj > ChartingState_obj::__new( ::flixel::addons::transition::TransitionData TransIn, ::flixel::addons::transition::TransitionData TransOut) {
	::hx::ObjectPtr< ChartingState_obj > __this = new ChartingState_obj();
	__this->__construct(TransIn,TransOut);
	return __this;
}

::hx::ObjectPtr< ChartingState_obj > ChartingState_obj::__alloc(::hx::Ctx *_hx_ctx, ::flixel::addons::transition::TransitionData TransIn, ::flixel::addons::transition::TransitionData TransOut) {
	ChartingState_obj *__this = (ChartingState_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(ChartingState_obj), true, "meta.state.charting.ChartingState"));
	*(void **)__this = ChartingState_obj::_hx_vtable;
	__this->__construct(TransIn,TransOut);
	return __this;
}

ChartingState_obj::ChartingState_obj()
{
}

void ChartingState_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(ChartingState);
	HX_MARK_MEMBER_NAME(_song,"_song");
	HX_MARK_MEMBER_NAME(songMusic,"songMusic");
	HX_MARK_MEMBER_NAME(vocals,"vocals");
	HX_MARK_MEMBER_NAME(keysTotal,"keysTotal");
	HX_MARK_MEMBER_NAME(strumLine,"strumLine");
	HX_MARK_MEMBER_NAME(camHUD,"camHUD");
	HX_MARK_MEMBER_NAME(camGame,"camGame");
	HX_MARK_MEMBER_NAME(strumLineCam,"strumLineCam");
	HX_MARK_MEMBER_NAME(dummyArrow,"dummyArrow");
	HX_MARK_MEMBER_NAME(curRenderedNotes,"curRenderedNotes");
	HX_MARK_MEMBER_NAME(curRenderedSustains,"curRenderedSustains");
	HX_MARK_MEMBER_NAME(curRenderedSections,"curRenderedSections");
	HX_MARK_MEMBER_NAME(arrowGroup,"arrowGroup");
	HX_MARK_MEMBER_NAME(hitSoundsPlayed,"hitSoundsPlayed");
	HX_MARK_MEMBER_NAME(fullGrid,"fullGrid");
	HX_MARK_MEMBER_NAME(sectionLineGraphic,"sectionLineGraphic");
	HX_MARK_MEMBER_NAME(sectionCameraGraphic,"sectionCameraGraphic");
	HX_MARK_MEMBER_NAME(sectionStepGraphic,"sectionStepGraphic");
	HX_MARK_MEMBER_NAME(sectionsMax,"sectionsMax");
	HX_MARK_MEMBER_NAME(extraSize,"extraSize");
	HX_MARK_MEMBER_NAME(coolGrid,"coolGrid");
	HX_MARK_MEMBER_NAME(coolGradient,"coolGradient");
	 ::flixel::addons::ui::FlxUIState_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void ChartingState_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(_song,"_song");
	HX_VISIT_MEMBER_NAME(songMusic,"songMusic");
	HX_VISIT_MEMBER_NAME(vocals,"vocals");
	HX_VISIT_MEMBER_NAME(keysTotal,"keysTotal");
	HX_VISIT_MEMBER_NAME(strumLine,"strumLine");
	HX_VISIT_MEMBER_NAME(camHUD,"camHUD");
	HX_VISIT_MEMBER_NAME(camGame,"camGame");
	HX_VISIT_MEMBER_NAME(strumLineCam,"strumLineCam");
	HX_VISIT_MEMBER_NAME(dummyArrow,"dummyArrow");
	HX_VISIT_MEMBER_NAME(curRenderedNotes,"curRenderedNotes");
	HX_VISIT_MEMBER_NAME(curRenderedSustains,"curRenderedSustains");
	HX_VISIT_MEMBER_NAME(curRenderedSections,"curRenderedSections");
	HX_VISIT_MEMBER_NAME(arrowGroup,"arrowGroup");
	HX_VISIT_MEMBER_NAME(hitSoundsPlayed,"hitSoundsPlayed");
	HX_VISIT_MEMBER_NAME(fullGrid,"fullGrid");
	HX_VISIT_MEMBER_NAME(sectionLineGraphic,"sectionLineGraphic");
	HX_VISIT_MEMBER_NAME(sectionCameraGraphic,"sectionCameraGraphic");
	HX_VISIT_MEMBER_NAME(sectionStepGraphic,"sectionStepGraphic");
	HX_VISIT_MEMBER_NAME(sectionsMax,"sectionsMax");
	HX_VISIT_MEMBER_NAME(extraSize,"extraSize");
	HX_VISIT_MEMBER_NAME(coolGrid,"coolGrid");
	HX_VISIT_MEMBER_NAME(coolGradient,"coolGradient");
	 ::flixel::addons::ui::FlxUIState_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val ChartingState_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"_song") ) { return ::hx::Val( _song ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"vocals") ) { return ::hx::Val( vocals ); }
		if (HX_FIELD_EQ(inName,"camHUD") ) { return ::hx::Val( camHUD ); }
		if (HX_FIELD_EQ(inName,"create") ) { return ::hx::Val( create_dyn() ); }
		if (HX_FIELD_EQ(inName,"update") ) { return ::hx::Val( update_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"camGame") ) { return ::hx::Val( camGame ); }
		if (HX_FIELD_EQ(inName,"stepHit") ) { return ::hx::Val( stepHit_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"fullGrid") ) { return ::hx::Val( fullGrid ); }
		if (HX_FIELD_EQ(inName,"loadSong") ) { return ::hx::Val( loadSong_dyn() ); }
		if (HX_FIELD_EQ(inName,"coolGrid") ) { return ::hx::Val( coolGrid ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"songMusic") ) { return ::hx::Val( songMusic ); }
		if (HX_FIELD_EQ(inName,"keysTotal") ) { return ::hx::Val( keysTotal ); }
		if (HX_FIELD_EQ(inName,"strumLine") ) { return ::hx::Val( strumLine ); }
		if (HX_FIELD_EQ(inName,"extraSize") ) { return ::hx::Val( extraSize ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"dummyArrow") ) { return ::hx::Val( dummyArrow ); }
		if (HX_FIELD_EQ(inName,"arrowGroup") ) { return ::hx::Val( arrowGroup ); }
		if (HX_FIELD_EQ(inName,"adjustSide") ) { return ::hx::Val( adjustSide_dyn() ); }
		if (HX_FIELD_EQ(inName,"pauseMusic") ) { return ::hx::Val( pauseMusic_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"sectionsMax") ) { return ::hx::Val( sectionsMax ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"strumLineCam") ) { return ::hx::Val( strumLineCam ); }
		if (HX_FIELD_EQ(inName,"getStrumTime") ) { return ::hx::Val( getStrumTime_dyn() ); }
		if (HX_FIELD_EQ(inName,"generateGrid") ) { return ::hx::Val( generateGrid_dyn() ); }
		if (HX_FIELD_EQ(inName,"coolGradient") ) { return ::hx::Val( coolGradient ); }
		if (HX_FIELD_EQ(inName,"resyncVocals") ) { return ::hx::Val( resyncVocals_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"getYfromStrum") ) { return ::hx::Val( getYfromStrum_dyn() ); }
		if (HX_FIELD_EQ(inName,"generateNotes") ) { return ::hx::Val( generateNotes_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"hitSoundsPlayed") ) { return ::hx::Val( hitSoundsPlayed ); }
		if (HX_FIELD_EQ(inName,"generateSection") ) { return ::hx::Val( generateSection_dyn() ); }
		if (HX_FIELD_EQ(inName,"generateSustain") ) { return ::hx::Val( generateSustain_dyn() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"curRenderedNotes") ) { return ::hx::Val( curRenderedNotes ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"regenerateSection") ) { return ::hx::Val( regenerateSection_dyn() ); }
		if (HX_FIELD_EQ(inName,"generateChartNote") ) { return ::hx::Val( generateChartNote_dyn() ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"sectionLineGraphic") ) { return ::hx::Val( sectionLineGraphic ); }
		if (HX_FIELD_EQ(inName,"sectionStepGraphic") ) { return ::hx::Val( sectionStepGraphic ); }
		if (HX_FIELD_EQ(inName,"generateBackground") ) { return ::hx::Val( generateBackground_dyn() ); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"curRenderedSustains") ) { return ::hx::Val( curRenderedSustains ); }
		if (HX_FIELD_EQ(inName,"curRenderedSections") ) { return ::hx::Val( curRenderedSections ); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"sectionCameraGraphic") ) { return ::hx::Val( sectionCameraGraphic ); }
	}
	return super::__Field(inName,inCallProp);
}

bool ChartingState_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"curSong") ) { outValue = ( curSong ); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"gridSize") ) { outValue = ( gridSize ); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"songPosition") ) { outValue = ( songPosition ); return true; }
	}
	return false;
}

::hx::Val ChartingState_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"_song") ) { _song=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"vocals") ) { vocals=inValue.Cast<  ::flixel::_hx_system::FlxSound >(); return inValue; }
		if (HX_FIELD_EQ(inName,"camHUD") ) { camHUD=inValue.Cast<  ::flixel::FlxCamera >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"camGame") ) { camGame=inValue.Cast<  ::flixel::FlxCamera >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"fullGrid") ) { fullGrid=inValue.Cast<  ::flixel::addons::display::FlxTiledSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"coolGrid") ) { coolGrid=inValue.Cast<  ::flixel::addons::display::FlxBackdrop >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"songMusic") ) { songMusic=inValue.Cast<  ::flixel::_hx_system::FlxSound >(); return inValue; }
		if (HX_FIELD_EQ(inName,"keysTotal") ) { keysTotal=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"strumLine") ) { strumLine=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"extraSize") ) { extraSize=inValue.Cast< int >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"dummyArrow") ) { dummyArrow=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"arrowGroup") ) { arrowGroup=inValue.Cast<  ::flixel::group::FlxTypedSpriteGroup >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"sectionsMax") ) { sectionsMax=inValue.Cast< int >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"strumLineCam") ) { strumLineCam=inValue.Cast<  ::flixel::FlxObject >(); return inValue; }
		if (HX_FIELD_EQ(inName,"coolGradient") ) { coolGradient=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"hitSoundsPlayed") ) { hitSoundsPlayed=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"curRenderedNotes") ) { curRenderedNotes=inValue.Cast<  ::flixel::group::FlxTypedGroup >(); return inValue; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"sectionLineGraphic") ) { sectionLineGraphic=inValue.Cast<  ::flixel::graphics::FlxGraphic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"sectionStepGraphic") ) { sectionStepGraphic=inValue.Cast<  ::flixel::graphics::FlxGraphic >(); return inValue; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"curRenderedSustains") ) { curRenderedSustains=inValue.Cast<  ::flixel::group::FlxTypedGroup >(); return inValue; }
		if (HX_FIELD_EQ(inName,"curRenderedSections") ) { curRenderedSections=inValue.Cast<  ::flixel::group::FlxTypedGroup >(); return inValue; }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"sectionCameraGraphic") ) { sectionCameraGraphic=inValue.Cast<  ::flixel::graphics::FlxGraphic >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool ChartingState_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"curSong") ) { curSong=ioValue.Cast<  ::Dynamic >(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"gridSize") ) { gridSize=ioValue.Cast< int >(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"songPosition") ) { songPosition=ioValue.Cast< Float >(); return true; }
	}
	return false;
}

void ChartingState_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("_song",b4,3f,69,ff));
	outFields->push(HX_("songMusic",90,18,d5,3f));
	outFields->push(HX_("vocals",5e,10,51,59));
	outFields->push(HX_("keysTotal",30,4d,dd,05));
	outFields->push(HX_("strumLine",dd,79,d7,ee));
	outFields->push(HX_("camHUD",e8,2b,76,b7));
	outFields->push(HX_("camGame",a1,47,50,cf));
	outFields->push(HX_("strumLineCam",32,7a,a1,3e));
	outFields->push(HX_("dummyArrow",81,8a,75,ae));
	outFields->push(HX_("curRenderedNotes",2c,e1,fb,dc));
	outFields->push(HX_("curRenderedSustains",65,b2,8a,50));
	outFields->push(HX_("curRenderedSections",e3,c2,cb,56));
	outFields->push(HX_("arrowGroup",b6,90,97,0d));
	outFields->push(HX_("hitSoundsPlayed",2a,36,f4,23));
	outFields->push(HX_("fullGrid",f5,5f,7f,58));
	outFields->push(HX_("sectionLineGraphic",2f,d3,16,65));
	outFields->push(HX_("sectionCameraGraphic",5e,49,c9,26));
	outFields->push(HX_("sectionStepGraphic",d7,1e,0d,39));
	outFields->push(HX_("sectionsMax",56,a8,bf,51));
	outFields->push(HX_("extraSize",71,ef,57,86));
	outFields->push(HX_("coolGrid",2f,56,79,e6));
	outFields->push(HX_("coolGradient",d9,21,8b,af));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo ChartingState_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(ChartingState_obj,_song),HX_("_song",b4,3f,69,ff)},
	{::hx::fsObject /*  ::flixel::_hx_system::FlxSound */ ,(int)offsetof(ChartingState_obj,songMusic),HX_("songMusic",90,18,d5,3f)},
	{::hx::fsObject /*  ::flixel::_hx_system::FlxSound */ ,(int)offsetof(ChartingState_obj,vocals),HX_("vocals",5e,10,51,59)},
	{::hx::fsInt,(int)offsetof(ChartingState_obj,keysTotal),HX_("keysTotal",30,4d,dd,05)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(ChartingState_obj,strumLine),HX_("strumLine",dd,79,d7,ee)},
	{::hx::fsObject /*  ::flixel::FlxCamera */ ,(int)offsetof(ChartingState_obj,camHUD),HX_("camHUD",e8,2b,76,b7)},
	{::hx::fsObject /*  ::flixel::FlxCamera */ ,(int)offsetof(ChartingState_obj,camGame),HX_("camGame",a1,47,50,cf)},
	{::hx::fsObject /*  ::flixel::FlxObject */ ,(int)offsetof(ChartingState_obj,strumLineCam),HX_("strumLineCam",32,7a,a1,3e)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(ChartingState_obj,dummyArrow),HX_("dummyArrow",81,8a,75,ae)},
	{::hx::fsObject /*  ::flixel::group::FlxTypedGroup */ ,(int)offsetof(ChartingState_obj,curRenderedNotes),HX_("curRenderedNotes",2c,e1,fb,dc)},
	{::hx::fsObject /*  ::flixel::group::FlxTypedGroup */ ,(int)offsetof(ChartingState_obj,curRenderedSustains),HX_("curRenderedSustains",65,b2,8a,50)},
	{::hx::fsObject /*  ::flixel::group::FlxTypedGroup */ ,(int)offsetof(ChartingState_obj,curRenderedSections),HX_("curRenderedSections",e3,c2,cb,56)},
	{::hx::fsObject /*  ::flixel::group::FlxTypedSpriteGroup */ ,(int)offsetof(ChartingState_obj,arrowGroup),HX_("arrowGroup",b6,90,97,0d)},
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(ChartingState_obj,hitSoundsPlayed),HX_("hitSoundsPlayed",2a,36,f4,23)},
	{::hx::fsObject /*  ::flixel::addons::display::FlxTiledSprite */ ,(int)offsetof(ChartingState_obj,fullGrid),HX_("fullGrid",f5,5f,7f,58)},
	{::hx::fsObject /*  ::flixel::graphics::FlxGraphic */ ,(int)offsetof(ChartingState_obj,sectionLineGraphic),HX_("sectionLineGraphic",2f,d3,16,65)},
	{::hx::fsObject /*  ::flixel::graphics::FlxGraphic */ ,(int)offsetof(ChartingState_obj,sectionCameraGraphic),HX_("sectionCameraGraphic",5e,49,c9,26)},
	{::hx::fsObject /*  ::flixel::graphics::FlxGraphic */ ,(int)offsetof(ChartingState_obj,sectionStepGraphic),HX_("sectionStepGraphic",d7,1e,0d,39)},
	{::hx::fsInt,(int)offsetof(ChartingState_obj,sectionsMax),HX_("sectionsMax",56,a8,bf,51)},
	{::hx::fsInt,(int)offsetof(ChartingState_obj,extraSize),HX_("extraSize",71,ef,57,86)},
	{::hx::fsObject /*  ::flixel::addons::display::FlxBackdrop */ ,(int)offsetof(ChartingState_obj,coolGrid),HX_("coolGrid",2f,56,79,e6)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(ChartingState_obj,coolGradient),HX_("coolGradient",d9,21,8b,af)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo ChartingState_obj_sStaticStorageInfo[] = {
	{::hx::fsFloat,(void *) &ChartingState_obj::songPosition,HX_("songPosition",9e,dd,3b,8d)},
	{::hx::fsObject /*  ::Dynamic */ ,(void *) &ChartingState_obj::curSong,HX_("curSong",75,95,6d,b7)},
	{::hx::fsInt,(void *) &ChartingState_obj::gridSize,HX_("gridSize",a7,7e,92,4e)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static ::String ChartingState_obj_sMemberFields[] = {
	HX_("_song",b4,3f,69,ff),
	HX_("songMusic",90,18,d5,3f),
	HX_("vocals",5e,10,51,59),
	HX_("keysTotal",30,4d,dd,05),
	HX_("strumLine",dd,79,d7,ee),
	HX_("camHUD",e8,2b,76,b7),
	HX_("camGame",a1,47,50,cf),
	HX_("strumLineCam",32,7a,a1,3e),
	HX_("dummyArrow",81,8a,75,ae),
	HX_("curRenderedNotes",2c,e1,fb,dc),
	HX_("curRenderedSustains",65,b2,8a,50),
	HX_("curRenderedSections",e3,c2,cb,56),
	HX_("arrowGroup",b6,90,97,0d),
	HX_("create",fc,66,0f,7c),
	HX_("hitSoundsPlayed",2a,36,f4,23),
	HX_("update",09,86,05,87),
	HX_("stepHit",67,ae,41,81),
	HX_("getStrumTime",80,ca,77,03),
	HX_("getYfromStrum",1c,4c,46,78),
	HX_("fullGrid",f5,5f,7f,58),
	HX_("generateGrid",9b,a0,3f,17),
	HX_("sectionLineGraphic",2f,d3,16,65),
	HX_("sectionCameraGraphic",5e,49,c9,26),
	HX_("sectionStepGraphic",d7,1e,0d,39),
	HX_("regenerateSection",dd,0c,26,20),
	HX_("sectionsMax",56,a8,bf,51),
	HX_("generateNotes",cc,ac,47,46),
	HX_("extraSize",71,ef,57,86),
	HX_("generateSection",30,4f,92,39),
	HX_("loadSong",1b,f5,f7,bc),
	HX_("generateChartNote",fb,19,61,1a),
	HX_("generateSustain",ee,45,ab,d5),
	HX_("coolGrid",2f,56,79,e6),
	HX_("coolGradient",d9,21,8b,af),
	HX_("generateBackground",83,eb,c9,4c),
	HX_("adjustSide",c6,79,69,ef),
	HX_("pauseMusic",cf,6d,d3,e5),
	HX_("resyncVocals",8c,16,ed,6a),
	::String(null()) };

static void ChartingState_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(ChartingState_obj::songPosition,"songPosition");
	HX_MARK_MEMBER_NAME(ChartingState_obj::curSong,"curSong");
	HX_MARK_MEMBER_NAME(ChartingState_obj::gridSize,"gridSize");
};

#ifdef HXCPP_VISIT_ALLOCS
static void ChartingState_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(ChartingState_obj::songPosition,"songPosition");
	HX_VISIT_MEMBER_NAME(ChartingState_obj::curSong,"curSong");
	HX_VISIT_MEMBER_NAME(ChartingState_obj::gridSize,"gridSize");
};

#endif

::hx::Class ChartingState_obj::__mClass;

static ::String ChartingState_obj_sStaticFields[] = {
	HX_("songPosition",9e,dd,3b,8d),
	HX_("curSong",75,95,6d,b7),
	HX_("gridSize",a7,7e,92,4e),
	::String(null())
};

void ChartingState_obj::__register()
{
	ChartingState_obj _hx_dummy;
	ChartingState_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("meta.state.charting.ChartingState",69,45,cc,15);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &ChartingState_obj::__GetStatic;
	__mClass->mSetStaticField = &ChartingState_obj::__SetStatic;
	__mClass->mMarkFunc = ChartingState_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(ChartingState_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(ChartingState_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< ChartingState_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = ChartingState_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ChartingState_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ChartingState_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void ChartingState_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_7b00649c1d13f94d_74_boot)
HXDLIN(  74)		songPosition = ((Float)0);
            	}
{
            	HX_STACKFRAME(&_hx_pos_7b00649c1d13f94d_77_boot)
HXDLIN(  77)		gridSize = 50;
            	}
}

} // end namespace meta
} // end namespace state
} // end namespace charting

// Generated by Haxe 4.1.5
#include <hxcpp.h>

#ifndef INCLUDED_ForeverTools
#include <ForeverTools.h>
#endif
#ifndef INCLUDED_Main
#include <Main.h>
#endif
#ifndef INCLUDED_Paths
#include <Paths.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxCamera
#include <flixel/FlxCamera.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
#ifndef INCLUDED_flixel_addons_transition_FlxTransitionableState
#include <flixel/addons/transition/FlxTransitionableState.h>
#endif
#ifndef INCLUDED_flixel_addons_transition_GraphicTransTileDiamond
#include <flixel/addons/transition/GraphicTransTileDiamond.h>
#endif
#ifndef INCLUDED_flixel_addons_transition_TransitionData
#include <flixel/addons/transition/TransitionData.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUIState
#include <flixel/addons/ui/FlxUIState.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IEventGetter
#include <flixel/addons/ui/interfaces/IEventGetter.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IFlxUIState
#include <flixel/addons/ui/interfaces/IFlxUIState.h>
#endif
#ifndef INCLUDED_flixel_animation_FlxAnimationController
#include <flixel/animation/FlxAnimationController.h>
#endif
#ifndef INCLUDED_flixel_graphics_FlxGraphic
#include <flixel/graphics/FlxGraphic.h>
#endif
#ifndef INCLUDED_flixel_graphics_frames_FlxAtlasFrames
#include <flixel/graphics/frames/FlxAtlasFrames.h>
#endif
#ifndef INCLUDED_flixel_graphics_frames_FlxFramesCollection
#include <flixel/graphics/frames/FlxFramesCollection.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedSpriteGroup
#include <flixel/group/FlxTypedSpriteGroup.h>
#endif
#ifndef INCLUDED_flixel_input_FlxBaseKeyList
#include <flixel/input/FlxBaseKeyList.h>
#endif
#ifndef INCLUDED_flixel_input_FlxInput
#include <flixel/input/FlxInput.h>
#endif
#ifndef INCLUDED_flixel_input_FlxKeyManager
#include <flixel/input/FlxKeyManager.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInput
#include <flixel/input/IFlxInput.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInputManager
#include <flixel/input/IFlxInputManager.h>
#endif
#ifndef INCLUDED_flixel_input_actions_FlxActionSet
#include <flixel/input/actions/FlxActionSet.h>
#endif
#ifndef INCLUDED_flixel_input_gamepad_FlxGamepad
#include <flixel/input/gamepad/FlxGamepad.h>
#endif
#ifndef INCLUDED_flixel_input_gamepad_FlxGamepadButton
#include <flixel/input/gamepad/FlxGamepadButton.h>
#endif
#ifndef INCLUDED_flixel_input_gamepad_FlxGamepadManager
#include <flixel/input/gamepad/FlxGamepadManager.h>
#endif
#ifndef INCLUDED_flixel_input_gamepad_lists_FlxBaseGamepadList
#include <flixel/input/gamepad/lists/FlxBaseGamepadList.h>
#endif
#ifndef INCLUDED_flixel_input_gamepad_lists_FlxGamepadButtonList
#include <flixel/input/gamepad/lists/FlxGamepadButtonList.h>
#endif
#ifndef INCLUDED_flixel_input_gamepad_mappings_FlxGamepadMapping
#include <flixel/input/gamepad/mappings/FlxGamepadMapping.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard_FlxKeyList
#include <flixel/input/keyboard/FlxKeyList.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard_FlxKeyboard
#include <flixel/input/keyboard/FlxKeyboard.h>
#endif
#ifndef INCLUDED_flixel_math_FlxPoint
#include <flixel/math/FlxPoint.h>
#endif
#ifndef INCLUDED_flixel_math_FlxRandom
#include <flixel/math/FlxRandom.h>
#endif
#ifndef INCLUDED_flixel_math_FlxRect
#include <flixel/math/FlxRect.h>
#endif
#ifndef INCLUDED_flixel_system_FlxSound
#include <flixel/system/FlxSound.h>
#endif
#ifndef INCLUDED_flixel_system_FlxSoundGroup
#include <flixel/system/FlxSoundGroup.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_SoundFrontEnd
#include <flixel/system/frontEnds/SoundFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_tweens_FlxEase
#include <flixel/tweens/FlxEase.h>
#endif
#ifndef INCLUDED_flixel_tweens_FlxTween
#include <flixel/tweens/FlxTween.h>
#endif
#ifndef INCLUDED_flixel_tweens_misc_ColorTween
#include <flixel/tweens/misc/ColorTween.h>
#endif
#ifndef INCLUDED_flixel_tweens_misc_VarTween
#include <flixel/tweens/misc/VarTween.h>
#endif
#ifndef INCLUDED_flixel_util_FlxAxes
#include <flixel/util/FlxAxes.h>
#endif
#ifndef INCLUDED_flixel_util_FlxTimer
#include <flixel/util/FlxTimer.h>
#endif
#ifndef INCLUDED_flixel_util_FlxTimerManager
#include <flixel/util/FlxTimerManager.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif
#ifndef INCLUDED_meta_Controls
#include <meta/Controls.h>
#endif
#ifndef INCLUDED_meta_KeyboardScheme
#include <meta/KeyboardScheme.h>
#endif
#ifndef INCLUDED_meta_MusicBeatState
#include <meta/MusicBeatState.h>
#endif
#ifndef INCLUDED_meta_data_Conductor
#include <meta/data/Conductor.h>
#endif
#ifndef INCLUDED_meta_data_PlayerSettings
#include <meta/data/PlayerSettings.h>
#endif
#ifndef INCLUDED_meta_data_dependency_Discord
#include <meta/data/dependency/Discord.h>
#endif
#ifndef INCLUDED_meta_data_dependency_FNFUIState
#include <meta/data/dependency/FNFUIState.h>
#endif
#ifndef INCLUDED_meta_data_font_Alphabet
#include <meta/data/font/Alphabet.h>
#endif
#ifndef INCLUDED_meta_state_CustomTitlescreen
#include <meta/state/CustomTitlescreen.h>
#endif
#ifndef INCLUDED_meta_state_menus_MainMenuState
#include <meta/state/menus/MainMenuState.h>
#endif
#ifndef INCLUDED_openfl_display_BitmapData
#include <openfl/display/BitmapData.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_utils_Assets
#include <openfl/utils/Assets.h>
#endif
#ifndef INCLUDED_sys_io_File
#include <sys/io/File.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_2867a90dedd25beb_35_new,"meta.state.CustomTitlescreen","new",0x43899bdf,"meta.state.CustomTitlescreen.new","meta/state/CustomTitlescreen.hx",35,0x4d9ee833)
HX_LOCAL_STACK_FRAME(_hx_pos_2867a90dedd25beb_50_create,"meta.state.CustomTitlescreen","create",0xea3c94dd,"meta.state.CustomTitlescreen.create","meta/state/CustomTitlescreen.hx",50,0x4d9ee833)
HX_LOCAL_STACK_FRAME(_hx_pos_2867a90dedd25beb_68_startIntro,"meta.state.CustomTitlescreen","startIntro",0xf827d50b,"meta.state.CustomTitlescreen.startIntro","meta/state/CustomTitlescreen.hx",68,0x4d9ee833)
HX_LOCAL_STACK_FRAME(_hx_pos_2867a90dedd25beb_158_getIntroTextShit,"meta.state.CustomTitlescreen","getIntroTextShit",0x10b75044,"meta.state.CustomTitlescreen.getIntroTextShit","meta/state/CustomTitlescreen.hx",158,0x4d9ee833)
static const ::String _hx_array_data_12c0c06d_5[] = {
	HX_("no idea what psych engine is",b1,68,ac,a1),HX_("vine boom sfx",c6,36,45,e0),
};
HX_LOCAL_STACK_FRAME(_hx_pos_2867a90dedd25beb_175_update,"meta.state.CustomTitlescreen","update",0xf532b3ea,"meta.state.CustomTitlescreen.update","meta/state/CustomTitlescreen.hx",175,0x4d9ee833)
HX_LOCAL_STACK_FRAME(_hx_pos_2867a90dedd25beb_210_update,"meta.state.CustomTitlescreen","update",0xf532b3ea,"meta.state.CustomTitlescreen.update","meta/state/CustomTitlescreen.hx",210,0x4d9ee833)
HX_LOCAL_STACK_FRAME(_hx_pos_2867a90dedd25beb_224_createCoolText,"meta.state.CustomTitlescreen","createCoolText",0xfa114213,"meta.state.CustomTitlescreen.createCoolText","meta/state/CustomTitlescreen.hx",224,0x4d9ee833)
HX_LOCAL_STACK_FRAME(_hx_pos_2867a90dedd25beb_235_addMoreText,"meta.state.CustomTitlescreen","addMoreText",0x9bdbe0a2,"meta.state.CustomTitlescreen.addMoreText","meta/state/CustomTitlescreen.hx",235,0x4d9ee833)
HX_LOCAL_STACK_FRAME(_hx_pos_2867a90dedd25beb_245_deleteCoolText,"meta.state.CustomTitlescreen","deleteCoolText",0x01ade242,"meta.state.CustomTitlescreen.deleteCoolText","meta/state/CustomTitlescreen.hx",245,0x4d9ee833)
HX_LOCAL_STACK_FRAME(_hx_pos_2867a90dedd25beb_255_beatHit,"meta.state.CustomTitlescreen","beatHit",0x6d5fe17c,"meta.state.CustomTitlescreen.beatHit","meta/state/CustomTitlescreen.hx",255,0x4d9ee833)
HX_LOCAL_STACK_FRAME(_hx_pos_2867a90dedd25beb_269_stepHit,"meta.state.CustomTitlescreen","stepHit",0x7a9ca566,"meta.state.CustomTitlescreen.stepHit","meta/state/CustomTitlescreen.hx",269,0x4d9ee833)
static const ::String _hx_array_data_12c0c06d_15[] = {
	HX_("Yoshubs",5b,5a,bf,52),
};
HX_LOCAL_STACK_FRAME(_hx_pos_2867a90dedd25beb_297_skipIntro,"meta.state.CustomTitlescreen","skipIntro",0x11622c2c,"meta.state.CustomTitlescreen.skipIntro","meta/state/CustomTitlescreen.hx",297,0x4d9ee833)
HX_LOCAL_STACK_FRAME(_hx_pos_2867a90dedd25beb_37_boot,"meta.state.CustomTitlescreen","boot",0xccf7c7d3,"meta.state.CustomTitlescreen.boot","meta/state/CustomTitlescreen.hx",37,0x4d9ee833)
namespace meta{
namespace state{

void CustomTitlescreen_obj::__construct( ::flixel::addons::transition::TransitionData TransIn, ::flixel::addons::transition::TransitionData TransOut){
            	HX_STACKFRAME(&_hx_pos_2867a90dedd25beb_35_new)
HXLINE( 293)		this->skippedIntro = false;
HXLINE( 252)		this->reverser = 1;
HXLINE( 172)		this->transitioning = false;
HXLINE(  64)		this->newLogoScale = ((Float)0);
HXLINE(  63)		this->initLogowidth = ((Float)0);
HXLINE(  60)		this->danceLeft = false;
HXLINE(  45)		this->curWacky = ::Array_obj< ::String >::__new(0);
HXLINE(  35)		super::__construct(TransIn,TransOut);
            	}

Dynamic CustomTitlescreen_obj::__CreateEmpty() { return new CustomTitlescreen_obj; }

void *CustomTitlescreen_obj::_hx_vtable = 0;

Dynamic CustomTitlescreen_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< CustomTitlescreen_obj > _hx_result = new CustomTitlescreen_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool CustomTitlescreen_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x2f064378) {
		if (inClassId<=(int)0x0f8d4977) {
			if (inClassId<=(int)0x0225b2d9) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x0225b2d9;
			} else {
				return inClassId==(int)0x0f8d4977;
			}
		} else {
			return inClassId==(int)0x23a57bae || inClassId==(int)0x2f064378;
		}
	} else {
		if (inClassId<=(int)0x7c795c9f) {
			if (inClassId<=(int)0x71df5f07) {
				return inClassId==(int)0x62817b24 || inClassId==(int)0x71df5f07;
			} else {
				return inClassId==(int)0x7c795c9f;
			}
		} else {
			return inClassId==(int)0x7ccf8994;
		}
	}
}

void CustomTitlescreen_obj::create(){
            	HX_STACKFRAME(&_hx_pos_2867a90dedd25beb_50_create)
HXLINE(  51)		::meta::data::PlayerSettings_obj::player1->controls->setKeyboardScheme(::meta::KeyboardScheme_obj::None_dyn(),false);
HXLINE(  52)		 ::flixel::math::FlxRandom _hx_tmp = ::flixel::FlxG_obj::random;
HXDLIN(  52)		this->curWacky = _hx_tmp->getObject_Array_String(this->getIntroTextShit(),null(),null(),null());
HXLINE(  53)		this->super::create();
HXLINE(  55)		this->startIntro();
            	}


void CustomTitlescreen_obj::startIntro(){
            	HX_GC_STACKFRAME(&_hx_pos_2867a90dedd25beb_68_startIntro)
HXLINE(  69)		if (!(::meta::state::CustomTitlescreen_obj::initialized)) {
HXLINE(  73)			::meta::data::dependency::Discord_obj::changePresence(HX_("TITLE SCREEN",14,91,7e,a1),HX_("Main Menu",e6,3a,4e,c8),null(),null(),null());
HXLINE(  76)			 ::flixel::graphics::FlxGraphic diamond = ::flixel::graphics::FlxGraphic_obj::fromClass(::hx::ClassOf< ::flixel::addons::transition::GraphicTransTileDiamond >(),null(),null(),null());
HXLINE(  77)			diamond->persist = true;
HXLINE(  78)			diamond->set_destroyOnNoUse(false);
HXLINE(  80)			 ::flixel::math::FlxPoint _hx_tmp =  ::flixel::math::FlxPoint_obj::__alloc( HX_CTX ,0,-1);
HXDLIN(  80)			::flixel::addons::transition::FlxTransitionableState_obj::defaultTransIn =  ::flixel::addons::transition::TransitionData_obj::__alloc( HX_CTX ,HX_("fade",7c,b5,b5,43),-16777216,((Float)0.32),_hx_tmp, ::Dynamic(::hx::Anon_obj::Create(3)
            				->setFixed(0,HX_("width",06,b6,62,ca),32)
            				->setFixed(1,HX_("height",e7,07,4c,02),32)
            				->setFixed(2,HX_("asset",f0,69,39,26),diamond)), ::flixel::math::FlxRect_obj::__alloc( HX_CTX ,-200,-200,(( (Float)(::flixel::FlxG_obj::width) ) * ((Float)1.4)),(( (Float)(::flixel::FlxG_obj::height) ) * ((Float)1.4))));
HXLINE(  82)			 ::flixel::math::FlxPoint _hx_tmp1 =  ::flixel::math::FlxPoint_obj::__alloc( HX_CTX ,0,1);
HXDLIN(  82)			::flixel::addons::transition::FlxTransitionableState_obj::defaultTransOut =  ::flixel::addons::transition::TransitionData_obj::__alloc( HX_CTX ,HX_("fade",7c,b5,b5,43),-16777216,((Float)0.32),_hx_tmp1, ::Dynamic(::hx::Anon_obj::Create(3)
            				->setFixed(0,HX_("width",06,b6,62,ca),32)
            				->setFixed(1,HX_("height",e7,07,4c,02),32)
            				->setFixed(2,HX_("asset",f0,69,39,26),diamond)), ::flixel::math::FlxRect_obj::__alloc( HX_CTX ,-200,-200,(( (Float)(::flixel::FlxG_obj::width) ) * ((Float)1.4)),(( (Float)(::flixel::FlxG_obj::height) ) * ((Float)1.4))));
HXLINE(  85)			this->transIn = ::flixel::addons::transition::FlxTransitionableState_obj::defaultTransIn;
HXLINE(  86)			this->transOut = ::flixel::addons::transition::FlxTransitionableState_obj::defaultTransOut;
HXLINE(  89)			::ForeverTools_obj::resetMenuMusic(true);
            		}
HXLINE(  92)		this->persistentUpdate = true;
HXLINE(  94)		 ::flixel::FlxSprite bg =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,null(),null(),null())->makeGraphic(::flixel::FlxG_obj::width,::flixel::FlxG_obj::height,-16777216,null(),null());
HXLINE(  98)		this->add(bg);
HXLINE( 101)		this->backdrop =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,null(),null(),null())->makeGraphic(100,100,-8083838,null(),null());
HXLINE( 102)		 ::flixel::FlxSprite _hx_tmp = this->backdrop;
HXDLIN( 102)		int _hx_tmp1 = ::Std_obj::_hx_int(bg->get_width());
HXDLIN( 102)		_hx_tmp->setGraphicSize(_hx_tmp1,::Std_obj::_hx_int(bg->get_height()));
HXLINE( 103)		this->backdrop->screenCenter(null());
HXLINE( 104)		this->add(this->backdrop);
HXLINE( 106)		this->logoBl =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,null(),null(),null());
HXLINE( 107)		 ::flixel::FlxSprite _hx_tmp2 = this->logoBl;
HXDLIN( 107)		::String library = null();
HXDLIN( 107)		::String _hx_tmp3 = ::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("menus/base/title/foreverlogo",98,36,28,8d)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),library);
HXDLIN( 107)		_hx_tmp2->set_frames(::flixel::graphics::frames::FlxAtlasFrames_obj::fromSparrow(_hx_tmp3,::sys::io::File_obj::getContent(::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("menus/base/title/foreverlogo",98,36,28,8d)) + HX_(".xml",69,3e,c3,1e)),HX_("TEXT",ad,94,ba,37),library))));
HXLINE( 108)		this->logoBl->animation->addByPrefix(HX_("bumpin",5b,d5,3c,d5),HX_("forever bop",0a,60,60,7f),16,false,false,false);
HXLINE( 109)		this->logoBl->animation->play(HX_("bumpin",5b,d5,3c,d5),null(),null(),null());
HXLINE( 110)		this->logoBl->set_antialiasing(true);
HXLINE( 112)		this->logoBl->updateHitbox();
HXLINE( 114)		 ::flixel::FlxSprite _hx_tmp4 = this->logoBl;
HXDLIN( 114)		_hx_tmp4->setGraphicSize(::Std_obj::_hx_int((this->logoBl->get_width() / ( (Float)(2) ))),null());
HXLINE( 115)		this->logoBl->updateHitbox();
HXLINE( 117)		this->logoBl->screenCenter(null());
HXLINE( 118)		{
HXLINE( 118)			 ::flixel::FlxSprite _g = this->logoBl;
HXDLIN( 118)			_g->set_y((_g->y - ( (Float)(100) )));
            		}
HXLINE( 120)		this->initLogowidth = this->logoBl->get_width();
HXLINE( 121)		this->newLogoScale = this->logoBl->scale->x;
HXLINE( 124)		this->add(this->logoBl);
HXLINE( 126)		this->titleText =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,125,(( (Float)(::flixel::FlxG_obj::height) ) * ((Float)0.8)),null());
HXLINE( 127)		 ::flixel::FlxSprite _hx_tmp5 = this->titleText;
HXDLIN( 127)		::String library1 = null();
HXDLIN( 127)		::String _hx_tmp6 = ::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("menus/base/title/titleEnter",1a,3a,8c,a3)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),library1);
HXDLIN( 127)		_hx_tmp5->set_frames(::flixel::graphics::frames::FlxAtlasFrames_obj::fromSparrow(_hx_tmp6,::sys::io::File_obj::getContent(::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("menus/base/title/titleEnter",1a,3a,8c,a3)) + HX_(".xml",69,3e,c3,1e)),HX_("TEXT",ad,94,ba,37),library1))));
HXLINE( 128)		this->titleText->animation->addByPrefix(HX_("idle",14,a7,b3,45),HX_("Press Enter to Begin",e9,79,2c,83),24,null(),null(),null());
HXLINE( 129)		this->titleText->animation->addByPrefix(HX_("press",83,53,88,c8),HX_("ENTER PRESSED",5a,47,9f,63),24,null(),null(),null());
HXLINE( 130)		this->titleText->set_antialiasing(true);
HXLINE( 131)		this->titleText->animation->play(HX_("idle",14,a7,b3,45),null(),null(),null());
HXLINE( 132)		this->titleText->updateHitbox();
HXLINE( 134)		this->add(this->titleText);
HXLINE( 136)		this->credGroup =  ::flixel::group::FlxTypedGroup_obj::__alloc( HX_CTX ,null());
HXLINE( 137)		this->add(this->credGroup);
HXLINE( 138)		this->textGroup =  ::flixel::group::FlxTypedGroup_obj::__alloc( HX_CTX ,null());
HXLINE( 140)		this->blackScreen =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,null(),null(),null())->makeGraphic(::flixel::FlxG_obj::width,::flixel::FlxG_obj::height,-16777216,null(),null());
HXLINE( 141)		this->credGroup->add(this->blackScreen).StaticCast<  ::flixel::FlxBasic >();
HXLINE( 143)		this->credTextShit =  ::meta::data::font::Alphabet_obj::__alloc( HX_CTX ,( (Float)(0) ),( (Float)(0) ),HX_("",00,00,00,00),true,null(),null());
HXLINE( 144)		this->credTextShit->screenCenter(null());
HXLINE( 146)		this->credTextShit->set_visible(false);
HXLINE( 147)		::flixel::tweens::FlxTween_obj::tween(this->credTextShit, ::Dynamic(::hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("y",79,00,00,00),(this->credTextShit->y + 20))),((Float)2.9), ::Dynamic(::hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::quadInOut_dyn())
            			->setFixed(1,HX_("type",ba,f2,08,4d),4)));
HXLINE( 149)		if (::meta::state::CustomTitlescreen_obj::initialized) {
HXLINE( 150)			this->skipIntro();
            		}
            		else {
HXLINE( 152)			::meta::state::CustomTitlescreen_obj::initialized = true;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(CustomTitlescreen_obj,startIntro,(void))

::Array< ::Dynamic> CustomTitlescreen_obj::getIntroTextShit(){
            	HX_STACKFRAME(&_hx_pos_2867a90dedd25beb_158_getIntroTextShit)
HXLINE( 159)		::Array< ::Dynamic> swagGoodArray = ::Array_obj< ::Dynamic>::__new(1)->init(0,::Array_obj< ::String >::fromData( _hx_array_data_12c0c06d_5,2));
HXLINE( 160)		::String library = null();
HXDLIN( 160)		if (::openfl::utils::Assets_obj::exists(::Paths_obj::getPath((HX_("introText",39,69,67,a6) + HX_(".txt",02,3f,c0,1e)),HX_("TEXT",ad,94,ba,37),library),null())) {
HXLINE( 162)			::String library = null();
HXDLIN( 162)			::String fullText = ::openfl::utils::Assets_obj::getText(::Paths_obj::getPath((HX_("introText",39,69,67,a6) + HX_(".txt",02,3f,c0,1e)),HX_("TEXT",ad,94,ba,37),library));
HXLINE( 163)			::Array< ::String > firstArray = fullText.split(HX_("\n",0a,00,00,00));
HXLINE( 165)			{
HXLINE( 165)				int _g = 0;
HXDLIN( 165)				while((_g < firstArray->length)){
HXLINE( 165)					::String i = firstArray->__get(_g);
HXDLIN( 165)					_g = (_g + 1);
HXLINE( 166)					swagGoodArray->push(i.split(HX_("--",60,27,00,00)));
            				}
            			}
            		}
HXLINE( 169)		return swagGoodArray;
            	}


HX_DEFINE_DYNAMIC_FUNC0(CustomTitlescreen_obj,getIntroTextShit,return )

void CustomTitlescreen_obj::update(Float elapsed){
            	HX_GC_STACKFRAME(&_hx_pos_2867a90dedd25beb_175_update)
HXLINE( 174)		 ::meta::state::CustomTitlescreen _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE( 176)		if (::hx::IsNotNull( ::flixel::FlxG_obj::sound->music )) {
HXLINE( 177)			::meta::data::Conductor_obj::songPosition = ::flixel::FlxG_obj::sound->music->_time;
            		}
HXLINE( 179)		Float a = this->newLogoScale;
HXDLIN( 179)		this->logoBl->scale->set_x((a + (((Float)0.95) * (this->logoBl->scale->x - a))));
HXLINE( 180)		Float a1 = this->newLogoScale;
HXDLIN( 180)		this->logoBl->scale->set_y((a1 + (((Float)0.95) * (this->logoBl->scale->y - a1))));
HXLINE( 182)		::flixel::tweens::FlxTween_obj::color(this->backdrop,1,this->backdrop->color,-16777216,null());
HXLINE( 184)		 ::flixel::input::keyboard::FlxKeyList _this = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 184)		bool pressedEnter = _this->keyManager->checkStatus(13,_this->status);
HXLINE( 185)		 ::flixel::input::gamepad::FlxGamepad gamepad = ::flixel::FlxG_obj::gamepads->lastActive;
HXLINE( 187)		if (::hx::IsNotNull( gamepad )) {
HXLINE( 189)			 ::flixel::input::gamepad::lists::FlxGamepadButtonList _this = gamepad->justPressed;
HXDLIN( 189)			int id = 7;
HXDLIN( 189)			 ::flixel::input::gamepad::FlxGamepad _this1 = _this->gamepad;
HXDLIN( 189)			int Status = _this->status;
HXDLIN( 189)			bool _hx_tmp;
HXDLIN( 189)			switch((int)(id)){
            				case (int)-2: {
HXLINE( 189)					_hx_tmp = _this1->anyButton(Status);
            				}
            				break;
            				case (int)-1: {
HXLINE( 189)					_hx_tmp = !(_this1->anyButton(Status));
            				}
            				break;
            				default:{
HXLINE( 189)					int RawID = _this1->mapping->getRawID(id);
HXDLIN( 189)					 ::flixel::input::gamepad::FlxGamepadButton button = _this1->buttons->__get(RawID).StaticCast<  ::flixel::input::gamepad::FlxGamepadButton >();
HXDLIN( 189)					if (::hx::IsNotNull( button )) {
HXLINE( 189)						_hx_tmp = button->hasState(Status);
            					}
            					else {
HXLINE( 189)						_hx_tmp = false;
            					}
            				}
            			}
HXDLIN( 189)			if (_hx_tmp) {
HXLINE( 190)				pressedEnter = true;
            			}
            		}
HXLINE( 193)		bool _hx_tmp;
HXDLIN( 193)		bool _hx_tmp1;
HXDLIN( 193)		if (pressedEnter) {
HXLINE( 193)			_hx_tmp1 = !(this->transitioning);
            		}
            		else {
HXLINE( 193)			_hx_tmp1 = false;
            		}
HXDLIN( 193)		if (_hx_tmp1) {
HXLINE( 193)			_hx_tmp = this->skippedIntro;
            		}
            		else {
HXLINE( 193)			_hx_tmp = false;
            		}
HXDLIN( 193)		if (_hx_tmp) {
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::meta::state::CustomTitlescreen,_gthis) HXARGC(1)
            			void _hx_run( ::flixel::util::FlxTimer tmr){
            				HX_GC_STACKFRAME(&_hx_pos_2867a90dedd25beb_210_update)
HXLINE( 210)				 ::meta::state::CustomTitlescreen _gthis1 = _gthis;
HXDLIN( 210)				::Main_obj::switchState(_gthis1, ::meta::state::menus::MainMenuState_obj::__alloc( HX_CTX ,null(),null()));
            			}
            			HX_END_LOCAL_FUNC1((void))

HXLINE( 195)			this->titleText->animation->play(HX_("press",83,53,88,c8),null(),null(),null());
HXLINE( 197)			::flixel::FlxG_obj::camera->flash(-1,1,null(),null());
HXLINE( 198)			 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp = ::flixel::FlxG_obj::sound;
HXDLIN( 198)			_hx_tmp->play(::Paths_obj::sound(HX_("confirmMenu",bf,8e,fe,3c),null()),((Float)0.7),null(),null(),null(),null());
HXLINE( 200)			this->transitioning = true;
HXLINE( 203)			 ::flixel::FlxSprite _hx_tmp1 = this->logoBl;
HXDLIN( 203)			_hx_tmp1->setGraphicSize(::Std_obj::_hx_int((this->initLogowidth * ((Float)1.15))),null());
HXLINE( 205)			 ::flixel::util::FlxTimer_obj::__alloc( HX_CTX ,null())->start(2, ::Dynamic(new _hx_Closure_0(_gthis)),null());
            		}
HXLINE( 216)		bool _hx_tmp2;
HXDLIN( 216)		bool _hx_tmp3;
HXDLIN( 216)		if (pressedEnter) {
HXLINE( 216)			_hx_tmp3 = !(this->skippedIntro);
            		}
            		else {
HXLINE( 216)			_hx_tmp3 = false;
            		}
HXDLIN( 216)		if (_hx_tmp3) {
HXLINE( 216)			_hx_tmp2 = ::meta::state::CustomTitlescreen_obj::initialized;
            		}
            		else {
HXLINE( 216)			_hx_tmp2 = false;
            		}
HXDLIN( 216)		if (_hx_tmp2) {
HXLINE( 217)			this->skipIntro();
            		}
HXLINE( 219)		this->super::update(elapsed);
            	}


void CustomTitlescreen_obj::createCoolText(::Array< ::String > textArray){
            	HX_GC_STACKFRAME(&_hx_pos_2867a90dedd25beb_224_createCoolText)
HXDLIN( 224)		int _g = 0;
HXDLIN( 224)		int _g1 = textArray->length;
HXDLIN( 224)		while((_g < _g1)){
HXDLIN( 224)			_g = (_g + 1);
HXDLIN( 224)			int i = (_g - 1);
HXLINE( 226)			 ::meta::data::font::Alphabet money =  ::meta::data::font::Alphabet_obj::__alloc( HX_CTX ,( (Float)(0) ),( (Float)(0) ),textArray->__get(i),true,false,null());
HXLINE( 227)			money->screenCenter(::flixel::util::FlxAxes_obj::X_dyn());
HXLINE( 228)			{
HXLINE( 228)				 ::meta::data::font::Alphabet _g1 = money;
HXDLIN( 228)				_g1->set_y((_g1->y + ((i * 60) + 200)));
            			}
HXLINE( 229)			this->credGroup->add(money).StaticCast<  ::flixel::FlxBasic >();
HXLINE( 230)			this->textGroup->add(money).StaticCast<  ::flixel::FlxBasic >();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(CustomTitlescreen_obj,createCoolText,(void))

void CustomTitlescreen_obj::addMoreText(::String text){
            	HX_GC_STACKFRAME(&_hx_pos_2867a90dedd25beb_235_addMoreText)
HXLINE( 236)		 ::meta::data::font::Alphabet coolText =  ::meta::data::font::Alphabet_obj::__alloc( HX_CTX ,( (Float)(0) ),( (Float)(0) ),text,true,false,null());
HXLINE( 237)		coolText->screenCenter(::flixel::util::FlxAxes_obj::X_dyn());
HXLINE( 238)		{
HXLINE( 238)			 ::meta::data::font::Alphabet _g = coolText;
HXDLIN( 238)			_g->set_y((_g->y + ((this->textGroup->length * 60) + 200)));
            		}
HXLINE( 239)		this->credGroup->add(coolText).StaticCast<  ::flixel::FlxBasic >();
HXLINE( 240)		this->textGroup->add(coolText).StaticCast<  ::flixel::FlxBasic >();
            	}


HX_DEFINE_DYNAMIC_FUNC1(CustomTitlescreen_obj,addMoreText,(void))

void CustomTitlescreen_obj::deleteCoolText(){
            	HX_STACKFRAME(&_hx_pos_2867a90dedd25beb_245_deleteCoolText)
HXDLIN( 245)		while((this->textGroup->members->get_length() > 0)){
HXLINE( 247)			this->credGroup->remove(Dynamic( this->textGroup->members->__get(0)).StaticCast<  ::flixel::FlxBasic >(),true).StaticCast<  ::flixel::FlxBasic >();
HXLINE( 248)			this->textGroup->remove(Dynamic( this->textGroup->members->__get(0)).StaticCast<  ::flixel::FlxBasic >(),true).StaticCast<  ::flixel::FlxBasic >();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(CustomTitlescreen_obj,deleteCoolText,(void))

void CustomTitlescreen_obj::beatHit(){
            	HX_STACKFRAME(&_hx_pos_2867a90dedd25beb_255_beatHit)
HXLINE( 256)		this->super::beatHit();
HXLINE( 258)		this->logoBl->animation->play(HX_("bumpin",5b,d5,3c,d5),null(),null(),null());
HXLINE( 259)		this->backdrop->set_color(8693378);
HXLINE( 261)		if ((this->curBeat == 16)) {
HXLINE( 264)			this->skipIntro();
            		}
            	}


void CustomTitlescreen_obj::stepHit(){
            	HX_STACKFRAME(&_hx_pos_2867a90dedd25beb_269_stepHit)
HXLINE( 270)		this->super::stepHit();
HXLINE( 272)		switch((int)(this->curStep)){
            			case (int)4: {
HXLINE( 275)				this->createCoolText(::Array_obj< ::String >::fromData( _hx_array_data_12c0c06d_15,1));
            			}
            			break;
            			case (int)6: {
HXLINE( 277)				this->addMoreText(HX_("Neolixn",eb,24,c3,3e));
            			}
            			break;
            			case (int)8: {
HXLINE( 279)				this->addMoreText(HX_("Gedehari",af,5b,26,ad));
            			}
            			break;
            			case (int)10: {
HXLINE( 281)				this->addMoreText(HX_("Tsuraran",da,ab,95,1e));
            			}
            			break;
            			case (int)12: {
HXLINE( 283)				this->addMoreText(HX_("FlopDoodle",40,5f,e2,f3));
            			}
            			break;
            			case (int)16: {
HXLINE( 285)				this->addMoreText(HX_("",00,00,00,00));
HXLINE( 286)				this->addMoreText(HX_("PRESENT",db,0e,b0,b9));
            			}
            			break;
            			case (int)24: {
HXLINE( 289)				this->deleteCoolText();
            			}
            			break;
            		}
            	}


void CustomTitlescreen_obj::skipIntro(){
            	HX_STACKFRAME(&_hx_pos_2867a90dedd25beb_297_skipIntro)
HXDLIN( 297)		if (!(this->skippedIntro)) {
HXLINE( 299)			this->remove(this->ngSpr,null());
HXLINE( 301)			::flixel::FlxG_obj::camera->flash(-1,4,null(),null());
HXLINE( 302)			this->remove(this->credGroup,null());
HXLINE( 303)			this->skippedIntro = true;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(CustomTitlescreen_obj,skipIntro,(void))

bool CustomTitlescreen_obj::initialized;


::hx::ObjectPtr< CustomTitlescreen_obj > CustomTitlescreen_obj::__new( ::flixel::addons::transition::TransitionData TransIn, ::flixel::addons::transition::TransitionData TransOut) {
	::hx::ObjectPtr< CustomTitlescreen_obj > __this = new CustomTitlescreen_obj();
	__this->__construct(TransIn,TransOut);
	return __this;
}

::hx::ObjectPtr< CustomTitlescreen_obj > CustomTitlescreen_obj::__alloc(::hx::Ctx *_hx_ctx, ::flixel::addons::transition::TransitionData TransIn, ::flixel::addons::transition::TransitionData TransOut) {
	CustomTitlescreen_obj *__this = (CustomTitlescreen_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(CustomTitlescreen_obj), true, "meta.state.CustomTitlescreen"));
	*(void **)__this = CustomTitlescreen_obj::_hx_vtable;
	__this->__construct(TransIn,TransOut);
	return __this;
}

CustomTitlescreen_obj::CustomTitlescreen_obj()
{
}

void CustomTitlescreen_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(CustomTitlescreen);
	HX_MARK_MEMBER_NAME(blackScreen,"blackScreen");
	HX_MARK_MEMBER_NAME(credGroup,"credGroup");
	HX_MARK_MEMBER_NAME(credTextShit,"credTextShit");
	HX_MARK_MEMBER_NAME(textGroup,"textGroup");
	HX_MARK_MEMBER_NAME(ngSpr,"ngSpr");
	HX_MARK_MEMBER_NAME(curWacky,"curWacky");
	HX_MARK_MEMBER_NAME(wackyImage,"wackyImage");
	HX_MARK_MEMBER_NAME(logoBl,"logoBl");
	HX_MARK_MEMBER_NAME(gfDance,"gfDance");
	HX_MARK_MEMBER_NAME(danceLeft,"danceLeft");
	HX_MARK_MEMBER_NAME(titleText,"titleText");
	HX_MARK_MEMBER_NAME(initLogowidth,"initLogowidth");
	HX_MARK_MEMBER_NAME(newLogoScale,"newLogoScale");
	HX_MARK_MEMBER_NAME(backdrop,"backdrop");
	HX_MARK_MEMBER_NAME(transitioning,"transitioning");
	HX_MARK_MEMBER_NAME(reverser,"reverser");
	HX_MARK_MEMBER_NAME(skippedIntro,"skippedIntro");
	 ::flixel::addons::ui::FlxUIState_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void CustomTitlescreen_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(blackScreen,"blackScreen");
	HX_VISIT_MEMBER_NAME(credGroup,"credGroup");
	HX_VISIT_MEMBER_NAME(credTextShit,"credTextShit");
	HX_VISIT_MEMBER_NAME(textGroup,"textGroup");
	HX_VISIT_MEMBER_NAME(ngSpr,"ngSpr");
	HX_VISIT_MEMBER_NAME(curWacky,"curWacky");
	HX_VISIT_MEMBER_NAME(wackyImage,"wackyImage");
	HX_VISIT_MEMBER_NAME(logoBl,"logoBl");
	HX_VISIT_MEMBER_NAME(gfDance,"gfDance");
	HX_VISIT_MEMBER_NAME(danceLeft,"danceLeft");
	HX_VISIT_MEMBER_NAME(titleText,"titleText");
	HX_VISIT_MEMBER_NAME(initLogowidth,"initLogowidth");
	HX_VISIT_MEMBER_NAME(newLogoScale,"newLogoScale");
	HX_VISIT_MEMBER_NAME(backdrop,"backdrop");
	HX_VISIT_MEMBER_NAME(transitioning,"transitioning");
	HX_VISIT_MEMBER_NAME(reverser,"reverser");
	HX_VISIT_MEMBER_NAME(skippedIntro,"skippedIntro");
	 ::flixel::addons::ui::FlxUIState_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val CustomTitlescreen_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"ngSpr") ) { return ::hx::Val( ngSpr ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"create") ) { return ::hx::Val( create_dyn() ); }
		if (HX_FIELD_EQ(inName,"logoBl") ) { return ::hx::Val( logoBl ); }
		if (HX_FIELD_EQ(inName,"update") ) { return ::hx::Val( update_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"gfDance") ) { return ::hx::Val( gfDance ); }
		if (HX_FIELD_EQ(inName,"beatHit") ) { return ::hx::Val( beatHit_dyn() ); }
		if (HX_FIELD_EQ(inName,"stepHit") ) { return ::hx::Val( stepHit_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"curWacky") ) { return ::hx::Val( curWacky ); }
		if (HX_FIELD_EQ(inName,"backdrop") ) { return ::hx::Val( backdrop ); }
		if (HX_FIELD_EQ(inName,"reverser") ) { return ::hx::Val( reverser ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"credGroup") ) { return ::hx::Val( credGroup ); }
		if (HX_FIELD_EQ(inName,"textGroup") ) { return ::hx::Val( textGroup ); }
		if (HX_FIELD_EQ(inName,"danceLeft") ) { return ::hx::Val( danceLeft ); }
		if (HX_FIELD_EQ(inName,"titleText") ) { return ::hx::Val( titleText ); }
		if (HX_FIELD_EQ(inName,"skipIntro") ) { return ::hx::Val( skipIntro_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"wackyImage") ) { return ::hx::Val( wackyImage ); }
		if (HX_FIELD_EQ(inName,"startIntro") ) { return ::hx::Val( startIntro_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"blackScreen") ) { return ::hx::Val( blackScreen ); }
		if (HX_FIELD_EQ(inName,"addMoreText") ) { return ::hx::Val( addMoreText_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"credTextShit") ) { return ::hx::Val( credTextShit ); }
		if (HX_FIELD_EQ(inName,"newLogoScale") ) { return ::hx::Val( newLogoScale ); }
		if (HX_FIELD_EQ(inName,"skippedIntro") ) { return ::hx::Val( skippedIntro ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"initLogowidth") ) { return ::hx::Val( initLogowidth ); }
		if (HX_FIELD_EQ(inName,"transitioning") ) { return ::hx::Val( transitioning ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"createCoolText") ) { return ::hx::Val( createCoolText_dyn() ); }
		if (HX_FIELD_EQ(inName,"deleteCoolText") ) { return ::hx::Val( deleteCoolText_dyn() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"getIntroTextShit") ) { return ::hx::Val( getIntroTextShit_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool CustomTitlescreen_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 11:
		if (HX_FIELD_EQ(inName,"initialized") ) { outValue = ( initialized ); return true; }
	}
	return false;
}

::hx::Val CustomTitlescreen_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"ngSpr") ) { ngSpr=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"logoBl") ) { logoBl=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"gfDance") ) { gfDance=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"curWacky") ) { curWacky=inValue.Cast< ::Array< ::String > >(); return inValue; }
		if (HX_FIELD_EQ(inName,"backdrop") ) { backdrop=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"reverser") ) { reverser=inValue.Cast< int >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"credGroup") ) { credGroup=inValue.Cast<  ::flixel::group::FlxTypedGroup >(); return inValue; }
		if (HX_FIELD_EQ(inName,"textGroup") ) { textGroup=inValue.Cast<  ::flixel::group::FlxTypedGroup >(); return inValue; }
		if (HX_FIELD_EQ(inName,"danceLeft") ) { danceLeft=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"titleText") ) { titleText=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"wackyImage") ) { wackyImage=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"blackScreen") ) { blackScreen=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"credTextShit") ) { credTextShit=inValue.Cast<  ::meta::data::font::Alphabet >(); return inValue; }
		if (HX_FIELD_EQ(inName,"newLogoScale") ) { newLogoScale=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"skippedIntro") ) { skippedIntro=inValue.Cast< bool >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"initLogowidth") ) { initLogowidth=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"transitioning") ) { transitioning=inValue.Cast< bool >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool CustomTitlescreen_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 11:
		if (HX_FIELD_EQ(inName,"initialized") ) { initialized=ioValue.Cast< bool >(); return true; }
	}
	return false;
}

void CustomTitlescreen_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("blackScreen",8b,de,f4,5d));
	outFields->push(HX_("credGroup",91,7f,9c,9c));
	outFields->push(HX_("credTextShit",fb,55,c1,3c));
	outFields->push(HX_("textGroup",52,43,e2,32));
	outFields->push(HX_("ngSpr",7c,26,68,9a));
	outFields->push(HX_("curWacky",67,31,c6,0c));
	outFields->push(HX_("wackyImage",d4,7e,d6,81));
	outFields->push(HX_("logoBl",15,ca,6e,5c));
	outFields->push(HX_("gfDance",94,88,3a,eb));
	outFields->push(HX_("danceLeft",da,cc,f9,df));
	outFields->push(HX_("titleText",65,ba,a4,70));
	outFields->push(HX_("initLogowidth",8b,15,da,2c));
	outFields->push(HX_("newLogoScale",9f,de,e5,0f));
	outFields->push(HX_("backdrop",d6,b1,96,1a));
	outFields->push(HX_("transitioning",6d,6a,93,94));
	outFields->push(HX_("reverser",10,c5,b5,81));
	outFields->push(HX_("skippedIntro",9c,44,26,49));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo CustomTitlescreen_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(CustomTitlescreen_obj,blackScreen),HX_("blackScreen",8b,de,f4,5d)},
	{::hx::fsObject /*  ::flixel::group::FlxTypedGroup */ ,(int)offsetof(CustomTitlescreen_obj,credGroup),HX_("credGroup",91,7f,9c,9c)},
	{::hx::fsObject /*  ::meta::data::font::Alphabet */ ,(int)offsetof(CustomTitlescreen_obj,credTextShit),HX_("credTextShit",fb,55,c1,3c)},
	{::hx::fsObject /*  ::flixel::group::FlxTypedGroup */ ,(int)offsetof(CustomTitlescreen_obj,textGroup),HX_("textGroup",52,43,e2,32)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(CustomTitlescreen_obj,ngSpr),HX_("ngSpr",7c,26,68,9a)},
	{::hx::fsObject /* ::Array< ::String > */ ,(int)offsetof(CustomTitlescreen_obj,curWacky),HX_("curWacky",67,31,c6,0c)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(CustomTitlescreen_obj,wackyImage),HX_("wackyImage",d4,7e,d6,81)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(CustomTitlescreen_obj,logoBl),HX_("logoBl",15,ca,6e,5c)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(CustomTitlescreen_obj,gfDance),HX_("gfDance",94,88,3a,eb)},
	{::hx::fsBool,(int)offsetof(CustomTitlescreen_obj,danceLeft),HX_("danceLeft",da,cc,f9,df)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(CustomTitlescreen_obj,titleText),HX_("titleText",65,ba,a4,70)},
	{::hx::fsFloat,(int)offsetof(CustomTitlescreen_obj,initLogowidth),HX_("initLogowidth",8b,15,da,2c)},
	{::hx::fsFloat,(int)offsetof(CustomTitlescreen_obj,newLogoScale),HX_("newLogoScale",9f,de,e5,0f)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(CustomTitlescreen_obj,backdrop),HX_("backdrop",d6,b1,96,1a)},
	{::hx::fsBool,(int)offsetof(CustomTitlescreen_obj,transitioning),HX_("transitioning",6d,6a,93,94)},
	{::hx::fsInt,(int)offsetof(CustomTitlescreen_obj,reverser),HX_("reverser",10,c5,b5,81)},
	{::hx::fsBool,(int)offsetof(CustomTitlescreen_obj,skippedIntro),HX_("skippedIntro",9c,44,26,49)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo CustomTitlescreen_obj_sStaticStorageInfo[] = {
	{::hx::fsBool,(void *) &CustomTitlescreen_obj::initialized,HX_("initialized",14,f5,0f,37)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static ::String CustomTitlescreen_obj_sMemberFields[] = {
	HX_("blackScreen",8b,de,f4,5d),
	HX_("credGroup",91,7f,9c,9c),
	HX_("credTextShit",fb,55,c1,3c),
	HX_("textGroup",52,43,e2,32),
	HX_("ngSpr",7c,26,68,9a),
	HX_("curWacky",67,31,c6,0c),
	HX_("wackyImage",d4,7e,d6,81),
	HX_("create",fc,66,0f,7c),
	HX_("logoBl",15,ca,6e,5c),
	HX_("gfDance",94,88,3a,eb),
	HX_("danceLeft",da,cc,f9,df),
	HX_("titleText",65,ba,a4,70),
	HX_("initLogowidth",8b,15,da,2c),
	HX_("newLogoScale",9f,de,e5,0f),
	HX_("backdrop",d6,b1,96,1a),
	HX_("startIntro",aa,a2,37,da),
	HX_("getIntroTextShit",23,9f,f3,eb),
	HX_("transitioning",6d,6a,93,94),
	HX_("update",09,86,05,87),
	HX_("createCoolText",32,cb,41,41),
	HX_("addMoreText",23,fe,9f,87),
	HX_("deleteCoolText",61,6b,de,48),
	HX_("reverser",10,c5,b5,81),
	HX_("beatHit",7d,ea,04,74),
	HX_("stepHit",67,ae,41,81),
	HX_("skippedIntro",9c,44,26,49),
	HX_("skipIntro",6d,37,1c,d2),
	::String(null()) };

static void CustomTitlescreen_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(CustomTitlescreen_obj::initialized,"initialized");
};

#ifdef HXCPP_VISIT_ALLOCS
static void CustomTitlescreen_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(CustomTitlescreen_obj::initialized,"initialized");
};

#endif

::hx::Class CustomTitlescreen_obj::__mClass;

static ::String CustomTitlescreen_obj_sStaticFields[] = {
	HX_("initialized",14,f5,0f,37),
	::String(null())
};

void CustomTitlescreen_obj::__register()
{
	CustomTitlescreen_obj _hx_dummy;
	CustomTitlescreen_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("meta.state.CustomTitlescreen",6d,c0,c0,12);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &CustomTitlescreen_obj::__GetStatic;
	__mClass->mSetStaticField = &CustomTitlescreen_obj::__SetStatic;
	__mClass->mMarkFunc = CustomTitlescreen_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(CustomTitlescreen_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(CustomTitlescreen_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< CustomTitlescreen_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = CustomTitlescreen_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = CustomTitlescreen_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = CustomTitlescreen_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void CustomTitlescreen_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_2867a90dedd25beb_37_boot)
HXDLIN(  37)		initialized = false;
            	}
}

} // end namespace meta
} // end namespace state

// Generated by Haxe 4.1.5
#include <hxcpp.h>

#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
#ifndef INCLUDED_flixel_FlxSubState
#include <flixel/FlxSubState.h>
#endif
#ifndef INCLUDED_flixel_addons_transition_FlxTransitionableState
#include <flixel/addons/transition/FlxTransitionableState.h>
#endif
#ifndef INCLUDED_flixel_addons_transition_Transition
#include <flixel/addons/transition/Transition.h>
#endif
#ifndef INCLUDED_flixel_addons_transition_TransitionData
#include <flixel/addons/transition/TransitionData.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUIState
#include <flixel/addons/ui/FlxUIState.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IEventGetter
#include <flixel/addons/ui/interfaces/IEventGetter.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IFlxUIState
#include <flixel/addons/ui/interfaces/IFlxUIState.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_meta_data_dependency_FNFTransition
#include <meta/data/dependency/FNFTransition.h>
#endif
#ifndef INCLUDED_meta_data_dependency_FNFUIState
#include <meta/data/dependency/FNFUIState.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_d0bb7bf9dc786297_9_new,"meta.data.dependency.FNFUIState","new",0xb2de7dd9,"meta.data.dependency.FNFUIState.new","meta/data/dependency/FNFUIState.hx",9,0xf3208f76)
HX_LOCAL_STACK_FRAME(_hx_pos_d0bb7bf9dc786297_13_transitionIn,"meta.data.dependency.FNFUIState","transitionIn",0x70487841,"meta.data.dependency.FNFUIState.transitionIn","meta/data/dependency/FNFUIState.hx",13,0xf3208f76)
HX_LOCAL_STACK_FRAME(_hx_pos_d0bb7bf9dc786297_39_transitionOut,"meta.data.dependency.FNFUIState","transitionOut",0xcf2554b2,"meta.data.dependency.FNFUIState.transitionOut","meta/data/dependency/FNFUIState.hx",39,0xf3208f76)
namespace meta{
namespace data{
namespace dependency{

void FNFUIState_obj::__construct( ::flixel::addons::transition::TransitionData TransIn, ::flixel::addons::transition::TransitionData TransOut){
            	HX_STACKFRAME(&_hx_pos_d0bb7bf9dc786297_9_new)
HXDLIN(   9)		super::__construct(TransIn,TransOut);
            	}

Dynamic FNFUIState_obj::__CreateEmpty() { return new FNFUIState_obj; }

void *FNFUIState_obj::_hx_vtable = 0;

Dynamic FNFUIState_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< FNFUIState_obj > _hx_result = new FNFUIState_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool FNFUIState_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x2f064378) {
		if (inClassId<=(int)0x23a57bae) {
			if (inClassId<=(int)0x0225b2d9) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x0225b2d9;
			} else {
				return inClassId==(int)0x23a57bae;
			}
		} else {
			return inClassId==(int)0x2f064378;
		}
	} else {
		if (inClassId<=(int)0x7c795c9f) {
			return inClassId==(int)0x62817b24 || inClassId==(int)0x7c795c9f;
		} else {
			return inClassId==(int)0x7ccf8994;
		}
	}
}

void FNFUIState_obj::transitionIn(){
            	HX_GC_STACKFRAME(&_hx_pos_d0bb7bf9dc786297_13_transitionIn)
HXDLIN(  13)		bool _hx_tmp;
HXDLIN(  13)		if (::hx::IsNotNull( this->transIn )) {
HXDLIN(  13)			_hx_tmp = (this->transIn->type != HX_("none",b8,12,0a,49));
            		}
            		else {
HXDLIN(  13)			_hx_tmp = false;
            		}
HXDLIN(  13)		if (_hx_tmp) {
HXLINE(  15)			if (::flixel::addons::transition::FlxTransitionableState_obj::skipNextTransIn) {
HXLINE(  17)				::flixel::addons::transition::FlxTransitionableState_obj::skipNextTransIn = false;
HXLINE(  19)				if (::hx::IsNotNull( this->finishTransIn_dyn() )) {
HXLINE(  21)					this->finishTransIn();
            				}
HXLINE(  24)				return;
            			}
HXLINE(  28)			 ::meta::data::dependency::FNFTransition _trans =  ::meta::data::dependency::FNFTransition_obj::__alloc( HX_CTX ,this->transIn);
HXLINE(  30)			_trans->setStatus(3);
HXLINE(  31)			this->openSubState(_trans);
HXLINE(  33)			_trans->set_finishCallback(this->finishTransIn_dyn());
HXLINE(  34)			_trans->start(1);
            		}
            	}


void FNFUIState_obj::transitionOut( ::Dynamic OnExit){
            	HX_GC_STACKFRAME(&_hx_pos_d0bb7bf9dc786297_39_transitionOut)
HXLINE(  40)		this->_onExit = OnExit;
HXLINE(  42)		if (this->get_hasTransOut()) {
HXLINE(  44)			 ::meta::data::dependency::FNFTransition _trans =  ::meta::data::dependency::FNFTransition_obj::__alloc( HX_CTX ,this->transOut);
HXLINE(  46)			_trans->setStatus(2);
HXLINE(  47)			this->openSubState(_trans);
HXLINE(  49)			_trans->set_finishCallback(this->finishTransOut_dyn());
HXLINE(  50)			_trans->start(0);
            		}
            		else {
HXLINE(  54)			this->_onExit();
            		}
            	}



::hx::ObjectPtr< FNFUIState_obj > FNFUIState_obj::__new( ::flixel::addons::transition::TransitionData TransIn, ::flixel::addons::transition::TransitionData TransOut) {
	::hx::ObjectPtr< FNFUIState_obj > __this = new FNFUIState_obj();
	__this->__construct(TransIn,TransOut);
	return __this;
}

::hx::ObjectPtr< FNFUIState_obj > FNFUIState_obj::__alloc(::hx::Ctx *_hx_ctx, ::flixel::addons::transition::TransitionData TransIn, ::flixel::addons::transition::TransitionData TransOut) {
	FNFUIState_obj *__this = (FNFUIState_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(FNFUIState_obj), true, "meta.data.dependency.FNFUIState"));
	*(void **)__this = FNFUIState_obj::_hx_vtable;
	__this->__construct(TransIn,TransOut);
	return __this;
}

FNFUIState_obj::FNFUIState_obj()
{
}

::hx::Val FNFUIState_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 12:
		if (HX_FIELD_EQ(inName,"transitionIn") ) { return ::hx::Val( transitionIn_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"transitionOut") ) { return ::hx::Val( transitionOut_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *FNFUIState_obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo *FNFUIState_obj_sStaticStorageInfo = 0;
#endif

static ::String FNFUIState_obj_sMemberFields[] = {
	HX_("transitionIn",da,1c,de,8d),
	HX_("transitionOut",f9,b5,7f,94),
	::String(null()) };

::hx::Class FNFUIState_obj::__mClass;

void FNFUIState_obj::__register()
{
	FNFUIState_obj _hx_dummy;
	FNFUIState_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("meta.data.dependency.FNFUIState",67,9d,ca,af);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(FNFUIState_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< FNFUIState_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = FNFUIState_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = FNFUIState_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace meta
} // end namespace data
} // end namespace dependency

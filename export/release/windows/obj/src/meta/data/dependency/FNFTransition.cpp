// Generated by Haxe 4.1.5
#include <hxcpp.h>

#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxCamera
#include <flixel/FlxCamera.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
#ifndef INCLUDED_flixel_FlxSubState
#include <flixel/FlxSubState.h>
#endif
#ifndef INCLUDED_flixel_addons_transition_Transition
#include <flixel/addons/transition/Transition.h>
#endif
#ifndef INCLUDED_flixel_addons_transition_TransitionData
#include <flixel/addons/transition/TransitionData.h>
#endif
#ifndef INCLUDED_flixel_addons_transition_TransitionEffect
#include <flixel/addons/transition/TransitionEffect.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedSpriteGroup
#include <flixel/group/FlxTypedSpriteGroup.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_CameraFrontEnd
#include <flixel/system/frontEnds/CameraFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_meta_data_dependency_FNFTransition
#include <meta/data/dependency/FNFTransition.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_c4b3a75e842e84b8_14_new,"meta.data.dependency.FNFTransition","new",0xe0b2fc1d,"meta.data.dependency.FNFTransition.new","meta/data/dependency/FNFTransition.hx",14,0xc8a90794)
HX_LOCAL_STACK_FRAME(_hx_pos_c4b3a75e842e84b8_29_update,"meta.data.dependency.FNFTransition","update",0xd5208e6c,"meta.data.dependency.FNFTransition.update","meta/data/dependency/FNFTransition.hx",29,0xc8a90794)
namespace meta{
namespace data{
namespace dependency{

void FNFTransition_obj::__construct( ::flixel::addons::transition::TransitionData data){
            	HX_STACKFRAME(&_hx_pos_c4b3a75e842e84b8_14_new)
HXLINE(  17)		this->camStarted = false;
HXLINE(  22)		super::__construct(data);
HXLINE(  25)		this->back = Dynamic( this->_effect->group->members->__get(0)).StaticCast<  ::flixel::FlxSprite >();
            	}

Dynamic FNFTransition_obj::__CreateEmpty() { return new FNFTransition_obj; }

void *FNFTransition_obj::_hx_vtable = 0;

Dynamic FNFTransition_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< FNFTransition_obj > _hx_result = new FNFTransition_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool FNFTransition_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x62817b24) {
		if (inClassId<=(int)0x5661ffbf) {
			if (inClassId<=(int)0x30aafc19) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x30aafc19;
			} else {
				return inClassId==(int)0x5661ffbf;
			}
		} else {
			return inClassId==(int)0x62817b24;
		}
	} else {
		if (inClassId<=(int)0x7c795c9f) {
			return inClassId==(int)0x71440779 || inClassId==(int)0x7c795c9f;
		} else {
			return inClassId==(int)0x7ccf8994;
		}
	}
}

void FNFTransition_obj::update(Float gameTime){
            	HX_STACKFRAME(&_hx_pos_c4b3a75e842e84b8_29_update)
HXLINE(  31)		if (!(this->camStarted)) {
HXLINE(  33)			::Array< ::Dynamic> camList = ::flixel::FlxG_obj::cameras->list;
HXLINE(  34)			this->set_camera(camList->__get((camList->length - 1)).StaticCast<  ::flixel::FlxCamera >());
HXLINE(  35)			 ::flixel::FlxSprite _hx_tmp = this->back;
HXDLIN(  35)			_hx_tmp->set_camera(this->get_camera());
            		}
HXLINE(  38)		this->super::update(gameTime);
            	}



::hx::ObjectPtr< FNFTransition_obj > FNFTransition_obj::__new( ::flixel::addons::transition::TransitionData data) {
	::hx::ObjectPtr< FNFTransition_obj > __this = new FNFTransition_obj();
	__this->__construct(data);
	return __this;
}

::hx::ObjectPtr< FNFTransition_obj > FNFTransition_obj::__alloc(::hx::Ctx *_hx_ctx, ::flixel::addons::transition::TransitionData data) {
	FNFTransition_obj *__this = (FNFTransition_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(FNFTransition_obj), true, "meta.data.dependency.FNFTransition"));
	*(void **)__this = FNFTransition_obj::_hx_vtable;
	__this->__construct(data);
	return __this;
}

FNFTransition_obj::FNFTransition_obj()
{
}

void FNFTransition_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(FNFTransition);
	HX_MARK_MEMBER_NAME(back,"back");
	HX_MARK_MEMBER_NAME(camStarted,"camStarted");
	 ::flixel::addons::transition::Transition_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void FNFTransition_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(back,"back");
	HX_VISIT_MEMBER_NAME(camStarted,"camStarted");
	 ::flixel::addons::transition::Transition_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val FNFTransition_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"back") ) { return ::hx::Val( back ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"update") ) { return ::hx::Val( update_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"camStarted") ) { return ::hx::Val( camStarted ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val FNFTransition_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"back") ) { back=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"camStarted") ) { camStarted=inValue.Cast< bool >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void FNFTransition_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("back",27,da,10,41));
	outFields->push(HX_("camStarted",f2,0c,2c,a7));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo FNFTransition_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(FNFTransition_obj,back),HX_("back",27,da,10,41)},
	{::hx::fsBool,(int)offsetof(FNFTransition_obj,camStarted),HX_("camStarted",f2,0c,2c,a7)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *FNFTransition_obj_sStaticStorageInfo = 0;
#endif

static ::String FNFTransition_obj_sMemberFields[] = {
	HX_("back",27,da,10,41),
	HX_("camStarted",f2,0c,2c,a7),
	HX_("update",09,86,05,87),
	::String(null()) };

::hx::Class FNFTransition_obj::__mClass;

void FNFTransition_obj::__register()
{
	FNFTransition_obj _hx_dummy;
	FNFTransition_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("meta.data.dependency.FNFTransition",ab,a9,e9,eb);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(FNFTransition_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< FNFTransition_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = FNFTransition_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = FNFTransition_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace meta
} // end namespace data
} // end namespace dependency

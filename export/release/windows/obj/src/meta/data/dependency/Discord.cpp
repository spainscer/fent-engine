// Generated by Haxe 4.1.5
#include <hxcpp.h>

#ifndef INCLUDED_Date
#include <Date.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_discord_rpc_DiscordRpc
#include <discord_rpc/DiscordRpc.h>
#endif
#ifndef INCLUDED_haxe_Log
#include <haxe/Log.h>
#endif
#ifndef INCLUDED_lime_app_Application
#include <lime/app/Application.h>
#endif
#ifndef INCLUDED_lime_app_IModule
#include <lime/app/IModule.h>
#endif
#ifndef INCLUDED_lime_app_Module
#include <lime/app/Module.h>
#endif
#ifndef INCLUDED_lime_app__Event_Void_Void
#include <lime/app/_Event_Void_Void.h>
#endif
#ifndef INCLUDED_lime_ui_Window
#include <lime/ui/Window.h>
#endif
#ifndef INCLUDED_meta_data_dependency_Discord
#include <meta/data/dependency/Discord.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_bb0fe7a7280136b3_17_initializeRPC,"meta.data.dependency.Discord","initializeRPC",0x567e3d8b,"meta.data.dependency.Discord.initializeRPC","meta/data/dependency/Discord.hx",17,0x4db14c1b)
HX_LOCAL_STACK_FRAME(_hx_pos_bb0fe7a7280136b3_32_onReady,"meta.data.dependency.Discord","onReady",0x5d15285a,"meta.data.dependency.Discord.onReady","meta/data/dependency/Discord.hx",32,0x4db14c1b)
HX_LOCAL_STACK_FRAME(_hx_pos_bb0fe7a7280136b3_42_onError,"meta.data.dependency.Discord","onError",0xe98453bf,"meta.data.dependency.Discord.onError","meta/data/dependency/Discord.hx",42,0x4db14c1b)
HX_LOCAL_STACK_FRAME(_hx_pos_bb0fe7a7280136b3_47_onDisconnected,"meta.data.dependency.Discord","onDisconnected",0xc12c00a4,"meta.data.dependency.Discord.onDisconnected","meta/data/dependency/Discord.hx",47,0x4db14c1b)
HX_LOCAL_STACK_FRAME(_hx_pos_bb0fe7a7280136b3_53_changePresence,"meta.data.dependency.Discord","changePresence",0xc8e3a4f5,"meta.data.dependency.Discord.changePresence","meta/data/dependency/Discord.hx",53,0x4db14c1b)
HX_LOCAL_STACK_FRAME(_hx_pos_bb0fe7a7280136b3_76_shutdownRPC,"meta.data.dependency.Discord","shutdownRPC",0x9c5e7085,"meta.data.dependency.Discord.shutdownRPC","meta/data/dependency/Discord.hx",76,0x4db14c1b)
namespace meta{
namespace data{
namespace dependency{

void Discord_obj::__construct() { }

Dynamic Discord_obj::__CreateEmpty() { return new Discord_obj; }

void *Discord_obj::_hx_vtable = 0;

Dynamic Discord_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< Discord_obj > _hx_result = new Discord_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Discord_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x19dc88a6;
}

void Discord_obj::initializeRPC(){
            	HX_STACKFRAME(&_hx_pos_bb0fe7a7280136b3_17_initializeRPC)
HXLINE(  18)		::discord_rpc::DiscordRpc_obj::start( ::Dynamic(::hx::Anon_obj::Create(4)
            			->setFixed(0,HX_("onDisconnected",7a,eb,5a,b8),::meta::data::dependency::Discord_obj::onDisconnected_dyn())
            			->setFixed(1,HX_("onError",29,6a,67,09),::meta::data::dependency::Discord_obj::onError_dyn())
            			->setFixed(2,HX_("clientID",e6,72,8f,15),HX_("879525344128925717",e3,fc,88,82))
            			->setFixed(3,HX_("onReady",c4,3e,f8,7c),::meta::data::dependency::Discord_obj::onReady_dyn())));
HXLINE(  26)		::lime::app::Application_obj::current->_hx___window->onClose->add(::meta::data::dependency::Discord_obj::shutdownRPC_dyn(),null(),null());
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Discord_obj,initializeRPC,(void))

void Discord_obj::onReady(){
            	HX_STACKFRAME(&_hx_pos_bb0fe7a7280136b3_32_onReady)
HXDLIN(  32)		::discord_rpc::DiscordRpc_obj::presence( ::Dynamic(::hx::Anon_obj::Create(4)
            			->setFixed(0,HX_("state",11,76,0b,84),null())
            			->setFixed(1,HX_("details",c2,dc,56,ab),HX_("",00,00,00,00))
            			->setFixed(2,HX_("largeImageKey",df,8f,e3,ae),HX_("iconog",d1,d8,d6,45))
            			->setFixed(3,HX_("largeImageText",6d,3e,2d,5e),HX_("Forever Engine",5b,6c,aa,50))));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Discord_obj,onReady,(void))

void Discord_obj::onError(int _code,::String _message){
            	HX_STACKFRAME(&_hx_pos_bb0fe7a7280136b3_42_onError)
HXDLIN(  42)		::haxe::Log_obj::trace((((HX_("Error! ",87,92,5b,b7) + _code) + HX_(" : ",c6,7a,18,00)) + _message),::hx::SourceInfo(HX_("source/meta/data/dependency/Discord.hx",a7,07,3c,45),42,HX_("meta.data.dependency.Discord",04,c4,e2,c6),HX_("onError",29,6a,67,09)));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Discord_obj,onError,(void))

void Discord_obj::onDisconnected(int _code,::String _message){
            	HX_STACKFRAME(&_hx_pos_bb0fe7a7280136b3_47_onDisconnected)
HXDLIN(  47)		::haxe::Log_obj::trace((((HX_("Disconnected! ",7a,e1,87,53) + _code) + HX_(" : ",c6,7a,18,00)) + _message),::hx::SourceInfo(HX_("source/meta/data/dependency/Discord.hx",a7,07,3c,45),47,HX_("meta.data.dependency.Discord",04,c4,e2,c6),HX_("onDisconnected",7a,eb,5a,b8)));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Discord_obj,onDisconnected,(void))

void Discord_obj::changePresence(::String __o_details,::String __o_state,::String smallImageKey, ::Dynamic hasStartTimestamp, ::Dynamic endTimestamp){
            		::String details = __o_details;
            		if (::hx::IsNull(__o_details)) details = HX_("",00,00,00,00);
            		::String state = __o_state;
            		if (::hx::IsNull(__o_state)) state = HX_("",00,00,00,00);
            	HX_STACKFRAME(&_hx_pos_bb0fe7a7280136b3_53_changePresence)
HXLINE(  54)		Float startTimestamp;
HXDLIN(  54)		if (( (bool)(hasStartTimestamp) )) {
HXLINE(  54)			startTimestamp = ::Date_obj::now()->getTime();
            		}
            		else {
HXLINE(  54)			startTimestamp = ( (Float)(0) );
            		}
HXLINE(  56)		if (::hx::IsGreater( endTimestamp,0 )) {
HXLINE(  57)			endTimestamp = (startTimestamp + endTimestamp);
            		}
HXLINE(  66)		 ::Dynamic _hx_tmp = ::Std_obj::_hx_int((startTimestamp / ( (Float)(1000) )));
HXLINE(  59)		::discord_rpc::DiscordRpc_obj::presence( ::Dynamic(::hx::Anon_obj::Create(7)
            			->setFixed(0,HX_("state",11,76,0b,84),state)
            			->setFixed(1,HX_("smallImageKey",eb,38,69,a3),smallImageKey)
            			->setFixed(2,HX_("details",c2,dc,56,ab),details)
            			->setFixed(3,HX_("largeImageKey",df,8f,e3,ae),HX_("iconog",d1,d8,d6,45))
            			->setFixed(4,HX_("endTimestamp",7b,dd,d0,b4),::Std_obj::_hx_int((( (Float)(endTimestamp) ) / ( (Float)(1000) ))))
            			->setFixed(5,HX_("startTimestamp",14,a4,09,c5),_hx_tmp)
            			->setFixed(6,HX_("largeImageText",6d,3e,2d,5e),HX_("Forever Engine",5b,6c,aa,50))));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC5(Discord_obj,changePresence,(void))

void Discord_obj::shutdownRPC(){
            	HX_STACKFRAME(&_hx_pos_bb0fe7a7280136b3_76_shutdownRPC)
HXDLIN(  76)		::discord_rpc::DiscordRpc_obj::shutdown();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Discord_obj,shutdownRPC,(void))


Discord_obj::Discord_obj()
{
}

bool Discord_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"onReady") ) { outValue = onReady_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"onError") ) { outValue = onError_dyn(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"shutdownRPC") ) { outValue = shutdownRPC_dyn(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"initializeRPC") ) { outValue = initializeRPC_dyn(); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"onDisconnected") ) { outValue = onDisconnected_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"changePresence") ) { outValue = changePresence_dyn(); return true; }
	}
	return false;
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *Discord_obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo *Discord_obj_sStaticStorageInfo = 0;
#endif

::hx::Class Discord_obj::__mClass;

static ::String Discord_obj_sStaticFields[] = {
	HX_("initializeRPC",75,ff,b8,12),
	HX_("onReady",c4,3e,f8,7c),
	HX_("onError",29,6a,67,09),
	HX_("onDisconnected",7a,eb,5a,b8),
	HX_("changePresence",cb,8f,12,c0),
	HX_("shutdownRPC",ef,03,fe,c2),
	::String(null())
};

void Discord_obj::__register()
{
	Discord_obj _hx_dummy;
	Discord_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("meta.data.dependency.Discord",04,c4,e2,c6);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Discord_obj::__GetStatic;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(Discord_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = ::hx::TCanCast< Discord_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Discord_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Discord_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace meta
} // end namespace data
} // end namespace dependency

// Generated by Haxe 4.1.5
#include <hxcpp.h>

#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_animation_FlxAnimationController
#include <flixel/animation/FlxAnimationController.h>
#endif
#ifndef INCLUDED_flixel_graphics_FlxGraphic
#include <flixel/graphics/FlxGraphic.h>
#endif
#ifndef INCLUDED_flixel_graphics_frames_FlxFramesCollection
#include <flixel/graphics/frames/FlxFramesCollection.h>
#endif
#ifndef INCLUDED_flixel_graphics_frames_FlxImageFrame
#include <flixel/graphics/frames/FlxImageFrame.h>
#endif
#ifndef INCLUDED_flixel_graphics_frames_FlxTileFrames
#include <flixel/graphics/frames/FlxTileFrames.h>
#endif
#ifndef INCLUDED_flixel_math_FlxPoint
#include <flixel/math/FlxPoint.h>
#endif
#ifndef INCLUDED_flixel_math_FlxRect
#include <flixel/math/FlxRect.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_BitmapFrontEnd
#include <flixel/system/frontEnds/BitmapFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_util_FlxPool_flixel_math_FlxPoint
#include <flixel/util/FlxPool_flixel_math_FlxPoint.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPool
#include <flixel/util/IFlxPool.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_meta_data_dependency_FNFSprite
#include <meta/data/dependency/FNFSprite.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_4191b5ddd4e5a298_19_new,"meta.data.dependency.FNFSprite","new",0x6caa7f8d,"meta.data.dependency.FNFSprite.new","meta/data/dependency/FNFSprite.hx",19,0x8a611da4)
HX_LOCAL_STACK_FRAME(_hx_pos_4191b5ddd4e5a298_26_playAnim,"meta.data.dependency.FNFSprite","playAnim",0xbea317d8,"meta.data.dependency.FNFSprite.playAnim","meta/data/dependency/FNFSprite.hx",26,0x8a611da4)
HX_LOCAL_STACK_FRAME(_hx_pos_4191b5ddd4e5a298_40_addOffset,"meta.data.dependency.FNFSprite","addOffset",0xe4ad9b81,"meta.data.dependency.FNFSprite.addOffset","meta/data/dependency/FNFSprite.hx",40,0x8a611da4)
HX_LOCAL_STACK_FRAME(_hx_pos_4191b5ddd4e5a298_45_loadGraphic,"meta.data.dependency.FNFSprite","loadGraphic",0x12323d4f,"meta.data.dependency.FNFSprite.loadGraphic","meta/data/dependency/FNFSprite.hx",45,0x8a611da4)
HX_LOCAL_STACK_FRAME(_hx_pos_4191b5ddd4e5a298_71_destroy,"meta.data.dependency.FNFSprite","destroy",0x7c6876a7,"meta.data.dependency.FNFSprite.destroy","meta/data/dependency/FNFSprite.hx",71,0x8a611da4)
namespace meta{
namespace data{
namespace dependency{

void FNFSprite_obj::__construct(::hx::Null< Float >  __o_x,::hx::Null< Float >  __o_y){
            		Float x = __o_x.Default(0);
            		Float y = __o_y.Default(0);
            	HX_GC_STACKFRAME(&_hx_pos_4191b5ddd4e5a298_19_new)
HXLINE(  20)		super::__construct(x,y,null());
HXLINE(  22)		this->animOffsets =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
            	}

Dynamic FNFSprite_obj::__CreateEmpty() { return new FNFSprite_obj; }

void *FNFSprite_obj::_hx_vtable = 0;

Dynamic FNFSprite_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< FNFSprite_obj > _hx_result = new FNFSprite_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool FNFSprite_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x78a693e9) {
		if (inClassId<=(int)0x2c01639b) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x2c01639b;
		} else {
			return inClassId==(int)0x78a693e9;
		}
	} else {
		return inClassId==(int)0x7ccf8994 || inClassId==(int)0x7dab0655;
	}
}

void FNFSprite_obj::playAnim(::String AnimName,::hx::Null< bool >  __o_Force,::hx::Null< bool >  __o_Reversed,::hx::Null< int >  __o_Frame){
            		bool Force = __o_Force.Default(false);
            		bool Reversed = __o_Reversed.Default(false);
            		int Frame = __o_Frame.Default(0);
            	HX_STACKFRAME(&_hx_pos_4191b5ddd4e5a298_26_playAnim)
HXLINE(  27)		this->animation->play(AnimName,Force,Reversed,Frame);
HXLINE(  29)		::cpp::VirtualArray daOffset = ( (::cpp::VirtualArray)(this->animOffsets->get(AnimName)) );
HXLINE(  30)		if (this->animOffsets->exists(AnimName)) {
HXLINE(  32)			this->offset->set(daOffset->__get(0),daOffset->__get(1));
            		}
            		else {
HXLINE(  35)			this->offset->set(0,0);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC4(FNFSprite_obj,playAnim,(void))

void FNFSprite_obj::addOffset(::String name,::hx::Null< Float >  __o_x,::hx::Null< Float >  __o_y){
            		Float x = __o_x.Default(0);
            		Float y = __o_y.Default(0);
            	HX_STACKFRAME(&_hx_pos_4191b5ddd4e5a298_40_addOffset)
HXDLIN(  40)		::cpp::VirtualArray v = ::Array_obj< Float >::__new(2)->init(0,x)->init(1,y);
HXDLIN(  40)		this->animOffsets->set(name,v);
            	}


HX_DEFINE_DYNAMIC_FUNC3(FNFSprite_obj,addOffset,(void))

 ::flixel::FlxSprite FNFSprite_obj::loadGraphic( ::Dynamic Graphic,::hx::Null< bool >  __o_Animated,::hx::Null< int >  __o_Width,::hx::Null< int >  __o_Height,::hx::Null< bool >  __o_Unique,::String Key){
            		bool Animated = __o_Animated.Default(false);
            		int Width = __o_Width.Default(0);
            		int Height = __o_Height.Default(0);
            		bool Unique = __o_Unique.Default(false);
            	HX_STACKFRAME(&_hx_pos_4191b5ddd4e5a298_45_loadGraphic)
HXLINE(  46)		 ::flixel::graphics::FlxGraphic graph = ::flixel::FlxG_obj::bitmap->add(Graphic,Unique,Key);
HXLINE(  47)		if (::hx::IsNull( graph )) {
HXLINE(  48)			return ::hx::ObjectPtr<OBJ_>(this);
            		}
HXLINE(  50)		if ((Width == 0)) {
HXLINE(  52)			if (Animated) {
HXLINE(  52)				Width = graph->height;
            			}
            			else {
HXLINE(  52)				Width = graph->width;
            			}
HXLINE(  53)			if ((Width > graph->width)) {
HXLINE(  53)				Width = graph->width;
            			}
            		}
HXLINE(  56)		if ((Height == 0)) {
HXLINE(  58)			if (Animated) {
HXLINE(  58)				Height = Width;
            			}
            			else {
HXLINE(  58)				Height = graph->height;
            			}
HXLINE(  59)			if ((Height > graph->height)) {
HXLINE(  59)				Height = graph->height;
            			}
            		}
HXLINE(  62)		if (Animated) {
HXLINE(  63)			 ::flixel::math::FlxPoint point = ::flixel::math::FlxPoint_obj::_pool->get()->set(Width,Height);
HXDLIN(  63)			point->_inPool = false;
HXDLIN(  63)			this->set_frames(::flixel::graphics::frames::FlxTileFrames_obj::fromGraphic(graph,point,null(),null()));
            		}
            		else {
HXLINE(  65)			this->set_frames(graph->get_imageFrame());
            		}
HXLINE(  67)		return ::hx::ObjectPtr<OBJ_>(this);
            	}


void FNFSprite_obj::destroy(){
            	HX_STACKFRAME(&_hx_pos_4191b5ddd4e5a298_71_destroy)
HXLINE(  73)		if (::hx::IsNotNull( this->graphic )) {
HXLINE(  74)			this->graphic->dump();
            		}
HXLINE(  76)		this->super::destroy();
            	}



::hx::ObjectPtr< FNFSprite_obj > FNFSprite_obj::__new(::hx::Null< Float >  __o_x,::hx::Null< Float >  __o_y) {
	::hx::ObjectPtr< FNFSprite_obj > __this = new FNFSprite_obj();
	__this->__construct(__o_x,__o_y);
	return __this;
}

::hx::ObjectPtr< FNFSprite_obj > FNFSprite_obj::__alloc(::hx::Ctx *_hx_ctx,::hx::Null< Float >  __o_x,::hx::Null< Float >  __o_y) {
	FNFSprite_obj *__this = (FNFSprite_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(FNFSprite_obj), true, "meta.data.dependency.FNFSprite"));
	*(void **)__this = FNFSprite_obj::_hx_vtable;
	__this->__construct(__o_x,__o_y);
	return __this;
}

FNFSprite_obj::FNFSprite_obj()
{
}

void FNFSprite_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(FNFSprite);
	HX_MARK_MEMBER_NAME(animOffsets,"animOffsets");
	 ::flixel::FlxSprite_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void FNFSprite_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(animOffsets,"animOffsets");
	 ::flixel::FlxSprite_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val FNFSprite_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"destroy") ) { return ::hx::Val( destroy_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"playAnim") ) { return ::hx::Val( playAnim_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"addOffset") ) { return ::hx::Val( addOffset_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"animOffsets") ) { return ::hx::Val( animOffsets ); }
		if (HX_FIELD_EQ(inName,"loadGraphic") ) { return ::hx::Val( loadGraphic_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val FNFSprite_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 11:
		if (HX_FIELD_EQ(inName,"animOffsets") ) { animOffsets=inValue.Cast<  ::haxe::ds::StringMap >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void FNFSprite_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("animOffsets",6f,ff,7a,f8));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo FNFSprite_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::haxe::ds::StringMap */ ,(int)offsetof(FNFSprite_obj,animOffsets),HX_("animOffsets",6f,ff,7a,f8)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *FNFSprite_obj_sStaticStorageInfo = 0;
#endif

static ::String FNFSprite_obj_sMemberFields[] = {
	HX_("animOffsets",6f,ff,7a,f8),
	HX_("playAnim",25,ea,84,30),
	HX_("addOffset",94,cc,63,18),
	HX_("loadGraphic",22,19,a5,44),
	HX_("destroy",fa,2c,86,24),
	::String(null()) };

::hx::Class FNFSprite_obj::__mClass;

void FNFSprite_obj::__register()
{
	FNFSprite_obj _hx_dummy;
	FNFSprite_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("meta.data.dependency.FNFSprite",1b,b5,1e,d4);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(FNFSprite_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< FNFSprite_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = FNFSprite_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = FNFSprite_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace meta
} // end namespace data
} // end namespace dependency

// Generated by Haxe 4.1.5
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
#ifndef INCLUDED_flixel_addons_transition_FlxTransitionableState
#include <flixel/addons/transition/FlxTransitionableState.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUIState
#include <flixel/addons/ui/FlxUIState.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IEventGetter
#include <flixel/addons/ui/interfaces/IEventGetter.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IFlxUIState
#include <flixel/addons/ui/interfaces/IFlxUIState.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_gameObjects_userInterface_ClassHUD
#include <gameObjects/userInterface/ClassHUD.h>
#endif
#ifndef INCLUDED_gameObjects_userInterface_notes_Note
#include <gameObjects/userInterface/notes/Note.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_meta_MusicBeatState
#include <meta/MusicBeatState.h>
#endif
#ifndef INCLUDED_meta_data_Timings
#include <meta/data/Timings.h>
#endif
#ifndef INCLUDED_meta_data_dependency_FNFSprite
#include <meta/data/dependency/FNFSprite.h>
#endif
#ifndef INCLUDED_meta_data_dependency_FNFUIState
#include <meta/data/dependency/FNFUIState.h>
#endif
#ifndef INCLUDED_meta_state_PlayState
#include <meta/state/PlayState.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_55c2df60a0b7d283_50_callAccuracy,"meta.data.Timings","callAccuracy",0x2d0e09d7,"meta.data.Timings.callAccuracy","meta/data/Timings.hx",50,0xdbfd7850)
HX_LOCAL_STACK_FRAME(_hx_pos_55c2df60a0b7d283_81_accuracyMaxCalculation,"meta.data.Timings","accuracyMaxCalculation",0xfaf091be,"meta.data.Timings.accuracyMaxCalculation","meta/data/Timings.hx",81,0xdbfd7850)
HX_LOCAL_STACK_FRAME(_hx_pos_55c2df60a0b7d283_92_updateAccuracy,"meta.data.Timings","updateAccuracy",0x40f75242,"meta.data.Timings.updateAccuracy","meta/data/Timings.hx",92,0xdbfd7850)
HX_LOCAL_STACK_FRAME(_hx_pos_55c2df60a0b7d283_104_updateFCDisplay,"meta.data.Timings","updateFCDisplay",0x57cf427c,"meta.data.Timings.updateFCDisplay","meta/data/Timings.hx",104,0xdbfd7850)
HX_LOCAL_STACK_FRAME(_hx_pos_55c2df60a0b7d283_116_getAccuracy,"meta.data.Timings","getAccuracy",0x74e2240f,"meta.data.Timings.getAccuracy","meta/data/Timings.hx",116,0xdbfd7850)
HX_LOCAL_STACK_FRAME(_hx_pos_55c2df60a0b7d283_120_updateScoreRating,"meta.data.Timings","updateScoreRating",0xd42884a6,"meta.data.Timings.updateScoreRating","meta/data/Timings.hx",120,0xdbfd7850)
HX_LOCAL_STACK_FRAME(_hx_pos_55c2df60a0b7d283_134_returnScoreRating,"meta.data.Timings","returnScoreRating",0x05b9a95f,"meta.data.Timings.returnScoreRating","meta/data/Timings.hx",134,0xdbfd7850)
HX_LOCAL_STACK_FRAME(_hx_pos_55c2df60a0b7d283_18_boot,"meta.data.Timings","boot",0x94660512,"meta.data.Timings.boot","meta/data/Timings.hx",18,0xdbfd7850)
HX_LOCAL_STACK_FRAME(_hx_pos_55c2df60a0b7d283_26_boot,"meta.data.Timings","boot",0x94660512,"meta.data.Timings.boot","meta/data/Timings.hx",26,0xdbfd7850)
HX_LOCAL_STACK_FRAME(_hx_pos_55c2df60a0b7d283_29_boot,"meta.data.Timings","boot",0x94660512,"meta.data.Timings.boot","meta/data/Timings.hx",29,0xdbfd7850)
HX_LOCAL_STACK_FRAME(_hx_pos_55c2df60a0b7d283_40_boot,"meta.data.Timings","boot",0x94660512,"meta.data.Timings.boot","meta/data/Timings.hx",40,0xdbfd7850)
HX_LOCAL_STACK_FRAME(_hx_pos_55c2df60a0b7d283_41_boot,"meta.data.Timings","boot",0x94660512,"meta.data.Timings.boot","meta/data/Timings.hx",41,0xdbfd7850)
HX_LOCAL_STACK_FRAME(_hx_pos_55c2df60a0b7d283_43_boot,"meta.data.Timings","boot",0x94660512,"meta.data.Timings.boot","meta/data/Timings.hx",43,0xdbfd7850)
HX_LOCAL_STACK_FRAME(_hx_pos_55c2df60a0b7d283_44_boot,"meta.data.Timings","boot",0x94660512,"meta.data.Timings.boot","meta/data/Timings.hx",44,0xdbfd7850)
HX_LOCAL_STACK_FRAME(_hx_pos_55c2df60a0b7d283_46_boot,"meta.data.Timings","boot",0x94660512,"meta.data.Timings.boot","meta/data/Timings.hx",46,0xdbfd7850)
namespace meta{
namespace data{

void Timings_obj::__construct() { }

Dynamic Timings_obj::__CreateEmpty() { return new Timings_obj; }

void *Timings_obj::_hx_vtable = 0;

Dynamic Timings_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< Timings_obj > _hx_result = new Timings_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Timings_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x5a68bdba;
}

Float Timings_obj::accuracy;

Float Timings_obj::trueAccuracy;

::Array< Float > Timings_obj::judgementRates;

 ::haxe::ds::StringMap Timings_obj::judgementsMap;

Float Timings_obj::msThreshold;

 ::haxe::ds::StringMap Timings_obj::scoreRating;

::String Timings_obj::ratingFinal;

int Timings_obj::notesHit;

::String Timings_obj::comboDisplay;

int Timings_obj::notesHitNoSus;

 ::haxe::ds::StringMap Timings_obj::gottenJudgements;

::String Timings_obj::smallestRating;

void Timings_obj::callAccuracy(){
            	HX_STACKFRAME(&_hx_pos_55c2df60a0b7d283_50_callAccuracy)
HXLINE(  52)		::meta::data::Timings_obj::accuracy = ((Float)0.001);
HXLINE(  53)		::meta::data::Timings_obj::trueAccuracy = ( (Float)(0) );
HXLINE(  54)		::meta::data::Timings_obj::judgementRates = ::Array_obj< Float >::__new();
HXLINE(  57)		Float biggestThreshold = ( (Float)(0) );
HXLINE(  58)		{
HXLINE(  58)			 ::Dynamic i = ::meta::data::Timings_obj::judgementsMap->keys();
HXDLIN(  58)			while(( (bool)(i->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXLINE(  58)				::String i1 = ( (::String)(i->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXLINE(  59)				if (::hx::IsGreater( ::meta::data::Timings_obj::judgementsMap->get(i1)->__GetItem(1),biggestThreshold )) {
HXLINE(  60)					biggestThreshold = ( (Float)(::meta::data::Timings_obj::judgementsMap->get(i1)->__GetItem(1)) );
            				}
            			}
            		}
HXLINE(  61)		::meta::data::Timings_obj::msThreshold = biggestThreshold;
HXLINE(  64)		{
HXLINE(  64)			 ::Dynamic judgement = ::meta::data::Timings_obj::judgementsMap->keys();
HXDLIN(  64)			while(( (bool)(judgement->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXLINE(  64)				::String judgement1 = ( (::String)(judgement->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXLINE(  65)				::meta::data::Timings_obj::gottenJudgements->set(judgement1,0);
            			}
            		}
HXLINE(  66)		::meta::data::Timings_obj::smallestRating = HX_("sick",be,8c,53,4c);
HXLINE(  68)		::meta::data::Timings_obj::notesHit = 0;
HXLINE(  69)		::meta::data::Timings_obj::notesHitNoSus = 0;
HXLINE(  71)		::meta::data::Timings_obj::ratingFinal = HX_("f",66,00,00,00);
HXLINE(  73)		::meta::data::Timings_obj::comboDisplay = HX_("",00,00,00,00);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Timings_obj,callAccuracy,(void))

void Timings_obj::accuracyMaxCalculation(::Array< ::Dynamic> realNotes){
            	HX_STACKFRAME(&_hx_pos_55c2df60a0b7d283_81_accuracyMaxCalculation)
HXLINE(  83)		int totalNotes = 0;
HXLINE(  84)		{
HXLINE(  84)			int _g = 0;
HXDLIN(  84)			int _g1 = realNotes->length;
HXDLIN(  84)			while((_g < _g1)){
HXLINE(  84)				_g = (_g + 1);
HXDLIN(  84)				int i = (_g - 1);
HXLINE(  86)				if (realNotes->__get(i).StaticCast<  ::gameObjects::userInterface::notes::Note >()->mustPress) {
HXLINE(  87)					totalNotes = (totalNotes + 1);
            				}
            			}
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Timings_obj,accuracyMaxCalculation,(void))

void Timings_obj::updateAccuracy(int judgement,::hx::Null< bool >  __o_isSustain){
            		bool isSustain = __o_isSustain.Default(false);
            	HX_STACKFRAME(&_hx_pos_55c2df60a0b7d283_92_updateAccuracy)
HXLINE(  93)		::meta::data::Timings_obj::notesHit++;
HXLINE(  94)		if (!(isSustain)) {
HXLINE(  95)			::meta::data::Timings_obj::notesHitNoSus++;
            		}
HXLINE(  96)		 ::Dynamic _hx_tmp = ::hx::ClassOf< ::meta::data::Timings >();
HXDLIN(  96)		::meta::data::Timings_obj::accuracy = (::meta::data::Timings_obj::accuracy + ::Math_obj::max(( (Float)(0) ),( (Float)(judgement) )));
HXLINE(  97)		::meta::data::Timings_obj::trueAccuracy = (::meta::data::Timings_obj::accuracy / ( (Float)(::meta::data::Timings_obj::notesHit) ));
HXLINE(  99)		::meta::data::Timings_obj::updateFCDisplay();
HXLINE( 100)		::meta::data::Timings_obj::updateScoreRating();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Timings_obj,updateAccuracy,(void))

void Timings_obj::updateFCDisplay(){
            	HX_STACKFRAME(&_hx_pos_55c2df60a0b7d283_104_updateFCDisplay)
HXLINE( 106)		::meta::data::Timings_obj::comboDisplay = HX_("",00,00,00,00);
HXLINE( 107)		if (::hx::IsNotNull( ::meta::data::Timings_obj::judgementsMap->get(::meta::data::Timings_obj::smallestRating)->__GetItem(4) )) {
HXLINE( 108)			::meta::data::Timings_obj::comboDisplay = ( (::String)(::meta::data::Timings_obj::judgementsMap->get(::meta::data::Timings_obj::smallestRating)->__GetItem(4)) );
            		}
HXLINE( 111)		::meta::state::PlayState_obj::uiHUD->updateScoreText();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Timings_obj,updateFCDisplay,(void))

Float Timings_obj::getAccuracy(){
            	HX_STACKFRAME(&_hx_pos_55c2df60a0b7d283_116_getAccuracy)
HXDLIN( 116)		return ::meta::data::Timings_obj::trueAccuracy;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Timings_obj,getAccuracy,return )

void Timings_obj::updateScoreRating(){
            	HX_STACKFRAME(&_hx_pos_55c2df60a0b7d283_120_updateScoreRating)
HXLINE( 121)		int biggest = 0;
HXLINE( 122)		{
HXLINE( 122)			 ::Dynamic score = ::meta::data::Timings_obj::scoreRating->keys();
HXDLIN( 122)			while(( (bool)(score->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXLINE( 122)				::String score1 = ( (::String)(score->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXLINE( 124)				bool _hx_tmp;
HXDLIN( 124)				 ::Dynamic _hx_tmp1 = ::meta::data::Timings_obj::scoreRating->get(score1);
HXDLIN( 124)				if (::hx::IsLessEq( _hx_tmp1,::meta::data::Timings_obj::trueAccuracy )) {
HXLINE( 124)					_hx_tmp = ::hx::IsGreaterEq( ::meta::data::Timings_obj::scoreRating->get(score1),biggest );
            				}
            				else {
HXLINE( 124)					_hx_tmp = false;
            				}
HXDLIN( 124)				if (_hx_tmp) {
HXLINE( 126)					biggest = ::meta::data::Timings_obj::scoreRating->get_int(score1);
HXLINE( 127)					::meta::data::Timings_obj::ratingFinal = score1;
            				}
            			}
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Timings_obj,updateScoreRating,(void))

::String Timings_obj::returnScoreRating(){
            	HX_STACKFRAME(&_hx_pos_55c2df60a0b7d283_134_returnScoreRating)
HXDLIN( 134)		return ::meta::data::Timings_obj::ratingFinal;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Timings_obj,returnScoreRating,return )


Timings_obj::Timings_obj()
{
}

bool Timings_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"accuracy") ) { outValue = ( accuracy ); return true; }
		if (HX_FIELD_EQ(inName,"notesHit") ) { outValue = ( notesHit ); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"msThreshold") ) { outValue = ( msThreshold ); return true; }
		if (HX_FIELD_EQ(inName,"scoreRating") ) { outValue = ( scoreRating ); return true; }
		if (HX_FIELD_EQ(inName,"ratingFinal") ) { outValue = ( ratingFinal ); return true; }
		if (HX_FIELD_EQ(inName,"getAccuracy") ) { outValue = getAccuracy_dyn(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"trueAccuracy") ) { outValue = ( trueAccuracy ); return true; }
		if (HX_FIELD_EQ(inName,"comboDisplay") ) { outValue = ( comboDisplay ); return true; }
		if (HX_FIELD_EQ(inName,"callAccuracy") ) { outValue = callAccuracy_dyn(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"judgementsMap") ) { outValue = ( judgementsMap ); return true; }
		if (HX_FIELD_EQ(inName,"notesHitNoSus") ) { outValue = ( notesHitNoSus ); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"judgementRates") ) { outValue = ( judgementRates ); return true; }
		if (HX_FIELD_EQ(inName,"smallestRating") ) { outValue = ( smallestRating ); return true; }
		if (HX_FIELD_EQ(inName,"updateAccuracy") ) { outValue = updateAccuracy_dyn(); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"updateFCDisplay") ) { outValue = updateFCDisplay_dyn(); return true; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"gottenJudgements") ) { outValue = ( gottenJudgements ); return true; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"updateScoreRating") ) { outValue = updateScoreRating_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"returnScoreRating") ) { outValue = returnScoreRating_dyn(); return true; }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"accuracyMaxCalculation") ) { outValue = accuracyMaxCalculation_dyn(); return true; }
	}
	return false;
}

bool Timings_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"accuracy") ) { accuracy=ioValue.Cast< Float >(); return true; }
		if (HX_FIELD_EQ(inName,"notesHit") ) { notesHit=ioValue.Cast< int >(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"msThreshold") ) { msThreshold=ioValue.Cast< Float >(); return true; }
		if (HX_FIELD_EQ(inName,"scoreRating") ) { scoreRating=ioValue.Cast<  ::haxe::ds::StringMap >(); return true; }
		if (HX_FIELD_EQ(inName,"ratingFinal") ) { ratingFinal=ioValue.Cast< ::String >(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"trueAccuracy") ) { trueAccuracy=ioValue.Cast< Float >(); return true; }
		if (HX_FIELD_EQ(inName,"comboDisplay") ) { comboDisplay=ioValue.Cast< ::String >(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"judgementsMap") ) { judgementsMap=ioValue.Cast<  ::haxe::ds::StringMap >(); return true; }
		if (HX_FIELD_EQ(inName,"notesHitNoSus") ) { notesHitNoSus=ioValue.Cast< int >(); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"judgementRates") ) { judgementRates=ioValue.Cast< ::Array< Float > >(); return true; }
		if (HX_FIELD_EQ(inName,"smallestRating") ) { smallestRating=ioValue.Cast< ::String >(); return true; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"gottenJudgements") ) { gottenJudgements=ioValue.Cast<  ::haxe::ds::StringMap >(); return true; }
	}
	return false;
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *Timings_obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo Timings_obj_sStaticStorageInfo[] = {
	{::hx::fsFloat,(void *) &Timings_obj::accuracy,HX_("accuracy",39,06,c5,ff)},
	{::hx::fsFloat,(void *) &Timings_obj::trueAccuracy,HX_("trueAccuracy",a7,67,87,22)},
	{::hx::fsObject /* ::Array< Float > */ ,(void *) &Timings_obj::judgementRates,HX_("judgementRates",9e,64,04,fb)},
	{::hx::fsObject /*  ::haxe::ds::StringMap */ ,(void *) &Timings_obj::judgementsMap,HX_("judgementsMap",1e,57,b5,b0)},
	{::hx::fsFloat,(void *) &Timings_obj::msThreshold,HX_("msThreshold",65,27,9e,16)},
	{::hx::fsObject /*  ::haxe::ds::StringMap */ ,(void *) &Timings_obj::scoreRating,HX_("scoreRating",0f,65,f0,87)},
	{::hx::fsString,(void *) &Timings_obj::ratingFinal,HX_("ratingFinal",19,92,1a,eb)},
	{::hx::fsInt,(void *) &Timings_obj::notesHit,HX_("notesHit",92,80,94,70)},
	{::hx::fsString,(void *) &Timings_obj::comboDisplay,HX_("comboDisplay",94,ef,11,43)},
	{::hx::fsInt,(void *) &Timings_obj::notesHitNoSus,HX_("notesHitNoSus",de,7d,15,38)},
	{::hx::fsObject /*  ::haxe::ds::StringMap */ ,(void *) &Timings_obj::gottenJudgements,HX_("gottenJudgements",8f,e1,d7,57)},
	{::hx::fsString,(void *) &Timings_obj::smallestRating,HX_("smallestRating",5c,67,5a,40)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static void Timings_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Timings_obj::accuracy,"accuracy");
	HX_MARK_MEMBER_NAME(Timings_obj::trueAccuracy,"trueAccuracy");
	HX_MARK_MEMBER_NAME(Timings_obj::judgementRates,"judgementRates");
	HX_MARK_MEMBER_NAME(Timings_obj::judgementsMap,"judgementsMap");
	HX_MARK_MEMBER_NAME(Timings_obj::msThreshold,"msThreshold");
	HX_MARK_MEMBER_NAME(Timings_obj::scoreRating,"scoreRating");
	HX_MARK_MEMBER_NAME(Timings_obj::ratingFinal,"ratingFinal");
	HX_MARK_MEMBER_NAME(Timings_obj::notesHit,"notesHit");
	HX_MARK_MEMBER_NAME(Timings_obj::comboDisplay,"comboDisplay");
	HX_MARK_MEMBER_NAME(Timings_obj::notesHitNoSus,"notesHitNoSus");
	HX_MARK_MEMBER_NAME(Timings_obj::gottenJudgements,"gottenJudgements");
	HX_MARK_MEMBER_NAME(Timings_obj::smallestRating,"smallestRating");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Timings_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Timings_obj::accuracy,"accuracy");
	HX_VISIT_MEMBER_NAME(Timings_obj::trueAccuracy,"trueAccuracy");
	HX_VISIT_MEMBER_NAME(Timings_obj::judgementRates,"judgementRates");
	HX_VISIT_MEMBER_NAME(Timings_obj::judgementsMap,"judgementsMap");
	HX_VISIT_MEMBER_NAME(Timings_obj::msThreshold,"msThreshold");
	HX_VISIT_MEMBER_NAME(Timings_obj::scoreRating,"scoreRating");
	HX_VISIT_MEMBER_NAME(Timings_obj::ratingFinal,"ratingFinal");
	HX_VISIT_MEMBER_NAME(Timings_obj::notesHit,"notesHit");
	HX_VISIT_MEMBER_NAME(Timings_obj::comboDisplay,"comboDisplay");
	HX_VISIT_MEMBER_NAME(Timings_obj::notesHitNoSus,"notesHitNoSus");
	HX_VISIT_MEMBER_NAME(Timings_obj::gottenJudgements,"gottenJudgements");
	HX_VISIT_MEMBER_NAME(Timings_obj::smallestRating,"smallestRating");
};

#endif

::hx::Class Timings_obj::__mClass;

static ::String Timings_obj_sStaticFields[] = {
	HX_("accuracy",39,06,c5,ff),
	HX_("trueAccuracy",a7,67,87,22),
	HX_("judgementRates",9e,64,04,fb),
	HX_("judgementsMap",1e,57,b5,b0),
	HX_("msThreshold",65,27,9e,16),
	HX_("scoreRating",0f,65,f0,87),
	HX_("ratingFinal",19,92,1a,eb),
	HX_("notesHit",92,80,94,70),
	HX_("comboDisplay",94,ef,11,43),
	HX_("notesHitNoSus",de,7d,15,38),
	HX_("gottenJudgements",8f,e1,d7,57),
	HX_("smallestRating",5c,67,5a,40),
	HX_("callAccuracy",f7,a8,07,38),
	HX_("accuracyMaxCalculation",de,58,94,17),
	HX_("updateAccuracy",62,f9,ee,34),
	HX_("updateFCDisplay",5c,d7,89,dc),
	HX_("getAccuracy",ef,c8,b8,25),
	HX_("updateScoreRating",86,11,5a,ec),
	HX_("returnScoreRating",3f,36,eb,1d),
	::String(null())
};

void Timings_obj::__register()
{
	Timings_obj _hx_dummy;
	Timings_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("meta.data.Timings",8e,8b,59,a8);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Timings_obj::__GetStatic;
	__mClass->mSetStaticField = &Timings_obj::__SetStatic;
	__mClass->mMarkFunc = Timings_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(Timings_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = ::hx::TCanCast< Timings_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Timings_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Timings_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Timings_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void Timings_obj::__boot()
{
{
            		HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_0) HXARGC(0)
            		 ::haxe::ds::StringMap _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_55c2df60a0b7d283_18_boot)
HXDLIN(  18)			 ::haxe::ds::StringMap _g =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXDLIN(  18)			_g->set(HX_("sick",be,8c,53,4c),::cpp::VirtualArray_obj::__new(5)->init(0,0)->init(1,50)->init(2,350)->init(3,100)->init(4,HX_(" [SFC]",c8,63,f4,67)));
HXDLIN(  18)			_g->set(HX_("good",3d,95,69,44),::cpp::VirtualArray_obj::__new(5)->init(0,1)->init(1,100)->init(2,150)->init(3,75)->init(4,HX_(" [GFC]",54,d4,05,60)));
HXDLIN(  18)			_g->set(HX_("bad",c5,b1,4a,00),::cpp::VirtualArray_obj::__new(5)->init(0,2)->init(1,120)->init(2,0)->init(3,25)->init(4,HX_(" [FC]",25,53,2e,a9)));
HXDLIN(  18)			_g->set(HX_("shit",c0,cf,52,4c),::cpp::VirtualArray_obj::__new(4)->init(0,3)->init(1,140)->init(2,-50)->init(3,-150));
HXDLIN(  18)			_g->set(HX_("miss",fc,52,5c,48),::cpp::VirtualArray_obj::__new(4)->init(0,4)->init(1,180)->init(2,-100)->init(3,-175));
HXDLIN(  18)			return _g;
            		}
            		HX_END_LOCAL_FUNC0(return)

            	HX_STACKFRAME(&_hx_pos_55c2df60a0b7d283_18_boot)
HXDLIN(  18)		judgementsMap = ( ( ::haxe::ds::StringMap)( ::Dynamic(new _hx_Closure_0())()) );
            	}
{
            	HX_STACKFRAME(&_hx_pos_55c2df60a0b7d283_26_boot)
HXDLIN(  26)		msThreshold = ((Float)0);
            	}
{
            		HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_0) HXARGC(0)
            		 ::haxe::ds::StringMap _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_55c2df60a0b7d283_29_boot)
HXDLIN(  29)			 ::haxe::ds::StringMap _g =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXDLIN(  29)			_g->set(HX_("S+",78,48,00,00),100);
HXDLIN(  29)			_g->set(HX_("S",53,00,00,00),95);
HXDLIN(  29)			_g->set(HX_("A",41,00,00,00),90);
HXDLIN(  29)			_g->set(HX_("b",62,00,00,00),85);
HXDLIN(  29)			_g->set(HX_("c",63,00,00,00),80);
HXDLIN(  29)			_g->set(HX_("d",64,00,00,00),75);
HXDLIN(  29)			_g->set(HX_("e",65,00,00,00),70);
HXDLIN(  29)			_g->set(HX_("f",66,00,00,00),65);
HXDLIN(  29)			return _g;
            		}
            		HX_END_LOCAL_FUNC0(return)

            	HX_STACKFRAME(&_hx_pos_55c2df60a0b7d283_29_boot)
HXDLIN(  29)		scoreRating = ( ( ::haxe::ds::StringMap)( ::Dynamic(new _hx_Closure_0())()) );
            	}
{
            	HX_STACKFRAME(&_hx_pos_55c2df60a0b7d283_40_boot)
HXDLIN(  40)		ratingFinal = HX_("f",66,00,00,00);
            	}
{
            	HX_STACKFRAME(&_hx_pos_55c2df60a0b7d283_41_boot)
HXDLIN(  41)		notesHit = 0;
            	}
{
            	HX_STACKFRAME(&_hx_pos_55c2df60a0b7d283_43_boot)
HXDLIN(  43)		comboDisplay = HX_("",00,00,00,00);
            	}
{
            	HX_STACKFRAME(&_hx_pos_55c2df60a0b7d283_44_boot)
HXDLIN(  44)		notesHitNoSus = 0;
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_55c2df60a0b7d283_46_boot)
HXDLIN(  46)		gottenJudgements =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
            	}
}

} // end namespace meta
} // end namespace data

// Generated by Haxe 4.1.5
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Init
#include <Init.h>
#endif
#ifndef INCLUDED_Paths
#include <Paths.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_StringTools
#include <StringTools.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
#ifndef INCLUDED_flixel_FlxSubState
#include <flixel/FlxSubState.h>
#endif
#ifndef INCLUDED_flixel_effects_FlxFlicker
#include <flixel/effects/FlxFlicker.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedSpriteGroup
#include <flixel/group/FlxTypedSpriteGroup.h>
#endif
#ifndef INCLUDED_flixel_input_FlxBaseKeyList
#include <flixel/input/FlxBaseKeyList.h>
#endif
#ifndef INCLUDED_flixel_input_FlxInput
#include <flixel/input/FlxInput.h>
#endif
#ifndef INCLUDED_flixel_input_FlxKeyManager
#include <flixel/input/FlxKeyManager.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInput
#include <flixel/input/IFlxInput.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInputManager
#include <flixel/input/IFlxInputManager.h>
#endif
#ifndef INCLUDED_flixel_input_actions_FlxAction
#include <flixel/input/actions/FlxAction.h>
#endif
#ifndef INCLUDED_flixel_input_actions_FlxActionDigital
#include <flixel/input/actions/FlxActionDigital.h>
#endif
#ifndef INCLUDED_flixel_input_actions_FlxActionSet
#include <flixel/input/actions/FlxActionSet.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard_FlxKeyList
#include <flixel/input/keyboard/FlxKeyList.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard_FlxKeyboard
#include <flixel/input/keyboard/FlxKeyboard.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard__FlxKey_FlxKey_Impl_
#include <flixel/input/keyboard/_FlxKey/FlxKey_Impl_.h>
#endif
#ifndef INCLUDED_flixel_math_FlxPoint
#include <flixel/math/FlxPoint.h>
#endif
#ifndef INCLUDED_flixel_system_FlxSound
#include <flixel/system/FlxSound.h>
#endif
#ifndef INCLUDED_flixel_system_FlxSoundGroup
#include <flixel/system/FlxSoundGroup.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_SoundFrontEnd
#include <flixel/system/frontEnds/SoundFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_text_FlxText
#include <flixel/text/FlxText.h>
#endif
#ifndef INCLUDED_flixel_text_FlxTextBorderStyle
#include <flixel/text/FlxTextBorderStyle.h>
#endif
#ifndef INCLUDED_flixel_util_FlxAxes
#include <flixel/util/FlxAxes.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif
#ifndef INCLUDED_flixel_util__FlxColor_FlxColor_Impl_
#include <flixel/util/_FlxColor/FlxColor_Impl_.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_IntMap
#include <haxe/ds/IntMap.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_meta_Controls
#include <meta/Controls.h>
#endif
#ifndef INCLUDED_meta_KeyboardScheme
#include <meta/KeyboardScheme.h>
#endif
#ifndef INCLUDED_meta_MusicBeatSubState
#include <meta/MusicBeatSubState.h>
#endif
#ifndef INCLUDED_meta_data_PlayerSettings
#include <meta/data/PlayerSettings.h>
#endif
#ifndef INCLUDED_meta_data_font_Alphabet
#include <meta/data/font/Alphabet.h>
#endif
#ifndef INCLUDED_meta_subState_OptionsSubstate
#include <meta/subState/OptionsSubstate.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_709d23672e4e0fb3_16_new,"meta.subState.OptionsSubstate","new",0x7749532d,"meta.subState.OptionsSubstate.new","meta/subState/OptionsSubstate.hx",16,0x7393e0c3)
HX_LOCAL_STACK_FRAME(_hx_pos_709d23672e4e0fb3_26_create,"meta.subState.OptionsSubstate","create",0x8177e24f,"meta.subState.OptionsSubstate.create","meta/subState/OptionsSubstate.hx",26,0x7393e0c3)
HX_LOCAL_STACK_FRAME(_hx_pos_709d23672e4e0fb3_104_generateOptions,"meta.subState.OptionsSubstate","generateOptions",0xe90d7ef6,"meta.subState.OptionsSubstate.generateOptions","meta/subState/OptionsSubstate.hx",104,0x7393e0c3)
HX_LOCAL_STACK_FRAME(_hx_pos_709d23672e4e0fb3_137_generateExtra,"meta.subState.OptionsSubstate","generateExtra",0xdd675028,"meta.subState.OptionsSubstate.generateExtra","meta/subState/OptionsSubstate.hx",137,0x7393e0c3)
HX_LOCAL_STACK_FRAME(_hx_pos_709d23672e4e0fb3_166_getStringKey,"meta.subState.OptionsSubstate","getStringKey",0x25fa896b,"meta.subState.OptionsSubstate.getStringKey","meta/subState/OptionsSubstate.hx",166,0x7393e0c3)
HX_LOCAL_STACK_FRAME(_hx_pos_709d23672e4e0fb3_180_updateSelection,"meta.subState.OptionsSubstate","updateSelection",0x0afacb50,"meta.subState.OptionsSubstate.updateSelection","meta/subState/OptionsSubstate.hx",180,0x7393e0c3)
HX_LOCAL_STACK_FRAME(_hx_pos_709d23672e4e0fb3_212_updateHorizontalSelection,"meta.subState.OptionsSubstate","updateHorizontalSelection",0x999c5ecc,"meta.subState.OptionsSubstate.updateHorizontalSelection","meta/subState/OptionsSubstate.hx",212,0x7393e0c3)
HX_LOCAL_STACK_FRAME(_hx_pos_709d23672e4e0fb3_243_update,"meta.subState.OptionsSubstate","update",0x8c6e015c,"meta.subState.OptionsSubstate.update","meta/subState/OptionsSubstate.hx",243,0x7393e0c3)
HX_LOCAL_STACK_FRAME(_hx_pos_709d23672e4e0fb3_286_update,"meta.subState.OptionsSubstate","update",0x8c6e015c,"meta.subState.OptionsSubstate.update","meta/subState/OptionsSubstate.hx",286,0x7393e0c3)
HX_LOCAL_STACK_FRAME(_hx_pos_709d23672e4e0fb3_298_close,"meta.subState.OptionsSubstate","close",0x89d8a7c5,"meta.subState.OptionsSubstate.close","meta/subState/OptionsSubstate.hx",298,0x7393e0c3)
HX_LOCAL_STACK_FRAME(_hx_pos_709d23672e4e0fb3_308_openSubmenu,"meta.subState.OptionsSubstate","openSubmenu",0x3d5dd842,"meta.subState.OptionsSubstate.openSubmenu","meta/subState/OptionsSubstate.hx",308,0x7393e0c3)
HX_LOCAL_STACK_FRAME(_hx_pos_709d23672e4e0fb3_319_closeSubmenu,"meta.subState.OptionsSubstate","closeSubmenu",0xc640e1da,"meta.subState.OptionsSubstate.closeSubmenu","meta/subState/OptionsSubstate.hx",319,0x7393e0c3)
HX_LOCAL_STACK_FRAME(_hx_pos_709d23672e4e0fb3_329_subMenuControl,"meta.subState.OptionsSubstate","subMenuControl",0xde21b431,"meta.subState.OptionsSubstate.subMenuControl","meta/subState/OptionsSubstate.hx",329,0x7393e0c3)
HX_LOCAL_STACK_FRAME(_hx_pos_709d23672e4e0fb3_394_subMenuControl,"meta.subState.OptionsSubstate","subMenuControl",0xde21b431,"meta.subState.OptionsSubstate.subMenuControl","meta/subState/OptionsSubstate.hx",394,0x7393e0c3)
namespace meta{
namespace subState{

void OptionsSubstate_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_709d23672e4e0fb3_16_new)
HXLINE( 240)		this->submenuOpen = false;
HXLINE( 209)		this->curHorizontalSelection = 0;
HXLINE(  18)		this->curSelection = 0;
HXLINE(  16)		super::__construct();
            	}

Dynamic OptionsSubstate_obj::__CreateEmpty() { return new OptionsSubstate_obj; }

void *OptionsSubstate_obj::_hx_vtable = 0;

Dynamic OptionsSubstate_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< OptionsSubstate_obj > _hx_result = new OptionsSubstate_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool OptionsSubstate_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x72d40f07) {
		if (inClassId<=(int)0x62817b24) {
			if (inClassId<=(int)0x5661ffbf) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x5661ffbf;
			} else {
				return inClassId==(int)0x62817b24;
			}
		} else {
			return inClassId==(int)0x72d40f07;
		}
	} else {
		if (inClassId<=(int)0x7c795c9f) {
			return inClassId==(int)0x74873d79 || inClassId==(int)0x7c795c9f;
		} else {
			return inClassId==(int)0x7ccf8994;
		}
	}
}

void OptionsSubstate_obj::create(){
            	HX_GC_STACKFRAME(&_hx_pos_709d23672e4e0fb3_26_create)
HXLINE(  28)		 ::flixel::FlxSprite bg =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,-85,null(),null());
HXLINE(  29)		::String library = null();
HXDLIN(  29)		bg->loadGraphic(::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("menus/base/menuDesat",63,1b,f0,40)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),library),null(),null(),null(),null(),null());
HXLINE(  30)		bg->scrollFactor->set_x(( (Float)(0) ));
HXLINE(  31)		bg->scrollFactor->set_y(((Float)0.18));
HXLINE(  32)		bg->setGraphicSize(::Std_obj::_hx_int((bg->get_width() * ((Float)1.1))),null());
HXLINE(  33)		bg->updateHitbox();
HXLINE(  34)		bg->screenCenter(null());
HXLINE(  35)		bg->set_color(13526239);
HXLINE(  36)		bg->set_antialiasing(true);
HXLINE(  37)		this->add(bg);
HXLINE(  39)		this->super::create();
HXLINE(  41)		this->keyOptions = this->generateOptions();
HXLINE(  42)		this->updateSelection(null());
HXLINE(  44)		this->submenuGroup =  ::flixel::group::FlxTypedGroup_obj::__alloc( HX_CTX ,null());
HXLINE(  45)		this->submenuoffsetGroup =  ::flixel::group::FlxTypedGroup_obj::__alloc( HX_CTX ,null());
HXLINE(  47)		 ::flixel::FlxSprite _hx_tmp =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,0,0,null());
HXDLIN(  47)		int _hx_tmp1 = (::flixel::FlxG_obj::width - 200);
HXDLIN(  47)		int _hx_tmp2 = (::flixel::FlxG_obj::height - 200);
HXDLIN(  47)		int Alpha = 255;
HXDLIN(  47)		int color = ::flixel::util::_FlxColor::FlxColor_Impl__obj::_new(null());
HXDLIN(  47)		{
HXLINE(  47)			color = (color & -16711681);
HXDLIN(  47)			color = (color | 16384000);
            		}
HXDLIN(  47)		{
HXLINE(  47)			color = (color & -65281);
HXDLIN(  47)			color = (color | 64768);
            		}
HXDLIN(  47)		{
HXLINE(  47)			color = (color & -256);
HXDLIN(  47)			color = (color | 109);
            		}
HXDLIN(  47)		{
HXLINE(  47)			color = (color & 16777215);
HXDLIN(  47)			int color1;
HXDLIN(  47)			if ((Alpha > 255)) {
HXLINE(  47)				color1 = 255;
            			}
            			else {
HXLINE(  47)				if ((Alpha < 0)) {
HXLINE(  47)					color1 = 0;
            				}
            				else {
HXLINE(  47)					color1 = Alpha;
            				}
            			}
HXDLIN(  47)			color = (color | (color1 << 24));
            		}
HXDLIN(  47)		this->submenu = _hx_tmp->makeGraphic(_hx_tmp1,_hx_tmp2,color,null(),null());
HXLINE(  48)		this->submenu->screenCenter(null());
HXLINE(  51)		 ::meta::data::font::Alphabet submenuText =  ::meta::data::font::Alphabet_obj::__alloc( HX_CTX ,( (Float)(0) ),( (Float)(0) ),HX_("Press any key to rebind",03,59,37,36),true,false,null());
HXLINE(  52)		submenuText->screenCenter(null());
HXLINE(  53)		{
HXLINE(  53)			 ::meta::data::font::Alphabet _g = submenuText;
HXDLIN(  53)			_g->set_y((_g->y - ( (Float)(32) )));
            		}
HXLINE(  54)		this->submenuGroup->add(submenuText).StaticCast<  ::flixel::FlxBasic >();
HXLINE(  56)		 ::meta::data::font::Alphabet submenuText2 =  ::meta::data::font::Alphabet_obj::__alloc( HX_CTX ,( (Float)(0) ),( (Float)(0) ),HX_("Escape to Cancel",60,30,84,7a),true,false,null());
HXLINE(  57)		submenuText2->screenCenter(null());
HXLINE(  58)		{
HXLINE(  58)			 ::meta::data::font::Alphabet _g1 = submenuText2;
HXDLIN(  58)			_g1->set_y((_g1->y + 32));
            		}
HXLINE(  59)		this->submenuGroup->add(submenuText2).StaticCast<  ::flixel::FlxBasic >();
HXLINE(  63)		 ::meta::data::font::Alphabet submenuOffsetText =  ::meta::data::font::Alphabet_obj::__alloc( HX_CTX ,( (Float)(0) ),( (Float)(0) ),HX_("Left or Right to edit.",87,87,bc,ca),true,false,null());
HXLINE(  64)		submenuOffsetText->screenCenter(null());
HXLINE(  65)		{
HXLINE(  65)			 ::meta::data::font::Alphabet _g2 = submenuOffsetText;
HXDLIN(  65)			_g2->set_y((_g2->y - ( (Float)(144) )));
            		}
HXLINE(  66)		this->submenuoffsetGroup->add(submenuOffsetText).StaticCast<  ::flixel::FlxBasic >();
HXLINE(  68)		 ::meta::data::font::Alphabet submenuOffsetText2 =  ::meta::data::font::Alphabet_obj::__alloc( HX_CTX ,( (Float)(0) ),( (Float)(0) ),HX_("Negative is Late",b1,3e,27,8a),true,false,null());
HXLINE(  69)		submenuOffsetText2->screenCenter(null());
HXLINE(  70)		{
HXLINE(  70)			 ::meta::data::font::Alphabet _g3 = submenuOffsetText2;
HXDLIN(  70)			_g3->set_y((_g3->y - ( (Float)(80) )));
            		}
HXLINE(  71)		this->submenuoffsetGroup->add(submenuOffsetText2).StaticCast<  ::flixel::FlxBasic >();
HXLINE(  73)		 ::meta::data::font::Alphabet submenuOffsetText3 =  ::meta::data::font::Alphabet_obj::__alloc( HX_CTX ,( (Float)(0) ),( (Float)(0) ),HX_("Escape to Cancel",60,30,84,7a),true,false,null());
HXLINE(  74)		submenuOffsetText3->screenCenter(null());
HXLINE(  75)		{
HXLINE(  75)			 ::meta::data::font::Alphabet _g4 = submenuOffsetText3;
HXDLIN(  75)			_g4->set_y((_g4->y + 102));
            		}
HXLINE(  76)		this->submenuoffsetGroup->add(submenuOffsetText3).StaticCast<  ::flixel::FlxBasic >();
HXLINE(  78)		 ::meta::data::font::Alphabet submenuOffsetText4 =  ::meta::data::font::Alphabet_obj::__alloc( HX_CTX ,( (Float)(0) ),( (Float)(0) ),HX_("Enter to Save",fa,fc,6b,42),true,false,null());
HXLINE(  79)		submenuOffsetText4->screenCenter(null());
HXLINE(  80)		{
HXLINE(  80)			 ::meta::data::font::Alphabet _g5 = submenuOffsetText4;
HXDLIN(  80)			_g5->set_y((_g5->y + 164));
            		}
HXLINE(  81)		this->submenuoffsetGroup->add(submenuOffsetText4).StaticCast<  ::flixel::FlxBasic >();
HXLINE(  83)		 ::flixel::text::FlxText submenuOffsetValue =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,0,0,0,HX_("< 0ms >",50,da,12,76),50,false);
HXLINE(  84)		submenuOffsetValue->screenCenter(null());
HXLINE(  85)		submenuOffsetValue->set_borderColor(-16777216);
HXLINE(  86)		submenuOffsetValue->set_borderSize(( (Float)(5) ));
HXLINE(  87)		submenuOffsetValue->set_borderStyle(::flixel::text::FlxTextBorderStyle_obj::OUTLINE_dyn());
HXLINE(  88)		this->submenuoffsetGroup->add(submenuOffsetValue).StaticCast<  ::flixel::FlxBasic >();
HXLINE(  92)		this->add(this->submenu);
HXLINE(  93)		this->add(this->submenuGroup);
HXLINE(  94)		this->add(this->submenuoffsetGroup);
HXLINE(  95)		this->submenu->set_visible(false);
HXLINE(  96)		this->submenuGroup->set_visible(false);
HXLINE(  97)		this->submenuoffsetGroup->set_visible(false);
            	}


 ::flixel::group::FlxTypedGroup OptionsSubstate_obj::generateOptions(){
            	HX_GC_STACKFRAME(&_hx_pos_709d23672e4e0fb3_104_generateOptions)
HXLINE( 105)		this->keyOptions =  ::flixel::group::FlxTypedGroup_obj::__alloc( HX_CTX ,null());
HXLINE( 107)		::Array< ::String > arrayTemp = ::Array_obj< ::String >::__new(0);
HXLINE( 109)		{
HXLINE( 109)			 ::Dynamic controlString = ::Init_obj::gameControls->keys();
HXDLIN( 109)			while(( (bool)(controlString->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXLINE( 109)				::String controlString1 = ( (::String)(controlString->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXLINE( 110)				arrayTemp[( (int)(::Init_obj::gameControls->get(controlString1)->__GetItem(1)) )] = controlString1;
            			}
            		}
HXLINE( 112)		arrayTemp->push(HX_("EDIT OFFSET",e9,3e,90,00));
HXLINE( 114)		{
HXLINE( 114)			int _g = 0;
HXDLIN( 114)			int _g1 = arrayTemp->length;
HXDLIN( 114)			while((_g < _g1)){
HXLINE( 114)				_g = (_g + 1);
HXDLIN( 114)				int i = (_g - 1);
HXLINE( 117)				 ::meta::data::font::Alphabet optionsText =  ::meta::data::font::Alphabet_obj::__alloc( HX_CTX ,( (Float)(0) ),( (Float)(0) ),arrayTemp->__get(i),true,false,null());
HXLINE( 118)				optionsText->screenCenter(null());
HXLINE( 119)				{
HXLINE( 119)					 ::meta::data::font::Alphabet _g1 = optionsText;
HXDLIN( 119)					_g1->set_y((_g1->y + (( (Float)(90) ) * (( (Float)(i) ) - (( (Float)(arrayTemp->length) ) / ( (Float)(2) ))))));
            				}
HXLINE( 120)				optionsText->targetY = ( (Float)(i) );
HXLINE( 121)				optionsText->disableX = true;
HXLINE( 122)				optionsText->isMenuItem = true;
HXLINE( 123)				optionsText->set_alpha(((Float)0.6));
HXLINE( 125)				this->keyOptions->add(optionsText).StaticCast<  ::meta::data::font::Alphabet >();
            			}
            		}
HXLINE( 129)		this->add(this->keyOptions);
HXLINE( 131)		this->generateExtra(arrayTemp);
HXLINE( 133)		return this->keyOptions;
            	}


HX_DEFINE_DYNAMIC_FUNC0(OptionsSubstate_obj,generateOptions,return )

void OptionsSubstate_obj::generateExtra(::Array< ::String > arrayTemp){
            	HX_GC_STACKFRAME(&_hx_pos_709d23672e4e0fb3_137_generateExtra)
HXLINE( 138)		this->otherKeys =  ::flixel::group::FlxTypedGroup_obj::__alloc( HX_CTX ,null());
HXLINE( 139)		{
HXLINE( 139)			int _g = 0;
HXDLIN( 139)			int _g1 = arrayTemp->length;
HXDLIN( 139)			while((_g < _g1)){
HXLINE( 139)				_g = (_g + 1);
HXDLIN( 139)				int i = (_g - 1);
HXLINE( 141)				{
HXLINE( 142)					{
HXLINE( 143)						::String keyString = HX_("",00,00,00,00);
HXLINE( 145)						if ((arrayTemp->__get(i) != HX_("EDIT OFFSET",e9,3e,90,00))) {
HXLINE( 146)							keyString = this->getStringKey(::Init_obj::gameControls->get(arrayTemp->__get(i))->__GetItem(0)->__GetItem(0));
            						}
HXLINE( 148)						 ::meta::data::font::Alphabet secondaryText =  ::meta::data::font::Alphabet_obj::__alloc( HX_CTX ,( (Float)(0) ),( (Float)(0) ),keyString,false,false,null());
HXLINE( 149)						secondaryText->screenCenter(null());
HXLINE( 150)						{
HXLINE( 150)							 ::meta::data::font::Alphabet _g1 = secondaryText;
HXDLIN( 150)							_g1->set_y((_g1->y + (( (Float)(90) ) * (( (Float)(i) ) - (( (Float)(arrayTemp->length) ) / ( (Float)(2) ))))));
            						}
HXLINE( 151)						secondaryText->targetY = ( (Float)(i) );
HXLINE( 152)						secondaryText->disableX = true;
HXLINE( 153)						 ::meta::data::font::Alphabet secondaryText1 = secondaryText;
HXDLIN( 153)						secondaryText1->xTo = (secondaryText1->xTo + 420);
HXLINE( 154)						secondaryText->isMenuItem = true;
HXLINE( 155)						secondaryText->set_alpha(((Float)0.6));
HXLINE( 157)						secondaryText->controlGroupID = i;
HXLINE( 158)						secondaryText->extensionJ = 0;
HXLINE( 159)						this->otherKeys->add(secondaryText).StaticCast<  ::meta::data::font::Alphabet >();
            					}
HXLINE( 142)					{
HXLINE( 143)						::String keyString1 = HX_("",00,00,00,00);
HXLINE( 145)						if ((arrayTemp->__get(i) != HX_("EDIT OFFSET",e9,3e,90,00))) {
HXLINE( 146)							keyString1 = this->getStringKey(::Init_obj::gameControls->get(arrayTemp->__get(i))->__GetItem(0)->__GetItem(1));
            						}
HXLINE( 148)						 ::meta::data::font::Alphabet secondaryText2 =  ::meta::data::font::Alphabet_obj::__alloc( HX_CTX ,( (Float)(0) ),( (Float)(0) ),keyString1,false,false,null());
HXLINE( 149)						secondaryText2->screenCenter(null());
HXLINE( 150)						{
HXLINE( 150)							 ::meta::data::font::Alphabet _g2 = secondaryText2;
HXDLIN( 150)							_g2->set_y((_g2->y + (( (Float)(90) ) * (( (Float)(i) ) - (( (Float)(arrayTemp->length) ) / ( (Float)(2) ))))));
            						}
HXLINE( 151)						secondaryText2->targetY = ( (Float)(i) );
HXLINE( 152)						secondaryText2->disableX = true;
HXLINE( 153)						 ::meta::data::font::Alphabet secondaryText3 = secondaryText2;
HXDLIN( 153)						secondaryText3->xTo = (secondaryText3->xTo + 840);
HXLINE( 154)						secondaryText2->isMenuItem = true;
HXLINE( 155)						secondaryText2->set_alpha(((Float)0.6));
HXLINE( 157)						secondaryText2->controlGroupID = i;
HXLINE( 158)						secondaryText2->extensionJ = 1;
HXLINE( 159)						this->otherKeys->add(secondaryText2).StaticCast<  ::meta::data::font::Alphabet >();
            					}
            				}
            			}
            		}
HXLINE( 162)		this->add(this->otherKeys);
            	}


HX_DEFINE_DYNAMIC_FUNC1(OptionsSubstate_obj,generateExtra,(void))

::String OptionsSubstate_obj::getStringKey( ::Dynamic arrayThingy){
            	HX_STACKFRAME(&_hx_pos_709d23672e4e0fb3_166_getStringKey)
HXLINE( 167)		::String keyString = HX_("none",b8,12,0a,49);
HXLINE( 168)		if (::hx::IsNotNull( arrayThingy )) {
HXLINE( 170)			int keyDisplay = ( (int)(arrayThingy) );
HXLINE( 171)			keyString = ::flixel::input::keyboard::_FlxKey::FlxKey_Impl__obj::toStringMap->get_string(keyDisplay);
            		}
HXLINE( 174)		keyString = ::StringTools_obj::replace(keyString,HX_(" ",20,00,00,00),HX_("",00,00,00,00));
HXLINE( 176)		return keyString;
            	}


HX_DEFINE_DYNAMIC_FUNC1(OptionsSubstate_obj,getStringKey,return )

void OptionsSubstate_obj::updateSelection(::hx::Null< int >  __o_equal){
            		int equal = __o_equal.Default(0);
            	HX_STACKFRAME(&_hx_pos_709d23672e4e0fb3_180_updateSelection)
HXLINE( 181)		if ((equal != this->curSelection)) {
HXLINE( 182)			 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp = ::flixel::FlxG_obj::sound;
HXDLIN( 182)			_hx_tmp->play(::Paths_obj::sound(HX_("scrollMenu",4c,d4,18,06),null()),null(),null(),null(),null(),null());
            		}
HXLINE( 184)		this->curSelection = equal;
HXLINE( 186)		if ((this->curSelection < 0)) {
HXLINE( 187)			this->curSelection = (this->keyOptions->length - 1);
            		}
            		else {
HXLINE( 188)			if ((this->curSelection >= this->keyOptions->length)) {
HXLINE( 189)				this->curSelection = 0;
            			}
            		}
HXLINE( 192)		{
HXLINE( 192)			int _g = 0;
HXDLIN( 192)			int _g1 = this->keyOptions->length;
HXDLIN( 192)			while((_g < _g1)){
HXLINE( 192)				_g = (_g + 1);
HXDLIN( 192)				int i = (_g - 1);
HXLINE( 194)				Dynamic( this->keyOptions->members->__get(i)).StaticCast<  ::meta::data::font::Alphabet >()->set_alpha(((Float)0.6));
HXLINE( 195)				Dynamic( this->keyOptions->members->__get(i)).StaticCast<  ::meta::data::font::Alphabet >()->targetY = (( (Float)((i - this->curSelection)) ) / ( (Float)(2) ));
            			}
            		}
HXLINE( 197)		Dynamic( this->keyOptions->members->__get(this->curSelection)).StaticCast<  ::meta::data::font::Alphabet >()->set_alpha(( (Float)(1) ));
HXLINE( 200)		{
HXLINE( 200)			int _g2 = 0;
HXDLIN( 200)			int _g3 = this->otherKeys->length;
HXDLIN( 200)			while((_g2 < _g3)){
HXLINE( 200)				_g2 = (_g2 + 1);
HXDLIN( 200)				int i = (_g2 - 1);
HXLINE( 202)				Dynamic( this->otherKeys->members->__get(i)).StaticCast<  ::meta::data::font::Alphabet >()->set_alpha(((Float)0.6));
HXLINE( 203)				Dynamic( this->otherKeys->members->__get(i)).StaticCast<  ::meta::data::font::Alphabet >()->targetY = ((( (Float)((::Math_obj::floor((( (Float)(i) ) / ( (Float)(2) ))) - this->curSelection)) ) / ( (Float)(2) )) - ((Float)0.25));
            			}
            		}
HXLINE( 205)		Dynamic( this->otherKeys->members->__get(((this->curSelection * 2) + this->curHorizontalSelection))).StaticCast<  ::meta::data::font::Alphabet >()->set_alpha(( (Float)(1) ));
            	}


HX_DEFINE_DYNAMIC_FUNC1(OptionsSubstate_obj,updateSelection,(void))

void OptionsSubstate_obj::updateHorizontalSelection(){
            	HX_STACKFRAME(&_hx_pos_709d23672e4e0fb3_212_updateHorizontalSelection)
HXLINE( 213)		bool left = ::meta::data::PlayerSettings_obj::player1->controls->_leftP->check();
HXLINE( 214)		bool right = ::meta::data::PlayerSettings_obj::player1->controls->_rightP->check();
HXLINE( 215)		::Array< bool > horizontalControl = ::Array_obj< bool >::__new(3)->init(0,left)->init(1,false)->init(2,right);
HXLINE( 217)		if (horizontalControl->contains(true)) {
HXLINE( 219)			{
HXLINE( 219)				int _g = 0;
HXDLIN( 219)				int _g1 = horizontalControl->length;
HXDLIN( 219)				while((_g < _g1)){
HXLINE( 219)					_g = (_g + 1);
HXDLIN( 219)					int i = (_g - 1);
HXLINE( 221)					if ((horizontalControl->__get(i) == true)) {
HXLINE( 223)						 ::meta::subState::OptionsSubstate _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 223)						_hx_tmp->curHorizontalSelection = (_hx_tmp->curHorizontalSelection + (i - 1));
HXLINE( 225)						if ((this->curHorizontalSelection < 0)) {
HXLINE( 226)							this->curHorizontalSelection = 1;
            						}
            						else {
HXLINE( 227)							if ((this->curHorizontalSelection > 1)) {
HXLINE( 228)								this->curHorizontalSelection = 0;
            							}
            						}
HXLINE( 231)						 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp1 = ::flixel::FlxG_obj::sound;
HXDLIN( 231)						_hx_tmp1->play(::Paths_obj::sound(HX_("scrollMenu",4c,d4,18,06),null()),null(),null(),null(),null(),null());
            					}
            				}
            			}
HXLINE( 235)			this->updateSelection(this->curSelection);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(OptionsSubstate_obj,updateHorizontalSelection,(void))

void OptionsSubstate_obj::update(Float elapsed){
            	HX_STACKFRAME(&_hx_pos_709d23672e4e0fb3_243_update)
HXLINE( 242)		 ::meta::subState::OptionsSubstate _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE( 244)		this->super::update(elapsed);
HXLINE( 246)		if (!(this->submenuOpen)) {
HXLINE( 248)			bool up = ::meta::data::PlayerSettings_obj::player1->controls->_up->check();
HXLINE( 249)			bool down = ::meta::data::PlayerSettings_obj::player1->controls->_down->check();
HXLINE( 250)			bool up_p = ::meta::data::PlayerSettings_obj::player1->controls->_upP->check();
HXLINE( 251)			bool down_p = ::meta::data::PlayerSettings_obj::player1->controls->_downP->check();
HXLINE( 252)			::Array< bool > controlArray = ::Array_obj< bool >::__new(4)->init(0,up)->init(1,down)->init(2,up_p)->init(3,down_p);
HXLINE( 254)			if (controlArray->contains(true)) {
HXLINE( 256)				int _g = 0;
HXDLIN( 256)				int _g1 = controlArray->length;
HXDLIN( 256)				while((_g < _g1)){
HXLINE( 256)					_g = (_g + 1);
HXDLIN( 256)					int i = (_g - 1);
HXLINE( 259)					if ((controlArray->__get(i) == true)) {
HXLINE( 262)						if ((i > 1)) {
HXLINE( 266)							if ((i == 2)) {
HXLINE( 267)								this->updateSelection((this->curSelection - 1));
            							}
            							else {
HXLINE( 268)								if ((i == 3)) {
HXLINE( 269)									this->updateSelection((this->curSelection + 1));
            								}
            							}
            						}
            					}
            				}
            			}
HXLINE( 277)			this->updateHorizontalSelection();
HXLINE( 279)			if (::meta::data::PlayerSettings_obj::player1->controls->_accept->check()) {
            				HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::meta::subState::OptionsSubstate,_gthis) HXARGC(1)
            				void _hx_run( ::flixel::effects::FlxFlicker flick){
            					HX_STACKFRAME(&_hx_pos_709d23672e4e0fb3_286_update)
HXLINE( 286)					if (_gthis->submenuOpen) {
HXLINE( 287)						_gthis->openSubmenu();
            					}
            				}
            				HX_END_LOCAL_FUNC1((void))

HXLINE( 281)				 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp = ::flixel::FlxG_obj::sound;
HXDLIN( 281)				_hx_tmp->play(::Paths_obj::sound(HX_("confirmMenu",bf,8e,fe,3c),null()),null(),null(),null(),null(),null());
HXLINE( 282)				this->submenuOpen = true;
HXLINE( 284)				::flixel::effects::FlxFlicker_obj::flicker(Dynamic( this->otherKeys->members->__get(((this->curSelection * 2) + this->curHorizontalSelection))).StaticCast<  ::meta::data::font::Alphabet >(),((Float)0.5),((Float)0.12),true,false, ::Dynamic(new _hx_Closure_0(_gthis)),null());
            			}
            			else {
HXLINE( 290)				if (::meta::data::PlayerSettings_obj::player1->controls->_back->check()) {
HXLINE( 291)					this->close();
            				}
            			}
            		}
            		else {
HXLINE( 294)			this->subMenuControl();
            		}
            	}


void OptionsSubstate_obj::close(){
            	HX_STACKFRAME(&_hx_pos_709d23672e4e0fb3_298_close)
HXLINE( 300)		::Init_obj::saveControls();
HXLINE( 301)		::Init_obj::saveSettings();
HXLINE( 302)		this->super::close();
            	}


void OptionsSubstate_obj::openSubmenu(){
            	HX_STACKFRAME(&_hx_pos_709d23672e4e0fb3_308_openSubmenu)
HXLINE( 309)		this->offsetTemp = ( (Float)(::Init_obj::trueSettings->get(HX_("Offset",b3,0b,d4,94))) );
HXLINE( 311)		this->submenu->set_visible(true);
HXLINE( 312)		if ((this->curSelection != (this->keyOptions->length - 1))) {
HXLINE( 313)			this->submenuGroup->set_visible(true);
            		}
            		else {
HXLINE( 315)			this->submenuoffsetGroup->set_visible(true);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(OptionsSubstate_obj,openSubmenu,(void))

void OptionsSubstate_obj::closeSubmenu(){
            	HX_STACKFRAME(&_hx_pos_709d23672e4e0fb3_319_closeSubmenu)
HXLINE( 320)		this->submenuOpen = false;
HXLINE( 322)		this->submenu->set_visible(false);
HXLINE( 324)		this->submenuGroup->set_visible(false);
HXLINE( 325)		this->submenuoffsetGroup->set_visible(false);
            	}


HX_DEFINE_DYNAMIC_FUNC0(OptionsSubstate_obj,closeSubmenu,(void))

void OptionsSubstate_obj::subMenuControl(){
            	HX_STACKFRAME(&_hx_pos_709d23672e4e0fb3_329_subMenuControl)
HXLINE( 328)		 ::meta::subState::OptionsSubstate _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE( 331)		if ((this->curSelection != (this->keyOptions->length - 1))) {
HXLINE( 334)			 ::flixel::input::keyboard::FlxKeyList _this = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 334)			if (_this->keyManager->checkStatus(27,_this->status)) {
HXLINE( 335)				this->closeSubmenu();
            			}
            			else {
HXLINE( 336)				if (( ( ::flixel::input::FlxBaseKeyList)(::flixel::FlxG_obj::keys->justPressed) )->get_ANY()) {
HXLINE( 339)					int checkKey = ( (int)(::flixel::FlxG_obj::keys->getIsDown()->__get(0).StaticCast<  ::flixel::input::FlxInput >()->ID) );
HXLINE( 342)					{
HXLINE( 342)						int _g = 0;
HXDLIN( 342)						int _g1 = this->otherKeys->members->get_length();
HXDLIN( 342)						while((_g < _g1)){
HXLINE( 342)							_g = (_g + 1);
HXDLIN( 342)							int i = (_g - 1);
HXLINE( 345)							::String _hx_tmp = Dynamic( this->otherKeys->members->__get(i)).StaticCast<  ::meta::data::font::Alphabet >()->text;
HXDLIN( 345)							if ((_hx_tmp == ::flixel::input::keyboard::_FlxKey::FlxKey_Impl__obj::toStringMap->get_string(checkKey))) {
HXLINE( 348)								 ::Dynamic oldKey = ::Init_obj::gameControls->get(Dynamic( this->keyOptions->members->__get(this->curSelection)).StaticCast<  ::meta::data::font::Alphabet >()->text)->__GetItem(0)->__GetItem(this->curHorizontalSelection);
HXLINE( 349)								::Init_obj::gameControls->get(Dynamic( this->keyOptions->members->__get(Dynamic( this->otherKeys->members->__get(i)).StaticCast<  ::meta::data::font::Alphabet >()->controlGroupID)).StaticCast<  ::meta::data::font::Alphabet >()->text)->__GetItem(0)->__SetItem(Dynamic( this->otherKeys->members->__get(i)).StaticCast<  ::meta::data::font::Alphabet >()->extensionJ,oldKey);
HXLINE( 350)								Dynamic( this->otherKeys->members->__get(i)).StaticCast<  ::meta::data::font::Alphabet >()->text = this->getStringKey(oldKey);
            							}
            						}
            					}
HXLINE( 356)					::Init_obj::gameControls->get(Dynamic( this->keyOptions->members->__get(this->curSelection)).StaticCast<  ::meta::data::font::Alphabet >()->text)->__GetItem(0)->__SetItem(this->curHorizontalSelection,checkKey);
HXLINE( 357)					Dynamic( this->otherKeys->members->__get(((this->curSelection * 2) + this->curHorizontalSelection))).StaticCast<  ::meta::data::font::Alphabet >()->text = this->getStringKey(checkKey);
HXLINE( 360)					::meta::data::PlayerSettings_obj::player1->controls->setKeyboardScheme(::meta::KeyboardScheme_obj::None_dyn(),false);
HXLINE( 371)					this->closeSubmenu();
            				}
            			}
            		}
            		else {
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::meta::subState::OptionsSubstate,_gthis) HXARGC(1)
            			void _hx_run( ::flixel::text::FlxText str){
            				HX_STACKFRAME(&_hx_pos_709d23672e4e0fb3_394_subMenuControl)
HXLINE( 395)				str->set_text(((HX_("< ",64,34,00,00) + ::Std_obj::string((( (Float)(::Math_obj::floor((_gthis->offsetTemp * ( (Float)(10) )))) ) / ( (Float)(10) )))) + HX_(" >",1e,1c,00,00)));
HXLINE( 396)				str->screenCenter(::flixel::util::FlxAxes_obj::X_dyn());
            			}
            			HX_END_LOCAL_FUNC1((void))

HXLINE( 377)			 ::flixel::input::keyboard::FlxKeyList _this = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 377)			if (_this->keyManager->checkStatus(13,_this->status)) {
HXLINE( 379)				{
HXLINE( 379)					 ::Dynamic v = this->offsetTemp;
HXDLIN( 379)					::Init_obj::trueSettings->set(HX_("Offset",b3,0b,d4,94),v);
            				}
HXLINE( 380)				this->closeSubmenu();
            			}
            			else {
HXLINE( 382)				 ::flixel::input::keyboard::FlxKeyList _this = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 382)				if (_this->keyManager->checkStatus(27,_this->status)) {
HXLINE( 383)					this->closeSubmenu();
            				}
            			}
HXLINE( 385)			int move = 0;
HXLINE( 386)			 ::flixel::input::keyboard::FlxKeyList _this1 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN( 386)			if (_this1->keyManager->checkStatus(37,_this1->status)) {
HXLINE( 387)				move = -1;
            			}
            			else {
HXLINE( 388)				 ::flixel::input::keyboard::FlxKeyList _this = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN( 388)				if (_this->keyManager->checkStatus(39,_this->status)) {
HXLINE( 389)					move = 1;
            				}
            			}
HXLINE( 391)			 ::meta::subState::OptionsSubstate _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 391)			_hx_tmp->offsetTemp = (_hx_tmp->offsetTemp + (( (Float)(move) ) * ((Float)0.1)));
HXLINE( 393)			this->submenuoffsetGroup->forEachOfType(::hx::ClassOf< ::flixel::text::FlxText >(), ::Dynamic(new _hx_Closure_0(_gthis)),null());
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(OptionsSubstate_obj,subMenuControl,(void))


::hx::ObjectPtr< OptionsSubstate_obj > OptionsSubstate_obj::__new() {
	::hx::ObjectPtr< OptionsSubstate_obj > __this = new OptionsSubstate_obj();
	__this->__construct();
	return __this;
}

::hx::ObjectPtr< OptionsSubstate_obj > OptionsSubstate_obj::__alloc(::hx::Ctx *_hx_ctx) {
	OptionsSubstate_obj *__this = (OptionsSubstate_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(OptionsSubstate_obj), true, "meta.subState.OptionsSubstate"));
	*(void **)__this = OptionsSubstate_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

OptionsSubstate_obj::OptionsSubstate_obj()
{
}

void OptionsSubstate_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(OptionsSubstate);
	HX_MARK_MEMBER_NAME(curSelection,"curSelection");
	HX_MARK_MEMBER_NAME(submenuGroup,"submenuGroup");
	HX_MARK_MEMBER_NAME(submenuoffsetGroup,"submenuoffsetGroup");
	HX_MARK_MEMBER_NAME(offsetTemp,"offsetTemp");
	HX_MARK_MEMBER_NAME(keyOptions,"keyOptions");
	HX_MARK_MEMBER_NAME(otherKeys,"otherKeys");
	HX_MARK_MEMBER_NAME(curHorizontalSelection,"curHorizontalSelection");
	HX_MARK_MEMBER_NAME(submenuOpen,"submenuOpen");
	HX_MARK_MEMBER_NAME(submenu,"submenu");
	 ::flixel::FlxSubState_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void OptionsSubstate_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(curSelection,"curSelection");
	HX_VISIT_MEMBER_NAME(submenuGroup,"submenuGroup");
	HX_VISIT_MEMBER_NAME(submenuoffsetGroup,"submenuoffsetGroup");
	HX_VISIT_MEMBER_NAME(offsetTemp,"offsetTemp");
	HX_VISIT_MEMBER_NAME(keyOptions,"keyOptions");
	HX_VISIT_MEMBER_NAME(otherKeys,"otherKeys");
	HX_VISIT_MEMBER_NAME(curHorizontalSelection,"curHorizontalSelection");
	HX_VISIT_MEMBER_NAME(submenuOpen,"submenuOpen");
	HX_VISIT_MEMBER_NAME(submenu,"submenu");
	 ::flixel::FlxSubState_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val OptionsSubstate_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"close") ) { return ::hx::Val( close_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"create") ) { return ::hx::Val( create_dyn() ); }
		if (HX_FIELD_EQ(inName,"update") ) { return ::hx::Val( update_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"submenu") ) { return ::hx::Val( submenu ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"otherKeys") ) { return ::hx::Val( otherKeys ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"offsetTemp") ) { return ::hx::Val( offsetTemp ); }
		if (HX_FIELD_EQ(inName,"keyOptions") ) { return ::hx::Val( keyOptions ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"submenuOpen") ) { return ::hx::Val( submenuOpen ); }
		if (HX_FIELD_EQ(inName,"openSubmenu") ) { return ::hx::Val( openSubmenu_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"curSelection") ) { return ::hx::Val( curSelection ); }
		if (HX_FIELD_EQ(inName,"submenuGroup") ) { return ::hx::Val( submenuGroup ); }
		if (HX_FIELD_EQ(inName,"getStringKey") ) { return ::hx::Val( getStringKey_dyn() ); }
		if (HX_FIELD_EQ(inName,"closeSubmenu") ) { return ::hx::Val( closeSubmenu_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"generateExtra") ) { return ::hx::Val( generateExtra_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"subMenuControl") ) { return ::hx::Val( subMenuControl_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"generateOptions") ) { return ::hx::Val( generateOptions_dyn() ); }
		if (HX_FIELD_EQ(inName,"updateSelection") ) { return ::hx::Val( updateSelection_dyn() ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"submenuoffsetGroup") ) { return ::hx::Val( submenuoffsetGroup ); }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"curHorizontalSelection") ) { return ::hx::Val( curHorizontalSelection ); }
		break;
	case 25:
		if (HX_FIELD_EQ(inName,"updateHorizontalSelection") ) { return ::hx::Val( updateHorizontalSelection_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val OptionsSubstate_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"submenu") ) { submenu=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"otherKeys") ) { otherKeys=inValue.Cast<  ::flixel::group::FlxTypedGroup >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"offsetTemp") ) { offsetTemp=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"keyOptions") ) { keyOptions=inValue.Cast<  ::flixel::group::FlxTypedGroup >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"submenuOpen") ) { submenuOpen=inValue.Cast< bool >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"curSelection") ) { curSelection=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"submenuGroup") ) { submenuGroup=inValue.Cast<  ::flixel::group::FlxTypedGroup >(); return inValue; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"submenuoffsetGroup") ) { submenuoffsetGroup=inValue.Cast<  ::flixel::group::FlxTypedGroup >(); return inValue; }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"curHorizontalSelection") ) { curHorizontalSelection=inValue.Cast< int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void OptionsSubstate_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("curSelection",ac,a2,c5,23));
	outFields->push(HX_("submenuGroup",a0,43,f4,3f));
	outFields->push(HX_("submenuoffsetGroup",ed,2d,f0,d1));
	outFields->push(HX_("offsetTemp",47,4c,11,49));
	outFields->push(HX_("keyOptions",7f,d3,85,4e));
	outFields->push(HX_("otherKeys",e4,1c,da,7d));
	outFields->push(HX_("curHorizontalSelection",28,81,e8,6e));
	outFields->push(HX_("submenuOpen",89,5a,80,d6));
	outFields->push(HX_("submenu",1f,af,83,2b));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo OptionsSubstate_obj_sMemberStorageInfo[] = {
	{::hx::fsInt,(int)offsetof(OptionsSubstate_obj,curSelection),HX_("curSelection",ac,a2,c5,23)},
	{::hx::fsObject /*  ::flixel::group::FlxTypedGroup */ ,(int)offsetof(OptionsSubstate_obj,submenuGroup),HX_("submenuGroup",a0,43,f4,3f)},
	{::hx::fsObject /*  ::flixel::group::FlxTypedGroup */ ,(int)offsetof(OptionsSubstate_obj,submenuoffsetGroup),HX_("submenuoffsetGroup",ed,2d,f0,d1)},
	{::hx::fsFloat,(int)offsetof(OptionsSubstate_obj,offsetTemp),HX_("offsetTemp",47,4c,11,49)},
	{::hx::fsObject /*  ::flixel::group::FlxTypedGroup */ ,(int)offsetof(OptionsSubstate_obj,keyOptions),HX_("keyOptions",7f,d3,85,4e)},
	{::hx::fsObject /*  ::flixel::group::FlxTypedGroup */ ,(int)offsetof(OptionsSubstate_obj,otherKeys),HX_("otherKeys",e4,1c,da,7d)},
	{::hx::fsInt,(int)offsetof(OptionsSubstate_obj,curHorizontalSelection),HX_("curHorizontalSelection",28,81,e8,6e)},
	{::hx::fsBool,(int)offsetof(OptionsSubstate_obj,submenuOpen),HX_("submenuOpen",89,5a,80,d6)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(OptionsSubstate_obj,submenu),HX_("submenu",1f,af,83,2b)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *OptionsSubstate_obj_sStaticStorageInfo = 0;
#endif

static ::String OptionsSubstate_obj_sMemberFields[] = {
	HX_("curSelection",ac,a2,c5,23),
	HX_("submenuGroup",a0,43,f4,3f),
	HX_("submenuoffsetGroup",ed,2d,f0,d1),
	HX_("offsetTemp",47,4c,11,49),
	HX_("create",fc,66,0f,7c),
	HX_("keyOptions",7f,d3,85,4e),
	HX_("otherKeys",e4,1c,da,7d),
	HX_("generateOptions",a9,7c,b8,bb),
	HX_("generateExtra",1b,6b,9f,1d),
	HX_("getStringKey",d8,4d,0e,d7),
	HX_("updateSelection",03,c9,a5,dd),
	HX_("curHorizontalSelection",28,81,e8,6e),
	HX_("updateHorizontalSelection",3f,9a,4a,10),
	HX_("submenuOpen",89,5a,80,d6),
	HX_("update",09,86,05,87),
	HX_("close",b8,17,63,48),
	HX_("submenu",1f,af,83,2b),
	HX_("openSubmenu",75,40,c5,c6),
	HX_("closeSubmenu",47,a6,54,77),
	HX_("subMenuControl",de,2d,01,cf),
	::String(null()) };

::hx::Class OptionsSubstate_obj::__mClass;

void OptionsSubstate_obj::__register()
{
	OptionsSubstate_obj _hx_dummy;
	OptionsSubstate_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("meta.subState.OptionsSubstate",bb,38,a3,ae);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(OptionsSubstate_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< OptionsSubstate_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = OptionsSubstate_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = OptionsSubstate_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace meta
} // end namespace subState

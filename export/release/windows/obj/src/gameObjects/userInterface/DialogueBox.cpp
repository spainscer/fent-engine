// Generated by Haxe 4.1.5
#include <hxcpp.h>

#ifndef INCLUDED_Paths
#include <Paths.h>
#endif
#ifndef INCLUDED_Reflect
#include <Reflect.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_animation_FlxAnimation
#include <flixel/animation/FlxAnimation.h>
#endif
#ifndef INCLUDED_flixel_animation_FlxAnimationController
#include <flixel/animation/FlxAnimationController.h>
#endif
#ifndef INCLUDED_flixel_animation_FlxBaseAnimation
#include <flixel/animation/FlxBaseAnimation.h>
#endif
#ifndef INCLUDED_flixel_graphics_frames_FlxAtlasFrames
#include <flixel/graphics/frames/FlxAtlasFrames.h>
#endif
#ifndef INCLUDED_flixel_graphics_frames_FlxFramesCollection
#include <flixel/graphics/frames/FlxFramesCollection.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedSpriteGroup
#include <flixel/group/FlxTypedSpriteGroup.h>
#endif
#ifndef INCLUDED_flixel_math_FlxPoint
#include <flixel/math/FlxPoint.h>
#endif
#ifndef INCLUDED_flixel_system_FlxSound
#include <flixel/system/FlxSound.h>
#endif
#ifndef INCLUDED_flixel_system_FlxSoundGroup
#include <flixel/system/FlxSoundGroup.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_SoundFrontEnd
#include <flixel/system/frontEnds/SoundFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_text_FlxText
#include <flixel/text/FlxText.h>
#endif
#ifndef INCLUDED_flixel_text_FlxTextBorderStyle
#include <flixel/text/FlxTextBorderStyle.h>
#endif
#ifndef INCLUDED_flixel_tweens_FlxEase
#include <flixel/tweens/FlxEase.h>
#endif
#ifndef INCLUDED_flixel_tweens_FlxTween
#include <flixel/tweens/FlxTween.h>
#endif
#ifndef INCLUDED_flixel_tweens_misc_VarTween
#include <flixel/tweens/misc/VarTween.h>
#endif
#ifndef INCLUDED_flixel_util_FlxAxes
#include <flixel/util/FlxAxes.h>
#endif
#ifndef INCLUDED_flixel_util_FlxTimer
#include <flixel/util/FlxTimer.h>
#endif
#ifndef INCLUDED_flixel_util_FlxTimerManager
#include <flixel/util/FlxTimerManager.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif
#ifndef INCLUDED_flixel_util__FlxColor_FlxColor_Impl_
#include <flixel/util/_FlxColor/FlxColor_Impl_.h>
#endif
#ifndef INCLUDED_gameObjects_userInterface_DialogueBox
#include <gameObjects/userInterface/DialogueBox.h>
#endif
#ifndef INCLUDED_haxe_Log
#include <haxe/Log.h>
#endif
#ifndef INCLUDED_haxe_format_JsonParser
#include <haxe/format/JsonParser.h>
#endif
#ifndef INCLUDED_meta_data_dependency_FNFSprite
#include <meta/data/dependency/FNFSprite.h>
#endif
#ifndef INCLUDED_meta_data_font_Alphabet
#include <meta/data/font/Alphabet.h>
#endif
#ifndef INCLUDED_sys_FileSystem
#include <sys/FileSystem.h>
#endif
#ifndef INCLUDED_sys_io_File
#include <sys/io/File.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_faf820714c5b7569_64_new,"gameObjects.userInterface.DialogueBox","new",0x3e67d539,"gameObjects.userInterface.DialogueBox.new","gameObjects/userInterface/DialogueBox.hx",64,0x70e56399)
HX_LOCAL_STACK_FRAME(_hx_pos_faf820714c5b7569_101_dialoguePath,"gameObjects.userInterface.DialogueBox","dialoguePath",0x98e2c2e4,"gameObjects.userInterface.DialogueBox.dialoguePath","gameObjects/userInterface/DialogueBox.hx",101,0x70e56399)
HX_LOCAL_STACK_FRAME(_hx_pos_faf820714c5b7569_175_updateDialog,"gameObjects.userInterface.DialogueBox","updateDialog",0x3961c3b8,"gameObjects.userInterface.DialogueBox.updateDialog","gameObjects/userInterface/DialogueBox.hx",175,0x70e56399)
HX_LOCAL_STACK_FRAME(_hx_pos_faf820714c5b7569_166_updateDialog,"gameObjects.userInterface.DialogueBox","updateDialog",0x3961c3b8,"gameObjects.userInterface.DialogueBox.updateDialog","gameObjects/userInterface/DialogueBox.hx",166,0x70e56399)
HX_LOCAL_STACK_FRAME(_hx_pos_faf820714c5b7569_204_updateDialog,"gameObjects.userInterface.DialogueBox","updateDialog",0x3961c3b8,"gameObjects.userInterface.DialogueBox.updateDialog","gameObjects/userInterface/DialogueBox.hx",204,0x70e56399)
HX_LOCAL_STACK_FRAME(_hx_pos_faf820714c5b7569_215_updateTextBox,"gameObjects.userInterface.DialogueBox","updateTextBox",0x3f72666e,"gameObjects.userInterface.DialogueBox.updateTextBox","gameObjects/userInterface/DialogueBox.hx",215,0x70e56399)
static const int _hx_array_data_b33cc4c7_6[] = {
	(int)0,(int)0,
};
HX_LOCAL_STACK_FRAME(_hx_pos_faf820714c5b7569_307_updatePortrait,"gameObjects.userInterface.DialogueBox","updatePortrait",0xb93f7c4b,"gameObjects.userInterface.DialogueBox.updatePortrait","gameObjects/userInterface/DialogueBox.hx",307,0x70e56399)
static const int _hx_array_data_b33cc4c7_10[] = {
	(int)0,(int)0,
};
HX_LOCAL_STACK_FRAME(_hx_pos_faf820714c5b7569_431_runEvent,"gameObjects.userInterface.DialogueBox","runEvent",0xe848c956,"gameObjects.userInterface.DialogueBox.runEvent","gameObjects/userInterface/DialogueBox.hx",431,0x70e56399)
HX_LOCAL_STACK_FRAME(_hx_pos_faf820714c5b7569_472_updateEvents,"gameObjects.userInterface.DialogueBox","updateEvents",0x1e990e09,"gameObjects.userInterface.DialogueBox.updateEvents","gameObjects/userInterface/DialogueBox.hx",472,0x70e56399)
HX_LOCAL_STACK_FRAME(_hx_pos_faf820714c5b7569_492_closeDialog,"gameObjects.userInterface.DialogueBox","closeDialog",0x71dd3079,"gameObjects.userInterface.DialogueBox.closeDialog","gameObjects/userInterface/DialogueBox.hx",492,0x70e56399)
HX_LOCAL_STACK_FRAME(_hx_pos_faf820714c5b7569_499_dialogDataCheck,"gameObjects.userInterface.DialogueBox","dialogDataCheck",0xd02782af,"gameObjects.userInterface.DialogueBox.dialogDataCheck","gameObjects/userInterface/DialogueBox.hx",499,0x70e56399)
HX_LOCAL_STACK_FRAME(_hx_pos_faf820714c5b7569_512_update,"gameObjects.userInterface.DialogueBox","update",0x81bb4ed0,"gameObjects.userInterface.DialogueBox.update","gameObjects/userInterface/DialogueBox.hx",512,0x70e56399)
HX_LOCAL_STACK_FRAME(_hx_pos_faf820714c5b7569_94_createDialogue,"gameObjects.userInterface.DialogueBox","createDialogue",0xc53513fb,"gameObjects.userInterface.DialogueBox.createDialogue","gameObjects/userInterface/DialogueBox.hx",94,0x70e56399)
namespace gameObjects{
namespace userInterface{

void DialogueBox_obj::__construct( ::Dynamic __o_talkingRight,::String daDialogue){
            		 ::Dynamic talkingRight = __o_talkingRight;
            		if (::hx::IsNull(__o_talkingRight)) talkingRight = false;
            	HX_GC_STACKFRAME(&_hx_pos_faf820714c5b7569_64_new)
HXLINE(  91)		this->textStarted = false;
HXLINE(  82)		this->curPage = 0;
HXLINE( 114)		super::__construct(null(),null(),null());
HXLINE( 116)		::haxe::Log_obj::trace(HX_("start",62,74,0b,84),::hx::SourceInfo(HX_("source/gameObjects/userInterface/DialogueBox.hx",8d,d6,64,c6),116,HX_("gameObjects.userInterface.DialogueBox",c7,c4,3c,b3),HX_("new",60,d0,53,00)));
HXLINE( 119)		this->dialogueData =  ::haxe::format::JsonParser_obj::__alloc( HX_CTX ,daDialogue)->doParse();
HXLINE( 121)		this->dialogDataCheck();
HXLINE( 124)		 ::flixel::FlxSprite _hx_tmp =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,-200,-200,null());
HXDLIN( 124)		int _hx_tmp1 = ::Std_obj::_hx_int((( (Float)(::flixel::FlxG_obj::width) ) * ((Float)1.3)));
HXDLIN( 124)		this->bgFade = _hx_tmp->makeGraphic(_hx_tmp1,::Std_obj::_hx_int((( (Float)(::flixel::FlxG_obj::height) ) * ((Float)1.3))),-16777216,null(),null());
HXLINE( 125)		this->bgFade->scrollFactor->set(null(),null());
HXLINE( 126)		this->bgFade->set_alpha(( (Float)(0) ));
HXLINE( 127)		this->add(this->bgFade);
HXLINE( 130)		this->box =  ::meta::data::dependency::FNFSprite_obj::__alloc( HX_CTX ,0,370);
HXLINE( 133)		this->portrait =  ::meta::data::dependency::FNFSprite_obj::__alloc( HX_CTX ,800,160);
HXLINE( 137)		this->alphabetText =  ::meta::data::font::Alphabet_obj::__alloc( HX_CTX ,( (Float)(100) ),( (Float)(425) ),HX_("cool",c9,ba,c4,41),false,true,((Float)0.7));
HXLINE( 140)		this->text =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,100,480,1000,HX_("",00,00,00,00),35,null());
HXLINE( 141)		this->text->set_color(-16777216);
HXLINE( 142)		this->text->set_visible(false);
HXLINE( 144)		this->updateDialog(true);
HXLINE( 147)		this->add(this->portrait);
HXLINE( 148)		this->add(this->box);
HXLINE( 149)		this->add(this->text);
HXLINE( 151)		this->add(this->alphabetText);
HXLINE( 154)		 ::flixel::text::FlxText skipText =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,100,670,1000,HX_("PRESS SHIFT TO SKIP",09,80,5f,a7),20,null());
HXLINE( 155)		skipText->set_alignment(HX_("center",d5,25,db,05));
HXLINE( 157)		skipText->set_borderStyle(::flixel::text::FlxTextBorderStyle_obj::OUTLINE_dyn());
HXLINE( 158)		skipText->set_borderColor(-16777216);
HXLINE( 159)		skipText->set_borderSize(( (Float)(3) ));
HXLINE( 161)		skipText->screenCenter(::flixel::util::FlxAxes_obj::X_dyn());
HXLINE( 162)		this->add(skipText);
            	}

Dynamic DialogueBox_obj::__CreateEmpty() { return new DialogueBox_obj; }

void *DialogueBox_obj::_hx_vtable = 0;

Dynamic DialogueBox_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< DialogueBox_obj > _hx_result = new DialogueBox_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool DialogueBox_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x2c01639b) {
		if (inClassId<=(int)0x288ce903) {
			if (inClassId<=(int)0x23417363) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x23417363;
			} else {
				return inClassId==(int)0x288ce903;
			}
		} else {
			return inClassId==(int)0x2c01639b;
		}
	} else {
		return inClassId==(int)0x7ccf8994 || inClassId==(int)0x7dab0655;
	}
}

::String DialogueBox_obj::dialoguePath(::String file){
            	HX_STACKFRAME(&_hx_pos_faf820714c5b7569_101_dialoguePath)
HXLINE( 102)		::String library = null();
HXDLIN( 102)		::String dialoguePath = ::Paths_obj::getPath((((HX_("assets/images/dialogue/portraits/",83,cc,ae,c7) + this->curCharacter) + HX_("/",2f,00,00,00)) + file),HX_("TEXT",ad,94,ba,37),library);
HXLINE( 103)		::String library1 = null();
HXDLIN( 103)		::String truePath = ::Paths_obj::getPath(file,HX_("TEXT",ad,94,ba,37),library1);
HXLINE( 106)		if (::sys::FileSystem_obj::exists(dialoguePath)) {
HXLINE( 107)			return dialoguePath;
            		}
            		else {
HXLINE( 109)			return truePath;
            		}
HXLINE( 106)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(DialogueBox_obj,dialoguePath,return )

void DialogueBox_obj::updateDialog(::hx::Null< bool >  __o_force){
            		HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_0, ::gameObjects::userInterface::DialogueBox,_gthis, ::Dynamic,pageData) HXARGC(0)
            		void _hx_run(){
            			HX_STACKFRAME(&_hx_pos_faf820714c5b7569_175_updateDialog)
HXLINE( 177)			::String textToDisplay = HX_("lol u need text for dialog",0a,50,8f,09);
HXLINE( 179)			if (::hx::IsNotNull( pageData->__Field(HX_("text",ad,cc,f9,4c),::hx::paccDynamic) )) {
HXLINE( 180)				textToDisplay = ( (::String)(pageData->__Field(HX_("text",ad,cc,f9,4c),::hx::paccDynamic)) );
            			}
HXLINE( 182)			_gthis->alphabetText->startText(textToDisplay,true);
            		}
            		HX_END_LOCAL_FUNC0((void))

            		bool force = __o_force.Default(false);
            	HX_GC_STACKFRAME(&_hx_pos_faf820714c5b7569_166_updateDialog)
HXLINE( 165)		 ::gameObjects::userInterface::DialogueBox _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE( 168)		this->updateTextBox(force);
HXLINE( 169)		this->updatePortrait(force);
HXLINE( 170)		this->updateEvents(force);
HXLINE( 172)		 ::Dynamic pageData =  ::Dynamic(this->dialogueData->__Field(HX_("dialogue",18,2d,94,a7),::hx::paccDynamic))->__GetItem(this->curPage);
HXLINE( 174)		 ::Dynamic startText =  ::Dynamic(new _hx_Closure_0(_gthis,pageData));
HXLINE( 186)		if (::hx::IsNotNull( pageData->__Field(HX_("speed",87,97,69,81),::hx::paccDynamic) )) {
HXLINE( 187)			this->alphabetText->textSpeed = (((Float)0.06) / ( (Float)(pageData->__Field(HX_("speed",87,97,69,81),::hx::paccDynamic)) ));
            		}
            		else {
HXLINE( 189)			this->alphabetText->textSpeed = ((Float)0.06);
            		}
HXLINE( 192)		if (::hx::IsNotNull( pageData->__Field(HX_("scale",8a,ce,ce,78),::hx::paccDynamic) )) {
HXLINE( 193)			this->alphabetText->textSize = (((Float)0.7) * ( (Float)(pageData->__Field(HX_("scale",8a,ce,ce,78),::hx::paccDynamic)) ));
            		}
            		else {
HXLINE( 195)			this->alphabetText->textSize = ((Float)0.7);
            		}
HXLINE( 198)		if ((this->textStarted == false)) {
            			HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_1, ::gameObjects::userInterface::DialogueBox,_gthis, ::Dynamic,startText) HXARGC(1)
            			void _hx_run( ::flixel::util::FlxTimer tmr){
            				HX_GC_STACKFRAME(&_hx_pos_faf820714c5b7569_204_updateDialog)
HXLINE( 205)				_gthis->textStarted = true;
HXLINE( 206)				startText();
            			}
            			HX_END_LOCAL_FUNC1((void))

HXLINE( 201)			this->alphabetText->startText(HX_("",00,00,00,00),true);
HXLINE( 203)			 ::flixel::util::FlxTimer_obj::__alloc( HX_CTX ,null())->start(((Float)0.375), ::Dynamic(new _hx_Closure_1(_gthis,startText)),null());
            		}
            		else {
HXLINE( 211)			startText();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(DialogueBox_obj,updateDialog,(void))

void DialogueBox_obj::updateTextBox(::hx::Null< bool >  __o_force){
            		bool force = __o_force.Default(false);
            	HX_GC_STACKFRAME(&_hx_pos_faf820714c5b7569_215_updateTextBox)
HXLINE( 216)		::String curBox = ( (::String)(this->dialogueData->__Field(HX_("box",0b,be,4a,00),::hx::paccDynamic)) );
HXLINE( 217)		::String newState = ( (::String)( ::Dynamic(this->dialogueData->__Field(HX_("dialogue",18,2d,94,a7),::hx::paccDynamic))->__GetItem(this->curPage)->__Field(HX_("boxState",06,60,2a,ff),::hx::paccDynamic)) );
HXLINE( 219)		bool _hx_tmp;
HXDLIN( 219)		if (force) {
HXLINE( 219)			_hx_tmp = ::hx::IsNull( newState );
            		}
            		else {
HXLINE( 219)			_hx_tmp = false;
            		}
HXDLIN( 219)		if (_hx_tmp) {
HXLINE( 220)			newState = ( (::String)(this->dialogueData->__Field(HX_("boxState",06,60,2a,ff),::hx::paccDynamic)) );
            		}
HXLINE( 222)		if (::hx::IsNull( newState )) {
HXLINE( 223)			return;
            		}
HXLINE( 225)		bool _hx_tmp1;
HXDLIN( 225)		if ((this->curBoxState == newState)) {
HXLINE( 225)			_hx_tmp1 = force;
            		}
            		else {
HXLINE( 225)			_hx_tmp1 = true;
            		}
HXDLIN( 225)		if (_hx_tmp1) {
HXLINE( 227)			this->curBoxState = newState;
HXLINE( 230)			::String library = null();
HXDLIN( 230)			::String boxJson = ::Paths_obj::getPath(((((HX_("images/dialogue/boxes/",96,23,82,1d) + curBox) + HX_("/",2f,00,00,00)) + curBox) + HX_(".json",56,f1,d6,c2)),HX_("TEXT",ad,94,ba,37),library);
HXLINE( 233)			this->boxData =  ::haxe::format::JsonParser_obj::__alloc( HX_CTX ,::sys::io::File_obj::getContent(boxJson))->doParse();
HXLINE( 234)			 ::meta::data::dependency::FNFSprite _hx_tmp = this->box;
HXDLIN( 234)			::String key = (((HX_("dialogue/boxes/",2d,56,39,78) + curBox) + HX_("/",2f,00,00,00)) + curBox);
HXDLIN( 234)			::String library1 = null();
HXDLIN( 234)			::String _hx_tmp1 = ::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + key) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),library1);
HXDLIN( 234)			_hx_tmp->set_frames(::flixel::graphics::frames::FlxAtlasFrames_obj::fromSparrow(_hx_tmp1,::sys::io::File_obj::getContent(::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + key) + HX_(".xml",69,3e,c3,1e)),HX_("TEXT",ad,94,ba,37),library1))));
HXLINE( 237)			 ::Dynamic curStateData = ::Reflect_obj::field( ::Dynamic(this->boxData->__Field(HX_("states",42,d9,fb,05),::hx::paccDynamic)),this->curBoxState);
HXLINE( 239)			if (::hx::IsNull( curStateData )) {
HXLINE( 240)				return;
            			}
HXLINE( 243)			::cpp::VirtualArray defaultAnim = ( (::cpp::VirtualArray)(::Reflect_obj::field(curStateData,HX_("default",c1,d8,c3,9b))) );
HXLINE( 244)			::cpp::VirtualArray openAnim = ( (::cpp::VirtualArray)(::Reflect_obj::field(curStateData,HX_("open",ca,03,b4,49))) );
HXLINE( 247)			if (::hx::IsNull( defaultAnim->__get(1) )) {
HXLINE( 248)				defaultAnim->set(1,::cpp::VirtualArray_obj::__new(2)->init(0,0)->init(1,0));
            			}
HXLINE( 250)			if (::hx::IsNull( openAnim->__get(1) )) {
HXLINE( 251)				openAnim->set(1,::cpp::VirtualArray_obj::__new(2)->init(0,0)->init(1,0));
            			}
HXLINE( 254)			if (::hx::IsNull( this->boxData->__Field(HX_("singleFrame",85,d4,46,f0),::hx::paccDynamic) )) {
HXLINE( 255)				this->boxData->__SetField(HX_("singleFrame",85,d4,46,f0),false,::hx::paccDynamic);
            			}
HXLINE( 258)			if (::hx::IsNull( this->boxData->__Field(HX_("doFlip",d8,b7,c1,13),::hx::paccDynamic) )) {
HXLINE( 259)				this->boxData->__SetField(HX_("doFlip",d8,b7,c1,13),true,::hx::paccDynamic);
            			}
HXLINE( 261)			if (::hx::IsNotNull( this->boxData->__Field(HX_("bgColor",5e,81,83,f7),::hx::paccDynamic) )) {
HXLINE( 263)				::Array< int > colorArray = ( (::Array< int >)(this->boxData->__Field(HX_("bgColor",5e,81,83,f7),::hx::paccDynamic)) );
HXLINE( 264)				int Red = colorArray->__get(0);
HXDLIN( 264)				int Green = colorArray->__get(1);
HXDLIN( 264)				int Blue = colorArray->__get(2);
HXDLIN( 264)				int Alpha = 255;
HXDLIN( 264)				int color = ::flixel::util::_FlxColor::FlxColor_Impl__obj::_new(null());
HXDLIN( 264)				{
HXLINE( 264)					color = (color & -16711681);
HXDLIN( 264)					int color1;
HXDLIN( 264)					if ((Red > 255)) {
HXLINE( 264)						color1 = 255;
            					}
            					else {
HXLINE( 264)						if ((Red < 0)) {
HXLINE( 264)							color1 = 0;
            						}
            						else {
HXLINE( 264)							color1 = Red;
            						}
            					}
HXDLIN( 264)					color = (color | (color1 << 16));
            				}
HXDLIN( 264)				{
HXLINE( 264)					color = (color & -65281);
HXDLIN( 264)					int color2;
HXDLIN( 264)					if ((Green > 255)) {
HXLINE( 264)						color2 = 255;
            					}
            					else {
HXLINE( 264)						if ((Green < 0)) {
HXLINE( 264)							color2 = 0;
            						}
            						else {
HXLINE( 264)							color2 = Green;
            						}
            					}
HXDLIN( 264)					color = (color | (color2 << 8));
            				}
HXDLIN( 264)				{
HXLINE( 264)					color = (color & -256);
HXDLIN( 264)					int color3;
HXDLIN( 264)					if ((Blue > 255)) {
HXLINE( 264)						color3 = 255;
            					}
            					else {
HXLINE( 264)						if ((Blue < 0)) {
HXLINE( 264)							color3 = 0;
            						}
            						else {
HXLINE( 264)							color3 = Blue;
            						}
            					}
HXDLIN( 264)					color = (color | color3);
            				}
HXDLIN( 264)				{
HXLINE( 264)					color = (color & 16777215);
HXDLIN( 264)					int color4;
HXDLIN( 264)					if ((Alpha > 255)) {
HXLINE( 264)						color4 = 255;
            					}
            					else {
HXLINE( 264)						if ((Alpha < 0)) {
HXLINE( 264)							color4 = 0;
            						}
            						else {
HXLINE( 264)							color4 = Alpha;
            						}
            					}
HXDLIN( 264)					color = (color | (color4 << 24));
            				}
HXDLIN( 264)				int newColor = color;
HXLINE( 266)				 ::flixel::FlxSprite _hx_tmp =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,-200,-200,null());
HXDLIN( 266)				int _hx_tmp1 = ::Std_obj::_hx_int((( (Float)(::flixel::FlxG_obj::width) ) * ((Float)1.3)));
HXDLIN( 266)				this->bgFade = _hx_tmp->makeGraphic(_hx_tmp1,::Std_obj::_hx_int((( (Float)(::flixel::FlxG_obj::height) ) * ((Float)1.3))),newColor,null(),null());
HXLINE( 267)				this->bgFade->scrollFactor->set(null(),null());
HXLINE( 268)				this->bgFade->set_alpha(( (Float)(0) ));
HXLINE( 269)				this->add(this->bgFade);
            			}
HXLINE( 273)			this->box->animation->addByPrefix(HX_("normal",27,72,69,30),( (::String)(defaultAnim->__get(0)) ),24,true,null(),null());
HXLINE( 274)			this->box->addOffset(HX_("normal",27,72,69,30),defaultAnim->__get(1)->__GetItem(0),defaultAnim->__get(1)->__GetItem(1));
HXLINE( 276)			this->box->animation->addByPrefix(HX_("normalOpen",91,41,38,70),( (::String)(openAnim->__get(0)) ),24,false,null(),null());
HXLINE( 277)			this->box->addOffset(HX_("normalOpen",91,41,38,70),openAnim->__get(1)->__GetItem(0),openAnim->__get(1)->__GetItem(1));
HXLINE( 280)			if (::hx::IsNull( this->boxData->__Field(HX_("position",a9,a0,fa,ca),::hx::paccDynamic) )) {
HXLINE( 281)				this->boxData->__SetField(HX_("position",a9,a0,fa,ca),::Array_obj< int >::fromData( _hx_array_data_b33cc4c7_6,2),::hx::paccDynamic);
            			}
HXLINE( 283)			this->box->set_x(( (Float)( ::Dynamic(this->boxData->__Field(HX_("position",a9,a0,fa,ca),::hx::paccDynamic))->__GetItem(0)) ));
HXLINE( 284)			this->box->set_y(( (Float)( ::Dynamic(this->boxData->__Field(HX_("position",a9,a0,fa,ca),::hx::paccDynamic))->__GetItem(1)) ));
HXLINE( 287)			if (::hx::IsNull( this->boxData->__Field(HX_("scale",8a,ce,ce,78),::hx::paccDynamic) )) {
HXLINE( 288)				this->boxData->__SetField(HX_("scale",8a,ce,ce,78),1,::hx::paccDynamic);
            			}
HXLINE( 290)			if (::hx::IsNull( this->boxData->__Field(HX_("antialiasing",f4,16,b3,48),::hx::paccDynamic) )) {
HXLINE( 291)				this->boxData->__SetField(HX_("antialiasing",f4,16,b3,48),true,::hx::paccDynamic);
            			}
HXLINE( 293)			this->box->scale =  ::flixel::math::FlxPoint_obj::__alloc( HX_CTX ,this->boxData->__Field(HX_("scale",8a,ce,ce,78),::hx::paccDynamic),this->boxData->__Field(HX_("scale",8a,ce,ce,78),::hx::paccDynamic));
HXLINE( 294)			this->box->set_antialiasing(( (bool)(this->boxData->__Field(HX_("antialiasing",f4,16,b3,48),::hx::paccDynamic)) ));
HXLINE( 296)			if (::hx::IsNotNull( this->boxData->__Field(HX_("textPos",e7,b2,c4,9e),::hx::paccDynamic) )) {
HXLINE( 298)				this->text->set_x(( (Float)( ::Dynamic(this->boxData->__Field(HX_("textPos",e7,b2,c4,9e),::hx::paccDynamic))->__GetItem(0)) ));
HXLINE( 299)				this->text->set_y(( (Float)( ::Dynamic(this->boxData->__Field(HX_("textPos",e7,b2,c4,9e),::hx::paccDynamic))->__GetItem(1)) ));
            			}
HXLINE( 302)			this->box->playAnim(HX_("normalOpen",91,41,38,70),null(),null(),null());
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(DialogueBox_obj,updateTextBox,(void))

void DialogueBox_obj::updatePortrait(::hx::Null< bool >  __o_force){
            		bool force = __o_force.Default(false);
            	HX_GC_STACKFRAME(&_hx_pos_faf820714c5b7569_307_updatePortrait)
HXLINE( 308)		::String newChar = ( (::String)( ::Dynamic(this->dialogueData->__Field(HX_("dialogue",18,2d,94,a7),::hx::paccDynamic))->__GetItem(this->curPage)->__Field(HX_("portrait",5b,21,af,b8),::hx::paccDynamic)) );
HXLINE( 310)		bool _hx_tmp;
HXDLIN( 310)		if ((this->curCharacter == newChar)) {
HXLINE( 310)			_hx_tmp = force;
            		}
            		else {
HXLINE( 310)			_hx_tmp = true;
            		}
HXDLIN( 310)		if (_hx_tmp) {
HXLINE( 312)			if (::hx::IsNotNull( newChar )) {
HXLINE( 315)				this->curCharacter = newChar;
HXLINE( 316)				::String library = null();
HXDLIN( 316)				::String portraitJson = ::Paths_obj::getPath(((((HX_("images/dialogue/portraits/",37,f3,fd,b0) + this->curCharacter) + HX_("/",2f,00,00,00)) + this->curCharacter) + HX_(".json",56,f1,d6,c2)),HX_("TEXT",ad,94,ba,37),library);
HXLINE( 319)				if (::sys::FileSystem_obj::exists(portraitJson)) {
HXLINE( 321)					this->portraitData =  ::haxe::format::JsonParser_obj::__alloc( HX_CTX ,::sys::io::File_obj::getContent(portraitJson))->doParse();
HXLINE( 322)					 ::meta::data::dependency::FNFSprite _hx_tmp = this->portrait;
HXDLIN( 322)					::String key = (((HX_("dialogue/portraits/",4e,bd,b7,2d) + this->curCharacter) + HX_("/",2f,00,00,00)) + this->curCharacter);
HXDLIN( 322)					::String library = null();
HXDLIN( 322)					::String _hx_tmp1 = ::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + key) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),library);
HXDLIN( 322)					_hx_tmp->set_frames(::flixel::graphics::frames::FlxAtlasFrames_obj::fromSparrow(_hx_tmp1,::sys::io::File_obj::getContent(::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + key) + HX_(".xml",69,3e,c3,1e)),HX_("TEXT",ad,94,ba,37),library))));
            				}
HXLINE( 326)				bool loop = true;
HXLINE( 327)				if (::hx::IsNotNull( this->portraitData->__Field(HX_("loop",64,a6,b7,47),::hx::paccDynamic) )) {
HXLINE( 328)					loop = ( (bool)(this->portraitData->__Field(HX_("loop",64,a6,b7,47),::hx::paccDynamic)) );
            				}
HXLINE( 331)				{
HXLINE( 331)					int _g = 0;
HXDLIN( 331)					::Array< ::String > _g1 = ::Reflect_obj::fields( ::Dynamic(this->portraitData->__Field(HX_("expressions",db,53,90,9c),::hx::paccDynamic)));
HXDLIN( 331)					while((_g < _g1->length)){
HXLINE( 331)						::String n = _g1->__get(_g);
HXDLIN( 331)						_g = (_g + 1);
HXLINE( 333)						::String curAnim = ( (::String)(::Reflect_obj::field( ::Dynamic(this->portraitData->__Field(HX_("expressions",db,53,90,9c),::hx::paccDynamic)),n)) );
HXLINE( 334)						::String animName = n;
HXLINE( 336)						this->portrait->animation->addByPrefix(animName,curAnim,24,loop,null(),null());
            					}
            				}
HXLINE( 340)				if (::hx::IsNull( this->portraitData->__Field(HX_("scale",8a,ce,ce,78),::hx::paccDynamic) )) {
HXLINE( 341)					this->portraitData->__SetField(HX_("scale",8a,ce,ce,78),1,::hx::paccDynamic);
            				}
HXLINE( 343)				if (::hx::IsNull( this->portraitData->__Field(HX_("antialiasing",f4,16,b3,48),::hx::paccDynamic) )) {
HXLINE( 344)					this->portraitData->__SetField(HX_("antialiasing",f4,16,b3,48),true,::hx::paccDynamic);
            				}
HXLINE( 347)				this->portrait->scale->set(this->portraitData->__Field(HX_("scale",8a,ce,ce,78),::hx::paccDynamic),this->portraitData->__Field(HX_("scale",8a,ce,ce,78),::hx::paccDynamic));
HXLINE( 348)				this->portrait->set_antialiasing(( (bool)(this->portraitData->__Field(HX_("antialiasing",f4,16,b3,48),::hx::paccDynamic)) ));
HXLINE( 352)				int newX = 850;
HXLINE( 353)				int newY = 160;
HXLINE( 354)				int enterX = -20;
HXLINE( 355)				bool newFlip = false;
HXLINE( 357)				if (::Std_obj::isOfType( ::Dynamic(this->portraitData->__Field(HX_("position",a9,a0,fa,ca),::hx::paccDynamic)),( ( ::Dynamic)(::hx::ClassOf< ::String >()) ))) {
HXLINE( 359)					 ::Dynamic _hx_switch_0 =  ::Dynamic(this->portraitData->__Field(HX_("position",a9,a0,fa,ca),::hx::paccDynamic));
            					if (  (_hx_switch_0==HX_("left",07,08,b0,47)) ){
HXLINE( 362)						newX = 10;
HXLINE( 363)						enterX = -(enterX);
HXLINE( 364)						newFlip = true;
HXLINE( 361)						goto _hx_goto_8;
            					}
            					if (  (_hx_switch_0==HX_("middle",55,d3,5e,4c)) ){
HXLINE( 366)						newX = 400;
HXDLIN( 366)						goto _hx_goto_8;
            					}
            					_hx_goto_8:;
            				}
            				else {
HXLINE( 369)					if (::Std_obj::isOfType( ::Dynamic(this->portraitData->__Field(HX_("position",a9,a0,fa,ca),::hx::paccDynamic)),( ( ::Dynamic)(::hx::ArrayBase::__mClass) ))) {
HXLINE( 371)						if (( (bool)(this->portraitData->__Field(HX_("flipX",0b,45,92,02),::hx::paccDynamic)) )) {
HXLINE( 372)							enterX = -(enterX);
            						}
HXLINE( 374)						newX = ( (int)( ::Dynamic(this->portraitData->__Field(HX_("position",a9,a0,fa,ca),::hx::paccDynamic))->__GetItem(0)) );
HXLINE( 375)						newY = ( (int)( ::Dynamic(this->portraitData->__Field(HX_("position",a9,a0,fa,ca),::hx::paccDynamic))->__GetItem(1)) );
            					}
            				}
HXLINE( 378)				if (::hx::IsNull( this->portraitData->__Field(HX_("offset",93,97,3f,60),::hx::paccDynamic) )) {
HXLINE( 379)					this->portraitData->__SetField(HX_("offset",93,97,3f,60),::Array_obj< int >::fromData( _hx_array_data_b33cc4c7_10,2),::hx::paccDynamic);
            				}
HXLINE( 381)				newX = (newX - ( (int)( ::Dynamic(this->portraitData->__Field(HX_("offset",93,97,3f,60),::hx::paccDynamic))->__GetItem(0)) ));
HXLINE( 382)				newY = (newY - ( (int)( ::Dynamic(this->portraitData->__Field(HX_("offset",93,97,3f,60),::hx::paccDynamic))->__GetItem(1)) ));
HXLINE( 384)				this->portrait->set_x(( (Float)((newX - enterX)) ));
HXLINE( 385)				this->portrait->set_y(( (Float)(newY) ));
HXLINE( 388)				if (::hx::IsNotNull( this->portraitData->__Field(HX_("flipX",0b,45,92,02),::hx::paccDynamic) )) {
HXLINE( 389)					newFlip = ( (bool)(this->portraitData->__Field(HX_("flipX",0b,45,92,02),::hx::paccDynamic)) );
            				}
HXLINE( 391)				this->portrait->set_flipX(newFlip);
HXLINE( 394)				if (::hx::IsNotNull( this->portraitData->__Field(HX_("sounds",c4,a8,2e,32),::hx::paccDynamic) )) {
HXLINE( 396)					if (::hx::IsNotNull( this->portraitData->__Field(HX_("soundPath",14,b2,1f,55),::hx::paccDynamic) )) {
HXLINE( 397)						this->alphabetText->beginPath = ( (::String)((HX_("assets/",4c,2a,dc,36) + this->portraitData->__Field(HX_("soundPath",14,b2,1f,55),::hx::paccDynamic))) );
            					}
            					else {
HXLINE( 399)						this->alphabetText->beginPath = ((HX_("assets/images/dialogue/portraits/",83,cc,ae,c7) + this->curCharacter) + HX_("/",2f,00,00,00));
            					}
HXLINE( 401)					this->alphabetText->soundChoices = ( (::Array< ::String >)(this->portraitData->__Field(HX_("sounds",c4,a8,2e,32),::hx::paccDynamic)) );
HXLINE( 403)					if (::hx::IsNotNull( this->portraitData->__Field(HX_("soundChance",23,94,9f,6a),::hx::paccDynamic) )) {
HXLINE( 404)						this->alphabetText->soundChance = ( (int)(this->portraitData->__Field(HX_("soundChance",23,94,9f,6a),::hx::paccDynamic)) );
            					}
            					else {
HXLINE( 406)						this->alphabetText->soundChance = 40;
            					}
            				}
            				else {
HXLINE( 409)					this->alphabetText->soundChance = 0;
            				}
HXLINE( 412)				if (::hx::IsEq( this->boxData->__Field(HX_("doFlip",d8,b7,c1,13),::hx::paccDynamic),true )) {
HXLINE( 413)					this->box->set_flipX(newFlip);
            				}
HXLINE( 418)				::flixel::tweens::FlxTween_obj::tween(this->portrait, ::Dynamic(::hx::Anon_obj::Create(1)
            					->setFixed(0,HX_("x",78,00,00,00),(newX + enterX))),((Float)0.2), ::Dynamic(::hx::Anon_obj::Create(1)
            					->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::quadInOut_dyn())));
            			}
            		}
HXLINE( 423)		::String newExpression = ( (::String)( ::Dynamic(this->dialogueData->__Field(HX_("dialogue",18,2d,94,a7),::hx::paccDynamic))->__GetItem(this->curPage)->__Field(HX_("expression",98,11,9f,2e),::hx::paccDynamic)) );
HXLINE( 424)		if (::hx::IsNotNull( newExpression )) {
HXLINE( 425)			this->curExpression = newExpression;
            		}
HXLINE( 427)		this->portrait->animation->play(this->curExpression,null(),null(),null());
            	}


HX_DEFINE_DYNAMIC_FUNC1(DialogueBox_obj,updatePortrait,(void))

void DialogueBox_obj::runEvent(::cpp::VirtualArray eventArray){
            	HX_GC_STACKFRAME(&_hx_pos_faf820714c5b7569_431_runEvent)
HXLINE( 432)		::String event = ( (::String)(eventArray->__get(0)) );
HXLINE( 434)		::String _hx_switch_0 = event;
            		if (  (_hx_switch_0==HX_("image",5b,1f,69,bd)) ){
HXLINE( 437)			 ::Dynamic _sprite = eventArray->__get(1);
HXLINE( 438)			 ::Dynamic _x = eventArray->__get(2);
HXLINE( 439)			 ::Dynamic _y = eventArray->__get(3);
HXLINE( 440)			Float _scaleX = ( (Float)(eventArray->__get(4)) );
HXLINE( 441)			Float _scaleY = ( (Float)(eventArray->__get(5)) );
HXLINE( 443)			 ::Dynamic _hx_tmp = ::haxe::Log_obj::trace;
HXDLIN( 443)			::String library = null();
HXDLIN( 443)			::String _hx_tmp1 = ::Paths_obj::getPath(( (::String)(_sprite) ),HX_("TEXT",ad,94,ba,37),library);
HXDLIN( 443)			_hx_tmp(_hx_tmp1,::hx::SourceInfo(HX_("source/gameObjects/userInterface/DialogueBox.hx",8d,d6,64,c6),443,HX_("gameObjects.userInterface.DialogueBox",c7,c4,3c,b3),HX_("runEvent",cf,00,fa,7d)));
HXLINE( 445)			this->eventImage =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,_x,_y,null());
HXLINE( 447)			if (::Std_obj::isOfType(_sprite,( ( ::Dynamic)(::hx::ArrayBase::__mClass) ))) {
HXLINE( 449)				 ::flixel::FlxSprite _hx_tmp = this->eventImage;
HXDLIN( 449)				::String key = ( (::String)(_sprite->__GetItem(0)) );
HXDLIN( 449)				::String library = null();
HXDLIN( 449)				::String _hx_tmp1 = ::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + key) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),library);
HXDLIN( 449)				_hx_tmp->set_frames(::flixel::graphics::frames::FlxAtlasFrames_obj::fromSparrow(_hx_tmp1,::sys::io::File_obj::getContent(::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + key) + HX_(".xml",69,3e,c3,1e)),HX_("TEXT",ad,94,ba,37),library))));
HXLINE( 451)				this->eventImage->animation->addByPrefix(HX_("anim",11,86,71,40),( (::String)(_sprite->__GetItem(1)) ),24,_sprite->__GetItem(2),null(),null());
HXLINE( 452)				this->eventImage->animation->play(HX_("anim",11,86,71,40),null(),null(),null());
            			}
            			else {
HXLINE( 456)				 ::flixel::FlxSprite _hx_tmp = this->eventImage;
HXDLIN( 456)				::String library = null();
HXDLIN( 456)				_hx_tmp->loadGraphic(::Paths_obj::getPath((::Std_obj::string(_sprite) + HX_(".png",3b,2d,bd,1e)),HX_("TEXT",ad,94,ba,37),library),null(),null(),null(),null(),null());
            			}
HXLINE( 459)			this->eventImage->scale->set(_scaleX,_scaleY);
HXLINE( 460)			this->add(this->eventImage);
HXLINE( 436)			goto _hx_goto_11;
            		}
            		if (  (_hx_switch_0==HX_("sound",cf,8c,cc,80)) ){
HXLINE( 463)			::String _sound = ((::Std_obj::string(eventArray->__get(1)) + HX_(".",2e,00,00,00)) + HX_("ogg",4f,94,54,00));
HXLINE( 465)			 ::Dynamic _hx_tmp = ::haxe::Log_obj::trace;
HXDLIN( 465)			::String library = null();
HXDLIN( 465)			::String _hx_tmp1 = ::Paths_obj::getPath(_sound,HX_("TEXT",ad,94,ba,37),library);
HXDLIN( 465)			_hx_tmp(_hx_tmp1,::hx::SourceInfo(HX_("source/gameObjects/userInterface/DialogueBox.hx",8d,d6,64,c6),465,HX_("gameObjects.userInterface.DialogueBox",c7,c4,3c,b3),HX_("runEvent",cf,00,fa,7d)));
HXLINE( 467)			 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp2 = ::flixel::FlxG_obj::sound;
HXDLIN( 467)			::String library1 = null();
HXDLIN( 467)			_hx_tmp2->play(::Paths_obj::getPath(_sound,HX_("TEXT",ad,94,ba,37),library1),null(),null(),null(),null(),null());
HXLINE( 462)			goto _hx_goto_11;
            		}
            		_hx_goto_11:;
            	}


HX_DEFINE_DYNAMIC_FUNC1(DialogueBox_obj,runEvent,(void))

void DialogueBox_obj::updateEvents(::hx::Null< bool >  __o_force){
            		bool force = __o_force.Default(false);
            	HX_STACKFRAME(&_hx_pos_faf820714c5b7569_472_updateEvents)
HXLINE( 473)		::Array< ::Dynamic> curEvents = ( (::Array< ::Dynamic>)( ::Dynamic(this->dialogueData->__Field(HX_("dialogue",18,2d,94,a7),::hx::paccDynamic))->__GetItem(this->curPage)->__Field(HX_("events",19,4f,6a,96),::hx::paccDynamic)) );
HXLINE( 475)		if (::hx::IsNotNull( this->eventImage )) {
HXLINE( 476)			this->eventImage->destroy();
            		}
HXLINE( 479)		if (::hx::IsNull( curEvents )) {
HXLINE( 480)			return;
            		}
HXLINE( 482)		{
HXLINE( 482)			int _g = 0;
HXDLIN( 482)			while((_g < curEvents->length)){
HXLINE( 482)				::cpp::VirtualArray event = ::cpp::VirtualArray( curEvents->__get(_g));
HXDLIN( 482)				_g = (_g + 1);
HXLINE( 484)				::haxe::Log_obj::trace(event,::hx::SourceInfo(HX_("source/gameObjects/userInterface/DialogueBox.hx",8d,d6,64,c6),484,HX_("gameObjects.userInterface.DialogueBox",c7,c4,3c,b3),HX_("updateEvents",02,f6,2d,96)));
HXLINE( 485)				this->runEvent(event);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(DialogueBox_obj,updateEvents,(void))

void DialogueBox_obj::closeDialog(){
            	HX_STACKFRAME(&_hx_pos_faf820714c5b7569_492_closeDialog)
HXLINE( 493)		this->whenDaFinish();
HXLINE( 494)		this->alphabetText->playSounds = false;
HXLINE( 495)		this->kill();
            	}


HX_DEFINE_DYNAMIC_FUNC0(DialogueBox_obj,closeDialog,(void))

void DialogueBox_obj::dialogDataCheck(){
            	HX_STACKFRAME(&_hx_pos_faf820714c5b7569_499_dialogDataCheck)
HXLINE( 500)		bool tisOkay = true;
HXLINE( 502)		if (::hx::IsNull( this->dialogueData->__Field(HX_("box",0b,be,4a,00),::hx::paccDynamic) )) {
HXLINE( 503)			tisOkay = false;
            		}
HXLINE( 504)		if (::hx::IsNull( this->dialogueData->__Field(HX_("dialogue",18,2d,94,a7),::hx::paccDynamic) )) {
HXLINE( 505)			tisOkay = false;
            		}
HXLINE( 507)		if (!(tisOkay)) {
HXLINE( 508)			this->closeDialog();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(DialogueBox_obj,dialogDataCheck,(void))

void DialogueBox_obj::update(Float elapsed){
            	HX_STACKFRAME(&_hx_pos_faf820714c5b7569_512_update)
HXLINE( 513)		if (this->box->animation->get_finished()) {
HXLINE( 515)			if (::hx::IsNotEq( this->boxData->__Field(HX_("singleFrame",85,d4,46,f0),::hx::paccDynamic),true )) {
HXLINE( 516)				this->box->playAnim(HX_("normal",27,72,69,30),null(),null(),null());
            			}
HXLINE( 518)			this->text->set_visible(true);
            		}
HXLINE( 521)		{
HXLINE( 521)			 ::flixel::animation::FlxAnimationController _this = this->portrait->animation;
HXDLIN( 521)			bool Value = this->alphabetText->finishedLine;
HXDLIN( 521)			if (::hx::IsNotNull( _this->_curAnim )) {
HXLINE( 521)				if (Value) {
HXLINE( 521)					_this->_curAnim->pause();
            				}
            				else {
HXLINE( 521)					_this->_curAnim->paused = false;
            				}
            			}
            		}
HXLINE( 522)		 ::flixel::animation::FlxAnimationController _this1 = this->portrait->animation;
HXDLIN( 522)		bool paused = false;
HXDLIN( 522)		if (::hx::IsNotNull( _this1->_curAnim )) {
HXLINE( 522)			paused = _this1->_curAnim->paused;
            		}
HXDLIN( 522)		if (paused) {
HXLINE( 523)			this->portrait->animation->finish();
            		}
HXLINE( 525)		{
HXLINE( 525)			 ::flixel::FlxSprite _g = this->bgFade;
HXDLIN( 525)			_g->set_alpha((_g->alpha + ((Float)0.02)));
            		}
HXLINE( 526)		if ((this->bgFade->alpha > ((Float)0.6))) {
HXLINE( 527)			this->bgFade->set_alpha(((Float)0.6));
            		}
HXLINE( 529)		this->super::update(elapsed);
            	}


 ::gameObjects::userInterface::DialogueBox DialogueBox_obj::createDialogue(::String thisDialogue){
            	HX_GC_STACKFRAME(&_hx_pos_faf820714c5b7569_94_createDialogue)
HXLINE(  96)		 ::gameObjects::userInterface::DialogueBox newDialogue =  ::gameObjects::userInterface::DialogueBox_obj::__alloc( HX_CTX ,false,thisDialogue);
HXLINE(  97)		return newDialogue;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(DialogueBox_obj,createDialogue,return )


::hx::ObjectPtr< DialogueBox_obj > DialogueBox_obj::__new( ::Dynamic __o_talkingRight,::String daDialogue) {
	::hx::ObjectPtr< DialogueBox_obj > __this = new DialogueBox_obj();
	__this->__construct(__o_talkingRight,daDialogue);
	return __this;
}

::hx::ObjectPtr< DialogueBox_obj > DialogueBox_obj::__alloc(::hx::Ctx *_hx_ctx, ::Dynamic __o_talkingRight,::String daDialogue) {
	DialogueBox_obj *__this = (DialogueBox_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(DialogueBox_obj), true, "gameObjects.userInterface.DialogueBox"));
	*(void **)__this = DialogueBox_obj::_hx_vtable;
	__this->__construct(__o_talkingRight,daDialogue);
	return __this;
}

DialogueBox_obj::DialogueBox_obj()
{
}

void DialogueBox_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(DialogueBox);
	HX_MARK_MEMBER_NAME(box,"box");
	HX_MARK_MEMBER_NAME(bgFade,"bgFade");
	HX_MARK_MEMBER_NAME(portrait,"portrait");
	HX_MARK_MEMBER_NAME(text,"text");
	HX_MARK_MEMBER_NAME(alphabetText,"alphabetText");
	HX_MARK_MEMBER_NAME(dialogueData,"dialogueData");
	HX_MARK_MEMBER_NAME(portraitData,"portraitData");
	HX_MARK_MEMBER_NAME(boxData,"boxData");
	HX_MARK_MEMBER_NAME(curPage,"curPage");
	HX_MARK_MEMBER_NAME(curCharacter,"curCharacter");
	HX_MARK_MEMBER_NAME(curExpression,"curExpression");
	HX_MARK_MEMBER_NAME(curBoxState,"curBoxState");
	HX_MARK_MEMBER_NAME(eventImage,"eventImage");
	HX_MARK_MEMBER_NAME(whenDaFinish,"whenDaFinish");
	HX_MARK_MEMBER_NAME(textStarted,"textStarted");
	 ::flixel::group::FlxTypedSpriteGroup_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void DialogueBox_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(box,"box");
	HX_VISIT_MEMBER_NAME(bgFade,"bgFade");
	HX_VISIT_MEMBER_NAME(portrait,"portrait");
	HX_VISIT_MEMBER_NAME(text,"text");
	HX_VISIT_MEMBER_NAME(alphabetText,"alphabetText");
	HX_VISIT_MEMBER_NAME(dialogueData,"dialogueData");
	HX_VISIT_MEMBER_NAME(portraitData,"portraitData");
	HX_VISIT_MEMBER_NAME(boxData,"boxData");
	HX_VISIT_MEMBER_NAME(curPage,"curPage");
	HX_VISIT_MEMBER_NAME(curCharacter,"curCharacter");
	HX_VISIT_MEMBER_NAME(curExpression,"curExpression");
	HX_VISIT_MEMBER_NAME(curBoxState,"curBoxState");
	HX_VISIT_MEMBER_NAME(eventImage,"eventImage");
	HX_VISIT_MEMBER_NAME(whenDaFinish,"whenDaFinish");
	HX_VISIT_MEMBER_NAME(textStarted,"textStarted");
	 ::flixel::group::FlxTypedSpriteGroup_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val DialogueBox_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"box") ) { return ::hx::Val( box ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"text") ) { return ::hx::Val( text ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"bgFade") ) { return ::hx::Val( bgFade ); }
		if (HX_FIELD_EQ(inName,"update") ) { return ::hx::Val( update_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"boxData") ) { return ::hx::Val( boxData ); }
		if (HX_FIELD_EQ(inName,"curPage") ) { return ::hx::Val( curPage ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"portrait") ) { return ::hx::Val( portrait ); }
		if (HX_FIELD_EQ(inName,"runEvent") ) { return ::hx::Val( runEvent_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"eventImage") ) { return ::hx::Val( eventImage ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"curBoxState") ) { return ::hx::Val( curBoxState ); }
		if (HX_FIELD_EQ(inName,"textStarted") ) { return ::hx::Val( textStarted ); }
		if (HX_FIELD_EQ(inName,"closeDialog") ) { return ::hx::Val( closeDialog_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"alphabetText") ) { return ::hx::Val( alphabetText ); }
		if (HX_FIELD_EQ(inName,"dialogueData") ) { return ::hx::Val( dialogueData ); }
		if (HX_FIELD_EQ(inName,"portraitData") ) { return ::hx::Val( portraitData ); }
		if (HX_FIELD_EQ(inName,"curCharacter") ) { return ::hx::Val( curCharacter ); }
		if (HX_FIELD_EQ(inName,"whenDaFinish") ) { return ::hx::Val( whenDaFinish ); }
		if (HX_FIELD_EQ(inName,"dialoguePath") ) { return ::hx::Val( dialoguePath_dyn() ); }
		if (HX_FIELD_EQ(inName,"updateDialog") ) { return ::hx::Val( updateDialog_dyn() ); }
		if (HX_FIELD_EQ(inName,"updateEvents") ) { return ::hx::Val( updateEvents_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"curExpression") ) { return ::hx::Val( curExpression ); }
		if (HX_FIELD_EQ(inName,"updateTextBox") ) { return ::hx::Val( updateTextBox_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"updatePortrait") ) { return ::hx::Val( updatePortrait_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"dialogDataCheck") ) { return ::hx::Val( dialogDataCheck_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool DialogueBox_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 14:
		if (HX_FIELD_EQ(inName,"createDialogue") ) { outValue = createDialogue_dyn(); return true; }
	}
	return false;
}

::hx::Val DialogueBox_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"box") ) { box=inValue.Cast<  ::meta::data::dependency::FNFSprite >(); return inValue; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"text") ) { text=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"bgFade") ) { bgFade=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"boxData") ) { boxData=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"curPage") ) { curPage=inValue.Cast< int >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"portrait") ) { portrait=inValue.Cast<  ::meta::data::dependency::FNFSprite >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"eventImage") ) { eventImage=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"curBoxState") ) { curBoxState=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"textStarted") ) { textStarted=inValue.Cast< bool >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"alphabetText") ) { alphabetText=inValue.Cast<  ::meta::data::font::Alphabet >(); return inValue; }
		if (HX_FIELD_EQ(inName,"dialogueData") ) { dialogueData=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"portraitData") ) { portraitData=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"curCharacter") ) { curCharacter=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"whenDaFinish") ) { whenDaFinish=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"curExpression") ) { curExpression=inValue.Cast< ::String >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void DialogueBox_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("box",0b,be,4a,00));
	outFields->push(HX_("bgFade",e1,fd,cd,ab));
	outFields->push(HX_("portrait",5b,21,af,b8));
	outFields->push(HX_("text",ad,cc,f9,4c));
	outFields->push(HX_("alphabetText",00,4b,b3,15));
	outFields->push(HX_("dialogueData",62,1b,89,08));
	outFields->push(HX_("portraitData",25,ed,06,08));
	outFields->push(HX_("boxData",d5,a1,26,92));
	outFields->push(HX_("curPage",ef,4b,67,b5));
	outFields->push(HX_("curCharacter",09,86,7c,d7));
	outFields->push(HX_("curExpression",38,7b,49,8e));
	outFields->push(HX_("curBoxState",a6,21,69,80));
	outFields->push(HX_("eventImage",e1,28,c4,39));
	outFields->push(HX_("textStarted",14,24,9b,10));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo DialogueBox_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::meta::data::dependency::FNFSprite */ ,(int)offsetof(DialogueBox_obj,box),HX_("box",0b,be,4a,00)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(DialogueBox_obj,bgFade),HX_("bgFade",e1,fd,cd,ab)},
	{::hx::fsObject /*  ::meta::data::dependency::FNFSprite */ ,(int)offsetof(DialogueBox_obj,portrait),HX_("portrait",5b,21,af,b8)},
	{::hx::fsObject /*  ::flixel::text::FlxText */ ,(int)offsetof(DialogueBox_obj,text),HX_("text",ad,cc,f9,4c)},
	{::hx::fsObject /*  ::meta::data::font::Alphabet */ ,(int)offsetof(DialogueBox_obj,alphabetText),HX_("alphabetText",00,4b,b3,15)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(DialogueBox_obj,dialogueData),HX_("dialogueData",62,1b,89,08)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(DialogueBox_obj,portraitData),HX_("portraitData",25,ed,06,08)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(DialogueBox_obj,boxData),HX_("boxData",d5,a1,26,92)},
	{::hx::fsInt,(int)offsetof(DialogueBox_obj,curPage),HX_("curPage",ef,4b,67,b5)},
	{::hx::fsString,(int)offsetof(DialogueBox_obj,curCharacter),HX_("curCharacter",09,86,7c,d7)},
	{::hx::fsString,(int)offsetof(DialogueBox_obj,curExpression),HX_("curExpression",38,7b,49,8e)},
	{::hx::fsString,(int)offsetof(DialogueBox_obj,curBoxState),HX_("curBoxState",a6,21,69,80)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(DialogueBox_obj,eventImage),HX_("eventImage",e1,28,c4,39)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(DialogueBox_obj,whenDaFinish),HX_("whenDaFinish",8a,f4,8f,19)},
	{::hx::fsBool,(int)offsetof(DialogueBox_obj,textStarted),HX_("textStarted",14,24,9b,10)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *DialogueBox_obj_sStaticStorageInfo = 0;
#endif

static ::String DialogueBox_obj_sMemberFields[] = {
	HX_("box",0b,be,4a,00),
	HX_("bgFade",e1,fd,cd,ab),
	HX_("portrait",5b,21,af,b8),
	HX_("text",ad,cc,f9,4c),
	HX_("alphabetText",00,4b,b3,15),
	HX_("dialogueData",62,1b,89,08),
	HX_("portraitData",25,ed,06,08),
	HX_("boxData",d5,a1,26,92),
	HX_("curPage",ef,4b,67,b5),
	HX_("curCharacter",09,86,7c,d7),
	HX_("curExpression",38,7b,49,8e),
	HX_("curBoxState",a6,21,69,80),
	HX_("eventImage",e1,28,c4,39),
	HX_("whenDaFinish",8a,f4,8f,19),
	HX_("textStarted",14,24,9b,10),
	HX_("dialoguePath",dd,aa,77,10),
	HX_("updateDialog",b1,ab,f6,b0),
	HX_("updateTextBox",55,78,28,6a),
	HX_("updatePortrait",84,14,d9,ed),
	HX_("runEvent",cf,00,fa,7d),
	HX_("updateEvents",02,f6,2d,96),
	HX_("closeDialog",a0,2a,83,6b),
	HX_("dialogDataCheck",56,1c,f3,a1),
	HX_("update",09,86,05,87),
	::String(null()) };

::hx::Class DialogueBox_obj::__mClass;

static ::String DialogueBox_obj_sStaticFields[] = {
	HX_("createDialogue",34,ac,ce,f9),
	::String(null())
};

void DialogueBox_obj::__register()
{
	DialogueBox_obj _hx_dummy;
	DialogueBox_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("gameObjects.userInterface.DialogueBox",c7,c4,3c,b3);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &DialogueBox_obj::__GetStatic;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(DialogueBox_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(DialogueBox_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< DialogueBox_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = DialogueBox_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = DialogueBox_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace gameObjects
} // end namespace userInterface

// Generated by Haxe 4.1.5
#include <hxcpp.h>

#ifndef INCLUDED_ForeverTools
#include <ForeverTools.h>
#endif
#ifndef INCLUDED_Init
#include <Init.h>
#endif
#ifndef INCLUDED_Paths
#include <Paths.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
#ifndef INCLUDED_flixel_addons_transition_FlxTransitionableState
#include <flixel/addons/transition/FlxTransitionableState.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUIState
#include <flixel/addons/ui/FlxUIState.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IEventGetter
#include <flixel/addons/ui/interfaces/IEventGetter.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IFlxUIState
#include <flixel/addons/ui/interfaces/IFlxUIState.h>
#endif
#ifndef INCLUDED_flixel_animation_FlxAnimationController
#include <flixel/animation/FlxAnimationController.h>
#endif
#ifndef INCLUDED_flixel_graphics_frames_FlxAtlasFrames
#include <flixel/graphics/frames/FlxAtlasFrames.h>
#endif
#ifndef INCLUDED_flixel_graphics_frames_FlxFramesCollection
#include <flixel/graphics/frames/FlxFramesCollection.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_math_FlxPoint
#include <flixel/math/FlxPoint.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif
#ifndef INCLUDED_gameObjects_userInterface_notes_Note
#include <gameObjects/userInterface/notes/Note.h>
#endif
#ifndef INCLUDED_gameObjects_userInterface_notes_UIStaticArrow
#include <gameObjects/userInterface/notes/UIStaticArrow.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_meta_MusicBeatState
#include <meta/MusicBeatState.h>
#endif
#ifndef INCLUDED_meta_data_Conductor
#include <meta/data/Conductor.h>
#endif
#ifndef INCLUDED_meta_data_Timings
#include <meta/data/Timings.h>
#endif
#ifndef INCLUDED_meta_data_dependency_FNFSprite
#include <meta/data/dependency/FNFSprite.h>
#endif
#ifndef INCLUDED_meta_data_dependency_FNFUIState
#include <meta/data/dependency/FNFUIState.h>
#endif
#ifndef INCLUDED_meta_state_PlayState
#include <meta/state/PlayState.h>
#endif
#ifndef INCLUDED_sys_io_File
#include <sys/io/File.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_2a15083fb450a023_19_new,"gameObjects.userInterface.notes.Note","new",0xf783073d,"gameObjects.userInterface.notes.Note.new","gameObjects/userInterface/notes/Note.hx",19,0xe81b0ff0)
HX_LOCAL_STACK_FRAME(_hx_pos_2a15083fb450a023_68_update,"gameObjects.userInterface.notes.Note","update",0x3ad0374c,"gameObjects.userInterface.notes.Note.update","gameObjects/userInterface/notes/Note.hx",68,0xe81b0ff0)
HX_LOCAL_STACK_FRAME(_hx_pos_2a15083fb450a023_94_returnDefaultNote,"gameObjects.userInterface.notes.Note","returnDefaultNote",0xed1e8220,"gameObjects.userInterface.notes.Note.returnDefaultNote","gameObjects/userInterface/notes/Note.hx",94,0xe81b0ff0)
static const int _hx_array_data_54cda4cb_3[] = {
	(int)4,
};
static const int _hx_array_data_54cda4cb_4[] = {
	(int)6,
};
static const int _hx_array_data_54cda4cb_5[] = {
	(int)7,
};
static const int _hx_array_data_54cda4cb_6[] = {
	(int)5,
};
static const int _hx_array_data_54cda4cb_7[] = {
	(int)0,
};
static const int _hx_array_data_54cda4cb_8[] = {
	(int)2,
};
static const int _hx_array_data_54cda4cb_9[] = {
	(int)3,
};
static const int _hx_array_data_54cda4cb_10[] = {
	(int)1,
};
static const int _hx_array_data_54cda4cb_11[] = {
	(int)6,
};
static const int _hx_array_data_54cda4cb_12[] = {
	(int)7,
};
static const int _hx_array_data_54cda4cb_13[] = {
	(int)5,
};
static const int _hx_array_data_54cda4cb_14[] = {
	(int)4,
};
HX_LOCAL_STACK_FRAME(_hx_pos_2a15083fb450a023_169_returnQuantNote,"gameObjects.userInterface.notes.Note","returnQuantNote",0xc23773a2,"gameObjects.userInterface.notes.Note.returnQuantNote","gameObjects/userInterface/notes/Note.hx",169,0xe81b0ff0)
static const int _hx_array_data_54cda4cb_18[] = {
	(int)4,(int)8,(int)12,(int)16,(int)20,(int)24,(int)32,(int)48,(int)64,(int)192,
};
HX_LOCAL_STACK_FRAME(_hx_pos_2a15083fb450a023_47_boot,"gameObjects.userInterface.notes.Note","boot",0x933c4eb5,"gameObjects.userInterface.notes.Note.boot","gameObjects/userInterface/notes/Note.hx",47,0xe81b0ff0)
namespace gameObjects{
namespace userInterface{
namespace notes{

void Note_obj::__construct(Float strumTime,int noteData,Float noteAlt, ::gameObjects::userInterface::notes::Note prevNote, ::Dynamic __o_sustainNote){
            		 ::Dynamic sustainNote = __o_sustainNote;
            		if (::hx::IsNull(__o_sustainNote)) sustainNote = false;
            	HX_STACKFRAME(&_hx_pos_2a15083fb450a023_19_new)
HXLINE(  45)		this->noteDirection = ((Float)0);
HXLINE(  44)		this->noteSpeed = ((Float)0);
HXLINE(  43)		this->noteVisualOffset = ((Float)0);
HXLINE(  42)		this->noteQuant = -1;
HXLINE(  38)		this->chartSustain = null();
HXLINE(  35)		this->isSustainNote = false;
HXLINE(  34)		this->sustainLength = ((Float)0);
HXLINE(  31)		this->wasGoodHit = false;
HXLINE(  30)		this->tooLate = false;
HXLINE(  29)		this->canBeHit = false;
HXLINE(  27)		this->noteString = HX_("",00,00,00,00);
HXLINE(  26)		this->noteType = ((Float)0);
HXLINE(  25)		this->noteAlt = ((Float)0);
HXLINE(  24)		this->noteData = 0;
HXLINE(  23)		this->mustPress = false;
HXLINE(  21)		this->strumTime = ((Float)0);
HXLINE(  51)		super::__construct(this->x,this->y);
HXLINE(  53)		if (::hx::IsNull( prevNote )) {
HXLINE(  54)			prevNote = ::hx::ObjectPtr<OBJ_>(this);
            		}
HXLINE(  56)		this->prevNote = prevNote;
HXLINE(  57)		this->isSustainNote = ( (bool)(sustainNote) );
HXLINE(  60)		{
HXLINE(  60)			 ::gameObjects::userInterface::notes::Note _g = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(  60)			_g->set_y((_g->y - ( (Float)(2000) )));
            		}
HXLINE(  62)		this->strumTime = strumTime;
HXLINE(  63)		this->noteData = noteData;
HXLINE(  64)		this->noteAlt = noteAlt;
            	}

Dynamic Note_obj::__CreateEmpty() { return new Note_obj; }

void *Note_obj::_hx_vtable = 0;

Dynamic Note_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< Note_obj > _hx_result = new Note_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3],inArgs[4]);
	return _hx_result;
}

bool Note_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x78a693e9) {
		if (inClassId<=(int)0x2c01639b) {
			if (inClassId<=(int)0x078f6a67) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x078f6a67;
			} else {
				return inClassId==(int)0x2c01639b;
			}
		} else {
			return inClassId==(int)0x78a693e9;
		}
	} else {
		return inClassId==(int)0x7ccf8994 || inClassId==(int)0x7dab0655;
	}
}

void Note_obj::update(Float elapsed){
            	HX_STACKFRAME(&_hx_pos_2a15083fb450a023_68_update)
HXLINE(  69)		this->super::update(elapsed);
HXLINE(  71)		if (this->mustPress) {
HXLINE(  73)			bool _hx_tmp;
HXDLIN(  73)			if ((this->strumTime > (::meta::data::Conductor_obj::songPosition - ::meta::data::Timings_obj::msThreshold))) {
HXLINE(  73)				_hx_tmp = (this->strumTime < (::meta::data::Conductor_obj::songPosition + ::meta::data::Timings_obj::msThreshold));
            			}
            			else {
HXLINE(  73)				_hx_tmp = false;
            			}
HXDLIN(  73)			if (_hx_tmp) {
HXLINE(  74)				this->canBeHit = true;
            			}
            			else {
HXLINE(  76)				this->canBeHit = false;
            			}
HXLINE(  78)			bool _hx_tmp1;
HXDLIN(  78)			if ((this->strumTime < (::meta::data::Conductor_obj::songPosition - ::meta::data::Timings_obj::msThreshold))) {
HXLINE(  78)				_hx_tmp1 = !(this->wasGoodHit);
            			}
            			else {
HXLINE(  78)				_hx_tmp1 = false;
            			}
HXDLIN(  78)			if (_hx_tmp1) {
HXLINE(  79)				this->tooLate = true;
            			}
            		}
            		else {
HXLINE(  82)			this->canBeHit = false;
            		}
HXLINE(  84)		if (this->tooLate) {
HXLINE(  85)			 ::gameObjects::userInterface::notes::Note _g = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(  85)			_g->set_alpha((_g->alpha - ((Float)0.05)));
            		}
            	}


Float Note_obj::swagWidth;

 ::gameObjects::userInterface::notes::Note Note_obj::returnDefaultNote(::String assetModifier,Float strumTime,int noteData,int noteType,Float noteAlt, ::Dynamic __o_isSustainNote, ::gameObjects::userInterface::notes::Note prevNote){
            		 ::Dynamic isSustainNote = __o_isSustainNote;
            		if (::hx::IsNull(__o_isSustainNote)) isSustainNote = false;
            	HX_GC_STACKFRAME(&_hx_pos_2a15083fb450a023_94_returnDefaultNote)
HXLINE(  95)		 ::gameObjects::userInterface::notes::Note newNote =  ::gameObjects::userInterface::notes::Note_obj::__alloc( HX_CTX ,strumTime,noteData,noteAlt,prevNote,isSustainNote);
HXLINE(  98)		if ((assetModifier == HX_("pixel",86,c6,a3,c2))) {
HXLINE( 101)			if (( (bool)(isSustainNote) )) {
HXLINE( 103)				::String library = null();
HXDLIN( 103)				Dynamic( newNote->loadGraphic(::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + ::ForeverTools_obj::returnSkinAsset(HX_("arrowEnds",a1,1a,ba,fe),assetModifier,( (::String)(::Init_obj::trueSettings->get(HX_("Note Skin",6b,8d,33,f0))) ),HX_("noteskins/notes",d6,76,75,6d),null(),null())) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),library),true,7,6,null(),null())).StaticCast<  ::meta::data::dependency::FNFSprite >();
HXLINE( 106)				newNote->animation->add(HX_("purpleholdend",40,d5,15,5b),::Array_obj< int >::fromData( _hx_array_data_54cda4cb_3,1),null(),null(),null(),null());
HXLINE( 107)				newNote->animation->add(HX_("greenholdend",99,eb,5f,39),::Array_obj< int >::fromData( _hx_array_data_54cda4cb_4,1),null(),null(),null(),null());
HXLINE( 108)				newNote->animation->add(HX_("redholdend",cb,ae,1e,ea),::Array_obj< int >::fromData( _hx_array_data_54cda4cb_5,1),null(),null(),null(),null());
HXLINE( 109)				newNote->animation->add(HX_("blueholdend",a2,f0,cd,25),::Array_obj< int >::fromData( _hx_array_data_54cda4cb_6,1),null(),null(),null(),null());
HXLINE( 110)				newNote->animation->add(HX_("purplehold",7b,8d,da,cd),::Array_obj< int >::fromData( _hx_array_data_54cda4cb_7,1),null(),null(),null(),null());
HXLINE( 111)				newNote->animation->add(HX_("greenhold",82,f5,c1,bc),::Array_obj< int >::fromData( _hx_array_data_54cda4cb_8,1),null(),null(),null(),null());
HXLINE( 112)				newNote->animation->add(HX_("redhold",10,1f,bf,bf),::Array_obj< int >::fromData( _hx_array_data_54cda4cb_9,1),null(),null(),null(),null());
HXLINE( 113)				newNote->animation->add(HX_("bluehold",d9,60,aa,a4),::Array_obj< int >::fromData( _hx_array_data_54cda4cb_10,1),null(),null(),null(),null());
            			}
            			else {
HXLINE( 117)				::String library = null();
HXDLIN( 117)				Dynamic( newNote->loadGraphic(::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + ::ForeverTools_obj::returnSkinAsset(HX_("arrows-pixels",d0,fd,54,14),assetModifier,( (::String)(::Init_obj::trueSettings->get(HX_("Note Skin",6b,8d,33,f0))) ),HX_("noteskins/notes",d6,76,75,6d),null(),null())) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),library),true,17,17,null(),null())).StaticCast<  ::meta::data::dependency::FNFSprite >();
HXLINE( 120)				newNote->animation->add(HX_("greenScroll",30,4f,fe,9e),::Array_obj< int >::fromData( _hx_array_data_54cda4cb_11,1),null(),null(),null(),null());
HXLINE( 121)				newNote->animation->add(HX_("redScroll",3e,78,c3,3a),::Array_obj< int >::fromData( _hx_array_data_54cda4cb_12,1),null(),null(),null(),null());
HXLINE( 122)				newNote->animation->add(HX_("blueScroll",47,7e,59,a2),::Array_obj< int >::fromData( _hx_array_data_54cda4cb_13,1),null(),null(),null(),null());
HXLINE( 123)				newNote->animation->add(HX_("purpleScroll",69,97,67,99),::Array_obj< int >::fromData( _hx_array_data_54cda4cb_14,1),null(),null(),null(),null());
            			}
HXLINE( 125)			newNote->set_antialiasing(false);
HXLINE( 126)			Float _hx_tmp = newNote->get_width();
HXDLIN( 126)			newNote->setGraphicSize(::Std_obj::_hx_int((_hx_tmp * ::meta::state::PlayState_obj::daPixelZoom)),null());
HXLINE( 127)			newNote->updateHitbox();
            		}
            		else {
HXLINE( 129)			::String key = ::ForeverTools_obj::returnSkinAsset(HX_("NOTE_assets",70,3c,09,f7),assetModifier,( (::String)(::Init_obj::trueSettings->get(HX_("Note Skin",6b,8d,33,f0))) ),HX_("noteskins/notes",d6,76,75,6d),null(),null());
HXDLIN( 129)			::String library = null();
HXDLIN( 129)			::String _hx_tmp = ::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + key) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),library);
HXDLIN( 129)			newNote->set_frames(::flixel::graphics::frames::FlxAtlasFrames_obj::fromSparrow(_hx_tmp,::sys::io::File_obj::getContent(::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + key) + HX_(".xml",69,3e,c3,1e)),HX_("TEXT",ad,94,ba,37),library))));
HXLINE( 131)			newNote->animation->addByPrefix(HX_("greenScroll",30,4f,fe,9e),HX_("green0",0d,dc,7f,15),null(),null(),null(),null());
HXLINE( 132)			newNote->animation->addByPrefix(HX_("redScroll",3e,78,c3,3a),HX_("red0",bf,4d,a7,4b),null(),null(),null(),null());
HXLINE( 133)			newNote->animation->addByPrefix(HX_("blueScroll",47,7e,59,a2),HX_("blue0",56,04,01,b5),null(),null(),null(),null());
HXLINE( 134)			newNote->animation->addByPrefix(HX_("purpleScroll",69,97,67,99),HX_("purple0",74,7e,2d,e7),null(),null(),null(),null());
HXLINE( 135)			newNote->animation->addByPrefix(HX_("purpleholdend",40,d5,15,5b),HX_("pruple end hold",6e,7c,17,3a),null(),null(),null(),null());
HXLINE( 136)			newNote->animation->addByPrefix(HX_("greenholdend",99,eb,5f,39),HX_("green hold end",77,4d,45,46),null(),null(),null(),null());
HXLINE( 137)			newNote->animation->addByPrefix(HX_("redholdend",cb,ae,1e,ea),HX_("red hold end",29,c1,a0,b6),null(),null(),null(),null());
HXLINE( 138)			newNote->animation->addByPrefix(HX_("blueholdend",a2,f0,cd,25),HX_("blue hold end",c0,66,05,ae),null(),null(),null(),null());
HXLINE( 139)			newNote->animation->addByPrefix(HX_("purplehold",7b,8d,da,cd),HX_("purple hold piece",b1,8b,b1,d3),null(),null(),null(),null());
HXLINE( 140)			newNote->animation->addByPrefix(HX_("greenhold",82,f5,c1,bc),HX_("green hold piece",8a,42,68,ae),null(),null(),null(),null());
HXLINE( 141)			newNote->animation->addByPrefix(HX_("redhold",10,1f,bf,bf),HX_("red hold piece",bc,86,4d,83),null(),null(),null(),null());
HXLINE( 142)			newNote->animation->addByPrefix(HX_("bluehold",d9,60,aa,a4),HX_("blue hold piece",13,00,58,99),null(),null(),null(),null());
HXLINE( 143)			newNote->setGraphicSize(::Std_obj::_hx_int((newNote->get_width() * ((Float)0.7))),null());
HXLINE( 144)			newNote->updateHitbox();
HXLINE( 145)			newNote->set_antialiasing(true);
            		}
HXLINE( 148)		if (!(( (bool)(isSustainNote) ))) {
HXLINE( 149)			 ::flixel::animation::FlxAnimationController newNote1 = newNote->animation;
HXDLIN( 149)			newNote1->play((::gameObjects::userInterface::notes::UIStaticArrow_obj::getColorFromNumber(noteData) + HX_("Scroll",2d,4c,f9,7b)),null(),null(),null());
            		}
HXLINE( 151)		bool _hx_tmp;
HXDLIN( 151)		if (( (bool)(isSustainNote) )) {
HXLINE( 151)			_hx_tmp = ::hx::IsNotNull( prevNote );
            		}
            		else {
HXLINE( 151)			_hx_tmp = false;
            		}
HXDLIN( 151)		if (_hx_tmp) {
HXLINE( 153)			newNote->noteSpeed = prevNote->noteSpeed;
HXLINE( 154)			Float _hx_tmp;
HXDLIN( 154)			if (( (bool)(::Init_obj::trueSettings->get(HX_("Opaque Holds",d5,d1,24,ba))) )) {
HXLINE( 154)				_hx_tmp = ( (Float)(1) );
            			}
            			else {
HXLINE( 154)				_hx_tmp = ((Float)0.6);
            			}
HXDLIN( 154)			newNote->set_alpha(_hx_tmp);
HXLINE( 155)			 ::flixel::animation::FlxAnimationController newNote1 = newNote->animation;
HXDLIN( 155)			newNote1->play((::gameObjects::userInterface::notes::UIStaticArrow_obj::getColorFromNumber(noteData) + HX_("holdend",fc,4b,02,b8)),null(),null(),null());
HXLINE( 156)			newNote->updateHitbox();
HXLINE( 157)			if (prevNote->isSustainNote) {
HXLINE( 159)				 ::flixel::animation::FlxAnimationController prevNote1 = prevNote->animation;
HXDLIN( 159)				prevNote1->play((::gameObjects::userInterface::notes::UIStaticArrow_obj::getColorFromNumber(prevNote->noteData) + HX_("hold",3f,c9,12,45)),null(),null(),null());
HXLINE( 160)				{
HXLINE( 160)					 ::flixel::math::FlxPoint _g = prevNote->scale;
HXDLIN( 160)					_g->set_y((_g->y * (((::meta::data::Conductor_obj::stepCrochet / ( (Float)(100) )) * ((Float)1.5)) * prevNote->noteSpeed)));
            				}
HXLINE( 161)				prevNote->updateHitbox();
            			}
            		}
HXLINE( 165)		return newNote;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC7(Note_obj,returnDefaultNote,return )

 ::gameObjects::userInterface::notes::Note Note_obj::returnQuantNote(::String assetModifier,Float strumTime,int noteData,int noteType,Float noteAlt, ::Dynamic __o_isSustainNote, ::gameObjects::userInterface::notes::Note prevNote){
            		 ::Dynamic isSustainNote = __o_isSustainNote;
            		if (::hx::IsNull(__o_isSustainNote)) isSustainNote = false;
            	HX_GC_STACKFRAME(&_hx_pos_2a15083fb450a023_169_returnQuantNote)
HXLINE( 170)		 ::gameObjects::userInterface::notes::Note newNote =  ::gameObjects::userInterface::notes::Note_obj::__alloc( HX_CTX ,strumTime,noteData,noteAlt,prevNote,isSustainNote);
HXLINE( 173)		if ((newNote->noteQuant == -1)) {
HXLINE( 179)			::Array< int > quantArray = ::Array_obj< int >::fromData( _hx_array_data_54cda4cb_18,10);
HXLINE( 181)			Float curBPM = ::meta::data::Conductor_obj::bpm;
HXLINE( 182)			{
HXLINE( 182)				int _g = 0;
HXDLIN( 182)				int _g1 = ::meta::data::Conductor_obj::bpmChangeMap->length;
HXDLIN( 182)				while((_g < _g1)){
HXLINE( 182)					_g = (_g + 1);
HXDLIN( 182)					int i = (_g - 1);
HXLINE( 183)					if (::hx::IsGreater( strumTime,::meta::data::Conductor_obj::bpmChangeMap->__get(i)->__Field(HX_("songTime",82,2a,d5,3a),::hx::paccDynamic) )) {
HXLINE( 184)						curBPM = ( (Float)(::meta::data::Conductor_obj::bpmChangeMap->__get(i)->__Field(HX_("bpm",df,be,4a,00),::hx::paccDynamic)) );
            					}
            				}
            			}
HXLINE( 187)			Float beatTimeSeconds = (( (Float)(60) ) / curBPM);
HXLINE( 188)			Float beatTime = (beatTimeSeconds * ( (Float)(1000) ));
HXLINE( 190)			Float measureTime = (beatTime * ( (Float)(4) ));
HXLINE( 192)			Float smallestDeviation = (measureTime / ( (Float)(quantArray->__get((quantArray->length - 1))) ));
HXLINE( 194)			{
HXLINE( 194)				int _g2 = 0;
HXDLIN( 194)				int _g3 = quantArray->length;
HXDLIN( 194)				while((_g2 < _g3)){
HXLINE( 194)					_g2 = (_g2 + 1);
HXDLIN( 194)					int quant = (_g2 - 1);
HXLINE( 198)					Float quantTime = (measureTime / ( (Float)(quantArray->__get(quant)) ));
HXLINE( 199)					if ((::hx::Mod(((strumTime + ::Init_obj::trueSettings->get(HX_("Offset",b3,0b,d4,94))) + smallestDeviation),quantTime) < (smallestDeviation * ( (Float)(2) )))) {
HXLINE( 202)						newNote->noteQuant = quant;
HXLINE( 203)						goto _hx_goto_16;
            					}
            				}
            				_hx_goto_16:;
            			}
            		}
HXLINE( 209)		{
HXLINE( 213)			bool _hx_tmp;
HXDLIN( 213)			if (( (bool)(isSustainNote) )) {
HXLINE( 213)				_hx_tmp = ::hx::IsNotNull( prevNote );
            			}
            			else {
HXLINE( 213)				_hx_tmp = false;
            			}
HXDLIN( 213)			if (_hx_tmp) {
HXLINE( 214)				newNote->noteQuant = prevNote->noteQuant;
            			}
HXLINE( 216)			if (!(( (bool)(isSustainNote) ))) {
HXLINE( 219)				int newNoteSize;
HXDLIN( 219)				if ((assetModifier == HX_("pixel",86,c6,a3,c2))) {
HXLINE( 219)					newNoteSize = 17;
            				}
            				else {
HXLINE( 219)					newNoteSize = 157;
            				}
HXLINE( 220)				::String library = null();
HXDLIN( 220)				Dynamic( newNote->loadGraphic(::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + ::ForeverTools_obj::returnSkinAsset(HX_("NOTE_quants",7d,28,ad,77),assetModifier,( (::String)(::Init_obj::trueSettings->get(HX_("Note Skin",6b,8d,33,f0))) ),HX_("noteskins/notes",d6,76,75,6d),HX_("quant",83,7e,e7,5d),null())) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),library),true,newNoteSize,newNoteSize,null(),null())).StaticCast<  ::meta::data::dependency::FNFSprite >();
HXLINE( 224)				newNote->animation->add(HX_("leftScroll",74,93,75,76),::Array_obj< int >::__new(1)->init(0,(newNote->noteQuant * 4)),null(),null(),null(),null());
HXLINE( 226)				newNote->animation->add(HX_("downScroll",0f,ba,68,84),::Array_obj< int >::__new(1)->init(0,(1 + (newNote->noteQuant * 4))),null(),null(),null(),null());
HXLINE( 227)				newNote->animation->add(HX_("upScroll",c8,68,6b,d1),::Array_obj< int >::__new(1)->init(0,(2 + (newNote->noteQuant * 4))),null(),null(),null(),null());
HXLINE( 228)				newNote->animation->add(HX_("rightScroll",09,a5,e9,b0),::Array_obj< int >::__new(1)->init(0,(3 + (newNote->noteQuant * 4))),null(),null(),null(),null());
            			}
            			else {
HXLINE( 233)				::String library = null();
HXDLIN( 233)				::String _hx_tmp = ::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + ::ForeverTools_obj::returnSkinAsset(HX_("HOLD_quants",d0,ea,b8,a1),assetModifier,( (::String)(::Init_obj::trueSettings->get(HX_("Note Skin",6b,8d,33,f0))) ),HX_("noteskins/notes",d6,76,75,6d),HX_("quant",83,7e,e7,5d),null())) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),library);
HXLINE( 235)				int _hx_tmp1;
HXDLIN( 235)				if ((assetModifier == HX_("pixel",86,c6,a3,c2))) {
HXLINE( 235)					_hx_tmp1 = 17;
            				}
            				else {
HXLINE( 235)					_hx_tmp1 = 109;
            				}
HXDLIN( 235)				int _hx_tmp2;
HXDLIN( 235)				if ((assetModifier == HX_("pixel",86,c6,a3,c2))) {
HXLINE( 235)					_hx_tmp2 = 6;
            				}
            				else {
HXLINE( 235)					_hx_tmp2 = 52;
            				}
HXLINE( 233)				Dynamic( newNote->loadGraphic(_hx_tmp,true,_hx_tmp1,_hx_tmp2,null(),null())).StaticCast<  ::meta::data::dependency::FNFSprite >();
HXLINE( 236)				newNote->animation->add(HX_("hold",3f,c9,12,45),::Array_obj< int >::__new(1)->init(0,(newNote->noteQuant * 4)),null(),null(),null(),null());
HXLINE( 237)				newNote->animation->add(HX_("holdend",fc,4b,02,b8),::Array_obj< int >::__new(1)->init(0,(1 + (newNote->noteQuant * 4))),null(),null(),null(),null());
HXLINE( 238)				newNote->animation->add(HX_("rollhold",3c,b7,29,23),::Array_obj< int >::__new(1)->init(0,(2 + (newNote->noteQuant * 4))),null(),null(),null(),null());
HXLINE( 239)				newNote->animation->add(HX_("rollend",7e,a4,22,5d),::Array_obj< int >::__new(1)->init(0,(3 + (newNote->noteQuant * 4))),null(),null(),null(),null());
            			}
HXLINE( 242)			if ((assetModifier == HX_("pixel",86,c6,a3,c2))) {
HXLINE( 244)				newNote->set_antialiasing(false);
HXLINE( 245)				Float _hx_tmp = newNote->get_width();
HXDLIN( 245)				newNote->setGraphicSize(::Std_obj::_hx_int((_hx_tmp * ::meta::state::PlayState_obj::daPixelZoom)),null());
HXLINE( 246)				newNote->updateHitbox();
            			}
            			else {
HXLINE( 250)				newNote->setGraphicSize(::Std_obj::_hx_int((newNote->get_width() * ((Float)0.7))),null());
HXLINE( 251)				newNote->updateHitbox();
HXLINE( 252)				newNote->set_antialiasing(true);
            			}
            		}
HXLINE( 257)		if (!(( (bool)(isSustainNote) ))) {
HXLINE( 258)			 ::flixel::animation::FlxAnimationController newNote1 = newNote->animation;
HXDLIN( 258)			newNote1->play((::gameObjects::userInterface::notes::UIStaticArrow_obj::getArrowFromNumber(noteData) + HX_("Scroll",2d,4c,f9,7b)),null(),null(),null());
            		}
HXLINE( 262)		bool _hx_tmp1;
HXDLIN( 262)		if (( (bool)(isSustainNote) )) {
HXLINE( 262)			_hx_tmp1 = ::hx::IsNotNull( prevNote );
            		}
            		else {
HXLINE( 262)			_hx_tmp1 = false;
            		}
HXDLIN( 262)		if (_hx_tmp1) {
HXLINE( 264)			newNote->noteSpeed = prevNote->noteSpeed;
HXLINE( 265)			Float _hx_tmp;
HXDLIN( 265)			if (( (bool)(::Init_obj::trueSettings->get(HX_("Opaque Holds",d5,d1,24,ba))) )) {
HXLINE( 265)				_hx_tmp = ( (Float)(1) );
            			}
            			else {
HXLINE( 265)				_hx_tmp = ((Float)0.6);
            			}
HXDLIN( 265)			newNote->set_alpha(_hx_tmp);
HXLINE( 266)			newNote->animation->play(HX_("holdend",fc,4b,02,b8),null(),null(),null());
HXLINE( 267)			newNote->updateHitbox();
HXLINE( 269)			if (prevNote->isSustainNote) {
HXLINE( 271)				prevNote->animation->play(HX_("hold",3f,c9,12,45),null(),null(),null());
HXLINE( 273)				{
HXLINE( 273)					 ::flixel::math::FlxPoint _g = prevNote->scale;
HXDLIN( 273)					_g->set_y((_g->y * ((((::meta::data::Conductor_obj::stepCrochet / ( (Float)(100) )) * ((Float)0.82692307692307687)) * ((Float)1.5)) * prevNote->noteSpeed)));
            				}
HXLINE( 274)				prevNote->updateHitbox();
            			}
            		}
HXLINE( 279)		return newNote;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC7(Note_obj,returnQuantNote,return )


::hx::ObjectPtr< Note_obj > Note_obj::__new(Float strumTime,int noteData,Float noteAlt, ::gameObjects::userInterface::notes::Note prevNote, ::Dynamic __o_sustainNote) {
	::hx::ObjectPtr< Note_obj > __this = new Note_obj();
	__this->__construct(strumTime,noteData,noteAlt,prevNote,__o_sustainNote);
	return __this;
}

::hx::ObjectPtr< Note_obj > Note_obj::__alloc(::hx::Ctx *_hx_ctx,Float strumTime,int noteData,Float noteAlt, ::gameObjects::userInterface::notes::Note prevNote, ::Dynamic __o_sustainNote) {
	Note_obj *__this = (Note_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(Note_obj), true, "gameObjects.userInterface.notes.Note"));
	*(void **)__this = Note_obj::_hx_vtable;
	__this->__construct(strumTime,noteData,noteAlt,prevNote,__o_sustainNote);
	return __this;
}

Note_obj::Note_obj()
{
}

void Note_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Note);
	HX_MARK_MEMBER_NAME(strumTime,"strumTime");
	HX_MARK_MEMBER_NAME(mustPress,"mustPress");
	HX_MARK_MEMBER_NAME(noteData,"noteData");
	HX_MARK_MEMBER_NAME(noteAlt,"noteAlt");
	HX_MARK_MEMBER_NAME(noteType,"noteType");
	HX_MARK_MEMBER_NAME(noteString,"noteString");
	HX_MARK_MEMBER_NAME(canBeHit,"canBeHit");
	HX_MARK_MEMBER_NAME(tooLate,"tooLate");
	HX_MARK_MEMBER_NAME(wasGoodHit,"wasGoodHit");
	HX_MARK_MEMBER_NAME(prevNote,"prevNote");
	HX_MARK_MEMBER_NAME(sustainLength,"sustainLength");
	HX_MARK_MEMBER_NAME(isSustainNote,"isSustainNote");
	HX_MARK_MEMBER_NAME(chartSustain,"chartSustain");
	HX_MARK_MEMBER_NAME(rawNoteData,"rawNoteData");
	HX_MARK_MEMBER_NAME(noteQuant,"noteQuant");
	HX_MARK_MEMBER_NAME(noteVisualOffset,"noteVisualOffset");
	HX_MARK_MEMBER_NAME(noteSpeed,"noteSpeed");
	HX_MARK_MEMBER_NAME(noteDirection,"noteDirection");
	 ::meta::data::dependency::FNFSprite_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void Note_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(strumTime,"strumTime");
	HX_VISIT_MEMBER_NAME(mustPress,"mustPress");
	HX_VISIT_MEMBER_NAME(noteData,"noteData");
	HX_VISIT_MEMBER_NAME(noteAlt,"noteAlt");
	HX_VISIT_MEMBER_NAME(noteType,"noteType");
	HX_VISIT_MEMBER_NAME(noteString,"noteString");
	HX_VISIT_MEMBER_NAME(canBeHit,"canBeHit");
	HX_VISIT_MEMBER_NAME(tooLate,"tooLate");
	HX_VISIT_MEMBER_NAME(wasGoodHit,"wasGoodHit");
	HX_VISIT_MEMBER_NAME(prevNote,"prevNote");
	HX_VISIT_MEMBER_NAME(sustainLength,"sustainLength");
	HX_VISIT_MEMBER_NAME(isSustainNote,"isSustainNote");
	HX_VISIT_MEMBER_NAME(chartSustain,"chartSustain");
	HX_VISIT_MEMBER_NAME(rawNoteData,"rawNoteData");
	HX_VISIT_MEMBER_NAME(noteQuant,"noteQuant");
	HX_VISIT_MEMBER_NAME(noteVisualOffset,"noteVisualOffset");
	HX_VISIT_MEMBER_NAME(noteSpeed,"noteSpeed");
	HX_VISIT_MEMBER_NAME(noteDirection,"noteDirection");
	 ::meta::data::dependency::FNFSprite_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val Note_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"update") ) { return ::hx::Val( update_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"noteAlt") ) { return ::hx::Val( noteAlt ); }
		if (HX_FIELD_EQ(inName,"tooLate") ) { return ::hx::Val( tooLate ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"noteData") ) { return ::hx::Val( noteData ); }
		if (HX_FIELD_EQ(inName,"noteType") ) { return ::hx::Val( noteType ); }
		if (HX_FIELD_EQ(inName,"canBeHit") ) { return ::hx::Val( canBeHit ); }
		if (HX_FIELD_EQ(inName,"prevNote") ) { return ::hx::Val( prevNote ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"strumTime") ) { return ::hx::Val( strumTime ); }
		if (HX_FIELD_EQ(inName,"mustPress") ) { return ::hx::Val( mustPress ); }
		if (HX_FIELD_EQ(inName,"noteQuant") ) { return ::hx::Val( noteQuant ); }
		if (HX_FIELD_EQ(inName,"noteSpeed") ) { return ::hx::Val( noteSpeed ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"noteString") ) { return ::hx::Val( noteString ); }
		if (HX_FIELD_EQ(inName,"wasGoodHit") ) { return ::hx::Val( wasGoodHit ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"rawNoteData") ) { return ::hx::Val( rawNoteData ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"chartSustain") ) { return ::hx::Val( chartSustain ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"sustainLength") ) { return ::hx::Val( sustainLength ); }
		if (HX_FIELD_EQ(inName,"isSustainNote") ) { return ::hx::Val( isSustainNote ); }
		if (HX_FIELD_EQ(inName,"noteDirection") ) { return ::hx::Val( noteDirection ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"noteVisualOffset") ) { return ::hx::Val( noteVisualOffset ); }
	}
	return super::__Field(inName,inCallProp);
}

bool Note_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 9:
		if (HX_FIELD_EQ(inName,"swagWidth") ) { outValue = ( swagWidth ); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"returnQuantNote") ) { outValue = returnQuantNote_dyn(); return true; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"returnDefaultNote") ) { outValue = returnDefaultNote_dyn(); return true; }
	}
	return false;
}

::hx::Val Note_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"noteAlt") ) { noteAlt=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"tooLate") ) { tooLate=inValue.Cast< bool >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"noteData") ) { noteData=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"noteType") ) { noteType=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"canBeHit") ) { canBeHit=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"prevNote") ) { prevNote=inValue.Cast<  ::gameObjects::userInterface::notes::Note >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"strumTime") ) { strumTime=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"mustPress") ) { mustPress=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"noteQuant") ) { noteQuant=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"noteSpeed") ) { noteSpeed=inValue.Cast< Float >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"noteString") ) { noteString=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"wasGoodHit") ) { wasGoodHit=inValue.Cast< bool >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"rawNoteData") ) { rawNoteData=inValue.Cast< int >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"chartSustain") ) { chartSustain=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"sustainLength") ) { sustainLength=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"isSustainNote") ) { isSustainNote=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"noteDirection") ) { noteDirection=inValue.Cast< Float >(); return inValue; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"noteVisualOffset") ) { noteVisualOffset=inValue.Cast< Float >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool Note_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 9:
		if (HX_FIELD_EQ(inName,"swagWidth") ) { swagWidth=ioValue.Cast< Float >(); return true; }
	}
	return false;
}

void Note_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("strumTime",f6,2d,21,f4));
	outFields->push(HX_("mustPress",ba,d4,17,60));
	outFields->push(HX_("noteData",3c,7b,96,51));
	outFields->push(HX_("noteAlt",57,9c,45,4d));
	outFields->push(HX_("noteType",cc,17,3c,5c));
	outFields->push(HX_("noteString",63,36,44,af));
	outFields->push(HX_("canBeHit",20,a6,d1,1e));
	outFields->push(HX_("tooLate",da,77,57,55));
	outFields->push(HX_("wasGoodHit",ed,7a,9b,17));
	outFields->push(HX_("prevNote",85,f8,d7,11));
	outFields->push(HX_("sustainLength",e9,a1,9c,7c));
	outFields->push(HX_("isSustainNote",6b,1e,77,c3));
	outFields->push(HX_("chartSustain",65,ff,38,45));
	outFields->push(HX_("rawNoteData",44,35,c3,78));
	outFields->push(HX_("noteQuant",31,c9,74,9b));
	outFields->push(HX_("noteVisualOffset",85,45,98,72));
	outFields->push(HX_("noteSpeed",35,e2,f6,be));
	outFields->push(HX_("noteDirection",ed,9b,f3,6e));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo Note_obj_sMemberStorageInfo[] = {
	{::hx::fsFloat,(int)offsetof(Note_obj,strumTime),HX_("strumTime",f6,2d,21,f4)},
	{::hx::fsBool,(int)offsetof(Note_obj,mustPress),HX_("mustPress",ba,d4,17,60)},
	{::hx::fsInt,(int)offsetof(Note_obj,noteData),HX_("noteData",3c,7b,96,51)},
	{::hx::fsFloat,(int)offsetof(Note_obj,noteAlt),HX_("noteAlt",57,9c,45,4d)},
	{::hx::fsFloat,(int)offsetof(Note_obj,noteType),HX_("noteType",cc,17,3c,5c)},
	{::hx::fsString,(int)offsetof(Note_obj,noteString),HX_("noteString",63,36,44,af)},
	{::hx::fsBool,(int)offsetof(Note_obj,canBeHit),HX_("canBeHit",20,a6,d1,1e)},
	{::hx::fsBool,(int)offsetof(Note_obj,tooLate),HX_("tooLate",da,77,57,55)},
	{::hx::fsBool,(int)offsetof(Note_obj,wasGoodHit),HX_("wasGoodHit",ed,7a,9b,17)},
	{::hx::fsObject /*  ::gameObjects::userInterface::notes::Note */ ,(int)offsetof(Note_obj,prevNote),HX_("prevNote",85,f8,d7,11)},
	{::hx::fsFloat,(int)offsetof(Note_obj,sustainLength),HX_("sustainLength",e9,a1,9c,7c)},
	{::hx::fsBool,(int)offsetof(Note_obj,isSustainNote),HX_("isSustainNote",6b,1e,77,c3)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(Note_obj,chartSustain),HX_("chartSustain",65,ff,38,45)},
	{::hx::fsInt,(int)offsetof(Note_obj,rawNoteData),HX_("rawNoteData",44,35,c3,78)},
	{::hx::fsInt,(int)offsetof(Note_obj,noteQuant),HX_("noteQuant",31,c9,74,9b)},
	{::hx::fsFloat,(int)offsetof(Note_obj,noteVisualOffset),HX_("noteVisualOffset",85,45,98,72)},
	{::hx::fsFloat,(int)offsetof(Note_obj,noteSpeed),HX_("noteSpeed",35,e2,f6,be)},
	{::hx::fsFloat,(int)offsetof(Note_obj,noteDirection),HX_("noteDirection",ed,9b,f3,6e)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo Note_obj_sStaticStorageInfo[] = {
	{::hx::fsFloat,(void *) &Note_obj::swagWidth,HX_("swagWidth",1c,87,d9,a6)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static ::String Note_obj_sMemberFields[] = {
	HX_("strumTime",f6,2d,21,f4),
	HX_("mustPress",ba,d4,17,60),
	HX_("noteData",3c,7b,96,51),
	HX_("noteAlt",57,9c,45,4d),
	HX_("noteType",cc,17,3c,5c),
	HX_("noteString",63,36,44,af),
	HX_("canBeHit",20,a6,d1,1e),
	HX_("tooLate",da,77,57,55),
	HX_("wasGoodHit",ed,7a,9b,17),
	HX_("prevNote",85,f8,d7,11),
	HX_("sustainLength",e9,a1,9c,7c),
	HX_("isSustainNote",6b,1e,77,c3),
	HX_("chartSustain",65,ff,38,45),
	HX_("rawNoteData",44,35,c3,78),
	HX_("noteQuant",31,c9,74,9b),
	HX_("noteVisualOffset",85,45,98,72),
	HX_("noteSpeed",35,e2,f6,be),
	HX_("noteDirection",ed,9b,f3,6e),
	HX_("update",09,86,05,87),
	::String(null()) };

static void Note_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Note_obj::swagWidth,"swagWidth");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Note_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Note_obj::swagWidth,"swagWidth");
};

#endif

::hx::Class Note_obj::__mClass;

static ::String Note_obj_sStaticFields[] = {
	HX_("swagWidth",1c,87,d9,a6),
	HX_("returnDefaultNote",83,e2,c3,b0),
	HX_("returnQuantNote",45,e5,e2,6e),
	::String(null())
};

void Note_obj::__register()
{
	Note_obj _hx_dummy;
	Note_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("gameObjects.userInterface.notes.Note",cb,a4,cd,54);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Note_obj::__GetStatic;
	__mClass->mSetStaticField = &Note_obj::__SetStatic;
	__mClass->mMarkFunc = Note_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(Note_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(Note_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< Note_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Note_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Note_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Note_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void Note_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_2a15083fb450a023_47_boot)
HXDLIN(  47)		swagWidth = ((Float)112.);
            	}
}

} // end namespace gameObjects
} // end namespace userInterface
} // end namespace notes

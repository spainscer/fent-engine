// Generated by Haxe 4.1.5
#include <hxcpp.h>

#ifndef INCLUDED_Init
#include <Init.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
#ifndef INCLUDED_flixel_animation_FlxAnimationController
#include <flixel/animation/FlxAnimationController.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_gameObjects_userInterface_notes_NoteSplash
#include <gameObjects/userInterface/notes/NoteSplash.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_meta_data_dependency_FNFSprite
#include <meta/data/dependency/FNFSprite.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_3ff296935d9f71c3_11_new,"gameObjects.userInterface.notes.NoteSplash","new",0x64411684,"gameObjects.userInterface.notes.NoteSplash.new","gameObjects/userInterface/notes/NoteSplash.hx",11,0xc479fa49)
HX_LOCAL_STACK_FRAME(_hx_pos_3ff296935d9f71c3_18_update,"gameObjects.userInterface.notes.NoteSplash","update",0xf1f3ae65,"gameObjects.userInterface.notes.NoteSplash.update","gameObjects/userInterface/notes/NoteSplash.hx",18,0xc479fa49)
HX_LOCAL_STACK_FRAME(_hx_pos_3ff296935d9f71c3_32_playAnim,"gameObjects.userInterface.notes.NoteSplash","playAnim",0xd192e181,"gameObjects.userInterface.notes.NoteSplash.playAnim","gameObjects/userInterface/notes/NoteSplash.hx",32,0xc479fa49)
namespace gameObjects{
namespace userInterface{
namespace notes{

void NoteSplash_obj::__construct(int noteData){
            	HX_STACKFRAME(&_hx_pos_3ff296935d9f71c3_11_new)
HXLINE(  12)		super::__construct(this->x,this->y);
HXLINE(  13)		this->set_visible(false);
HXLINE(  14)		this->set_alpha(((Float)0.6));
            	}

Dynamic NoteSplash_obj::__CreateEmpty() { return new NoteSplash_obj; }

void *NoteSplash_obj::_hx_vtable = 0;

Dynamic NoteSplash_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< NoteSplash_obj > _hx_result = new NoteSplash_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool NoteSplash_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x78a693e9) {
		if (inClassId<=(int)0x2f4aa72e) {
			if (inClassId<=(int)0x2c01639b) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x2c01639b;
			} else {
				return inClassId==(int)0x2f4aa72e;
			}
		} else {
			return inClassId==(int)0x78a693e9;
		}
	} else {
		return inClassId==(int)0x7ccf8994 || inClassId==(int)0x7dab0655;
	}
}

void NoteSplash_obj::update(Float elapsed){
            	HX_STACKFRAME(&_hx_pos_3ff296935d9f71c3_18_update)
HXLINE(  19)		this->super::update(elapsed);
HXLINE(  22)		if (this->animation->get_finished()) {
HXLINE(  25)			if (this->visible) {
HXLINE(  26)				this->set_visible(false);
            			}
            		}
            	}


void NoteSplash_obj::playAnim(::String AnimName,::hx::Null< bool >  __o_Force,::hx::Null< bool >  __o_Reversed,::hx::Null< int >  __o_Frame){
            		bool Force = __o_Force.Default(false);
            		bool Reversed = __o_Reversed.Default(false);
            		int Frame = __o_Frame.Default(0);
            	HX_STACKFRAME(&_hx_pos_3ff296935d9f71c3_32_playAnim)
HXLINE(  34)		if (!(( (bool)(::Init_obj::trueSettings->get(HX_("Disable Note Splashes",2b,53,9d,28))) ))) {
HXLINE(  35)			this->set_visible(true);
            		}
HXLINE(  37)		this->super::playAnim(AnimName,Force,Reversed,Frame);
            	}



::hx::ObjectPtr< NoteSplash_obj > NoteSplash_obj::__new(int noteData) {
	::hx::ObjectPtr< NoteSplash_obj > __this = new NoteSplash_obj();
	__this->__construct(noteData);
	return __this;
}

::hx::ObjectPtr< NoteSplash_obj > NoteSplash_obj::__alloc(::hx::Ctx *_hx_ctx,int noteData) {
	NoteSplash_obj *__this = (NoteSplash_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(NoteSplash_obj), true, "gameObjects.userInterface.notes.NoteSplash"));
	*(void **)__this = NoteSplash_obj::_hx_vtable;
	__this->__construct(noteData);
	return __this;
}

NoteSplash_obj::NoteSplash_obj()
{
}

::hx::Val NoteSplash_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"update") ) { return ::hx::Val( update_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"playAnim") ) { return ::hx::Val( playAnim_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *NoteSplash_obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo *NoteSplash_obj_sStaticStorageInfo = 0;
#endif

static ::String NoteSplash_obj_sMemberFields[] = {
	HX_("update",09,86,05,87),
	HX_("playAnim",25,ea,84,30),
	::String(null()) };

::hx::Class NoteSplash_obj::__mClass;

void NoteSplash_obj::__register()
{
	NoteSplash_obj _hx_dummy;
	NoteSplash_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("gameObjects.userInterface.notes.NoteSplash",92,c4,52,1a);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(NoteSplash_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< NoteSplash_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = NoteSplash_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = NoteSplash_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace gameObjects
} // end namespace userInterface
} // end namespace notes

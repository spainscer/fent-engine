// Generated by Haxe 4.1.5
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_ForeverTools
#include <ForeverTools.h>
#endif
#ifndef INCLUDED_Init
#include <Init.h>
#endif
#ifndef INCLUDED_Main
#include <Main.h>
#endif
#ifndef INCLUDED_Paths
#include <Paths.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
#ifndef INCLUDED_flixel_addons_transition_FlxTransitionableState
#include <flixel/addons/transition/FlxTransitionableState.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUIState
#include <flixel/addons/ui/FlxUIState.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IEventGetter
#include <flixel/addons/ui/interfaces/IEventGetter.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IFlxUIState
#include <flixel/addons/ui/interfaces/IFlxUIState.h>
#endif
#ifndef INCLUDED_flixel_animation_FlxAnimation
#include <flixel/animation/FlxAnimation.h>
#endif
#ifndef INCLUDED_flixel_animation_FlxAnimationController
#include <flixel/animation/FlxAnimationController.h>
#endif
#ifndef INCLUDED_flixel_animation_FlxBaseAnimation
#include <flixel/animation/FlxBaseAnimation.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_math_FlxMath
#include <flixel/math/FlxMath.h>
#endif
#ifndef INCLUDED_flixel_math_FlxPoint
#include <flixel/math/FlxPoint.h>
#endif
#ifndef INCLUDED_flixel_text_FlxText
#include <flixel/text/FlxText.h>
#endif
#ifndef INCLUDED_flixel_text_FlxTextBorderStyle
#include <flixel/text/FlxTextBorderStyle.h>
#endif
#ifndef INCLUDED_flixel_ui_FlxBar
#include <flixel/ui/FlxBar.h>
#endif
#ifndef INCLUDED_flixel_ui_FlxBarFillDirection
#include <flixel/ui/FlxBarFillDirection.h>
#endif
#ifndef INCLUDED_flixel_util_FlxAxes
#include <flixel/util/FlxAxes.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif
#ifndef INCLUDED_gameObjects_userInterface_ClassHUD
#include <gameObjects/userInterface/ClassHUD.h>
#endif
#ifndef INCLUDED_gameObjects_userInterface_HealthIcon
#include <gameObjects/userInterface/HealthIcon.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_meta_CoolUtil
#include <meta/CoolUtil.h>
#endif
#ifndef INCLUDED_meta_MusicBeatState
#include <meta/MusicBeatState.h>
#endif
#ifndef INCLUDED_meta_data_Timings
#include <meta/data/Timings.h>
#endif
#ifndef INCLUDED_meta_data_dependency_FNFUIState
#include <meta/data/dependency/FNFUIState.h>
#endif
#ifndef INCLUDED_meta_state_PlayState
#include <meta/state/PlayState.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_49d401de8ec6603a_26_new,"gameObjects.userInterface.ClassHUD","new",0x2a37bc5d,"gameObjects.userInterface.ClassHUD.new","gameObjects/userInterface/ClassHUD.hx",26,0xe13e9131)
HX_LOCAL_STACK_FRAME(_hx_pos_49d401de8ec6603a_101_update,"gameObjects.userInterface.ClassHUD","update",0x6961762c,"gameObjects.userInterface.ClassHUD.update","gameObjects/userInterface/ClassHUD.hx",101,0xe13e9131)
HX_LOCAL_STACK_FRAME(_hx_pos_49d401de8ec6603a_131_updateScoreText,"gameObjects.userInterface.ClassHUD","updateScoreText",0xc11cc153,"gameObjects.userInterface.ClassHUD.updateScoreText","gameObjects/userInterface/ClassHUD.hx",131,0xe13e9131)
HX_LOCAL_STACK_FRAME(_hx_pos_49d401de8ec6603a_154_beatHit,"gameObjects.userInterface.ClassHUD","beatHit",0xa21b18fa,"gameObjects.userInterface.ClassHUD.beatHit","gameObjects/userInterface/ClassHUD.hx",154,0xe13e9131)
namespace gameObjects{
namespace userInterface{

void ClassHUD_obj::__construct(){
            	HX_GC_STACKFRAME(&_hx_pos_49d401de8ec6603a_26_new)
HXLINE( 128)		this->divider = HX_(" - ",73,6f,18,00);
HXLINE(  41)		this->stupidHealth = ((Float)0);
HXLINE(  38)		this->SONG = ::meta::state::PlayState_obj::SONG;
HXLINE(  32)		this->scoreLast = ((Float)-1);
HXLINE(  47)		super::__construct(null());
HXLINE(  50)		::String scoreDisplay = HX_("beep bop bo skdkdkdbebedeoop brrapadop",44,cc,92,5f);
HXLINE(  53)		Float barY = (( (Float)(::flixel::FlxG_obj::height) ) * ((Float)0.875));
HXLINE(  54)		if (( (bool)(::Init_obj::trueSettings->get(HX_("Downscroll",0f,4a,85,46))) )) {
HXLINE(  55)			barY = ( (Float)(64) );
            		}
HXLINE(  57)		 ::flixel::FlxSprite _hx_tmp =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,0,barY,null());
HXLINE(  58)		::String library = null();
HXLINE(  57)		this->healthBarBG = _hx_tmp->loadGraphic(::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + ::ForeverTools_obj::returnSkinAsset(HX_("healthBar",97,8a,92,42),::meta::state::PlayState_obj::assetModifier,::meta::state::PlayState_obj::changeableSkin,HX_("UI",54,4a,00,00),null(),null())) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),library),null(),null(),null(),null(),null());
HXLINE(  59)		this->healthBarBG->screenCenter(::flixel::util::FlxAxes_obj::X_dyn());
HXLINE(  60)		this->healthBarBG->scrollFactor->set(null(),null());
HXLINE(  61)		this->add(this->healthBarBG);
HXLINE(  63)		Float _hx_tmp1 = (this->healthBarBG->x + 4);
HXDLIN(  63)		Float _hx_tmp2 = (this->healthBarBG->y + 4);
HXDLIN(  63)		int _hx_tmp3 = ::Std_obj::_hx_int((this->healthBarBG->get_width() - ( (Float)(8) )));
HXDLIN(  63)		this->healthBar =  ::flixel::ui::FlxBar_obj::__alloc( HX_CTX ,_hx_tmp1,_hx_tmp2,::flixel::ui::FlxBarFillDirection_obj::RIGHT_TO_LEFT_dyn(),_hx_tmp3,::Std_obj::_hx_int((this->healthBarBG->get_height() - ( (Float)(8) ))),null(),null(),null(),null(),null());
HXLINE(  64)		this->healthBar->scrollFactor->set(null(),null());
HXLINE(  65)		this->healthBar->createFilledBar(-65536,-10027213,null(),null());
HXLINE(  67)		this->add(this->healthBar);
HXLINE(  69)		this->iconP1 =  ::gameObjects::userInterface::HealthIcon_obj::__alloc( HX_CTX ,( (::String)(this->SONG->__Field(HX_("player1",b0,09,15,8a),::hx::paccDynamic)) ),true);
HXLINE(  70)		 ::gameObjects::userInterface::HealthIcon _hx_tmp4 = this->iconP1;
HXDLIN(  70)		Float _hx_tmp5 = this->healthBar->y;
HXDLIN(  70)		_hx_tmp4->set_y((_hx_tmp5 - (this->iconP1->get_height() / ( (Float)(2) ))));
HXLINE(  71)		this->add(this->iconP1);
HXLINE(  73)		this->iconP2 =  ::gameObjects::userInterface::HealthIcon_obj::__alloc( HX_CTX ,( (::String)(this->SONG->__Field(HX_("player2",b1,09,15,8a),::hx::paccDynamic)) ),false);
HXLINE(  74)		 ::gameObjects::userInterface::HealthIcon _hx_tmp6 = this->iconP2;
HXDLIN(  74)		Float _hx_tmp7 = this->healthBar->y;
HXDLIN(  74)		_hx_tmp6->set_y((_hx_tmp7 - (this->iconP2->get_height() / ( (Float)(2) ))));
HXLINE(  75)		this->add(this->iconP2);
HXLINE(  77)		this->scoreBar =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,(( (Float)(::flixel::FlxG_obj::width) ) / ( (Float)(2) )),(this->healthBarBG->y + 40),0,scoreDisplay,20,null());
HXLINE(  78)		this->scoreBar->setFormat((HX_("assets/fonts/",37,ff,a5,9c) + HX_("vcr.ttf",9d,d2,a7,82)),16,-1,HX_("center",d5,25,db,05),::flixel::text::FlxTextBorderStyle_obj::OUTLINE_dyn(),-16777216,null());
HXLINE(  79)		this->updateScoreText();
HXLINE(  80)		this->scoreBar->scrollFactor->set(null(),null());
HXLINE(  81)		this->add(this->scoreBar);
HXLINE(  85)		::String infoDisplay = (::meta::CoolUtil_obj::dashToSpace(( (::String)(::meta::state::PlayState_obj::SONG->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic)) )) + HX_(" - ",73,6f,18,00));
HXDLIN(  85)		::String infoDisplay1 = (infoDisplay + ::meta::CoolUtil_obj::difficultyFromNumber(::meta::state::PlayState_obj::storyDifficulty));
HXLINE(  86)		::String engineDisplay = (HX_("Forever Engine BETA v",6b,af,43,9e) + ::Main_obj::gameVersion);
HXLINE(  87)		 ::flixel::text::FlxText engineBar =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,0,(::flixel::FlxG_obj::height - 30),0,engineDisplay,16,null());
HXLINE(  88)		engineBar->setFormat((HX_("assets/fonts/",37,ff,a5,9c) + HX_("vcr.ttf",9d,d2,a7,82)),16,-1,HX_("right",dc,0b,64,e9),::flixel::text::FlxTextBorderStyle_obj::OUTLINE_dyn(),-16777216,null());
HXLINE(  89)		engineBar->updateHitbox();
HXLINE(  90)		int _hx_tmp8 = ::flixel::FlxG_obj::width;
HXDLIN(  90)		engineBar->set_x(((( (Float)(_hx_tmp8) ) - engineBar->get_width()) - ( (Float)(5) )));
HXLINE(  91)		engineBar->scrollFactor->set(null(),null());
HXLINE(  92)		this->add(engineBar);
HXLINE(  94)		this->infoBar =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,5,(::flixel::FlxG_obj::height - 30),0,infoDisplay1,20,null());
HXLINE(  95)		this->infoBar->setFormat((HX_("assets/fonts/",37,ff,a5,9c) + HX_("vcr.ttf",9d,d2,a7,82)),16,-1,HX_("right",dc,0b,64,e9),::flixel::text::FlxTextBorderStyle_obj::OUTLINE_dyn(),-16777216,null());
HXLINE(  96)		this->infoBar->scrollFactor->set(null(),null());
HXLINE(  97)		this->add(this->infoBar);
            	}

Dynamic ClassHUD_obj::__CreateEmpty() { return new ClassHUD_obj; }

void *ClassHUD_obj::_hx_vtable = 0;

Dynamic ClassHUD_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< ClassHUD_obj > _hx_result = new ClassHUD_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool ClassHUD_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x6bdf2e6b) {
		if (inClassId<=(int)0x62817b24) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x62817b24;
		} else {
			return inClassId==(int)0x6bdf2e6b;
		}
	} else {
		return inClassId==(int)0x7ccf8994;
	}
}

void ClassHUD_obj::update(Float elapsed){
            	HX_STACKFRAME(&_hx_pos_49d401de8ec6603a_101_update)
HXLINE( 103)		this->healthBar->set_percent((::meta::state::PlayState_obj::health * ( (Float)(50) )));
HXLINE( 105)		Float iconLerp = ((Float)0.5);
HXLINE( 106)		 ::gameObjects::userInterface::HealthIcon _hx_tmp = this->iconP1;
HXDLIN( 106)		Float a = this->iconP1->initialWidth;
HXDLIN( 106)		_hx_tmp->setGraphicSize(::Std_obj::_hx_int((a + (iconLerp * (this->iconP1->get_width() - a)))),null());
HXLINE( 107)		 ::gameObjects::userInterface::HealthIcon _hx_tmp1 = this->iconP2;
HXDLIN( 107)		Float a1 = this->iconP2->initialWidth;
HXDLIN( 107)		_hx_tmp1->setGraphicSize(::Std_obj::_hx_int((a1 + (iconLerp * (this->iconP2->get_width() - a1)))),null());
HXLINE( 109)		this->iconP1->updateHitbox();
HXLINE( 110)		this->iconP2->updateHitbox();
HXLINE( 112)		int iconOffset = 26;
HXLINE( 114)		 ::gameObjects::userInterface::HealthIcon _hx_tmp2 = this->iconP1;
HXDLIN( 114)		Float _hx_tmp3 = this->healthBar->x;
HXDLIN( 114)		Float _hx_tmp4 = this->healthBar->get_width();
HXDLIN( 114)		_hx_tmp2->set_x((_hx_tmp3 + ((_hx_tmp4 * (::flixel::math::FlxMath_obj::remapToRange(this->healthBar->get_percent(),( (Float)(0) ),( (Float)(100) ),( (Float)(100) ),( (Float)(0) )) * ((Float)0.01))) - ( (Float)(iconOffset) ))));
HXLINE( 115)		 ::gameObjects::userInterface::HealthIcon _hx_tmp5 = this->iconP2;
HXDLIN( 115)		Float _hx_tmp6 = this->healthBar->x;
HXDLIN( 115)		Float _hx_tmp7 = this->healthBar->get_width();
HXDLIN( 115)		Float _hx_tmp8 = (_hx_tmp6 + (_hx_tmp7 * (::flixel::math::FlxMath_obj::remapToRange(this->healthBar->get_percent(),( (Float)(0) ),( (Float)(100) ),( (Float)(100) ),( (Float)(0) )) * ((Float)0.01))));
HXDLIN( 115)		_hx_tmp5->set_x((_hx_tmp8 - (this->iconP2->get_width() - ( (Float)(iconOffset) ))));
HXLINE( 117)		if ((this->healthBar->get_percent() < 20)) {
HXLINE( 118)			this->iconP1->animation->_curAnim->set_curFrame(1);
            		}
            		else {
HXLINE( 120)			this->iconP1->animation->_curAnim->set_curFrame(0);
            		}
HXLINE( 122)		if ((this->healthBar->get_percent() > 80)) {
HXLINE( 123)			this->iconP2->animation->_curAnim->set_curFrame(1);
            		}
            		else {
HXLINE( 125)			this->iconP2->animation->_curAnim->set_curFrame(0);
            		}
            	}


void ClassHUD_obj::updateScoreText(){
            	HX_STACKFRAME(&_hx_pos_49d401de8ec6603a_131_updateScoreText)
HXLINE( 132)		int importSongScore = ::meta::state::PlayState_obj::songScore;
HXLINE( 133)		int importPlayStateCombo = ::meta::state::PlayState_obj::combo;
HXLINE( 134)		int importMisses = ::meta::state::PlayState_obj::misses;
HXLINE( 135)		this->scoreBar->set_text((HX_("Score: ",58,c6,eb,45) + importSongScore));
HXLINE( 137)		bool displayAccuracy = ::Init_obj::trueSettings->get_bool(HX_("Display Accuracy",17,3c,f2,a7));
HXLINE( 138)		if (displayAccuracy) {
HXLINE( 140)			{
HXLINE( 140)				 ::flixel::text::FlxText _g = this->scoreBar;
HXDLIN( 140)				::String _g1 = _g->text;
HXDLIN( 140)				::String _hx_tmp = (this->divider + HX_("Accuracy: ",3f,fd,6e,36));
HXDLIN( 140)				::String _hx_tmp1 = ((_hx_tmp + ::Std_obj::string((( (Float)(::Math_obj::floor((::meta::data::Timings_obj::getAccuracy() * ( (Float)(100) )))) ) / ( (Float)(100) )))) + HX_("%",25,00,00,00));
HXDLIN( 140)				_g->set_text((_g1 + (_hx_tmp1 + ::meta::data::Timings_obj::comboDisplay)));
            			}
HXLINE( 141)			{
HXLINE( 141)				 ::flixel::text::FlxText _g2 = this->scoreBar;
HXDLIN( 141)				::String _g3 = _g2->text;
HXDLIN( 141)				::String _hx_tmp2 = (this->divider + HX_("Combo Breaks: ",cc,60,7c,0a));
HXDLIN( 141)				_g2->set_text((_g3 + (_hx_tmp2 + ::Std_obj::string(::meta::state::PlayState_obj::misses))));
            			}
HXLINE( 142)			{
HXLINE( 142)				 ::flixel::text::FlxText _g4 = this->scoreBar;
HXDLIN( 142)				::String _g5 = _g4->text;
HXDLIN( 142)				::String _hx_tmp3 = (this->divider + HX_("Rank: ",72,b7,28,ec));
HXDLIN( 142)				_g4->set_text((_g5 + (_hx_tmp3 + ::Std_obj::string(::meta::data::Timings_obj::returnScoreRating().toUpperCase()))));
            			}
            		}
HXLINE( 145)		 ::flixel::text::FlxText _hx_tmp = this->scoreBar;
HXDLIN( 145)		Float _hx_tmp1 = (( (Float)(::flixel::FlxG_obj::width) ) / ( (Float)(2) ));
HXDLIN( 145)		_hx_tmp->set_x((_hx_tmp1 - (this->scoreBar->get_width() / ( (Float)(2) ))));
HXLINE( 148)		::meta::state::PlayState_obj::detailsSub = this->scoreBar->text;
HXLINE( 149)		::meta::state::PlayState_obj::updateRPC(false);
            	}


HX_DEFINE_DYNAMIC_FUNC0(ClassHUD_obj,updateScoreText,(void))

void ClassHUD_obj::beatHit(){
            	HX_STACKFRAME(&_hx_pos_49d401de8ec6603a_154_beatHit)
HXDLIN( 154)		if (!(( (bool)(::Init_obj::trueSettings->get(HX_("Reduced Movements",82,8d,f2,cf))) ))) {
HXLINE( 156)			 ::gameObjects::userInterface::HealthIcon _hx_tmp = this->iconP1;
HXDLIN( 156)			_hx_tmp->setGraphicSize(::Std_obj::_hx_int((this->iconP1->get_width() + 45)),null());
HXLINE( 157)			 ::gameObjects::userInterface::HealthIcon _hx_tmp1 = this->iconP2;
HXDLIN( 157)			_hx_tmp1->setGraphicSize(::Std_obj::_hx_int((this->iconP2->get_width() + 45)),null());
HXLINE( 159)			this->iconP1->updateHitbox();
HXLINE( 160)			this->iconP2->updateHitbox();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(ClassHUD_obj,beatHit,(void))


::hx::ObjectPtr< ClassHUD_obj > ClassHUD_obj::__new() {
	::hx::ObjectPtr< ClassHUD_obj > __this = new ClassHUD_obj();
	__this->__construct();
	return __this;
}

::hx::ObjectPtr< ClassHUD_obj > ClassHUD_obj::__alloc(::hx::Ctx *_hx_ctx) {
	ClassHUD_obj *__this = (ClassHUD_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(ClassHUD_obj), true, "gameObjects.userInterface.ClassHUD"));
	*(void **)__this = ClassHUD_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

ClassHUD_obj::ClassHUD_obj()
{
}

void ClassHUD_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(ClassHUD);
	HX_MARK_MEMBER_NAME(infoBar,"infoBar");
	HX_MARK_MEMBER_NAME(scoreBar,"scoreBar");
	HX_MARK_MEMBER_NAME(scoreLast,"scoreLast");
	HX_MARK_MEMBER_NAME(scoreDisplay,"scoreDisplay");
	HX_MARK_MEMBER_NAME(healthBarBG,"healthBarBG");
	HX_MARK_MEMBER_NAME(healthBar,"healthBar");
	HX_MARK_MEMBER_NAME(SONG,"SONG");
	HX_MARK_MEMBER_NAME(iconP1,"iconP1");
	HX_MARK_MEMBER_NAME(iconP2,"iconP2");
	HX_MARK_MEMBER_NAME(stupidHealth,"stupidHealth");
	HX_MARK_MEMBER_NAME(divider,"divider");
	 ::flixel::group::FlxTypedGroup_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void ClassHUD_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(infoBar,"infoBar");
	HX_VISIT_MEMBER_NAME(scoreBar,"scoreBar");
	HX_VISIT_MEMBER_NAME(scoreLast,"scoreLast");
	HX_VISIT_MEMBER_NAME(scoreDisplay,"scoreDisplay");
	HX_VISIT_MEMBER_NAME(healthBarBG,"healthBarBG");
	HX_VISIT_MEMBER_NAME(healthBar,"healthBar");
	HX_VISIT_MEMBER_NAME(SONG,"SONG");
	HX_VISIT_MEMBER_NAME(iconP1,"iconP1");
	HX_VISIT_MEMBER_NAME(iconP2,"iconP2");
	HX_VISIT_MEMBER_NAME(stupidHealth,"stupidHealth");
	HX_VISIT_MEMBER_NAME(divider,"divider");
	 ::flixel::group::FlxTypedGroup_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val ClassHUD_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"SONG") ) { return ::hx::Val( SONG ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"iconP1") ) { return ::hx::Val( iconP1 ); }
		if (HX_FIELD_EQ(inName,"iconP2") ) { return ::hx::Val( iconP2 ); }
		if (HX_FIELD_EQ(inName,"update") ) { return ::hx::Val( update_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"infoBar") ) { return ::hx::Val( infoBar ); }
		if (HX_FIELD_EQ(inName,"divider") ) { return ::hx::Val( divider ); }
		if (HX_FIELD_EQ(inName,"beatHit") ) { return ::hx::Val( beatHit_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"scoreBar") ) { return ::hx::Val( scoreBar ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"scoreLast") ) { return ::hx::Val( scoreLast ); }
		if (HX_FIELD_EQ(inName,"healthBar") ) { return ::hx::Val( healthBar ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"healthBarBG") ) { return ::hx::Val( healthBarBG ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"scoreDisplay") ) { return ::hx::Val( scoreDisplay ); }
		if (HX_FIELD_EQ(inName,"stupidHealth") ) { return ::hx::Val( stupidHealth ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"updateScoreText") ) { return ::hx::Val( updateScoreText_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val ClassHUD_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"SONG") ) { SONG=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"iconP1") ) { iconP1=inValue.Cast<  ::gameObjects::userInterface::HealthIcon >(); return inValue; }
		if (HX_FIELD_EQ(inName,"iconP2") ) { iconP2=inValue.Cast<  ::gameObjects::userInterface::HealthIcon >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"infoBar") ) { infoBar=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		if (HX_FIELD_EQ(inName,"divider") ) { divider=inValue.Cast< ::String >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"scoreBar") ) { scoreBar=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"scoreLast") ) { scoreLast=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"healthBar") ) { healthBar=inValue.Cast<  ::flixel::ui::FlxBar >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"healthBarBG") ) { healthBarBG=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"scoreDisplay") ) { scoreDisplay=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"stupidHealth") ) { stupidHealth=inValue.Cast< Float >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void ClassHUD_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("infoBar",05,aa,ff,0d));
	outFields->push(HX_("scoreBar",a1,55,b6,0e));
	outFields->push(HX_("scoreLast",c8,ba,70,d7));
	outFields->push(HX_("scoreDisplay",10,cd,4e,c8));
	outFields->push(HX_("healthBarBG",1c,d8,3b,f4));
	outFields->push(HX_("healthBar",97,8a,92,42));
	outFields->push(HX_("SONG",d5,eb,18,37));
	outFields->push(HX_("iconP1",9a,bd,d6,45));
	outFields->push(HX_("iconP2",9b,bd,d6,45));
	outFields->push(HX_("stupidHealth",13,60,1b,ff));
	outFields->push(HX_("divider",d9,5a,d7,70));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo ClassHUD_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::flixel::text::FlxText */ ,(int)offsetof(ClassHUD_obj,infoBar),HX_("infoBar",05,aa,ff,0d)},
	{::hx::fsObject /*  ::flixel::text::FlxText */ ,(int)offsetof(ClassHUD_obj,scoreBar),HX_("scoreBar",a1,55,b6,0e)},
	{::hx::fsFloat,(int)offsetof(ClassHUD_obj,scoreLast),HX_("scoreLast",c8,ba,70,d7)},
	{::hx::fsString,(int)offsetof(ClassHUD_obj,scoreDisplay),HX_("scoreDisplay",10,cd,4e,c8)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(ClassHUD_obj,healthBarBG),HX_("healthBarBG",1c,d8,3b,f4)},
	{::hx::fsObject /*  ::flixel::ui::FlxBar */ ,(int)offsetof(ClassHUD_obj,healthBar),HX_("healthBar",97,8a,92,42)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(ClassHUD_obj,SONG),HX_("SONG",d5,eb,18,37)},
	{::hx::fsObject /*  ::gameObjects::userInterface::HealthIcon */ ,(int)offsetof(ClassHUD_obj,iconP1),HX_("iconP1",9a,bd,d6,45)},
	{::hx::fsObject /*  ::gameObjects::userInterface::HealthIcon */ ,(int)offsetof(ClassHUD_obj,iconP2),HX_("iconP2",9b,bd,d6,45)},
	{::hx::fsFloat,(int)offsetof(ClassHUD_obj,stupidHealth),HX_("stupidHealth",13,60,1b,ff)},
	{::hx::fsString,(int)offsetof(ClassHUD_obj,divider),HX_("divider",d9,5a,d7,70)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *ClassHUD_obj_sStaticStorageInfo = 0;
#endif

static ::String ClassHUD_obj_sMemberFields[] = {
	HX_("infoBar",05,aa,ff,0d),
	HX_("scoreBar",a1,55,b6,0e),
	HX_("scoreLast",c8,ba,70,d7),
	HX_("scoreDisplay",10,cd,4e,c8),
	HX_("healthBarBG",1c,d8,3b,f4),
	HX_("healthBar",97,8a,92,42),
	HX_("SONG",d5,eb,18,37),
	HX_("iconP1",9a,bd,d6,45),
	HX_("iconP2",9b,bd,d6,45),
	HX_("stupidHealth",13,60,1b,ff),
	HX_("update",09,86,05,87),
	HX_("divider",d9,5a,d7,70),
	HX_("updateScoreText",d6,4d,48,2c),
	HX_("beatHit",7d,ea,04,74),
	::String(null()) };

::hx::Class ClassHUD_obj::__mClass;

void ClassHUD_obj::__register()
{
	ClassHUD_obj _hx_dummy;
	ClassHUD_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("gameObjects.userInterface.ClassHUD",eb,49,79,cb);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(ClassHUD_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< ClassHUD_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ClassHUD_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ClassHUD_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace gameObjects
} // end namespace userInterface

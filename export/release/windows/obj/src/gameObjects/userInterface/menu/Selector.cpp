// Generated by Haxe 4.1.5
#include <hxcpp.h>

#ifndef INCLUDED_Init
#include <Init.h>
#endif
#ifndef INCLUDED_Paths
#include <Paths.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
#ifndef INCLUDED_flixel_animation_FlxAnimationController
#include <flixel/animation/FlxAnimationController.h>
#endif
#ifndef INCLUDED_flixel_graphics_frames_FlxAtlasFrames
#include <flixel/graphics/frames/FlxAtlasFrames.h>
#endif
#ifndef INCLUDED_flixel_graphics_frames_FlxFramesCollection
#include <flixel/graphics/frames/FlxFramesCollection.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedSpriteGroup
#include <flixel/group/FlxTypedSpriteGroup.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_gameObjects_userInterface_menu_Selector
#include <gameObjects/userInterface/menu/Selector.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_Log
#include <haxe/Log.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_meta_data_dependency_FNFSprite
#include <meta/data/dependency/FNFSprite.h>
#endif
#ifndef INCLUDED_meta_data_font_Alphabet
#include <meta/data/font/Alphabet.h>
#endif
#ifndef INCLUDED_sys_io_File
#include <sys/io/File.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_15faad70344a4613_11_new,"gameObjects.userInterface.menu.Selector","new",0xd12537f4,"gameObjects.userInterface.menu.Selector.new","gameObjects/userInterface/menu/Selector.hx",11,0x60af335d)
HX_LOCAL_STACK_FRAME(_hx_pos_15faad70344a4613_68_createSelector,"gameObjects.userInterface.menu.Selector","createSelector",0xba3d0b27,"gameObjects.userInterface.menu.Selector.createSelector","gameObjects/userInterface/menu/Selector.hx",68,0x60af335d)
HX_LOCAL_STACK_FRAME(_hx_pos_15faad70344a4613_81_update,"gameObjects.userInterface.menu.Selector","update",0xc5a212f5,"gameObjects.userInterface.menu.Selector.update","gameObjects/userInterface/menu/Selector.hx",81,0x60af335d)
HX_LOCAL_STACK_FRAME(_hx_pos_15faad70344a4613_89_selectorPlay,"gameObjects.userInterface.menu.Selector","selectorPlay",0x18790e9f,"gameObjects.userInterface.menu.Selector.selectorPlay","gameObjects/userInterface/menu/Selector.hx",89,0x60af335d)
HX_LOCAL_STACK_FRAME(_hx_pos_15faad70344a4613_102_add,"gameObjects.userInterface.menu.Selector","add",0xd11b59b5,"gameObjects.userInterface.menu.Selector.add","gameObjects/userInterface/menu/Selector.hx",102,0x60af335d)
namespace gameObjects{
namespace userInterface{
namespace menu{

void Selector_obj::__construct(::hx::Null< Float >  __o_x,::hx::Null< Float >  __o_y,::String word,::Array< ::String > options,::hx::Null< bool >  __o_fpsCap,::hx::Null< bool >  __o_darkBG){
            		Float x = __o_x.Default(0);
            		Float y = __o_y.Default(0);
            		bool fpsCap = __o_fpsCap.Default(false);
            		bool darkBG = __o_darkBG.Default(false);
            	HX_GC_STACKFRAME(&_hx_pos_15faad70344a4613_11_new)
HXLINE(  99)		this->positionLog = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(  98)		this->objectArray = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(  22)		this->darkBG = false;
HXLINE(  21)		this->fpsCap = false;
HXLINE(  18)		this->chosenOptionString = HX_("",00,00,00,00);
HXLINE(  27)		super::__construct(x,y,null());
HXLINE(  29)		this->options = options;
HXLINE(  30)		::haxe::Log_obj::trace(options,::hx::SourceInfo(HX_("source/gameObjects/userInterface/menu/Selector.hx",51,4b,28,ab),30,HX_("gameObjects.userInterface.menu.Selector",02,6e,4d,4d),HX_("new",60,d0,53,00)));
HXLINE(  33)		int shiftX = 48;
HXLINE(  34)		int shiftY = 35;
HXLINE(  37)		this->fpsCap = fpsCap;
HXLINE(  38)		this->darkBG = darkBG;
HXLINE(  48)		this->leftSelector = this->createSelector(shiftX,shiftY,word,HX_("left",07,08,b0,47));
HXLINE(  49)		int _hx_tmp;
HXDLIN(  49)		if (fpsCap) {
HXLINE(  49)			_hx_tmp = 20;
            		}
            		else {
HXLINE(  49)			_hx_tmp = 0;
            		}
HXDLIN(  49)		this->rightSelector = this->createSelector((((shiftX + (word.length * 50)) + (( (Float)(shiftX) ) / ( (Float)(4) ))) + _hx_tmp),shiftY,word,HX_("right",dc,0b,64,e9));
HXLINE(  51)		this->add(this->leftSelector);
HXLINE(  52)		this->add(this->rightSelector);
HXLINE(  55)		this->chosenOptionString = ( (::String)(::Init_obj::trueSettings->get(word)) );
HXLINE(  56)		bool _hx_tmp1;
HXDLIN(  56)		if (!(fpsCap)) {
HXLINE(  56)			_hx_tmp1 = darkBG;
            		}
            		else {
HXLINE(  56)			_hx_tmp1 = true;
            		}
HXDLIN(  56)		if (_hx_tmp1) {
HXLINE(  58)			this->chosenOptionString = ::Std_obj::string(::Init_obj::trueSettings->get(word));
HXLINE(  59)			this->optionChosen =  ::meta::data::font::Alphabet_obj::__alloc( HX_CTX ,((( (Float)(::flixel::FlxG_obj::width) ) / ( (Float)(2) )) + 200),( (Float)((shiftY + 20)) ),this->chosenOptionString,false,false,null());
            		}
            		else {
HXLINE(  62)			this->optionChosen =  ::meta::data::font::Alphabet_obj::__alloc( HX_CTX ,(( (Float)(::flixel::FlxG_obj::width) ) / ( (Float)(2) )),( (Float)((shiftY + 20)) ),this->chosenOptionString,true,false,null());
            		}
HXLINE(  64)		this->add(this->optionChosen);
            	}

Dynamic Selector_obj::__CreateEmpty() { return new Selector_obj; }

void *Selector_obj::_hx_vtable = 0;

Dynamic Selector_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< Selector_obj > _hx_result = new Selector_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3],inArgs[4],inArgs[5]);
	return _hx_result;
}

bool Selector_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x54881eae) {
		if (inClassId<=(int)0x2c01639b) {
			if (inClassId<=(int)0x288ce903) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x288ce903;
			} else {
				return inClassId==(int)0x2c01639b;
			}
		} else {
			return inClassId==(int)0x54881eae;
		}
	} else {
		return inClassId==(int)0x7ccf8994 || inClassId==(int)0x7dab0655;
	}
}

 ::meta::data::dependency::FNFSprite Selector_obj::createSelector(::hx::Null< Float >  __o_objectX,::hx::Null< Float >  __o_objectY,::String word,::String dir){
            		Float objectX = __o_objectX.Default(0);
            		Float objectY = __o_objectY.Default(0);
            	HX_GC_STACKFRAME(&_hx_pos_15faad70344a4613_68_createSelector)
HXLINE(  69)		 ::meta::data::dependency::FNFSprite returnSelector =  ::meta::data::dependency::FNFSprite_obj::__alloc( HX_CTX ,objectX,objectY);
HXLINE(  70)		::String library = null();
HXDLIN(  70)		::String _hx_tmp = ::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("menus/base/storymenu/campaign_menu_UI_assets",ff,46,b4,e1)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),library);
HXDLIN(  70)		returnSelector->set_frames(::flixel::graphics::frames::FlxAtlasFrames_obj::fromSparrow(_hx_tmp,::sys::io::File_obj::getContent(::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("menus/base/storymenu/campaign_menu_UI_assets",ff,46,b4,e1)) + HX_(".xml",69,3e,c3,1e)),HX_("TEXT",ad,94,ba,37),library))));
HXLINE(  72)		returnSelector->animation->addByPrefix(HX_("idle",14,a7,b3,45),(HX_("arrow ",37,16,fb,b7) + dir),24,false,null(),null());
HXLINE(  73)		returnSelector->animation->addByPrefix(HX_("press",83,53,88,c8),(HX_("arrow push ",6f,8f,44,1c) + dir),24,false,null(),null());
HXLINE(  74)		returnSelector->addOffset(HX_("press",83,53,88,c8),0,-10);
HXLINE(  75)		returnSelector->playAnim(HX_("idle",14,a7,b3,45),null(),null(),null());
HXLINE(  77)		return returnSelector;
            	}


HX_DEFINE_DYNAMIC_FUNC4(Selector_obj,createSelector,return )

void Selector_obj::update(Float elapsed){
            	HX_STACKFRAME(&_hx_pos_15faad70344a4613_81_update)
HXLINE(  82)		this->super::update(elapsed);
HXLINE(  83)		{
HXLINE(  83)			int _g = 0;
HXDLIN(  83)			int _g1 = this->objectArray->length;
HXDLIN(  83)			while((_g < _g1)){
HXLINE(  83)				_g = (_g + 1);
HXDLIN(  83)				int object = (_g - 1);
HXLINE(  84)				this->objectArray->__get(object).StaticCast<  ::flixel::FlxSprite >()->setPosition((this->x + this->positionLog->__get(object).StaticCast< ::Array< Float > >()->__get(0)),(this->y + this->positionLog->__get(object).StaticCast< ::Array< Float > >()->__get(1)));
            			}
            		}
            	}


void Selector_obj::selectorPlay(::String whichSelector,::String __o_animPlayed){
            		::String animPlayed = __o_animPlayed;
            		if (::hx::IsNull(__o_animPlayed)) animPlayed = HX_("idle",14,a7,b3,45);
            	HX_STACKFRAME(&_hx_pos_15faad70344a4613_89_selectorPlay)
HXDLIN(  89)		::String _hx_switch_0 = whichSelector;
            		if (  (_hx_switch_0==HX_("left",07,08,b0,47)) ){
HXLINE(  92)			this->leftSelector->playAnim(animPlayed,null(),null(),null());
HXDLIN(  92)			goto _hx_goto_4;
            		}
            		if (  (_hx_switch_0==HX_("right",dc,0b,64,e9)) ){
HXLINE(  94)			this->rightSelector->playAnim(animPlayed,null(),null(),null());
HXDLIN(  94)			goto _hx_goto_4;
            		}
            		_hx_goto_4:;
            	}


HX_DEFINE_DYNAMIC_FUNC2(Selector_obj,selectorPlay,(void))

 ::Dynamic Selector_obj::add( ::Dynamic _tmp_object){
            	HX_STACKFRAME(&_hx_pos_15faad70344a4613_102_add)
HXLINE( 103)		 ::flixel::FlxSprite object = ( ( ::flixel::FlxSprite)(_tmp_object) );
HXDLIN( 103)		this->objectArray->push(object);
HXLINE( 104)		this->positionLog->push(::Array_obj< Float >::__new(2)->init(0,object->x)->init(1,object->y));
HXLINE( 105)		return this->super::add(object);
            	}



::hx::ObjectPtr< Selector_obj > Selector_obj::__new(::hx::Null< Float >  __o_x,::hx::Null< Float >  __o_y,::String word,::Array< ::String > options,::hx::Null< bool >  __o_fpsCap,::hx::Null< bool >  __o_darkBG) {
	::hx::ObjectPtr< Selector_obj > __this = new Selector_obj();
	__this->__construct(__o_x,__o_y,word,options,__o_fpsCap,__o_darkBG);
	return __this;
}

::hx::ObjectPtr< Selector_obj > Selector_obj::__alloc(::hx::Ctx *_hx_ctx,::hx::Null< Float >  __o_x,::hx::Null< Float >  __o_y,::String word,::Array< ::String > options,::hx::Null< bool >  __o_fpsCap,::hx::Null< bool >  __o_darkBG) {
	Selector_obj *__this = (Selector_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(Selector_obj), true, "gameObjects.userInterface.menu.Selector"));
	*(void **)__this = Selector_obj::_hx_vtable;
	__this->__construct(__o_x,__o_y,word,options,__o_fpsCap,__o_darkBG);
	return __this;
}

Selector_obj::Selector_obj()
{
}

void Selector_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Selector);
	HX_MARK_MEMBER_NAME(leftSelector,"leftSelector");
	HX_MARK_MEMBER_NAME(rightSelector,"rightSelector");
	HX_MARK_MEMBER_NAME(optionChosen,"optionChosen");
	HX_MARK_MEMBER_NAME(chosenOptionString,"chosenOptionString");
	HX_MARK_MEMBER_NAME(options,"options");
	HX_MARK_MEMBER_NAME(fpsCap,"fpsCap");
	HX_MARK_MEMBER_NAME(darkBG,"darkBG");
	HX_MARK_MEMBER_NAME(objectArray,"objectArray");
	HX_MARK_MEMBER_NAME(positionLog,"positionLog");
	 ::flixel::group::FlxTypedSpriteGroup_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void Selector_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(leftSelector,"leftSelector");
	HX_VISIT_MEMBER_NAME(rightSelector,"rightSelector");
	HX_VISIT_MEMBER_NAME(optionChosen,"optionChosen");
	HX_VISIT_MEMBER_NAME(chosenOptionString,"chosenOptionString");
	HX_VISIT_MEMBER_NAME(options,"options");
	HX_VISIT_MEMBER_NAME(fpsCap,"fpsCap");
	HX_VISIT_MEMBER_NAME(darkBG,"darkBG");
	HX_VISIT_MEMBER_NAME(objectArray,"objectArray");
	HX_VISIT_MEMBER_NAME(positionLog,"positionLog");
	 ::flixel::group::FlxTypedSpriteGroup_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val Selector_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"add") ) { return ::hx::Val( add_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"fpsCap") ) { return ::hx::Val( fpsCap ); }
		if (HX_FIELD_EQ(inName,"darkBG") ) { return ::hx::Val( darkBG ); }
		if (HX_FIELD_EQ(inName,"update") ) { return ::hx::Val( update_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"options") ) { return ::hx::Val( options ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"objectArray") ) { return ::hx::Val( objectArray ); }
		if (HX_FIELD_EQ(inName,"positionLog") ) { return ::hx::Val( positionLog ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"leftSelector") ) { return ::hx::Val( leftSelector ); }
		if (HX_FIELD_EQ(inName,"optionChosen") ) { return ::hx::Val( optionChosen ); }
		if (HX_FIELD_EQ(inName,"selectorPlay") ) { return ::hx::Val( selectorPlay_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"rightSelector") ) { return ::hx::Val( rightSelector ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"createSelector") ) { return ::hx::Val( createSelector_dyn() ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"chosenOptionString") ) { return ::hx::Val( chosenOptionString ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val Selector_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"fpsCap") ) { fpsCap=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"darkBG") ) { darkBG=inValue.Cast< bool >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"options") ) { options=inValue.Cast< ::Array< ::String > >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"objectArray") ) { objectArray=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		if (HX_FIELD_EQ(inName,"positionLog") ) { positionLog=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"leftSelector") ) { leftSelector=inValue.Cast<  ::meta::data::dependency::FNFSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"optionChosen") ) { optionChosen=inValue.Cast<  ::meta::data::font::Alphabet >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"rightSelector") ) { rightSelector=inValue.Cast<  ::meta::data::dependency::FNFSprite >(); return inValue; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"chosenOptionString") ) { chosenOptionString=inValue.Cast< ::String >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Selector_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("leftSelector",46,d6,b0,52));
	outFields->push(HX_("rightSelector",1b,37,7c,1f));
	outFields->push(HX_("optionChosen",07,25,76,2a));
	outFields->push(HX_("chosenOptionString",f8,5c,b6,a4));
	outFields->push(HX_("options",5e,33,fe,df));
	outFields->push(HX_("fpsCap",a9,7b,7e,91));
	outFields->push(HX_("darkBG",bb,17,3a,21));
	outFields->push(HX_("objectArray",5a,8a,be,94));
	outFields->push(HX_("positionLog",5b,7b,58,ff));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo Selector_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::meta::data::dependency::FNFSprite */ ,(int)offsetof(Selector_obj,leftSelector),HX_("leftSelector",46,d6,b0,52)},
	{::hx::fsObject /*  ::meta::data::dependency::FNFSprite */ ,(int)offsetof(Selector_obj,rightSelector),HX_("rightSelector",1b,37,7c,1f)},
	{::hx::fsObject /*  ::meta::data::font::Alphabet */ ,(int)offsetof(Selector_obj,optionChosen),HX_("optionChosen",07,25,76,2a)},
	{::hx::fsString,(int)offsetof(Selector_obj,chosenOptionString),HX_("chosenOptionString",f8,5c,b6,a4)},
	{::hx::fsObject /* ::Array< ::String > */ ,(int)offsetof(Selector_obj,options),HX_("options",5e,33,fe,df)},
	{::hx::fsBool,(int)offsetof(Selector_obj,fpsCap),HX_("fpsCap",a9,7b,7e,91)},
	{::hx::fsBool,(int)offsetof(Selector_obj,darkBG),HX_("darkBG",bb,17,3a,21)},
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(Selector_obj,objectArray),HX_("objectArray",5a,8a,be,94)},
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(Selector_obj,positionLog),HX_("positionLog",5b,7b,58,ff)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *Selector_obj_sStaticStorageInfo = 0;
#endif

static ::String Selector_obj_sMemberFields[] = {
	HX_("leftSelector",46,d6,b0,52),
	HX_("rightSelector",1b,37,7c,1f),
	HX_("optionChosen",07,25,76,2a),
	HX_("chosenOptionString",f8,5c,b6,a4),
	HX_("options",5e,33,fe,df),
	HX_("fpsCap",a9,7b,7e,91),
	HX_("darkBG",bb,17,3a,21),
	HX_("createSelector",3b,b2,a7,03),
	HX_("update",09,86,05,87),
	HX_("selectorPlay",b3,08,22,ea),
	HX_("objectArray",5a,8a,be,94),
	HX_("positionLog",5b,7b,58,ff),
	HX_("add",21,f2,49,00),
	::String(null()) };

::hx::Class Selector_obj::__mClass;

void Selector_obj::__register()
{
	Selector_obj _hx_dummy;
	Selector_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("gameObjects.userInterface.menu.Selector",02,6e,4d,4d);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(Selector_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< Selector_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Selector_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Selector_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace gameObjects
} // end namespace userInterface
} // end namespace menu

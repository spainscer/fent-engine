// Generated by Haxe 4.1.5
#include <hxcpp.h>

#ifndef INCLUDED_IntIterator
#include <IntIterator.h>
#endif
#ifndef INCLUDED_Reflect
#include <Reflect.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_Type
#include <Type.h>
#endif
#ifndef INCLUDED_haxe_Exception
#include <haxe/Exception.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_Log
#include <haxe/Log.h>
#endif
#ifndef INCLUDED_haxe_ds_BalancedTree
#include <haxe/ds/BalancedTree.h>
#endif
#ifndef INCLUDED_haxe_ds_EnumValueMap
#include <haxe/ds/EnumValueMap.h>
#endif
#ifndef INCLUDED_haxe_ds_IntMap
#include <haxe/ds/IntMap.h>
#endif
#ifndef INCLUDED_haxe_ds_ObjectMap
#include <haxe/ds/ObjectMap.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_hscript_CType
#include <hscript/CType.h>
#endif
#ifndef INCLUDED_hscript_Const
#include <hscript/Const.h>
#endif
#ifndef INCLUDED_hscript_Error
#include <hscript/Error.h>
#endif
#ifndef INCLUDED_hscript_Expr
#include <hscript/Expr.h>
#endif
#ifndef INCLUDED_hscript_Interp
#include <hscript/Interp.h>
#endif
#ifndef INCLUDED_hscript__Interp_Stop
#include <hscript/_Interp/Stop.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_f37559d470356c9e_48_new,"hscript.Interp","new",0xf7e71101,"hscript.Interp.new","hscript/Interp.hx",48,0xf078416e)
HX_LOCAL_STACK_FRAME(_hx_pos_f37559d470356c9e_55_resetVariables,"hscript.Interp","resetVariables",0x6cebf7e7,"hscript.Interp.resetVariables","hscript/Interp.hx",55,0xf078416e)
HX_LOCAL_STACK_FRAME(_hx_pos_f37559d470356c9e_60_resetVariables,"hscript.Interp","resetVariables",0x6cebf7e7,"hscript.Interp.resetVariables","hscript/Interp.hx",60,0xf078416e)
HX_LOCAL_STACK_FRAME(_hx_pos_f37559d470356c9e_73_posInfos,"hscript.Interp","posInfos",0x444859d0,"hscript.Interp.posInfos","hscript/Interp.hx",73,0xf078416e)
HX_LOCAL_STACK_FRAME(_hx_pos_f37559d470356c9e_79_initOps,"hscript.Interp","initOps",0xe1420823,"hscript.Interp.initOps","hscript/Interp.hx",79,0xf078416e)
HX_LOCAL_STACK_FRAME(_hx_pos_f37559d470356c9e_80_initOps,"hscript.Interp","initOps",0xe1420823,"hscript.Interp.initOps","hscript/Interp.hx",80,0xf078416e)
HX_LOCAL_STACK_FRAME(_hx_pos_f37559d470356c9e_81_initOps,"hscript.Interp","initOps",0xe1420823,"hscript.Interp.initOps","hscript/Interp.hx",81,0xf078416e)
HX_LOCAL_STACK_FRAME(_hx_pos_f37559d470356c9e_82_initOps,"hscript.Interp","initOps",0xe1420823,"hscript.Interp.initOps","hscript/Interp.hx",82,0xf078416e)
HX_LOCAL_STACK_FRAME(_hx_pos_f37559d470356c9e_83_initOps,"hscript.Interp","initOps",0xe1420823,"hscript.Interp.initOps","hscript/Interp.hx",83,0xf078416e)
HX_LOCAL_STACK_FRAME(_hx_pos_f37559d470356c9e_84_initOps,"hscript.Interp","initOps",0xe1420823,"hscript.Interp.initOps","hscript/Interp.hx",84,0xf078416e)
HX_LOCAL_STACK_FRAME(_hx_pos_f37559d470356c9e_85_initOps,"hscript.Interp","initOps",0xe1420823,"hscript.Interp.initOps","hscript/Interp.hx",85,0xf078416e)
HX_LOCAL_STACK_FRAME(_hx_pos_f37559d470356c9e_86_initOps,"hscript.Interp","initOps",0xe1420823,"hscript.Interp.initOps","hscript/Interp.hx",86,0xf078416e)
HX_LOCAL_STACK_FRAME(_hx_pos_f37559d470356c9e_87_initOps,"hscript.Interp","initOps",0xe1420823,"hscript.Interp.initOps","hscript/Interp.hx",87,0xf078416e)
HX_LOCAL_STACK_FRAME(_hx_pos_f37559d470356c9e_88_initOps,"hscript.Interp","initOps",0xe1420823,"hscript.Interp.initOps","hscript/Interp.hx",88,0xf078416e)
HX_LOCAL_STACK_FRAME(_hx_pos_f37559d470356c9e_89_initOps,"hscript.Interp","initOps",0xe1420823,"hscript.Interp.initOps","hscript/Interp.hx",89,0xf078416e)
HX_LOCAL_STACK_FRAME(_hx_pos_f37559d470356c9e_90_initOps,"hscript.Interp","initOps",0xe1420823,"hscript.Interp.initOps","hscript/Interp.hx",90,0xf078416e)
HX_LOCAL_STACK_FRAME(_hx_pos_f37559d470356c9e_91_initOps,"hscript.Interp","initOps",0xe1420823,"hscript.Interp.initOps","hscript/Interp.hx",91,0xf078416e)
HX_LOCAL_STACK_FRAME(_hx_pos_f37559d470356c9e_92_initOps,"hscript.Interp","initOps",0xe1420823,"hscript.Interp.initOps","hscript/Interp.hx",92,0xf078416e)
HX_LOCAL_STACK_FRAME(_hx_pos_f37559d470356c9e_93_initOps,"hscript.Interp","initOps",0xe1420823,"hscript.Interp.initOps","hscript/Interp.hx",93,0xf078416e)
HX_LOCAL_STACK_FRAME(_hx_pos_f37559d470356c9e_94_initOps,"hscript.Interp","initOps",0xe1420823,"hscript.Interp.initOps","hscript/Interp.hx",94,0xf078416e)
HX_LOCAL_STACK_FRAME(_hx_pos_f37559d470356c9e_95_initOps,"hscript.Interp","initOps",0xe1420823,"hscript.Interp.initOps","hscript/Interp.hx",95,0xf078416e)
HX_LOCAL_STACK_FRAME(_hx_pos_f37559d470356c9e_96_initOps,"hscript.Interp","initOps",0xe1420823,"hscript.Interp.initOps","hscript/Interp.hx",96,0xf078416e)
HX_LOCAL_STACK_FRAME(_hx_pos_f37559d470356c9e_97_initOps,"hscript.Interp","initOps",0xe1420823,"hscript.Interp.initOps","hscript/Interp.hx",97,0xf078416e)
HX_LOCAL_STACK_FRAME(_hx_pos_f37559d470356c9e_99_initOps,"hscript.Interp","initOps",0xe1420823,"hscript.Interp.initOps","hscript/Interp.hx",99,0xf078416e)
HX_LOCAL_STACK_FRAME(_hx_pos_f37559d470356c9e_100_initOps,"hscript.Interp","initOps",0xe1420823,"hscript.Interp.initOps","hscript/Interp.hx",100,0xf078416e)
HX_LOCAL_STACK_FRAME(_hx_pos_f37559d470356c9e_101_initOps,"hscript.Interp","initOps",0xe1420823,"hscript.Interp.initOps","hscript/Interp.hx",101,0xf078416e)
HX_LOCAL_STACK_FRAME(_hx_pos_f37559d470356c9e_102_initOps,"hscript.Interp","initOps",0xe1420823,"hscript.Interp.initOps","hscript/Interp.hx",102,0xf078416e)
HX_LOCAL_STACK_FRAME(_hx_pos_f37559d470356c9e_103_initOps,"hscript.Interp","initOps",0xe1420823,"hscript.Interp.initOps","hscript/Interp.hx",103,0xf078416e)
HX_LOCAL_STACK_FRAME(_hx_pos_f37559d470356c9e_104_initOps,"hscript.Interp","initOps",0xe1420823,"hscript.Interp.initOps","hscript/Interp.hx",104,0xf078416e)
HX_LOCAL_STACK_FRAME(_hx_pos_f37559d470356c9e_105_initOps,"hscript.Interp","initOps",0xe1420823,"hscript.Interp.initOps","hscript/Interp.hx",105,0xf078416e)
HX_LOCAL_STACK_FRAME(_hx_pos_f37559d470356c9e_106_initOps,"hscript.Interp","initOps",0xe1420823,"hscript.Interp.initOps","hscript/Interp.hx",106,0xf078416e)
HX_LOCAL_STACK_FRAME(_hx_pos_f37559d470356c9e_107_initOps,"hscript.Interp","initOps",0xe1420823,"hscript.Interp.initOps","hscript/Interp.hx",107,0xf078416e)
HX_LOCAL_STACK_FRAME(_hx_pos_f37559d470356c9e_108_initOps,"hscript.Interp","initOps",0xe1420823,"hscript.Interp.initOps","hscript/Interp.hx",108,0xf078416e)
HX_LOCAL_STACK_FRAME(_hx_pos_f37559d470356c9e_109_initOps,"hscript.Interp","initOps",0xe1420823,"hscript.Interp.initOps","hscript/Interp.hx",109,0xf078416e)
HX_LOCAL_STACK_FRAME(_hx_pos_f37559d470356c9e_110_initOps,"hscript.Interp","initOps",0xe1420823,"hscript.Interp.initOps","hscript/Interp.hx",110,0xf078416e)
HX_LOCAL_STACK_FRAME(_hx_pos_f37559d470356c9e_111_initOps,"hscript.Interp","initOps",0xe1420823,"hscript.Interp.initOps","hscript/Interp.hx",111,0xf078416e)
HX_LOCAL_STACK_FRAME(_hx_pos_f37559d470356c9e_76_initOps,"hscript.Interp","initOps",0xe1420823,"hscript.Interp.initOps","hscript/Interp.hx",76,0xf078416e)
HX_LOCAL_STACK_FRAME(_hx_pos_f37559d470356c9e_114_setVar,"hscript.Interp","setVar",0xedd18664,"hscript.Interp.setVar","hscript/Interp.hx",114,0xf078416e)
HX_LOCAL_STACK_FRAME(_hx_pos_f37559d470356c9e_119_assign,"hscript.Interp","assign",0xca66602e,"hscript.Interp.assign","hscript/Interp.hx",119,0xf078416e)
HX_LOCAL_STACK_FRAME(_hx_pos_f37559d470356c9e_148_assignOp,"hscript.Interp","assignOp",0xf8e18cef,"hscript.Interp.assignOp","hscript/Interp.hx",148,0xf078416e)
HX_LOCAL_STACK_FRAME(_hx_pos_f37559d470356c9e_146_assignOp,"hscript.Interp","assignOp",0xf8e18cef,"hscript.Interp.assignOp","hscript/Interp.hx",146,0xf078416e)
HX_LOCAL_STACK_FRAME(_hx_pos_f37559d470356c9e_151_evalAssignOp,"hscript.Interp","evalAssignOp",0xa46efc2b,"hscript.Interp.evalAssignOp","hscript/Interp.hx",151,0xf078416e)
HX_LOCAL_STACK_FRAME(_hx_pos_f37559d470356c9e_187_increment,"hscript.Interp","increment",0x1e81f590,"hscript.Interp.increment","hscript/Interp.hx",187,0xf078416e)
HX_LOCAL_STACK_FRAME(_hx_pos_f37559d470356c9e_234_execute,"hscript.Interp","execute",0xe1c3af56,"hscript.Interp.execute","hscript/Interp.hx",234,0xf078416e)
HX_LOCAL_STACK_FRAME(_hx_pos_f37559d470356c9e_242_exprReturn,"hscript.Interp","exprReturn",0x8cfbf144,"hscript.Interp.exprReturn","hscript/Interp.hx",242,0xf078416e)
HX_LOCAL_STACK_FRAME(_hx_pos_f37559d470356c9e_257_duplicate,"hscript.Interp","duplicate",0x8d9a10ec,"hscript.Interp.duplicate","hscript/Interp.hx",257,0xf078416e)
HX_LOCAL_STACK_FRAME(_hx_pos_f37559d470356c9e_265_restore,"hscript.Interp","restore",0x80670c6f,"hscript.Interp.restore","hscript/Interp.hx",265,0xf078416e)
HX_LOCAL_STACK_FRAME(_hx_pos_f37559d470356c9e_273_error,"hscript.Interp","error",0xe68736a9,"hscript.Interp.error","hscript/Interp.hx",273,0xf078416e)
HX_LOCAL_STACK_FRAME(_hx_pos_f37559d470356c9e_281_rethrow,"hscript.Interp","rethrow",0x0be155b4,"hscript.Interp.rethrow","hscript/Interp.hx",281,0xf078416e)
HX_LOCAL_STACK_FRAME(_hx_pos_f37559d470356c9e_285_resolve,"hscript.Interp","resolve",0x7d16b80d,"hscript.Interp.resolve","hscript/Interp.hx",285,0xf078416e)
HX_LOCAL_STACK_FRAME(_hx_pos_f37559d470356c9e_292_expr,"hscript.Interp","expr",0xec634974,"hscript.Interp.expr","hscript/Interp.hx",292,0xf078416e)
HX_LOCAL_STACK_FRAME(_hx_pos_f37559d470356c9e_383_expr,"hscript.Interp","expr",0xec634974,"hscript.Interp.expr","hscript/Interp.hx",383,0xf078416e)
HX_LOCAL_STACK_FRAME(_hx_pos_f37559d470356c9e_537_doWhileLoop,"hscript.Interp","doWhileLoop",0x813d4b4b,"hscript.Interp.doWhileLoop","hscript/Interp.hx",537,0xf078416e)
HX_LOCAL_STACK_FRAME(_hx_pos_f37559d470356c9e_547_whileLoop,"hscript.Interp","whileLoop",0xce1b3216,"hscript.Interp.whileLoop","hscript/Interp.hx",547,0xf078416e)
HX_LOCAL_STACK_FRAME(_hx_pos_f37559d470356c9e_556_makeIterator,"hscript.Interp","makeIterator",0x634d013b,"hscript.Interp.makeIterator","hscript/Interp.hx",556,0xf078416e)
HX_LOCAL_STACK_FRAME(_hx_pos_f37559d470356c9e_571_forLoop,"hscript.Interp","forLoop",0xdf1ff72e,"hscript.Interp.forLoop","hscript/Interp.hx",571,0xf078416e)
HX_LOCAL_STACK_FRAME(_hx_pos_f37559d470356c9e_583_loopRun,"hscript.Interp","loopRun",0x3622b468,"hscript.Interp.loopRun","hscript/Interp.hx",583,0xf078416e)
HX_LOCAL_STACK_FRAME(_hx_pos_f37559d470356c9e_600_isMap,"hscript.Interp","isMap",0x34ae9fb3,"hscript.Interp.isMap","hscript/Interp.hx",600,0xf078416e)
HX_LOCAL_STACK_FRAME(_hx_pos_f37559d470356c9e_604_getMapValue,"hscript.Interp","getMapValue",0x1594fb8c,"hscript.Interp.getMapValue","hscript/Interp.hx",604,0xf078416e)
HX_LOCAL_STACK_FRAME(_hx_pos_f37559d470356c9e_608_setMapValue,"hscript.Interp","setMapValue",0x20020298,"hscript.Interp.setMapValue","hscript/Interp.hx",608,0xf078416e)
HX_LOCAL_STACK_FRAME(_hx_pos_f37559d470356c9e_611_makeMap,"hscript.Interp","makeMap",0x71d5966f,"hscript.Interp.makeMap","hscript/Interp.hx",611,0xf078416e)
HX_LOCAL_STACK_FRAME(_hx_pos_f37559d470356c9e_650_get,"hscript.Interp","get",0xf7e1c137,"hscript.Interp.get","hscript/Interp.hx",650,0xf078416e)
HX_LOCAL_STACK_FRAME(_hx_pos_f37559d470356c9e_666_set,"hscript.Interp","set",0xf7eadc43,"hscript.Interp.set","hscript/Interp.hx",666,0xf078416e)
HX_LOCAL_STACK_FRAME(_hx_pos_f37559d470356c9e_673_fcall,"hscript.Interp","fcall",0x6ff6aee5,"hscript.Interp.fcall","hscript/Interp.hx",673,0xf078416e)
HX_LOCAL_STACK_FRAME(_hx_pos_f37559d470356c9e_677_call,"hscript.Interp","call",0xeaff64dd,"hscript.Interp.call","hscript/Interp.hx",677,0xf078416e)
HX_LOCAL_STACK_FRAME(_hx_pos_f37559d470356c9e_680_cnew,"hscript.Interp","cnew",0xeb093c1c,"hscript.Interp.cnew","hscript/Interp.hx",680,0xf078416e)
namespace hscript{

void Interp_obj::__construct(){
            	HX_GC_STACKFRAME(&_hx_pos_f37559d470356c9e_48_new)
HXLINE(  49)		this->locals =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXLINE(  50)		this->declared = ::Array_obj< ::Dynamic>::__new();
HXLINE(  51)		this->resetVariables();
HXLINE(  52)		this->initOps();
            	}

Dynamic Interp_obj::__CreateEmpty() { return new Interp_obj; }

void *Interp_obj::_hx_vtable = 0;

Dynamic Interp_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< Interp_obj > _hx_result = new Interp_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Interp_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x2a95eb9f;
}

void Interp_obj::resetVariables(){
            	HX_GC_STACKFRAME(&_hx_pos_f37559d470356c9e_55_resetVariables)
HXDLIN(  55)		 ::hscript::Interp _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE(  56)		this->variables =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXLINE(  57)		{
HXLINE(  57)			 ::Dynamic value = null();
HXDLIN(  57)			this->variables->set(HX_("null",87,9e,0e,49),value);
            		}
HXLINE(  58)		this->variables->set(HX_("true",4e,a7,03,4d),true);
HXLINE(  59)		this->variables->set(HX_("false",a3,35,4f,fb),false);
HXLINE(  60)		{
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::hscript::Interp,_gthis) HXARGC(1)
            			void _hx_run(::cpp::VirtualArray el){
            				HX_GC_STACKFRAME(&_hx_pos_f37559d470356c9e_60_resetVariables)
HXLINE(  61)				 ::Dynamic inf = _gthis->posInfos();
HXLINE(  62)				 ::Dynamic v = el->shift();
HXLINE(  63)				if ((el->get_length() > 0)) {
HXLINE(  63)					inf->__SetField(HX_("customParams",d7,51,18,ed),el,::hx::paccDynamic);
            				}
HXLINE(  64)				 ::Dynamic value = ::haxe::Log_obj::trace;
HXDLIN(  64)				value(::Std_obj::string(v),inf);
            			}
            			HX_END_LOCAL_FUNC1((void))

HXLINE(  60)			::Dynamic this1 = this->variables;
HXDLIN(  60)			( ( ::haxe::ds::StringMap)(this1) )->set(HX_("trace",85,8e,1f,16),::Reflect_obj::makeVarArgs( ::Dynamic(new _hx_Closure_0(_gthis))));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Interp_obj,resetVariables,(void))

 ::Dynamic Interp_obj::posInfos(){
            	HX_STACKFRAME(&_hx_pos_f37559d470356c9e_73_posInfos)
HXDLIN(  73)		return  ::Dynamic(::hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("fileName",e7,5a,43,62),HX_("hscript",73,8c,18,2c))
            			->setFixed(1,HX_("lineNumber",dd,81,22,76),0));
            	}


HX_DEFINE_DYNAMIC_FUNC0(Interp_obj,posInfos,return )

void Interp_obj::initOps(){
            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::hscript::Interp,me) HXARGC(2)
            		 ::Dynamic _hx_run( ::hscript::Expr e1, ::hscript::Expr e2){
            			HX_GC_STACKFRAME(&_hx_pos_f37559d470356c9e_79_initOps)
HXLINE(  79)			 ::Dynamic _hx_tmp = me->expr(e1);
HXDLIN(  79)			return (_hx_tmp + me->expr(e2));
            		}
            		HX_END_LOCAL_FUNC2(return)

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_1, ::hscript::Interp,me) HXARGC(2)
            		Float _hx_run( ::hscript::Expr e1, ::hscript::Expr e2){
            			HX_GC_STACKFRAME(&_hx_pos_f37559d470356c9e_80_initOps)
HXLINE(  80)			 ::Dynamic _hx_tmp = me->expr(e1);
HXDLIN(  80)			return (( (Float)(_hx_tmp) ) - ( (Float)(me->expr(e2)) ));
            		}
            		HX_END_LOCAL_FUNC2(return)

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_2, ::hscript::Interp,me) HXARGC(2)
            		Float _hx_run( ::hscript::Expr e1, ::hscript::Expr e2){
            			HX_GC_STACKFRAME(&_hx_pos_f37559d470356c9e_81_initOps)
HXLINE(  81)			 ::Dynamic _hx_tmp = me->expr(e1);
HXDLIN(  81)			return (( (Float)(_hx_tmp) ) * ( (Float)(me->expr(e2)) ));
            		}
            		HX_END_LOCAL_FUNC2(return)

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_3, ::hscript::Interp,me) HXARGC(2)
            		Float _hx_run( ::hscript::Expr e1, ::hscript::Expr e2){
            			HX_GC_STACKFRAME(&_hx_pos_f37559d470356c9e_82_initOps)
HXLINE(  82)			 ::Dynamic _hx_tmp = me->expr(e1);
HXDLIN(  82)			return (( (Float)(_hx_tmp) ) / ( (Float)(me->expr(e2)) ));
            		}
            		HX_END_LOCAL_FUNC2(return)

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_4, ::hscript::Interp,me) HXARGC(2)
            		Float _hx_run( ::hscript::Expr e1, ::hscript::Expr e2){
            			HX_GC_STACKFRAME(&_hx_pos_f37559d470356c9e_83_initOps)
HXLINE(  83)			 ::Dynamic _hx_tmp = me->expr(e1);
HXDLIN(  83)			return ::hx::Mod(_hx_tmp,me->expr(e2));
            		}
            		HX_END_LOCAL_FUNC2(return)

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_5, ::hscript::Interp,me) HXARGC(2)
            		int _hx_run( ::hscript::Expr e1, ::hscript::Expr e2){
            			HX_GC_STACKFRAME(&_hx_pos_f37559d470356c9e_84_initOps)
HXLINE(  84)			 ::Dynamic _hx_tmp = me->expr(e1);
HXDLIN(  84)			return (( (int)(_hx_tmp) ) & ( (int)(me->expr(e2)) ));
            		}
            		HX_END_LOCAL_FUNC2(return)

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_6, ::hscript::Interp,me) HXARGC(2)
            		int _hx_run( ::hscript::Expr e1, ::hscript::Expr e2){
            			HX_GC_STACKFRAME(&_hx_pos_f37559d470356c9e_85_initOps)
HXLINE(  85)			 ::Dynamic _hx_tmp = me->expr(e1);
HXDLIN(  85)			return (( (int)(_hx_tmp) ) | ( (int)(me->expr(e2)) ));
            		}
            		HX_END_LOCAL_FUNC2(return)

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_7, ::hscript::Interp,me) HXARGC(2)
            		int _hx_run( ::hscript::Expr e1, ::hscript::Expr e2){
            			HX_GC_STACKFRAME(&_hx_pos_f37559d470356c9e_86_initOps)
HXLINE(  86)			 ::Dynamic _hx_tmp = me->expr(e1);
HXDLIN(  86)			return (( (int)(_hx_tmp) ) ^ ( (int)(me->expr(e2)) ));
            		}
            		HX_END_LOCAL_FUNC2(return)

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_8, ::hscript::Interp,me) HXARGC(2)
            		int _hx_run( ::hscript::Expr e1, ::hscript::Expr e2){
            			HX_GC_STACKFRAME(&_hx_pos_f37559d470356c9e_87_initOps)
HXLINE(  87)			 ::Dynamic _hx_tmp = me->expr(e1);
HXDLIN(  87)			return (( (int)(_hx_tmp) ) << ( (int)(me->expr(e2)) ));
            		}
            		HX_END_LOCAL_FUNC2(return)

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_9, ::hscript::Interp,me) HXARGC(2)
            		int _hx_run( ::hscript::Expr e1, ::hscript::Expr e2){
            			HX_GC_STACKFRAME(&_hx_pos_f37559d470356c9e_88_initOps)
HXLINE(  88)			 ::Dynamic _hx_tmp = me->expr(e1);
HXDLIN(  88)			return (( (int)(_hx_tmp) ) >> ( (int)(me->expr(e2)) ));
            		}
            		HX_END_LOCAL_FUNC2(return)

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_10, ::hscript::Interp,me) HXARGC(2)
            		int _hx_run( ::hscript::Expr e1, ::hscript::Expr e2){
            			HX_GC_STACKFRAME(&_hx_pos_f37559d470356c9e_89_initOps)
HXLINE(  89)			 ::Dynamic _hx_tmp = me->expr(e1);
HXDLIN(  89)			return ::hx::UShr(( (int)(_hx_tmp) ),( (int)(me->expr(e2)) ));
            		}
            		HX_END_LOCAL_FUNC2(return)

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_11, ::hscript::Interp,me) HXARGC(2)
            		bool _hx_run( ::hscript::Expr e1, ::hscript::Expr e2){
            			HX_GC_STACKFRAME(&_hx_pos_f37559d470356c9e_90_initOps)
HXLINE(  90)			 ::Dynamic _hx_tmp = me->expr(e1);
HXDLIN(  90)			return ::hx::IsEq( _hx_tmp,me->expr(e2) );
            		}
            		HX_END_LOCAL_FUNC2(return)

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_12, ::hscript::Interp,me) HXARGC(2)
            		bool _hx_run( ::hscript::Expr e1, ::hscript::Expr e2){
            			HX_GC_STACKFRAME(&_hx_pos_f37559d470356c9e_91_initOps)
HXLINE(  91)			 ::Dynamic _hx_tmp = me->expr(e1);
HXDLIN(  91)			return ::hx::IsNotEq( _hx_tmp,me->expr(e2) );
            		}
            		HX_END_LOCAL_FUNC2(return)

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_13, ::hscript::Interp,me) HXARGC(2)
            		bool _hx_run( ::hscript::Expr e1, ::hscript::Expr e2){
            			HX_GC_STACKFRAME(&_hx_pos_f37559d470356c9e_92_initOps)
HXLINE(  92)			 ::Dynamic _hx_tmp = me->expr(e1);
HXDLIN(  92)			return ::hx::IsGreaterEq( _hx_tmp,me->expr(e2) );
            		}
            		HX_END_LOCAL_FUNC2(return)

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_14, ::hscript::Interp,me) HXARGC(2)
            		bool _hx_run( ::hscript::Expr e1, ::hscript::Expr e2){
            			HX_GC_STACKFRAME(&_hx_pos_f37559d470356c9e_93_initOps)
HXLINE(  93)			 ::Dynamic _hx_tmp = me->expr(e1);
HXDLIN(  93)			return ::hx::IsLessEq( _hx_tmp,me->expr(e2) );
            		}
            		HX_END_LOCAL_FUNC2(return)

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_15, ::hscript::Interp,me) HXARGC(2)
            		bool _hx_run( ::hscript::Expr e1, ::hscript::Expr e2){
            			HX_GC_STACKFRAME(&_hx_pos_f37559d470356c9e_94_initOps)
HXLINE(  94)			 ::Dynamic _hx_tmp = me->expr(e1);
HXDLIN(  94)			return ::hx::IsGreater( _hx_tmp,me->expr(e2) );
            		}
            		HX_END_LOCAL_FUNC2(return)

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_16, ::hscript::Interp,me) HXARGC(2)
            		bool _hx_run( ::hscript::Expr e1, ::hscript::Expr e2){
            			HX_GC_STACKFRAME(&_hx_pos_f37559d470356c9e_95_initOps)
HXLINE(  95)			 ::Dynamic _hx_tmp = me->expr(e1);
HXDLIN(  95)			return ::hx::IsLess( _hx_tmp,me->expr(e2) );
            		}
            		HX_END_LOCAL_FUNC2(return)

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_17, ::hscript::Interp,me) HXARGC(2)
            		bool _hx_run( ::hscript::Expr e1, ::hscript::Expr e2){
            			HX_GC_STACKFRAME(&_hx_pos_f37559d470356c9e_96_initOps)
HXLINE(  96)			if (::hx::IsNotEq( me->expr(e1),true )) {
HXLINE(  96)				return ::hx::IsEq( me->expr(e2),true );
            			}
            			else {
HXLINE(  96)				return true;
            			}
HXDLIN(  96)			return false;
            		}
            		HX_END_LOCAL_FUNC2(return)

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_18, ::hscript::Interp,me) HXARGC(2)
            		bool _hx_run( ::hscript::Expr e1, ::hscript::Expr e2){
            			HX_GC_STACKFRAME(&_hx_pos_f37559d470356c9e_97_initOps)
HXLINE(  97)			if (::hx::IsEq( me->expr(e1),true )) {
HXLINE(  97)				return ::hx::IsEq( me->expr(e2),true );
            			}
            			else {
HXLINE(  97)				return false;
            			}
HXDLIN(  97)			return false;
            		}
            		HX_END_LOCAL_FUNC2(return)

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_19, ::hscript::Interp,me) HXARGC(2)
            		 ::IntIterator _hx_run( ::hscript::Expr e1, ::hscript::Expr e2){
            			HX_GC_STACKFRAME(&_hx_pos_f37559d470356c9e_99_initOps)
HXLINE(  99)			 ::Dynamic _hx_tmp = me->expr(e1);
HXDLIN(  99)			return  ::IntIterator_obj::__alloc( HX_CTX ,( (int)(_hx_tmp) ),( (int)(me->expr(e2)) ));
            		}
            		HX_END_LOCAL_FUNC2(return)

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_20, ::hscript::Interp,me) HXARGC(2)
            		bool _hx_run( ::hscript::Expr e1, ::hscript::Expr e2){
            			HX_GC_STACKFRAME(&_hx_pos_f37559d470356c9e_100_initOps)
HXLINE( 100)			 ::Dynamic v = me->expr(e1);
HXDLIN( 100)			return ::Std_obj::isOfType(v,me->expr(e2));
            		}
            		HX_END_LOCAL_FUNC2(return)

            		HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_21) HXARGC(2)
            		 ::Dynamic _hx_run( ::Dynamic v1, ::Dynamic v2){
            			HX_GC_STACKFRAME(&_hx_pos_f37559d470356c9e_101_initOps)
HXLINE( 101)			return (v1 + v2);
            		}
            		HX_END_LOCAL_FUNC2(return)

            		HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_22) HXARGC(2)
            		Float _hx_run(Float v1,Float v2){
            			HX_GC_STACKFRAME(&_hx_pos_f37559d470356c9e_102_initOps)
HXLINE( 102)			return (v1 - v2);
            		}
            		HX_END_LOCAL_FUNC2(return)

            		HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_23) HXARGC(2)
            		Float _hx_run(Float v1,Float v2){
            			HX_GC_STACKFRAME(&_hx_pos_f37559d470356c9e_103_initOps)
HXLINE( 103)			return (v1 * v2);
            		}
            		HX_END_LOCAL_FUNC2(return)

            		HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_24) HXARGC(2)
            		Float _hx_run(Float v1,Float v2){
            			HX_GC_STACKFRAME(&_hx_pos_f37559d470356c9e_104_initOps)
HXLINE( 104)			return (v1 / v2);
            		}
            		HX_END_LOCAL_FUNC2(return)

            		HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_25) HXARGC(2)
            		Float _hx_run(Float v1,Float v2){
            			HX_GC_STACKFRAME(&_hx_pos_f37559d470356c9e_105_initOps)
HXLINE( 105)			return ::hx::Mod(v1,v2);
            		}
            		HX_END_LOCAL_FUNC2(return)

            		HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_26) HXARGC(2)
            		int _hx_run(int v1,int v2){
            			HX_GC_STACKFRAME(&_hx_pos_f37559d470356c9e_106_initOps)
HXLINE( 106)			return (v1 & v2);
            		}
            		HX_END_LOCAL_FUNC2(return)

            		HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_27) HXARGC(2)
            		int _hx_run(int v1,int v2){
            			HX_GC_STACKFRAME(&_hx_pos_f37559d470356c9e_107_initOps)
HXLINE( 107)			return (v1 | v2);
            		}
            		HX_END_LOCAL_FUNC2(return)

            		HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_28) HXARGC(2)
            		int _hx_run(int v1,int v2){
            			HX_GC_STACKFRAME(&_hx_pos_f37559d470356c9e_108_initOps)
HXLINE( 108)			return (v1 ^ v2);
            		}
            		HX_END_LOCAL_FUNC2(return)

            		HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_29) HXARGC(2)
            		int _hx_run(int v1,int v2){
            			HX_GC_STACKFRAME(&_hx_pos_f37559d470356c9e_109_initOps)
HXLINE( 109)			return (v1 << v2);
            		}
            		HX_END_LOCAL_FUNC2(return)

            		HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_30) HXARGC(2)
            		int _hx_run(int v1,int v2){
            			HX_GC_STACKFRAME(&_hx_pos_f37559d470356c9e_110_initOps)
HXLINE( 110)			return (v1 >> v2);
            		}
            		HX_END_LOCAL_FUNC2(return)

            		HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_31) HXARGC(2)
            		int _hx_run(int v1,int v2){
            			HX_GC_STACKFRAME(&_hx_pos_f37559d470356c9e_111_initOps)
HXLINE( 111)			return ::hx::UShr(v1,v2);
            		}
            		HX_END_LOCAL_FUNC2(return)

            	HX_GC_STACKFRAME(&_hx_pos_f37559d470356c9e_76_initOps)
HXLINE(  77)		 ::hscript::Interp me = ::hx::ObjectPtr<OBJ_>(this);
HXLINE(  78)		this->binops =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXLINE(  79)		this->binops->set(HX_("+",2b,00,00,00), ::Dynamic(new _hx_Closure_0(me)));
HXLINE(  80)		this->binops->set(HX_("-",2d,00,00,00), ::Dynamic(new _hx_Closure_1(me)));
HXLINE(  81)		this->binops->set(HX_("*",2a,00,00,00), ::Dynamic(new _hx_Closure_2(me)));
HXLINE(  82)		this->binops->set(HX_("/",2f,00,00,00), ::Dynamic(new _hx_Closure_3(me)));
HXLINE(  83)		this->binops->set(HX_("%",25,00,00,00), ::Dynamic(new _hx_Closure_4(me)));
HXLINE(  84)		this->binops->set(HX_("&",26,00,00,00), ::Dynamic(new _hx_Closure_5(me)));
HXLINE(  85)		this->binops->set(HX_("|",7c,00,00,00), ::Dynamic(new _hx_Closure_6(me)));
HXLINE(  86)		this->binops->set(HX_("^",5e,00,00,00), ::Dynamic(new _hx_Closure_7(me)));
HXLINE(  87)		this->binops->set(HX_("<<",80,34,00,00), ::Dynamic(new _hx_Closure_8(me)));
HXLINE(  88)		this->binops->set(HX_(">>",40,36,00,00), ::Dynamic(new _hx_Closure_9(me)));
HXLINE(  89)		this->binops->set(HX_(">>>",fe,41,2f,00), ::Dynamic(new _hx_Closure_10(me)));
HXLINE(  90)		this->binops->set(HX_("==",60,35,00,00), ::Dynamic(new _hx_Closure_11(me)));
HXLINE(  91)		this->binops->set(HX_("!=",fc,1c,00,00), ::Dynamic(new _hx_Closure_12(me)));
HXLINE(  92)		this->binops->set(HX_(">=",3f,36,00,00), ::Dynamic(new _hx_Closure_13(me)));
HXLINE(  93)		this->binops->set(HX_("<=",81,34,00,00), ::Dynamic(new _hx_Closure_14(me)));
HXLINE(  94)		this->binops->set(HX_(">",3e,00,00,00), ::Dynamic(new _hx_Closure_15(me)));
HXLINE(  95)		this->binops->set(HX_("<",3c,00,00,00), ::Dynamic(new _hx_Closure_16(me)));
HXLINE(  96)		this->binops->set(HX_("||",80,6c,00,00), ::Dynamic(new _hx_Closure_17(me)));
HXLINE(  97)		this->binops->set(HX_("&&",40,21,00,00), ::Dynamic(new _hx_Closure_18(me)));
HXLINE(  98)		this->binops->set(HX_("=",3d,00,00,00),this->assign_dyn());
HXLINE(  99)		this->binops->set(HX_("...",ee,0f,23,00), ::Dynamic(new _hx_Closure_19(me)));
HXLINE( 100)		this->binops->set(HX_("is",ea,5b,00,00), ::Dynamic(new _hx_Closure_20(me)));
HXLINE( 101)		this->assignOp(HX_("+=",b2,25,00,00), ::Dynamic(new _hx_Closure_21()));
HXLINE( 102)		this->assignOp(HX_("-=",70,27,00,00), ::Dynamic(new _hx_Closure_22()));
HXLINE( 103)		this->assignOp(HX_("*=",d3,24,00,00), ::Dynamic(new _hx_Closure_23()));
HXLINE( 104)		this->assignOp(HX_("/=",2e,29,00,00), ::Dynamic(new _hx_Closure_24()));
HXLINE( 105)		this->assignOp(HX_("%=",78,20,00,00), ::Dynamic(new _hx_Closure_25()));
HXLINE( 106)		this->assignOp(HX_("&=",57,21,00,00), ::Dynamic(new _hx_Closure_26()));
HXLINE( 107)		this->assignOp(HX_("|=",41,6c,00,00), ::Dynamic(new _hx_Closure_27()));
HXLINE( 108)		this->assignOp(HX_("^=",1f,52,00,00), ::Dynamic(new _hx_Closure_28()));
HXLINE( 109)		this->assignOp(HX_("<<=",bd,bb,2d,00), ::Dynamic(new _hx_Closure_29()));
HXLINE( 110)		this->assignOp(HX_(">>=",fd,41,2f,00), ::Dynamic(new _hx_Closure_30()));
HXLINE( 111)		this->assignOp(HX_(">>>=",7f,7c,2a,29), ::Dynamic(new _hx_Closure_31()));
            	}


HX_DEFINE_DYNAMIC_FUNC0(Interp_obj,initOps,(void))

 ::Dynamic Interp_obj::setVar(::String name, ::Dynamic v){
            	HX_STACKFRAME(&_hx_pos_f37559d470356c9e_114_setVar)
HXLINE( 115)		this->variables->set(name,v);
HXLINE( 116)		return v;
            	}


HX_DEFINE_DYNAMIC_FUNC2(Interp_obj,setVar,return )

 ::Dynamic Interp_obj::assign( ::hscript::Expr e1, ::hscript::Expr e2){
            	HX_STACKFRAME(&_hx_pos_f37559d470356c9e_119_assign)
HXLINE( 120)		 ::Dynamic v = this->expr(e2);
HXLINE( 121)		switch((int)(e1->_hx_getIndex())){
            			case (int)1: {
HXLINE( 122)				::String id = e1->_hx_getString(0);
HXDLIN( 122)				{
HXLINE( 123)					 ::Dynamic l = this->locals->get(id);
HXLINE( 124)					if (::hx::IsNull( l )) {
HXLINE( 125)						this->setVar(id,v);
            					}
            					else {
HXLINE( 127)						l->__SetField(HX_("r",72,00,00,00),v,::hx::paccDynamic);
            					}
            				}
            			}
            			break;
            			case (int)5: {
HXLINE( 128)				::String f = e1->_hx_getString(1);
HXDLIN( 128)				 ::hscript::Expr e = e1->_hx_getObject(0).StaticCast<  ::hscript::Expr >();
HXLINE( 129)				v = this->set(this->expr(e),f,v);
            			}
            			break;
            			case (int)16: {
HXLINE( 130)				 ::hscript::Expr index = e1->_hx_getObject(1).StaticCast<  ::hscript::Expr >();
HXDLIN( 130)				 ::hscript::Expr e = e1->_hx_getObject(0).StaticCast<  ::hscript::Expr >();
HXDLIN( 130)				{
HXLINE( 131)					 ::Dynamic arr = this->expr(e);
HXLINE( 132)					 ::Dynamic index1 = this->expr(index);
HXLINE( 133)					if (::Std_obj::isOfType(arr,::hx::ClassOf< ::haxe::IMap >())) {
HXLINE( 134)						::haxe::IMap_obj::set( ::hx::interface_check(arr,0x09c2bd39),index1,v);
            					}
            					else {
HXLINE( 137)						arr->__SetItem(( (int)(index1) ),v);
            					}
            				}
            			}
            			break;
            			default:{
HXLINE( 141)				 ::hscript::Error e = ::hscript::Error_obj::EInvalidOp(HX_("=",3d,00,00,00));
HXDLIN( 141)				HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(e));
            			}
            		}
HXLINE( 143)		return v;
            	}


HX_DEFINE_DYNAMIC_FUNC2(Interp_obj,assign,return )

void Interp_obj::assignOp(::String op, ::Dynamic fop){
            		HX_BEGIN_LOCAL_FUNC_S3(::hx::LocalFunc,_hx_Closure_0,::String,op, ::hscript::Interp,me, ::Dynamic,fop) HXARGC(2)
            		 ::Dynamic _hx_run( ::hscript::Expr e1, ::hscript::Expr e2){
            			HX_STACKFRAME(&_hx_pos_f37559d470356c9e_148_assignOp)
HXLINE( 148)			return me->evalAssignOp(op,fop,e1,e2);
            		}
            		HX_END_LOCAL_FUNC2(return)

            	HX_STACKFRAME(&_hx_pos_f37559d470356c9e_146_assignOp)
HXLINE( 147)		 ::hscript::Interp me = ::hx::ObjectPtr<OBJ_>(this);
HXLINE( 148)		this->binops->set(op, ::Dynamic(new _hx_Closure_0(op,me,fop)));
            	}


HX_DEFINE_DYNAMIC_FUNC2(Interp_obj,assignOp,(void))

 ::Dynamic Interp_obj::evalAssignOp(::String op, ::Dynamic fop, ::hscript::Expr e1, ::hscript::Expr e2){
            	HX_STACKFRAME(&_hx_pos_f37559d470356c9e_151_evalAssignOp)
HXLINE( 152)		 ::Dynamic v;
HXLINE( 153)		switch((int)(e1->_hx_getIndex())){
            			case (int)1: {
HXLINE( 154)				::String id = e1->_hx_getString(0);
HXDLIN( 154)				{
HXLINE( 155)					 ::Dynamic l = this->locals->get(id);
HXLINE( 156)					 ::Dynamic v1 = this->expr(e1);
HXDLIN( 156)					v = fop(v1,this->expr(e2));
HXLINE( 157)					if (::hx::IsNull( l )) {
HXLINE( 158)						this->setVar(id,v);
            					}
            					else {
HXLINE( 160)						l->__SetField(HX_("r",72,00,00,00),v,::hx::paccDynamic);
            					}
            				}
            			}
            			break;
            			case (int)5: {
HXLINE( 161)				::String f = e1->_hx_getString(1);
HXDLIN( 161)				 ::hscript::Expr e = e1->_hx_getObject(0).StaticCast<  ::hscript::Expr >();
HXDLIN( 161)				{
HXLINE( 162)					 ::Dynamic obj = this->expr(e);
HXLINE( 163)					 ::Dynamic v1 = this->get(obj,f);
HXDLIN( 163)					v = fop(v1,this->expr(e2));
HXLINE( 164)					v = this->set(obj,f,v);
            				}
            			}
            			break;
            			case (int)16: {
HXLINE( 165)				 ::hscript::Expr index = e1->_hx_getObject(1).StaticCast<  ::hscript::Expr >();
HXDLIN( 165)				 ::hscript::Expr e = e1->_hx_getObject(0).StaticCast<  ::hscript::Expr >();
HXDLIN( 165)				{
HXLINE( 166)					 ::Dynamic arr = this->expr(e);
HXLINE( 167)					 ::Dynamic index1 = this->expr(index);
HXLINE( 168)					if (::Std_obj::isOfType(arr,::hx::ClassOf< ::haxe::IMap >())) {
HXLINE( 169)						 ::Dynamic v1 = ::haxe::IMap_obj::get( ::hx::interface_check(arr,0x09c2bd39),index1);
HXDLIN( 169)						v = fop(v1,this->expr(e2));
HXLINE( 170)						::haxe::IMap_obj::set( ::hx::interface_check(arr,0x09c2bd39),index1,v);
            					}
            					else {
HXLINE( 173)						 ::Dynamic arr1 = arr->__GetItem(( (int)(index1) ));
HXDLIN( 173)						v = fop(arr1,this->expr(e2));
HXLINE( 174)						arr->__SetItem(( (int)(index1) ),v);
            					}
            				}
            			}
            			break;
            			default:{
HXLINE( 177)				 ::hscript::Error e = ::hscript::Error_obj::EInvalidOp(op);
HXDLIN( 177)				HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(e));
            			}
            		}
HXLINE( 179)		return v;
            	}


HX_DEFINE_DYNAMIC_FUNC4(Interp_obj,evalAssignOp,return )

 ::Dynamic Interp_obj::increment( ::hscript::Expr e,bool prefix,int delta){
            	HX_STACKFRAME(&_hx_pos_f37559d470356c9e_187_increment)
HXDLIN( 187)		switch((int)(e->_hx_getIndex())){
            			case (int)1: {
HXLINE( 188)				::String id = e->_hx_getString(0);
HXLINE( 189)				 ::Dynamic l = this->locals->get(id);
HXLINE( 190)				 ::Dynamic v;
HXDLIN( 190)				if (::hx::IsNull( l )) {
HXLINE( 190)					v = this->resolve(id);
            				}
            				else {
HXLINE( 190)					v =  ::Dynamic(l->__Field(HX_("r",72,00,00,00),::hx::paccDynamic));
            				}
HXLINE( 191)				if (prefix) {
HXLINE( 192)					v = (v + delta);
HXLINE( 193)					if (::hx::IsNull( l )) {
HXLINE( 193)						this->setVar(id,v);
            					}
            					else {
HXLINE( 193)						l->__SetField(HX_("r",72,00,00,00),v,::hx::paccDynamic);
            					}
            				}
            				else {
HXLINE( 195)					if (::hx::IsNull( l )) {
HXLINE( 195)						this->setVar(id,(v + delta));
            					}
            					else {
HXLINE( 195)						l->__SetField(HX_("r",72,00,00,00),(v + delta),::hx::paccDynamic);
            					}
            				}
HXLINE( 196)				return v;
            			}
            			break;
            			case (int)5: {
HXLINE( 197)				::String f = e->_hx_getString(1);
HXDLIN( 197)				 ::hscript::Expr e1 = e->_hx_getObject(0).StaticCast<  ::hscript::Expr >();
HXLINE( 198)				 ::Dynamic obj = this->expr(e1);
HXLINE( 199)				 ::Dynamic v = this->get(obj,f);
HXLINE( 200)				if (prefix) {
HXLINE( 201)					v = (v + delta);
HXLINE( 202)					this->set(obj,f,v);
            				}
            				else {
HXLINE( 204)					this->set(obj,f,(v + delta));
            				}
HXLINE( 205)				return v;
            			}
            			break;
            			case (int)16: {
HXLINE( 206)				 ::hscript::Expr index = e->_hx_getObject(1).StaticCast<  ::hscript::Expr >();
HXDLIN( 206)				 ::hscript::Expr e1 = e->_hx_getObject(0).StaticCast<  ::hscript::Expr >();
HXLINE( 207)				 ::Dynamic arr = this->expr(e1);
HXLINE( 208)				 ::Dynamic index1 = this->expr(index);
HXLINE( 209)				if (::Std_obj::isOfType(arr,::hx::ClassOf< ::haxe::IMap >())) {
HXLINE( 210)					int v = ( (int)(::haxe::IMap_obj::get( ::hx::interface_check(arr,0x09c2bd39),index1)) );
HXLINE( 211)					if (prefix) {
HXLINE( 212)						v = (v + delta);
HXLINE( 213)						::haxe::IMap_obj::set( ::hx::interface_check(arr,0x09c2bd39),index1,v);
            					}
            					else {
HXLINE( 216)						::haxe::IMap_obj::set( ::hx::interface_check(arr,0x09c2bd39),index1,(v + delta));
            					}
HXLINE( 218)					return v;
            				}
            				else {
HXLINE( 221)					int v = ( (int)(arr->__GetItem(( (int)(index1) ))) );
HXLINE( 222)					if (prefix) {
HXLINE( 223)						v = (v + delta);
HXLINE( 224)						arr->__SetItem(( (int)(index1) ),v);
            					}
            					else {
HXLINE( 226)						arr->__SetItem(( (int)(index1) ),(v + delta));
            					}
HXLINE( 227)					return v;
            				}
            			}
            			break;
            			default:{
HXLINE( 230)				::String e;
HXDLIN( 230)				if ((delta > 0)) {
HXLINE( 230)					e = HX_("++",a0,25,00,00);
            				}
            				else {
HXLINE( 230)					e = HX_("--",60,27,00,00);
            				}
HXDLIN( 230)				 ::hscript::Error e1 = ::hscript::Error_obj::EInvalidOp(e);
HXDLIN( 230)				HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(e1));
            			}
            		}
HXLINE( 187)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC3(Interp_obj,increment,return )

 ::Dynamic Interp_obj::execute( ::hscript::Expr expr){
            	HX_GC_STACKFRAME(&_hx_pos_f37559d470356c9e_234_execute)
HXLINE( 235)		this->depth = 0;
HXLINE( 236)		this->locals =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXLINE( 237)		this->declared = ::Array_obj< ::Dynamic>::__new();
HXLINE( 238)		return this->exprReturn(expr);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Interp_obj,execute,return )

 ::Dynamic Interp_obj::exprReturn( ::hscript::Expr e){
            	HX_STACKFRAME(&_hx_pos_f37559d470356c9e_242_exprReturn)
HXDLIN( 242)		try {
            			HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE( 243)			return this->expr(e);
            		} catch( ::Dynamic _hx_e) {
            			if (_hx_e.IsClass<  ::Dynamic >() ){
            				HX_STACK_BEGIN_CATCH
            				 ::Dynamic _g = _hx_e;
HXLINE(   1)				{
HXLINE(   1)					null();
            				}
HXDLIN(   1)				 ::Dynamic _g1 = ::haxe::Exception_obj::caught(_g)->unwrap();
HXLINE( 242)				if (::Std_obj::isOfType(_g1,::hx::ClassOf< ::hscript::_Interp::Stop >())) {
HXLINE(   1)					 ::hscript::_Interp::Stop e = _g1;
HXLINE( 245)					switch((int)(e->_hx_getIndex())){
            						case (int)0: {
HXLINE( 246)							HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(HX_("Invalid break",b6,ee,24,9d)));
            						}
            						break;
            						case (int)1: {
HXLINE( 247)							HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(HX_("Invalid continue",d0,6a,b7,3f)));
            						}
            						break;
            						case (int)2: {
HXLINE( 249)							 ::Dynamic v = this->returnValue;
HXLINE( 250)							this->returnValue = null();
HXLINE( 251)							return v;
            						}
            						break;
            					}
            				}
            				else {
HXDLIN( 242)					HX_STACK_DO_THROW(_g);
            				}
            			}
            			else {
            				HX_STACK_DO_THROW(_hx_e);
            			}
            		}
HXDLIN( 242)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(Interp_obj,exprReturn,return )

 ::haxe::ds::StringMap Interp_obj::duplicate( ::haxe::ds::StringMap h){
            	HX_GC_STACKFRAME(&_hx_pos_f37559d470356c9e_257_duplicate)
HXLINE( 258)		 ::haxe::ds::StringMap h2 =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXLINE( 259)		{
HXLINE( 259)			 ::Dynamic k = h->keys();
HXDLIN( 259)			while(( (bool)(k->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXLINE( 259)				::String k1 = ( (::String)(k->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXLINE( 260)				h2->set(k1,h->get(k1));
            			}
            		}
HXLINE( 261)		return h2;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Interp_obj,duplicate,return )

void Interp_obj::restore(int old){
            	HX_STACKFRAME(&_hx_pos_f37559d470356c9e_265_restore)
HXDLIN( 265)		while((this->declared->length > old)){
HXLINE( 266)			 ::Dynamic d = this->declared->pop();
HXLINE( 267)			this->locals->set(( (::String)(d->__Field(HX_("n",6e,00,00,00),::hx::paccDynamic)) ), ::Dynamic(d->__Field(HX_("old",a7,98,54,00),::hx::paccDynamic)));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Interp_obj,restore,(void))

 ::Dynamic Interp_obj::error( ::hscript::Error e,::hx::Null< bool >  __o_rethrow){
            		bool rethrow = __o_rethrow.Default(false);
            	HX_STACKFRAME(&_hx_pos_f37559d470356c9e_273_error)
HXDLIN( 273)		if (rethrow) {
HXDLIN( 273)			HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(e));
            		}
            		else {
HXDLIN( 273)			HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(e));
            		}
HXDLIN( 273)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC2(Interp_obj,error,return )

void Interp_obj::rethrow( ::Dynamic e){
            	HX_STACKFRAME(&_hx_pos_f37559d470356c9e_281_rethrow)
HXDLIN( 281)		HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(e));
            	}


HX_DEFINE_DYNAMIC_FUNC1(Interp_obj,rethrow,(void))

 ::Dynamic Interp_obj::resolve(::String id){
            	HX_STACKFRAME(&_hx_pos_f37559d470356c9e_285_resolve)
HXLINE( 286)		 ::Dynamic v = this->variables->get(id);
HXLINE( 287)		bool _hx_tmp;
HXDLIN( 287)		if (::hx::IsNull( v )) {
HXLINE( 287)			_hx_tmp = !(this->variables->exists(id));
            		}
            		else {
HXLINE( 287)			_hx_tmp = false;
            		}
HXDLIN( 287)		if (_hx_tmp) {
HXLINE( 288)			 ::hscript::Error e = ::hscript::Error_obj::EUnknownVariable(id);
HXDLIN( 288)			HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(e));
            		}
HXLINE( 289)		return v;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Interp_obj,resolve,return )

 ::Dynamic Interp_obj::expr( ::hscript::Expr e){
            	HX_STACKFRAME(&_hx_pos_f37559d470356c9e_292_expr)
HXDLIN( 292)		 ::hscript::Interp _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE( 297)		switch((int)(e->_hx_getIndex())){
            			case (int)0: {
HXLINE( 298)				 ::hscript::Const c = e->_hx_getObject(0).StaticCast<  ::hscript::Const >();
HXLINE( 299)				switch((int)(c->_hx_getIndex())){
            					case (int)0: {
HXLINE( 300)						int v = c->_hx_getInt(0);
HXDLIN( 300)						return v;
            					}
            					break;
            					case (int)1: {
HXLINE( 301)						Float f = c->_hx_getFloat(0);
HXDLIN( 301)						return f;
            					}
            					break;
            					case (int)2: {
HXLINE( 302)						::String s = c->_hx_getString(0);
HXDLIN( 302)						return s;
            					}
            					break;
            				}
            			}
            			break;
            			case (int)1: {
HXLINE( 304)				::String id = e->_hx_getString(0);
HXLINE( 305)				 ::Dynamic l = this->locals->get(id);
HXLINE( 306)				if (::hx::IsNotNull( l )) {
HXLINE( 307)					return  ::Dynamic(l->__Field(HX_("r",72,00,00,00),::hx::paccDynamic));
            				}
HXLINE( 308)				return this->resolve(id);
            			}
            			break;
            			case (int)2: {
HXLINE( 309)				 ::hscript::CType _g = e->_hx_getObject(1).StaticCast<  ::hscript::CType >();
HXDLIN( 309)				 ::hscript::Expr e1 = e->_hx_getObject(2).StaticCast<  ::hscript::Expr >();
HXDLIN( 309)				::String n = e->_hx_getString(0);
HXLINE( 310)				::Array< ::Dynamic> _hx_tmp = this->declared;
HXDLIN( 310)				_hx_tmp->push( ::Dynamic(::hx::Anon_obj::Create(2)
            					->setFixed(0,HX_("n",6e,00,00,00),n)
            					->setFixed(1,HX_("old",a7,98,54,00),this->locals->get(n))));
HXLINE( 311)				{
HXLINE( 311)					::Dynamic this1 = this->locals;
HXDLIN( 311)					 ::Dynamic value;
HXDLIN( 311)					if (::hx::IsNull( e1 )) {
HXLINE( 311)						value = null();
            					}
            					else {
HXLINE( 311)						value = this->expr(e1);
            					}
HXDLIN( 311)					( ( ::haxe::ds::StringMap)(this1) )->set(n, ::Dynamic(::hx::Anon_obj::Create(1)
            						->setFixed(0,HX_("r",72,00,00,00),value)));
            				}
HXLINE( 312)				return null();
            			}
            			break;
            			case (int)3: {
HXLINE( 313)				 ::hscript::Expr e1 = e->_hx_getObject(0).StaticCast<  ::hscript::Expr >();
HXLINE( 314)				return this->expr(e1);
            			}
            			break;
            			case (int)4: {
HXLINE( 315)				::Array< ::Dynamic> exprs = e->_hx_getObject(0).StaticCast< ::Array< ::Dynamic> >();
HXLINE( 316)				int old = this->declared->length;
HXLINE( 317)				 ::Dynamic v = null();
HXLINE( 318)				{
HXLINE( 318)					int _g = 0;
HXDLIN( 318)					while((_g < exprs->length)){
HXLINE( 318)						 ::hscript::Expr e = exprs->__get(_g).StaticCast<  ::hscript::Expr >();
HXDLIN( 318)						_g = (_g + 1);
HXLINE( 319)						v = this->expr(e);
            					}
            				}
HXLINE( 320)				this->restore(old);
HXLINE( 321)				return v;
            			}
            			break;
            			case (int)5: {
HXLINE( 322)				::String f = e->_hx_getString(1);
HXDLIN( 322)				 ::hscript::Expr e1 = e->_hx_getObject(0).StaticCast<  ::hscript::Expr >();
HXLINE( 323)				return this->get(this->expr(e1),f);
            			}
            			break;
            			case (int)6: {
HXLINE( 324)				 ::hscript::Expr e2 = e->_hx_getObject(2).StaticCast<  ::hscript::Expr >();
HXDLIN( 324)				 ::hscript::Expr e1 = e->_hx_getObject(1).StaticCast<  ::hscript::Expr >();
HXDLIN( 324)				::String op = e->_hx_getString(0);
HXLINE( 325)				 ::Dynamic fop = this->binops->get(op);
HXLINE( 326)				if (::hx::IsNull( fop )) {
HXLINE( 326)					 ::hscript::Error e = ::hscript::Error_obj::EInvalidOp(op);
HXDLIN( 326)					HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(e));
            				}
HXLINE( 327)				return fop(e1,e2);
            			}
            			break;
            			case (int)7: {
HXLINE( 328)				 ::hscript::Expr e1 = e->_hx_getObject(2).StaticCast<  ::hscript::Expr >();
HXDLIN( 328)				bool prefix = e->_hx_getBool(1);
HXDLIN( 328)				::String op = e->_hx_getString(0);
HXLINE( 329)				::String _hx_switch_0 = op;
            				if (  (_hx_switch_0==HX_("!",21,00,00,00)) ){
HXLINE( 331)					return ::hx::IsNotEq( this->expr(e1),true );
HXDLIN( 331)					goto _hx_goto_53;
            				}
            				if (  (_hx_switch_0==HX_("++",a0,25,00,00)) ){
HXLINE( 335)					return this->increment(e1,prefix,1);
HXDLIN( 335)					goto _hx_goto_53;
            				}
            				if (  (_hx_switch_0==HX_("-",2d,00,00,00)) ){
HXLINE( 333)					return -(this->expr(e1));
HXDLIN( 333)					goto _hx_goto_53;
            				}
            				if (  (_hx_switch_0==HX_("--",60,27,00,00)) ){
HXLINE( 337)					return this->increment(e1,prefix,-1);
HXDLIN( 337)					goto _hx_goto_53;
            				}
            				if (  (_hx_switch_0==HX_("~",7e,00,00,00)) ){
HXLINE( 339)					return ~(( (int)(this->expr(e1)) ));
HXDLIN( 339)					goto _hx_goto_53;
            				}
            				/* default */{
HXLINE( 341)					 ::hscript::Error e = ::hscript::Error_obj::EInvalidOp(op);
HXDLIN( 341)					HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(e));
            				}
            				_hx_goto_53:;
            			}
            			break;
            			case (int)8: {
HXLINE( 343)				::Array< ::Dynamic> params = e->_hx_getObject(1).StaticCast< ::Array< ::Dynamic> >();
HXDLIN( 343)				 ::hscript::Expr e1 = e->_hx_getObject(0).StaticCast<  ::hscript::Expr >();
HXLINE( 344)				::cpp::VirtualArray args = ::cpp::VirtualArray_obj::__new();
HXLINE( 345)				{
HXLINE( 345)					int _g = 0;
HXDLIN( 345)					while((_g < params->length)){
HXLINE( 345)						 ::hscript::Expr p = params->__get(_g).StaticCast<  ::hscript::Expr >();
HXDLIN( 345)						_g = (_g + 1);
HXLINE( 346)						args->push(this->expr(p));
            					}
            				}
HXLINE( 348)				if ((e1->_hx_getIndex() == 5)) {
HXLINE( 349)					::String f = e1->_hx_getString(1);
HXDLIN( 349)					 ::hscript::Expr e = e1->_hx_getObject(0).StaticCast<  ::hscript::Expr >();
HXLINE( 350)					 ::Dynamic obj = this->expr(e);
HXLINE( 351)					if (::hx::IsNull( obj )) {
HXLINE( 351)						 ::hscript::Error e = ::hscript::Error_obj::EInvalidAccess(f);
HXDLIN( 351)						HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(e));
            					}
HXLINE( 352)					return this->fcall(obj,f,args);
            				}
            				else {
HXLINE( 354)					return this->call(null(),this->expr(e1),args);
            				}
            			}
            			break;
            			case (int)9: {
HXLINE( 356)				 ::hscript::Expr e2 = e->_hx_getObject(2).StaticCast<  ::hscript::Expr >();
HXDLIN( 356)				 ::hscript::Expr e1 = e->_hx_getObject(1).StaticCast<  ::hscript::Expr >();
HXDLIN( 356)				 ::hscript::Expr econd = e->_hx_getObject(0).StaticCast<  ::hscript::Expr >();
HXLINE( 357)				if (::hx::IsEq( this->expr(econd),true )) {
HXLINE( 357)					return this->expr(e1);
            				}
            				else {
HXLINE( 357)					if (::hx::IsNull( e2 )) {
HXLINE( 357)						return null();
            					}
            					else {
HXLINE( 357)						return this->expr(e2);
            					}
            				}
            			}
            			break;
            			case (int)10: {
HXLINE( 358)				 ::hscript::Expr e1 = e->_hx_getObject(1).StaticCast<  ::hscript::Expr >();
HXDLIN( 358)				 ::hscript::Expr econd = e->_hx_getObject(0).StaticCast<  ::hscript::Expr >();
HXLINE( 359)				this->whileLoop(econd,e1);
HXLINE( 360)				return null();
            			}
            			break;
            			case (int)11: {
HXLINE( 364)				 ::hscript::Expr e1 = e->_hx_getObject(2).StaticCast<  ::hscript::Expr >();
HXDLIN( 364)				 ::hscript::Expr it = e->_hx_getObject(1).StaticCast<  ::hscript::Expr >();
HXDLIN( 364)				::String v = e->_hx_getString(0);
HXLINE( 365)				this->forLoop(v,it,e1);
HXLINE( 366)				return null();
            			}
            			break;
            			case (int)12: {
HXLINE( 368)				HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::hscript::_Interp::Stop_obj::SBreak_dyn()));
            			}
            			break;
            			case (int)13: {
HXLINE( 370)				HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::hscript::_Interp::Stop_obj::SContinue_dyn()));
            			}
            			break;
            			case (int)14: {
            				HX_BEGIN_LOCAL_FUNC_S7(::hx::LocalFunc,_hx_Closure_0,::String,name, ::hscript::Expr,fexpr, ::hscript::Interp,_gthis,int,minParams, ::hscript::Interp,me,::Array< ::Dynamic>,params, ::haxe::ds::StringMap,capturedLocals) HXARGC(1)
            				 ::Dynamic _hx_run(::cpp::VirtualArray args){
            					HX_STACKFRAME(&_hx_pos_f37559d470356c9e_383_expr)
HXLINE( 384)					int f;
HXDLIN( 384)					if (::hx::IsNull( args )) {
HXLINE( 384)						f = 0;
            					}
            					else {
HXLINE( 384)						f = args->get_length();
            					}
HXDLIN( 384)					if ((f != params->length)) {
HXLINE( 385)						if ((args->get_length() < minParams)) {
HXLINE( 386)							::String str = (((HX_("Invalid number of parameters. Got ",cb,2b,d9,b1) + args->get_length()) + HX_(", required ",ed,0c,66,93)) + minParams);
HXLINE( 387)							if (::hx::IsNotNull( name )) {
HXLINE( 387)								str = (str + ((HX_(" for function '",f6,90,ab,a0) + name) + HX_("'",27,00,00,00)));
            							}
HXLINE( 388)							 ::hscript::Error e = ::hscript::Error_obj::ECustom(str);
HXDLIN( 388)							HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(e));
            						}
HXLINE( 391)						::cpp::VirtualArray args2 = ::cpp::VirtualArray_obj::__new(0);
HXLINE( 392)						int extraParams = (args->get_length() - minParams);
HXLINE( 393)						int pos = 0;
HXLINE( 394)						{
HXLINE( 394)							int _g = 0;
HXDLIN( 394)							while((_g < params->length)){
HXLINE( 394)								 ::Dynamic p = params->__get(_g);
HXDLIN( 394)								_g = (_g + 1);
HXLINE( 395)								if (( (bool)(p->__Field(HX_("opt",33,9c,54,00),::hx::paccDynamic)) )) {
HXLINE( 396)									if ((extraParams > 0)) {
HXLINE( 397)										pos = (pos + 1);
HXDLIN( 397)										args2->push(args->__get((pos - 1)));
HXLINE( 398)										extraParams = (extraParams - 1);
            									}
            									else {
HXLINE( 400)										args2->push(null());
            									}
            								}
            								else {
HXLINE( 402)									pos = (pos + 1);
HXDLIN( 402)									args2->push(args->__get((pos - 1)));
            								}
            							}
            						}
HXLINE( 403)						args = args2;
            					}
HXLINE( 405)					 ::haxe::ds::StringMap old = me->locals;
HXDLIN( 405)					int depth = me->depth;
HXLINE( 406)					me->depth++;
HXLINE( 407)					me->locals = me->duplicate(capturedLocals);
HXLINE( 408)					{
HXLINE( 408)						int _g = 0;
HXDLIN( 408)						int _g1 = params->length;
HXDLIN( 408)						while((_g < _g1)){
HXLINE( 408)							_g = (_g + 1);
HXDLIN( 408)							int i = (_g - 1);
HXLINE( 409)							me->locals->set(( (::String)(params->__get(i)->__Field(HX_("name",4b,72,ff,48),::hx::paccDynamic)) ), ::Dynamic(::hx::Anon_obj::Create(1)
            								->setFixed(0,HX_("r",72,00,00,00),args->__get(i))));
            						}
            					}
HXLINE( 410)					 ::Dynamic r = null();
HXLINE( 411)					int oldDecl = _gthis->declared->length;
HXLINE( 412)					if (_gthis->inTry) {
HXLINE( 413)						try {
            							HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE( 414)							r = me->exprReturn(fexpr);
            						} catch( ::Dynamic _hx_e) {
            							if (_hx_e.IsClass<  ::Dynamic >() ){
            								HX_STACK_BEGIN_CATCH
            								 ::Dynamic _g = _hx_e;
HXLINE(   1)								{
HXLINE(   1)									null();
            								}
HXDLIN(   1)								 ::Dynamic e = ::haxe::Exception_obj::caught(_g)->unwrap();
HXLINE( 416)								_gthis->restore(oldDecl);
HXLINE( 417)								me->locals = old;
HXLINE( 418)								me->depth = depth;
HXLINE( 422)								HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(e));
            							}
            							else {
            								HX_STACK_DO_THROW(_hx_e);
            							}
            						}
            					}
            					else {
HXLINE( 426)						r = me->exprReturn(fexpr);
            					}
HXLINE( 427)					_gthis->restore(oldDecl);
HXLINE( 428)					me->locals = old;
HXLINE( 429)					me->depth = depth;
HXLINE( 430)					return r;
            				}
            				HX_END_LOCAL_FUNC1(return)

HXLINE( 374)				 ::hscript::CType _g = e->_hx_getObject(3).StaticCast<  ::hscript::CType >();
HXDLIN( 374)				::String name = e->_hx_getString(2);
HXDLIN( 374)				 ::hscript::Expr fexpr = e->_hx_getObject(1).StaticCast<  ::hscript::Expr >();
HXDLIN( 374)				::Array< ::Dynamic> params = e->_hx_getObject(0).StaticCast< ::Array< ::Dynamic> >();
HXLINE( 375)				 ::haxe::ds::StringMap capturedLocals = this->duplicate(this->locals);
HXLINE( 376)				 ::hscript::Interp me = ::hx::ObjectPtr<OBJ_>(this);
HXLINE( 377)				bool hasOpt = false;
HXDLIN( 377)				int minParams = 0;
HXLINE( 378)				{
HXLINE( 378)					int _g1 = 0;
HXDLIN( 378)					while((_g1 < params->length)){
HXLINE( 378)						 ::Dynamic p = params->__get(_g1);
HXDLIN( 378)						_g1 = (_g1 + 1);
HXLINE( 379)						if (( (bool)(p->__Field(HX_("opt",33,9c,54,00),::hx::paccDynamic)) )) {
HXLINE( 380)							hasOpt = true;
            						}
            						else {
HXLINE( 382)							minParams = (minParams + 1);
            						}
            					}
            				}
HXLINE( 383)				 ::Dynamic f =  ::Dynamic(new _hx_Closure_0(name,fexpr,_gthis,minParams,me,params,capturedLocals));
HXLINE( 432)				 ::Dynamic f1 = ::Reflect_obj::makeVarArgs(f);
HXLINE( 433)				if (::hx::IsNotNull( name )) {
HXLINE( 434)					if ((this->depth == 0)) {
HXLINE( 436)						this->variables->set(name,f1);
            					}
            					else {
HXLINE( 439)						::Array< ::Dynamic> _hx_tmp = this->declared;
HXDLIN( 439)						::String name1 = name;
HXDLIN( 439)						_hx_tmp->push( ::Dynamic(::hx::Anon_obj::Create(2)
            							->setFixed(0,HX_("n",6e,00,00,00),name1)
            							->setFixed(1,HX_("old",a7,98,54,00),this->locals->get(name))));
HXLINE( 440)						 ::Dynamic ref =  ::Dynamic(::hx::Anon_obj::Create(1)
            							->setFixed(0,HX_("r",72,00,00,00),f1));
HXLINE( 441)						this->locals->set(name,ref);
HXLINE( 442)						capturedLocals->set(name,ref);
            					}
            				}
HXLINE( 445)				return f1;
            			}
            			break;
            			case (int)15: {
HXLINE( 371)				 ::hscript::Expr e1 = e->_hx_getObject(0).StaticCast<  ::hscript::Expr >();
HXLINE( 372)				 ::Dynamic _hx_tmp;
HXDLIN( 372)				if (::hx::IsNull( e1 )) {
HXLINE( 372)					_hx_tmp = null();
            				}
            				else {
HXLINE( 372)					_hx_tmp = this->expr(e1);
            				}
HXDLIN( 372)				this->returnValue = _hx_tmp;
HXLINE( 373)				HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::hscript::_Interp::Stop_obj::SReturn_dyn()));
            			}
            			break;
            			case (int)16: {
HXLINE( 469)				 ::hscript::Expr index = e->_hx_getObject(1).StaticCast<  ::hscript::Expr >();
HXDLIN( 469)				 ::hscript::Expr e1 = e->_hx_getObject(0).StaticCast<  ::hscript::Expr >();
HXLINE( 470)				 ::Dynamic arr = this->expr(e1);
HXLINE( 471)				 ::Dynamic index1 = this->expr(index);
HXLINE( 472)				if (::Std_obj::isOfType(arr,::hx::ClassOf< ::haxe::IMap >())) {
HXLINE( 473)					return ::haxe::IMap_obj::get( ::hx::interface_check(arr,0x09c2bd39),index1);
            				}
HXLINE( 474)				return arr->__GetItem(( (int)(index1) ));
            			}
            			break;
            			case (int)17: {
HXLINE( 446)				::Array< ::Dynamic> arr = e->_hx_getObject(0).StaticCast< ::Array< ::Dynamic> >();
HXLINE( 447)				bool _hx_tmp;
HXDLIN( 447)				if ((arr->length > 0)) {
HXLINE( 447)					 ::hscript::Expr _g = arr->__get(0).StaticCast<  ::hscript::Expr >();
HXDLIN( 447)					if ((_g->_hx_getIndex() == 6)) {
HXLINE( 447)						 ::hscript::Expr _g1 = _g->_hx_getObject(2).StaticCast<  ::hscript::Expr >();
HXDLIN( 447)						 ::hscript::Expr _g2 = _g->_hx_getObject(1).StaticCast<  ::hscript::Expr >();
HXDLIN( 447)						if ((_g->_hx_getString(0) == HX_("=>",61,35,00,00))) {
HXLINE( 447)							_hx_tmp = true;
            						}
            						else {
HXLINE( 447)							_hx_tmp = false;
            						}
            					}
            					else {
HXLINE( 447)						_hx_tmp = false;
            					}
            				}
            				else {
HXLINE( 447)					_hx_tmp = false;
            				}
HXDLIN( 447)				if (_hx_tmp) {
HXLINE( 448)					::cpp::VirtualArray keys = ::cpp::VirtualArray_obj::__new(0);
HXLINE( 449)					::cpp::VirtualArray values = ::cpp::VirtualArray_obj::__new(0);
HXLINE( 450)					{
HXLINE( 450)						int _g = 0;
HXDLIN( 450)						while((_g < arr->length)){
HXLINE( 450)							 ::hscript::Expr e = arr->__get(_g).StaticCast<  ::hscript::Expr >();
HXDLIN( 450)							_g = (_g + 1);
HXLINE( 451)							if ((e->_hx_getIndex() == 6)) {
HXLINE( 452)								if ((e->_hx_getString(0) == HX_("=>",61,35,00,00))) {
HXLINE( 452)									 ::hscript::Expr eValue = e->_hx_getObject(2).StaticCast<  ::hscript::Expr >();
HXDLIN( 452)									 ::hscript::Expr eKey = e->_hx_getObject(1).StaticCast<  ::hscript::Expr >();
HXDLIN( 452)									{
HXLINE( 453)										keys->push(this->expr(eKey));
HXLINE( 454)										values->push(this->expr(eValue));
            									}
            								}
            								else {
HXLINE( 459)									 ::hscript::Error e = ::hscript::Error_obj::ECustom(HX_("Invalid map key=>value expression",9a,3d,33,b0));
HXDLIN( 459)									HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(e));
            								}
            							}
            							else {
HXLINE( 459)								 ::hscript::Error e = ::hscript::Error_obj::ECustom(HX_("Invalid map key=>value expression",9a,3d,33,b0));
HXDLIN( 459)								HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(e));
            							}
            						}
            					}
HXLINE( 462)					return this->makeMap(keys,values);
            				}
            				else {
HXLINE( 464)					::cpp::VirtualArray a = ::cpp::VirtualArray_obj::__new();
HXLINE( 465)					{
HXLINE( 465)						int _g = 0;
HXDLIN( 465)						while((_g < arr->length)){
HXLINE( 465)							 ::hscript::Expr e = arr->__get(_g).StaticCast<  ::hscript::Expr >();
HXDLIN( 465)							_g = (_g + 1);
HXLINE( 466)							a->push(this->expr(e));
            						}
            					}
HXLINE( 467)					return a;
            				}
            			}
            			break;
            			case (int)18: {
HXLINE( 475)				::Array< ::Dynamic> params = e->_hx_getObject(1).StaticCast< ::Array< ::Dynamic> >();
HXDLIN( 475)				::String cl = e->_hx_getString(0);
HXLINE( 476)				::cpp::VirtualArray a = ::cpp::VirtualArray_obj::__new();
HXLINE( 477)				{
HXLINE( 477)					int _g = 0;
HXDLIN( 477)					while((_g < params->length)){
HXLINE( 477)						 ::hscript::Expr e = params->__get(_g).StaticCast<  ::hscript::Expr >();
HXDLIN( 477)						_g = (_g + 1);
HXLINE( 478)						a->push(this->expr(e));
            					}
            				}
HXLINE( 479)				return this->cnew(cl,a);
            			}
            			break;
            			case (int)19: {
HXLINE( 480)				 ::hscript::Expr e1 = e->_hx_getObject(0).StaticCast<  ::hscript::Expr >();
HXLINE( 481)				HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(this->expr(e1)));
            			}
            			break;
            			case (int)20: {
HXLINE( 482)				 ::hscript::CType _g = e->_hx_getObject(2).StaticCast<  ::hscript::CType >();
HXDLIN( 482)				 ::hscript::Expr ecatch = e->_hx_getObject(3).StaticCast<  ::hscript::Expr >();
HXDLIN( 482)				::String n = e->_hx_getString(1);
HXDLIN( 482)				 ::hscript::Expr e1 = e->_hx_getObject(0).StaticCast<  ::hscript::Expr >();
HXLINE( 483)				int old = this->declared->length;
HXLINE( 484)				bool oldTry = this->inTry;
HXLINE( 485)				try {
            					HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE( 486)					this->inTry = true;
HXLINE( 487)					 ::Dynamic v = this->expr(e1);
HXLINE( 488)					this->restore(old);
HXLINE( 489)					this->inTry = oldTry;
HXLINE( 490)					return v;
            				} catch( ::Dynamic _hx_e) {
            					if (_hx_e.IsClass<  ::Dynamic >() ){
            						HX_STACK_BEGIN_CATCH
            						 ::Dynamic _g = _hx_e;
HXLINE(   1)						{
HXLINE(   1)							null();
            						}
HXDLIN(   1)						 ::Dynamic _g1 = ::haxe::Exception_obj::caught(_g)->unwrap();
HXLINE( 485)						if (::Std_obj::isOfType(_g1,::hx::ClassOf< ::hscript::_Interp::Stop >())) {
HXLINE(   1)							 ::hscript::_Interp::Stop err = _g1;
HXLINE( 492)							this->inTry = oldTry;
HXLINE( 493)							HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(err));
            						}
            						else {
HXLINE(   1)							 ::Dynamic err = _g1;
HXLINE( 496)							this->restore(old);
HXLINE( 497)							this->inTry = oldTry;
HXLINE( 499)							::Array< ::Dynamic> _hx_tmp = this->declared;
HXDLIN( 499)							_hx_tmp->push( ::Dynamic(::hx::Anon_obj::Create(2)
            								->setFixed(0,HX_("n",6e,00,00,00),n)
            								->setFixed(1,HX_("old",a7,98,54,00),this->locals->get(n))));
HXLINE( 500)							this->locals->set(n, ::Dynamic(::hx::Anon_obj::Create(1)
            								->setFixed(0,HX_("r",72,00,00,00),err)));
HXLINE( 501)							 ::Dynamic v = this->expr(ecatch);
HXLINE( 502)							this->restore(old);
HXLINE( 503)							return v;
            						}
            					}
            					else {
            						HX_STACK_DO_THROW(_hx_e);
            					}
            				}
            			}
            			break;
            			case (int)21: {
HXLINE( 505)				::Array< ::Dynamic> fl = e->_hx_getObject(0).StaticCast< ::Array< ::Dynamic> >();
HXLINE( 506)				 ::Dynamic o =  ::Dynamic(::hx::Anon_obj::Create(0));
HXLINE( 507)				{
HXLINE( 507)					int _g = 0;
HXDLIN( 507)					while((_g < fl->length)){
HXLINE( 507)						 ::Dynamic f = fl->__get(_g);
HXDLIN( 507)						_g = (_g + 1);
HXLINE( 508)						::String f1 = ( (::String)(f->__Field(HX_("name",4b,72,ff,48),::hx::paccDynamic)) );
HXDLIN( 508)						this->set(o,f1,this->expr(f->__Field(HX_("e",65,00,00,00),::hx::paccDynamic)));
            					}
            				}
HXLINE( 509)				return o;
            			}
            			break;
            			case (int)22: {
HXLINE( 510)				 ::hscript::Expr e2 = e->_hx_getObject(2).StaticCast<  ::hscript::Expr >();
HXDLIN( 510)				 ::hscript::Expr e1 = e->_hx_getObject(1).StaticCast<  ::hscript::Expr >();
HXDLIN( 510)				 ::hscript::Expr econd = e->_hx_getObject(0).StaticCast<  ::hscript::Expr >();
HXLINE( 511)				if (::hx::IsEq( this->expr(econd),true )) {
HXLINE( 511)					return this->expr(e1);
            				}
            				else {
HXLINE( 511)					return this->expr(e2);
            				}
            			}
            			break;
            			case (int)23: {
HXLINE( 512)				 ::hscript::Expr def = e->_hx_getObject(2).StaticCast<  ::hscript::Expr >();
HXDLIN( 512)				::Array< ::Dynamic> cases = e->_hx_getObject(1).StaticCast< ::Array< ::Dynamic> >();
HXDLIN( 512)				 ::hscript::Expr e1 = e->_hx_getObject(0).StaticCast<  ::hscript::Expr >();
HXLINE( 513)				 ::Dynamic val = this->expr(e1);
HXLINE( 514)				bool match = false;
HXLINE( 515)				{
HXLINE( 515)					int _g = 0;
HXDLIN( 515)					while((_g < cases->length)){
HXLINE( 515)						 ::Dynamic c = cases->__get(_g);
HXDLIN( 515)						_g = (_g + 1);
HXLINE( 516)						{
HXLINE( 516)							int _g1 = 0;
HXDLIN( 516)							::Array< ::Dynamic> _g2 = ( (::Array< ::Dynamic>)(c->__Field(HX_("values",e2,03,b7,4f),::hx::paccDynamic)) );
HXDLIN( 516)							while((_g1 < _g2->length)){
HXLINE( 516)								 ::hscript::Expr v = _g2->__get(_g1).StaticCast<  ::hscript::Expr >();
HXDLIN( 516)								_g1 = (_g1 + 1);
HXLINE( 517)								if (::hx::IsEq( this->expr(v),val )) {
HXLINE( 518)									match = true;
HXLINE( 519)									goto _hx_goto_63;
            								}
            							}
            							_hx_goto_63:;
            						}
HXLINE( 521)						if (match) {
HXLINE( 522)							val = this->expr(c->__Field(HX_("expr",35,fd,1d,43),::hx::paccDynamic));
HXLINE( 523)							goto _hx_goto_62;
            						}
            					}
            					_hx_goto_62:;
            				}
HXLINE( 526)				if (!(match)) {
HXLINE( 527)					if (::hx::IsNull( def )) {
HXLINE( 527)						val = null();
            					}
            					else {
HXLINE( 527)						val = this->expr(def);
            					}
            				}
HXLINE( 528)				return val;
            			}
            			break;
            			case (int)24: {
HXLINE( 361)				 ::hscript::Expr e1 = e->_hx_getObject(1).StaticCast<  ::hscript::Expr >();
HXDLIN( 361)				 ::hscript::Expr econd = e->_hx_getObject(0).StaticCast<  ::hscript::Expr >();
HXLINE( 362)				this->doWhileLoop(econd,e1);
HXLINE( 363)				return null();
            			}
            			break;
            			case (int)25: {
HXLINE( 529)				::Array< ::Dynamic> _g = e->_hx_getObject(1).StaticCast< ::Array< ::Dynamic> >();
HXDLIN( 529)				::String _g1 = e->_hx_getString(0);
HXDLIN( 529)				 ::hscript::Expr e1 = e->_hx_getObject(2).StaticCast<  ::hscript::Expr >();
HXLINE( 530)				return this->expr(e1);
            			}
            			break;
            			case (int)26: {
HXLINE( 531)				 ::hscript::CType _g = e->_hx_getObject(1).StaticCast<  ::hscript::CType >();
HXDLIN( 531)				 ::hscript::Expr e1 = e->_hx_getObject(0).StaticCast<  ::hscript::Expr >();
HXLINE( 532)				return this->expr(e1);
            			}
            			break;
            		}
HXLINE( 297)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(Interp_obj,expr,return )

void Interp_obj::doWhileLoop( ::hscript::Expr econd, ::hscript::Expr e){
            	HX_STACKFRAME(&_hx_pos_f37559d470356c9e_537_doWhileLoop)
HXDLIN( 537)		 ::hscript::Interp _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE( 538)		int old = this->declared->length;
HXLINE( 539)		while(true){
HXLINE( 540)			bool cont = true;
HXDLIN( 540)			try {
            				HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE( 540)				_gthis->expr(e);
            			} catch( ::Dynamic _hx_e) {
            				if (_hx_e.IsClass<  ::Dynamic >() ){
            					HX_STACK_BEGIN_CATCH
            					 ::Dynamic _g = _hx_e;
HXLINE(   1)					{
HXLINE(   1)						null();
            					}
HXDLIN(   1)					 ::Dynamic _g1 = ::haxe::Exception_obj::caught(_g)->unwrap();
HXLINE( 540)					if (::Std_obj::isOfType(_g1,::hx::ClassOf< ::hscript::_Interp::Stop >())) {
HXLINE(   1)						 ::hscript::_Interp::Stop err = _g1;
HXLINE( 540)						switch((int)(err->_hx_getIndex())){
            							case (int)0: {
HXLINE( 540)								cont = false;
            							}
            							break;
            							case (int)1: {
            							}
            							break;
            							case (int)2: {
HXLINE( 540)								HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(err));
            							}
            							break;
            						}
            					}
            					else {
HXLINE( 540)						HX_STACK_DO_THROW(_g);
            					}
            				}
            				else {
            					HX_STACK_DO_THROW(_hx_e);
            				}
            			}
HXDLIN( 540)			if (!(cont)) {
HXLINE( 541)				goto _hx_goto_66;
            			}
HXLINE( 539)			if (!(::hx::IsEq( this->expr(econd),true ))) {
HXLINE( 539)				goto _hx_goto_66;
            			}
            		}
            		_hx_goto_66:;
HXLINE( 544)		this->restore(old);
            	}


HX_DEFINE_DYNAMIC_FUNC2(Interp_obj,doWhileLoop,(void))

void Interp_obj::whileLoop( ::hscript::Expr econd, ::hscript::Expr e){
            	HX_STACKFRAME(&_hx_pos_f37559d470356c9e_547_whileLoop)
HXDLIN( 547)		 ::hscript::Interp _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE( 548)		int old = this->declared->length;
HXLINE( 549)		while(::hx::IsEq( this->expr(econd),true )){
HXLINE( 550)			bool cont = true;
HXDLIN( 550)			try {
            				HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE( 550)				_gthis->expr(e);
            			} catch( ::Dynamic _hx_e) {
            				if (_hx_e.IsClass<  ::Dynamic >() ){
            					HX_STACK_BEGIN_CATCH
            					 ::Dynamic _g = _hx_e;
HXLINE(   1)					{
HXLINE(   1)						null();
            					}
HXDLIN(   1)					 ::Dynamic _g1 = ::haxe::Exception_obj::caught(_g)->unwrap();
HXLINE( 550)					if (::Std_obj::isOfType(_g1,::hx::ClassOf< ::hscript::_Interp::Stop >())) {
HXLINE(   1)						 ::hscript::_Interp::Stop err = _g1;
HXLINE( 550)						switch((int)(err->_hx_getIndex())){
            							case (int)0: {
HXLINE( 550)								cont = false;
            							}
            							break;
            							case (int)1: {
            							}
            							break;
            							case (int)2: {
HXLINE( 550)								HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(err));
            							}
            							break;
            						}
            					}
            					else {
HXLINE( 550)						HX_STACK_DO_THROW(_g);
            					}
            				}
            				else {
            					HX_STACK_DO_THROW(_hx_e);
            				}
            			}
HXDLIN( 550)			if (!(cont)) {
HXLINE( 551)				goto _hx_goto_68;
            			}
            		}
            		_hx_goto_68:;
HXLINE( 553)		this->restore(old);
            	}


HX_DEFINE_DYNAMIC_FUNC2(Interp_obj,whileLoop,(void))

 ::Dynamic Interp_obj::makeIterator( ::Dynamic v){
            	HX_STACKFRAME(&_hx_pos_f37559d470356c9e_556_makeIterator)
HXLINE( 565)		try {
            			HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE( 565)			v = v->__Field(HX_("iterator",ee,49,9a,93),::hx::paccDynamic)();
            		} catch( ::Dynamic _hx_e) {
            			if (_hx_e.IsClass<  ::Dynamic >() ){
            				HX_STACK_BEGIN_CATCH
            				 ::Dynamic _g = _hx_e;
HXLINE(   1)				{
HXLINE(   1)					null();
            				}
            			}
            			else {
            				HX_STACK_DO_THROW(_hx_e);
            			}
            		}
HXLINE( 567)		bool _hx_tmp;
HXDLIN( 567)		if (::hx::IsNotNull( v->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic) )) {
HXLINE( 567)			_hx_tmp = ::hx::IsNull( v->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic) );
            		}
            		else {
HXLINE( 567)			_hx_tmp = true;
            		}
HXDLIN( 567)		if (_hx_tmp) {
HXLINE( 567)			 ::hscript::Error e = ::hscript::Error_obj::EInvalidIterator(v);
HXDLIN( 567)			HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(e));
            		}
HXLINE( 568)		return v;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Interp_obj,makeIterator,return )

void Interp_obj::forLoop(::String n, ::hscript::Expr it, ::hscript::Expr e){
            	HX_STACKFRAME(&_hx_pos_f37559d470356c9e_571_forLoop)
HXDLIN( 571)		 ::hscript::Interp _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE( 572)		int old = this->declared->length;
HXLINE( 573)		::Array< ::Dynamic> _hx_tmp = this->declared;
HXDLIN( 573)		_hx_tmp->push( ::Dynamic(::hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("n",6e,00,00,00),n)
            			->setFixed(1,HX_("old",a7,98,54,00),this->locals->get(n))));
HXLINE( 574)		 ::Dynamic it1 = this->makeIterator(this->expr(it));
HXLINE( 575)		while(( (bool)(it1->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXLINE( 576)			{
HXLINE( 576)				::Dynamic this1 = this->locals;
HXDLIN( 576)				( ( ::haxe::ds::StringMap)(this1) )->set(n, ::Dynamic(::hx::Anon_obj::Create(1)
            					->setFixed(0,HX_("r",72,00,00,00),it1->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)())));
            			}
HXLINE( 577)			bool cont = true;
HXDLIN( 577)			try {
            				HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE( 577)				_gthis->expr(e);
            			} catch( ::Dynamic _hx_e) {
            				if (_hx_e.IsClass<  ::Dynamic >() ){
            					HX_STACK_BEGIN_CATCH
            					 ::Dynamic _g = _hx_e;
HXLINE(   1)					{
HXLINE(   1)						null();
            					}
HXDLIN(   1)					 ::Dynamic _g1 = ::haxe::Exception_obj::caught(_g)->unwrap();
HXLINE( 577)					if (::Std_obj::isOfType(_g1,::hx::ClassOf< ::hscript::_Interp::Stop >())) {
HXLINE(   1)						 ::hscript::_Interp::Stop err = _g1;
HXLINE( 577)						switch((int)(err->_hx_getIndex())){
            							case (int)0: {
HXLINE( 577)								cont = false;
            							}
            							break;
            							case (int)1: {
            							}
            							break;
            							case (int)2: {
HXLINE( 577)								HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(err));
            							}
            							break;
            						}
            					}
            					else {
HXLINE( 577)						HX_STACK_DO_THROW(_g);
            					}
            				}
            				else {
            					HX_STACK_DO_THROW(_hx_e);
            				}
            			}
HXDLIN( 577)			if (!(cont)) {
HXLINE( 578)				goto _hx_goto_71;
            			}
            		}
            		_hx_goto_71:;
HXLINE( 580)		this->restore(old);
            	}


HX_DEFINE_DYNAMIC_FUNC3(Interp_obj,forLoop,(void))

bool Interp_obj::loopRun( ::Dynamic f){
            	HX_STACKFRAME(&_hx_pos_f37559d470356c9e_583_loopRun)
HXLINE( 584)		bool cont = true;
HXLINE( 585)		try {
            			HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE( 586)			f();
            		} catch( ::Dynamic _hx_e) {
            			if (_hx_e.IsClass<  ::Dynamic >() ){
            				HX_STACK_BEGIN_CATCH
            				 ::Dynamic _g = _hx_e;
HXLINE(   1)				{
HXLINE(   1)					null();
            				}
HXDLIN(   1)				 ::Dynamic _g1 = ::haxe::Exception_obj::caught(_g)->unwrap();
HXLINE( 585)				if (::Std_obj::isOfType(_g1,::hx::ClassOf< ::hscript::_Interp::Stop >())) {
HXLINE(   1)					 ::hscript::_Interp::Stop err = _g1;
HXLINE( 588)					switch((int)(err->_hx_getIndex())){
            						case (int)0: {
HXLINE( 591)							cont = false;
            						}
            						break;
            						case (int)1: {
            						}
            						break;
            						case (int)2: {
HXLINE( 593)							HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(err));
            						}
            						break;
            					}
            				}
            				else {
HXLINE( 585)					HX_STACK_DO_THROW(_g);
            				}
            			}
            			else {
            				HX_STACK_DO_THROW(_hx_e);
            			}
            		}
HXLINE( 596)		return cont;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Interp_obj,loopRun,return )

bool Interp_obj::isMap( ::Dynamic o){
            	HX_STACKFRAME(&_hx_pos_f37559d470356c9e_600_isMap)
HXDLIN( 600)		return ::Std_obj::isOfType(o,::hx::ClassOf< ::haxe::IMap >());
            	}


HX_DEFINE_DYNAMIC_FUNC1(Interp_obj,isMap,return )

 ::Dynamic Interp_obj::getMapValue( ::Dynamic map, ::Dynamic key){
            	HX_STACKFRAME(&_hx_pos_f37559d470356c9e_604_getMapValue)
HXDLIN( 604)		return ::haxe::IMap_obj::get( ::hx::interface_check(map,0x09c2bd39),key);
            	}


HX_DEFINE_DYNAMIC_FUNC2(Interp_obj,getMapValue,return )

void Interp_obj::setMapValue( ::Dynamic map, ::Dynamic key, ::Dynamic value){
            	HX_STACKFRAME(&_hx_pos_f37559d470356c9e_608_setMapValue)
HXDLIN( 608)		::haxe::IMap_obj::set( ::hx::interface_check(map,0x09c2bd39),key,value);
            	}


HX_DEFINE_DYNAMIC_FUNC3(Interp_obj,setMapValue,(void))

 ::Dynamic Interp_obj::makeMap(::cpp::VirtualArray keys,::cpp::VirtualArray values){
            	HX_GC_STACKFRAME(&_hx_pos_f37559d470356c9e_611_makeMap)
HXLINE( 612)		bool isAllString = true;
HXLINE( 613)		bool isAllInt = true;
HXLINE( 614)		bool isAllObject = true;
HXLINE( 615)		bool isAllEnum = true;
HXLINE( 616)		{
HXLINE( 616)			int _g = 0;
HXDLIN( 616)			while((_g < keys->get_length())){
HXLINE( 616)				 ::Dynamic key = keys->__get(_g);
HXDLIN( 616)				_g = (_g + 1);
HXLINE( 617)				if (isAllString) {
HXLINE( 617)					isAllString = ::Std_obj::isOfType(key,::hx::ClassOf< ::String >());
            				}
            				else {
HXLINE( 617)					isAllString = false;
            				}
HXLINE( 618)				if (isAllInt) {
HXLINE( 618)					isAllInt = ::Std_obj::isOfType(key,::hx::ClassOf< int >());
            				}
            				else {
HXLINE( 618)					isAllInt = false;
            				}
HXLINE( 619)				if (isAllObject) {
HXLINE( 619)					isAllObject = ::Reflect_obj::isObject(key);
            				}
            				else {
HXLINE( 619)					isAllObject = false;
            				}
HXLINE( 620)				if (isAllEnum) {
HXLINE( 620)					isAllEnum = ::Reflect_obj::isEnumValue(key);
            				}
            				else {
HXLINE( 620)					isAllEnum = false;
            				}
            			}
            		}
HXLINE( 622)		if (isAllInt) {
HXLINE( 623)			 ::haxe::ds::IntMap m =  ::haxe::ds::IntMap_obj::__alloc( HX_CTX );
HXLINE( 624)			{
HXLINE( 624)				int _g1_current = 0;
HXDLIN( 624)				::cpp::VirtualArray _g1_array = keys;
HXDLIN( 624)				while((_g1_current < _g1_array->get_length())){
HXLINE( 624)					 ::Dynamic _g2_value = _g1_array->__get(_g1_current);
HXDLIN( 624)					_g1_current = (_g1_current + 1);
HXDLIN( 624)					int _g2_key = (_g1_current - 1);
HXDLIN( 624)					int i = _g2_key;
HXDLIN( 624)					 ::Dynamic key = _g2_value;
HXLINE( 625)					m->set(( (int)(key) ),values->__get(i));
            				}
            			}
HXLINE( 626)			return m;
            		}
HXLINE( 628)		if (isAllString) {
HXLINE( 629)			 ::haxe::ds::StringMap m =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXLINE( 630)			{
HXLINE( 630)				int _g1_current = 0;
HXDLIN( 630)				::cpp::VirtualArray _g1_array = keys;
HXDLIN( 630)				while((_g1_current < _g1_array->get_length())){
HXLINE( 630)					 ::Dynamic _g2_value = _g1_array->__get(_g1_current);
HXDLIN( 630)					_g1_current = (_g1_current + 1);
HXDLIN( 630)					int _g2_key = (_g1_current - 1);
HXDLIN( 630)					int i = _g2_key;
HXDLIN( 630)					 ::Dynamic key = _g2_value;
HXLINE( 631)					m->set(( (::String)(key) ),values->__get(i));
            				}
            			}
HXLINE( 632)			return m;
            		}
HXLINE( 634)		if (isAllEnum) {
HXLINE( 635)			 ::haxe::ds::EnumValueMap m =  ::haxe::ds::EnumValueMap_obj::__alloc( HX_CTX );
HXLINE( 636)			{
HXLINE( 636)				int _g1_current = 0;
HXDLIN( 636)				::cpp::VirtualArray _g1_array = keys;
HXDLIN( 636)				while((_g1_current < _g1_array->get_length())){
HXLINE( 636)					 ::Dynamic _g2_value = _g1_array->__get(_g1_current);
HXDLIN( 636)					_g1_current = (_g1_current + 1);
HXDLIN( 636)					int _g2_key = (_g1_current - 1);
HXDLIN( 636)					int i = _g2_key;
HXDLIN( 636)					 ::Dynamic key = _g2_value;
HXLINE( 637)					m->set(key,values->__get(i));
            				}
            			}
HXLINE( 638)			return m;
            		}
HXLINE( 640)		if (isAllObject) {
HXLINE( 641)			 ::haxe::ds::ObjectMap m =  ::haxe::ds::ObjectMap_obj::__alloc( HX_CTX );
HXLINE( 642)			{
HXLINE( 642)				int _g1_current = 0;
HXDLIN( 642)				::cpp::VirtualArray _g1_array = keys;
HXDLIN( 642)				while((_g1_current < _g1_array->get_length())){
HXLINE( 642)					 ::Dynamic _g2_value = _g1_array->__get(_g1_current);
HXDLIN( 642)					_g1_current = (_g1_current + 1);
HXDLIN( 642)					int _g2_key = (_g1_current - 1);
HXDLIN( 642)					int i = _g2_key;
HXDLIN( 642)					 ::Dynamic key = _g2_value;
HXLINE( 643)					m->set(key,values->__get(i));
            				}
            			}
HXLINE( 644)			return m;
            		}
HXLINE( 646)		 ::hscript::Error e = ::hscript::Error_obj::ECustom((HX_("Invalid map keys ",9f,d8,7f,7b) + ::Std_obj::string(keys)));
HXDLIN( 646)		HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(e));
HXDLIN( 646)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC2(Interp_obj,makeMap,return )

 ::Dynamic Interp_obj::get( ::Dynamic o,::String f){
            	HX_STACKFRAME(&_hx_pos_f37559d470356c9e_650_get)
HXLINE( 651)		if (::hx::IsNull( o )) {
HXLINE( 651)			 ::hscript::Error e = ::hscript::Error_obj::EInvalidAccess(f);
HXDLIN( 651)			HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(e));
            		}
HXLINE( 652)		return ::Reflect_obj::getProperty(o,f);
            	}


HX_DEFINE_DYNAMIC_FUNC2(Interp_obj,get,return )

 ::Dynamic Interp_obj::set( ::Dynamic o,::String f, ::Dynamic v){
            	HX_STACKFRAME(&_hx_pos_f37559d470356c9e_666_set)
HXLINE( 667)		if (::hx::IsNull( o )) {
HXLINE( 667)			 ::hscript::Error e = ::hscript::Error_obj::EInvalidAccess(f);
HXDLIN( 667)			HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(e));
            		}
HXLINE( 668)		::Reflect_obj::setProperty(o,f,v);
HXLINE( 669)		return v;
            	}


HX_DEFINE_DYNAMIC_FUNC3(Interp_obj,set,return )

 ::Dynamic Interp_obj::fcall( ::Dynamic o,::String f,::cpp::VirtualArray args){
            	HX_STACKFRAME(&_hx_pos_f37559d470356c9e_673_fcall)
HXDLIN( 673)		return this->call(o,this->get(o,f),args);
            	}


HX_DEFINE_DYNAMIC_FUNC3(Interp_obj,fcall,return )

 ::Dynamic Interp_obj::call( ::Dynamic o, ::Dynamic f,::cpp::VirtualArray args){
            	HX_STACKFRAME(&_hx_pos_f37559d470356c9e_677_call)
HXDLIN( 677)		return ::Reflect_obj::callMethod(o,f,args);
            	}


HX_DEFINE_DYNAMIC_FUNC3(Interp_obj,call,return )

 ::Dynamic Interp_obj::cnew(::String cl,::cpp::VirtualArray args){
            	HX_STACKFRAME(&_hx_pos_f37559d470356c9e_680_cnew)
HXLINE( 681)		::hx::Class c = ::Type_obj::resolveClass(cl);
HXLINE( 682)		if (::hx::IsNull( c )) {
HXLINE( 682)			c = this->resolve(cl);
            		}
HXLINE( 683)		return ::Type_obj::createInstance(c,args);
            	}


HX_DEFINE_DYNAMIC_FUNC2(Interp_obj,cnew,return )


::hx::ObjectPtr< Interp_obj > Interp_obj::__new() {
	::hx::ObjectPtr< Interp_obj > __this = new Interp_obj();
	__this->__construct();
	return __this;
}

::hx::ObjectPtr< Interp_obj > Interp_obj::__alloc(::hx::Ctx *_hx_ctx) {
	Interp_obj *__this = (Interp_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(Interp_obj), true, "hscript.Interp"));
	*(void **)__this = Interp_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

Interp_obj::Interp_obj()
{
}

void Interp_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Interp);
	HX_MARK_MEMBER_NAME(variables,"variables");
	HX_MARK_MEMBER_NAME(locals,"locals");
	HX_MARK_MEMBER_NAME(binops,"binops");
	HX_MARK_MEMBER_NAME(depth,"depth");
	HX_MARK_MEMBER_NAME(inTry,"inTry");
	HX_MARK_MEMBER_NAME(declared,"declared");
	HX_MARK_MEMBER_NAME(returnValue,"returnValue");
	HX_MARK_END_CLASS();
}

void Interp_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(variables,"variables");
	HX_VISIT_MEMBER_NAME(locals,"locals");
	HX_VISIT_MEMBER_NAME(binops,"binops");
	HX_VISIT_MEMBER_NAME(depth,"depth");
	HX_VISIT_MEMBER_NAME(inTry,"inTry");
	HX_VISIT_MEMBER_NAME(declared,"declared");
	HX_VISIT_MEMBER_NAME(returnValue,"returnValue");
}

::hx::Val Interp_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"get") ) { return ::hx::Val( get_dyn() ); }
		if (HX_FIELD_EQ(inName,"set") ) { return ::hx::Val( set_dyn() ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"expr") ) { return ::hx::Val( expr_dyn() ); }
		if (HX_FIELD_EQ(inName,"call") ) { return ::hx::Val( call_dyn() ); }
		if (HX_FIELD_EQ(inName,"cnew") ) { return ::hx::Val( cnew_dyn() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"depth") ) { return ::hx::Val( depth ); }
		if (HX_FIELD_EQ(inName,"inTry") ) { return ::hx::Val( inTry ); }
		if (HX_FIELD_EQ(inName,"error") ) { return ::hx::Val( error_dyn() ); }
		if (HX_FIELD_EQ(inName,"isMap") ) { return ::hx::Val( isMap_dyn() ); }
		if (HX_FIELD_EQ(inName,"fcall") ) { return ::hx::Val( fcall_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"locals") ) { return ::hx::Val( locals ); }
		if (HX_FIELD_EQ(inName,"binops") ) { return ::hx::Val( binops ); }
		if (HX_FIELD_EQ(inName,"setVar") ) { return ::hx::Val( setVar_dyn() ); }
		if (HX_FIELD_EQ(inName,"assign") ) { return ::hx::Val( assign_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"initOps") ) { return ::hx::Val( initOps_dyn() ); }
		if (HX_FIELD_EQ(inName,"execute") ) { return ::hx::Val( execute_dyn() ); }
		if (HX_FIELD_EQ(inName,"restore") ) { return ::hx::Val( restore_dyn() ); }
		if (HX_FIELD_EQ(inName,"rethrow") ) { return ::hx::Val( rethrow_dyn() ); }
		if (HX_FIELD_EQ(inName,"resolve") ) { return ::hx::Val( resolve_dyn() ); }
		if (HX_FIELD_EQ(inName,"forLoop") ) { return ::hx::Val( forLoop_dyn() ); }
		if (HX_FIELD_EQ(inName,"loopRun") ) { return ::hx::Val( loopRun_dyn() ); }
		if (HX_FIELD_EQ(inName,"makeMap") ) { return ::hx::Val( makeMap_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"declared") ) { return ::hx::Val( declared ); }
		if (HX_FIELD_EQ(inName,"posInfos") ) { return ::hx::Val( posInfos_dyn() ); }
		if (HX_FIELD_EQ(inName,"assignOp") ) { return ::hx::Val( assignOp_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"variables") ) { return ::hx::Val( variables ); }
		if (HX_FIELD_EQ(inName,"increment") ) { return ::hx::Val( increment_dyn() ); }
		if (HX_FIELD_EQ(inName,"duplicate") ) { return ::hx::Val( duplicate_dyn() ); }
		if (HX_FIELD_EQ(inName,"whileLoop") ) { return ::hx::Val( whileLoop_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"exprReturn") ) { return ::hx::Val( exprReturn_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"returnValue") ) { return ::hx::Val( returnValue ); }
		if (HX_FIELD_EQ(inName,"doWhileLoop") ) { return ::hx::Val( doWhileLoop_dyn() ); }
		if (HX_FIELD_EQ(inName,"getMapValue") ) { return ::hx::Val( getMapValue_dyn() ); }
		if (HX_FIELD_EQ(inName,"setMapValue") ) { return ::hx::Val( setMapValue_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"evalAssignOp") ) { return ::hx::Val( evalAssignOp_dyn() ); }
		if (HX_FIELD_EQ(inName,"makeIterator") ) { return ::hx::Val( makeIterator_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"resetVariables") ) { return ::hx::Val( resetVariables_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val Interp_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"depth") ) { depth=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"inTry") ) { inTry=inValue.Cast< bool >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"locals") ) { locals=inValue.Cast<  ::haxe::ds::StringMap >(); return inValue; }
		if (HX_FIELD_EQ(inName,"binops") ) { binops=inValue.Cast<  ::haxe::ds::StringMap >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"declared") ) { declared=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"variables") ) { variables=inValue.Cast<  ::haxe::ds::StringMap >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"returnValue") ) { returnValue=inValue.Cast<  ::Dynamic >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Interp_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("variables",b7,e2,62,82));
	outFields->push(HX_("locals",a8,74,bf,59));
	outFields->push(HX_("binops",cb,59,16,ed));
	outFields->push(HX_("depth",03,f1,29,d7));
	outFields->push(HX_("inTry",56,82,08,be));
	outFields->push(HX_("declared",fa,58,bc,c4));
	outFields->push(HX_("returnValue",a1,4c,95,3e));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo Interp_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::haxe::ds::StringMap */ ,(int)offsetof(Interp_obj,variables),HX_("variables",b7,e2,62,82)},
	{::hx::fsObject /*  ::haxe::ds::StringMap */ ,(int)offsetof(Interp_obj,locals),HX_("locals",a8,74,bf,59)},
	{::hx::fsObject /*  ::haxe::ds::StringMap */ ,(int)offsetof(Interp_obj,binops),HX_("binops",cb,59,16,ed)},
	{::hx::fsInt,(int)offsetof(Interp_obj,depth),HX_("depth",03,f1,29,d7)},
	{::hx::fsBool,(int)offsetof(Interp_obj,inTry),HX_("inTry",56,82,08,be)},
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(Interp_obj,declared),HX_("declared",fa,58,bc,c4)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(Interp_obj,returnValue),HX_("returnValue",a1,4c,95,3e)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *Interp_obj_sStaticStorageInfo = 0;
#endif

static ::String Interp_obj_sMemberFields[] = {
	HX_("variables",b7,e2,62,82),
	HX_("locals",a8,74,bf,59),
	HX_("binops",cb,59,16,ed),
	HX_("depth",03,f1,29,d7),
	HX_("inTry",56,82,08,be),
	HX_("declared",fa,58,bc,c4),
	HX_("returnValue",a1,4c,95,3e),
	HX_("resetVariables",e8,46,d3,dc),
	HX_("posInfos",11,82,2e,5a),
	HX_("initOps",02,63,8b,cb),
	HX_("setVar",65,6c,71,6f),
	HX_("assign",2f,46,06,4c),
	HX_("assignOp",30,b5,c7,0e),
	HX_("evalAssignOp",ec,d8,94,19),
	HX_("increment",2f,06,ff,31),
	HX_("execute",35,0a,0d,cc),
	HX_("exprReturn",c5,6b,ed,86),
	HX_("duplicate",8b,21,17,a1),
	HX_("restore",4e,67,b0,6a),
	HX_("error",c8,cb,29,73),
	HX_("rethrow",93,b0,2a,f6),
	HX_("resolve",ec,12,60,67),
	HX_("expr",35,fd,1d,43),
	HX_("doWhileLoop",aa,01,97,3a),
	HX_("whileLoop",b5,42,98,e1),
	HX_("makeIterator",fc,dd,72,d8),
	HX_("forLoop",0d,52,69,c9),
	HX_("loopRun",47,0f,6c,20),
	HX_("isMap",d2,34,51,c1),
	HX_("getMapValue",eb,b1,ee,ce),
	HX_("setMapValue",f7,b8,5b,d9),
	HX_("makeMap",4e,f1,1e,5c),
	HX_("get",96,80,4e,00),
	HX_("set",a2,9b,57,00),
	HX_("fcall",04,44,99,fc),
	HX_("call",9e,18,ba,41),
	HX_("cnew",dd,ef,c3,41),
	::String(null()) };

::hx::Class Interp_obj::__mClass;

void Interp_obj::__register()
{
	Interp_obj _hx_dummy;
	Interp_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("hscript.Interp",8f,7c,f0,9a);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(Interp_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< Interp_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Interp_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Interp_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace hscript

// Generated by Haxe 4.1.5
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_StringBuf
#include <StringBuf.h>
#endif
#ifndef INCLUDED_Type
#include <Type.h>
#endif
#ifndef INCLUDED_haxe_Exception
#include <haxe/Exception.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_GenericCell_hscript_Token
#include <haxe/ds/GenericCell_hscript_Token.h>
#endif
#ifndef INCLUDED_haxe_ds_GenericStack_hscript_Token
#include <haxe/ds/GenericStack_hscript_Token.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_hscript_CType
#include <hscript/CType.h>
#endif
#ifndef INCLUDED_hscript_Const
#include <hscript/Const.h>
#endif
#ifndef INCLUDED_hscript_Error
#include <hscript/Error.h>
#endif
#ifndef INCLUDED_hscript_Expr
#include <hscript/Expr.h>
#endif
#ifndef INCLUDED_hscript_FieldAccess
#include <hscript/FieldAccess.h>
#endif
#ifndef INCLUDED_hscript_FieldKind
#include <hscript/FieldKind.h>
#endif
#ifndef INCLUDED_hscript_ModuleDecl
#include <hscript/ModuleDecl.h>
#endif
#ifndef INCLUDED_hscript_Parser
#include <hscript/Parser.h>
#endif
#ifndef INCLUDED_hscript_Token
#include <hscript/Token.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_2fd3d36595bebf3d_46_new,"hscript.Parser","new",0x4b9f158c,"hscript.Parser.new","hscript/Parser.hx",46,0x98735743)
static const ::String _hx_array_data_e9f29f9a_3[] = {
	HX_("%",25,00,00,00),
};
static const ::String _hx_array_data_e9f29f9a_4[] = {
	HX_("*",2a,00,00,00),HX_("/",2f,00,00,00),
};
static const ::String _hx_array_data_e9f29f9a_5[] = {
	HX_("+",2b,00,00,00),HX_("-",2d,00,00,00),
};
static const ::String _hx_array_data_e9f29f9a_6[] = {
	HX_("<<",80,34,00,00),HX_(">>",40,36,00,00),HX_(">>>",fe,41,2f,00),
};
static const ::String _hx_array_data_e9f29f9a_7[] = {
	HX_("|",7c,00,00,00),HX_("&",26,00,00,00),HX_("^",5e,00,00,00),
};
static const ::String _hx_array_data_e9f29f9a_8[] = {
	HX_("==",60,35,00,00),HX_("!=",fc,1c,00,00),HX_(">",3e,00,00,00),HX_("<",3c,00,00,00),HX_(">=",3f,36,00,00),HX_("<=",81,34,00,00),
};
static const ::String _hx_array_data_e9f29f9a_9[] = {
	HX_("...",ee,0f,23,00),
};
static const ::String _hx_array_data_e9f29f9a_10[] = {
	HX_("&&",40,21,00,00),
};
static const ::String _hx_array_data_e9f29f9a_11[] = {
	HX_("||",80,6c,00,00),
};
static const ::String _hx_array_data_e9f29f9a_12[] = {
	HX_("=",3d,00,00,00),HX_("+=",b2,25,00,00),HX_("-=",70,27,00,00),HX_("*=",d3,24,00,00),HX_("/=",2e,29,00,00),HX_("%=",78,20,00,00),HX_("<<=",bd,bb,2d,00),HX_(">>=",fd,41,2f,00),HX_(">>>=",7f,7c,2a,29),HX_("|=",41,6c,00,00),HX_("&=",57,21,00,00),HX_("^=",1f,52,00,00),HX_("=>",61,35,00,00),
};
static const ::String _hx_array_data_e9f29f9a_13[] = {
	HX_("->",71,27,00,00),
};
HX_LOCAL_STACK_FRAME(_hx_pos_2fd3d36595bebf3d_134_get_currentPos,"hscript.Parser","get_currentPos",0xd52d5d78,"hscript.Parser.get_currentPos","hscript/Parser.hx",134,0x98735743)
HX_LOCAL_STACK_FRAME(_hx_pos_2fd3d36595bebf3d_137_error,"hscript.Parser","error",0x9bb1b3f4,"hscript.Parser.error","hscript/Parser.hx",137,0x98735743)
HX_LOCAL_STACK_FRAME(_hx_pos_2fd3d36595bebf3d_146_invalidChar,"hscript.Parser","invalidChar",0x0ae4fe99,"hscript.Parser.invalidChar","hscript/Parser.hx",146,0x98735743)
HX_LOCAL_STACK_FRAME(_hx_pos_2fd3d36595bebf3d_149_initParser,"hscript.Parser","initParser",0xe350f063,"hscript.Parser.initParser","hscript/Parser.hx",149,0x98735743)
HX_LOCAL_STACK_FRAME(_hx_pos_2fd3d36595bebf3d_172_parseString,"hscript.Parser","parseString",0xed832690,"hscript.Parser.parseString","hscript/Parser.hx",172,0x98735743)
HX_LOCAL_STACK_FRAME(_hx_pos_2fd3d36595bebf3d_186_unexpected,"hscript.Parser","unexpected",0xb7770e25,"hscript.Parser.unexpected","hscript/Parser.hx",186,0x98735743)
HX_LOCAL_STACK_FRAME(_hx_pos_2fd3d36595bebf3d_197_push,"hscript.Parser","push",0xe0f2532e,"hscript.Parser.push","hscript/Parser.hx",197,0x98735743)
HX_LOCAL_STACK_FRAME(_hx_pos_2fd3d36595bebf3d_201_ensure,"hscript.Parser","ensure",0x52df3412,"hscript.Parser.ensure","hscript/Parser.hx",201,0x98735743)
HX_LOCAL_STACK_FRAME(_hx_pos_2fd3d36595bebf3d_206_ensureToken,"hscript.Parser","ensureToken",0x4d49bd87,"hscript.Parser.ensureToken","hscript/Parser.hx",206,0x98735743)
HX_LOCAL_STACK_FRAME(_hx_pos_2fd3d36595bebf3d_211_maybe,"hscript.Parser","maybe",0x2baefbd4,"hscript.Parser.maybe","hscript/Parser.hx",211,0x98735743)
HX_LOCAL_STACK_FRAME(_hx_pos_2fd3d36595bebf3d_219_getIdent,"hscript.Parser","getIdent",0x33becdce,"hscript.Parser.getIdent","hscript/Parser.hx",219,0x98735743)
HX_LOCAL_STACK_FRAME(_hx_pos_2fd3d36595bebf3d_233_expr,"hscript.Parser","expr",0xd9af3e89,"hscript.Parser.expr","hscript/Parser.hx",233,0x98735743)
HX_LOCAL_STACK_FRAME(_hx_pos_2fd3d36595bebf3d_241_pmin,"hscript.Parser","pmin",0xe0ec3876,"hscript.Parser.pmin","hscript/Parser.hx",241,0x98735743)
HX_LOCAL_STACK_FRAME(_hx_pos_2fd3d36595bebf3d_249_pmax,"hscript.Parser","pmax",0xe0ec3188,"hscript.Parser.pmax","hscript/Parser.hx",249,0x98735743)
HX_LOCAL_STACK_FRAME(_hx_pos_2fd3d36595bebf3d_260_mk,"hscript.Parser","mk",0xd828e3b2,"hscript.Parser.mk","hscript/Parser.hx",260,0x98735743)
HX_LOCAL_STACK_FRAME(_hx_pos_2fd3d36595bebf3d_264_isBlock,"hscript.Parser","isBlock",0x99f5642f,"hscript.Parser.isBlock","hscript/Parser.hx",264,0x98735743)
HX_LOCAL_STACK_FRAME(_hx_pos_2fd3d36595bebf3d_283_parseFullExpr,"hscript.Parser","parseFullExpr",0x2c8eb1e3,"hscript.Parser.parseFullExpr","hscript/Parser.hx",283,0x98735743)
HX_LOCAL_STACK_FRAME(_hx_pos_2fd3d36595bebf3d_303_parseObject,"hscript.Parser","parseObject",0xf1927c7e,"hscript.Parser.parseObject","hscript/Parser.hx",303,0x98735743)
HX_LOCAL_STACK_FRAME(_hx_pos_2fd3d36595bebf3d_338_parseExpr,"hscript.Parser","parseExpr",0x8f01bd34,"hscript.Parser.parseExpr","hscript/Parser.hx",338,0x98735743)
HX_LOCAL_STACK_FRAME(_hx_pos_2fd3d36595bebf3d_477_parseLambda,"hscript.Parser","parseLambda",0x2d1330c6,"hscript.Parser.parseLambda","hscript/Parser.hx",477,0x98735743)
HX_LOCAL_STACK_FRAME(_hx_pos_2fd3d36595bebf3d_497_parseMetaArgs,"hscript.Parser","parseMetaArgs",0xfe617641,"hscript.Parser.parseMetaArgs","hscript/Parser.hx",497,0x98735743)
HX_LOCAL_STACK_FRAME(_hx_pos_2fd3d36595bebf3d_521_mapCompr,"hscript.Parser","mapCompr",0xde0e1f9b,"hscript.Parser.mapCompr","hscript/Parser.hx",521,0x98735743)
HX_LOCAL_STACK_FRAME(_hx_pos_2fd3d36595bebf3d_542_makeUnop,"hscript.Parser","makeUnop",0x60b6401c,"hscript.Parser.makeUnop","hscript/Parser.hx",542,0x98735743)
HX_LOCAL_STACK_FRAME(_hx_pos_2fd3d36595bebf3d_552_makeBinop,"hscript.Parser","makeBinop",0x4ad5ff06,"hscript.Parser.makeBinop","hscript/Parser.hx",552,0x98735743)
HX_LOCAL_STACK_FRAME(_hx_pos_2fd3d36595bebf3d_575_parseStructure,"hscript.Parser","parseStructure",0x237837d4,"hscript.Parser.parseStructure","hscript/Parser.hx",575,0x98735743)
HX_LOCAL_STACK_FRAME(_hx_pos_2fd3d36595bebf3d_763_parseExprNext,"hscript.Parser","parseExprNext",0x83d61847,"hscript.Parser.parseExprNext","hscript/Parser.hx",763,0x98735743)
HX_LOCAL_STACK_FRAME(_hx_pos_2fd3d36595bebf3d_824_parseFunctionArgs,"hscript.Parser","parseFunctionArgs",0xca222794,"hscript.Parser.parseFunctionArgs","hscript/Parser.hx",824,0x98735743)
HX_LOCAL_STACK_FRAME(_hx_pos_2fd3d36595bebf3d_866_parseFunctionDecl,"hscript.Parser","parseFunctionDecl",0xcc13eaa1,"hscript.Parser.parseFunctionDecl","hscript/Parser.hx",866,0x98735743)
HX_LOCAL_STACK_FRAME(_hx_pos_2fd3d36595bebf3d_880_parsePath,"hscript.Parser","parsePath",0x9635a5a4,"hscript.Parser.parsePath","hscript/Parser.hx",880,0x98735743)
HX_LOCAL_STACK_FRAME(_hx_pos_2fd3d36595bebf3d_893_parseType,"hscript.Parser","parseType",0x98ecb2b9,"hscript.Parser.parseType","hscript/Parser.hx",893,0x98735743)
HX_LOCAL_STACK_FRAME(_hx_pos_2fd3d36595bebf3d_938_parseType,"hscript.Parser","parseType",0x98ecb2b9,"hscript.Parser.parseType","hscript/Parser.hx",938,0x98735743)
HX_LOCAL_STACK_FRAME(_hx_pos_2fd3d36595bebf3d_1015_parseTypeNext,"hscript.Parser","parseTypeNext",0x8b2ab44c,"hscript.Parser.parseTypeNext","hscript/Parser.hx",1015,0x98735743)
HX_LOCAL_STACK_FRAME(_hx_pos_2fd3d36595bebf3d_1037_parseExprList,"hscript.Parser","parseExprList",0x8286afb2,"hscript.Parser.parseExprList","hscript/Parser.hx",1037,0x98735743)
HX_LOCAL_STACK_FRAME(_hx_pos_2fd3d36595bebf3d_1059_parseModule,"hscript.Parser","parseModule",0x9d26326b,"hscript.Parser.parseModule","hscript/Parser.hx",1059,0x98735743)
HX_LOCAL_STACK_FRAME(_hx_pos_2fd3d36595bebf3d_1075_parseMetadata,"hscript.Parser","parseMetadata",0x157712ee,"hscript.Parser.parseMetadata","hscript/Parser.hx",1075,0x98735743)
HX_LOCAL_STACK_FRAME(_hx_pos_2fd3d36595bebf3d_1090_parseParams,"hscript.Parser","parseParams",0xc9cdf905,"hscript.Parser.parseParams","hscript/Parser.hx",1090,0x98735743)
HX_LOCAL_STACK_FRAME(_hx_pos_2fd3d36595bebf3d_1096_parseModuleDecl,"hscript.Parser","parseModuleDecl",0xfa46c075,"hscript.Parser.parseModuleDecl","hscript/Parser.hx",1096,0x98735743)
HX_LOCAL_STACK_FRAME(_hx_pos_2fd3d36595bebf3d_1189_parseField,"hscript.Parser","parseField",0x1bf7d3db,"hscript.Parser.parseField","hscript/Parser.hx",1189,0x98735743)
HX_LOCAL_STACK_FRAME(_hx_pos_2fd3d36595bebf3d_1264_readChar,"hscript.Parser","readChar",0x8625b4a0,"hscript.Parser.readChar","hscript/Parser.hx",1264,0x98735743)
HX_LOCAL_STACK_FRAME(_hx_pos_2fd3d36595bebf3d_1267_readString,"hscript.Parser","readString",0xfc2f051b,"hscript.Parser.readString","hscript/Parser.hx",1267,0x98735743)
HX_LOCAL_STACK_FRAME(_hx_pos_2fd3d36595bebf3d_1327_token,"hscript.Parser","token",0x3cb36b25,"hscript.Parser.token","hscript/Parser.hx",1327,0x98735743)
HX_LOCAL_STACK_FRAME(_hx_pos_2fd3d36595bebf3d_1551_preprocValue,"hscript.Parser","preprocValue",0xbabba0cc,"hscript.Parser.preprocValue","hscript/Parser.hx",1551,0x98735743)
HX_LOCAL_STACK_FRAME(_hx_pos_2fd3d36595bebf3d_1556_parsePreproCond,"hscript.Parser","parsePreproCond",0x44c5e42b,"hscript.Parser.parsePreproCond","hscript/Parser.hx",1556,0x98735743)
HX_LOCAL_STACK_FRAME(_hx_pos_2fd3d36595bebf3d_1572_evalPreproCond,"hscript.Parser","evalPreproCond",0x4859d7fc,"hscript.Parser.evalPreproCond","hscript/Parser.hx",1572,0x98735743)
HX_LOCAL_STACK_FRAME(_hx_pos_2fd3d36595bebf3d_1590_preprocess,"hscript.Parser","preprocess",0x83c9d500,"hscript.Parser.preprocess","hscript/Parser.hx",1590,0x98735743)
HX_LOCAL_STACK_FRAME(_hx_pos_2fd3d36595bebf3d_1622_skipTokens,"hscript.Parser","skipTokens",0xeb6e038d,"hscript.Parser.skipTokens","hscript/Parser.hx",1622,0x98735743)
HX_LOCAL_STACK_FRAME(_hx_pos_2fd3d36595bebf3d_1637_tokenComment,"hscript.Parser","tokenComment",0xb86c15ba,"hscript.Parser.tokenComment","hscript/Parser.hx",1637,0x98735743)
HX_LOCAL_STACK_FRAME(_hx_pos_2fd3d36595bebf3d_1680_constString,"hscript.Parser","constString",0x0a4693c0,"hscript.Parser.constString","hscript/Parser.hx",1680,0x98735743)
HX_LOCAL_STACK_FRAME(_hx_pos_2fd3d36595bebf3d_1688_tokenString,"hscript.Parser","tokenString",0x05f471d6,"hscript.Parser.tokenString","hscript/Parser.hx",1688,0x98735743)
HX_LOCAL_STACK_FRAME(_hx_pos_2fd3d36595bebf3d_99_boot,"hscript.Parser","boot",0xd7acc586,"hscript.Parser.boot","hscript/Parser.hx",99,0x98735743)
HX_LOCAL_STACK_FRAME(_hx_pos_2fd3d36595bebf3d_100_boot,"hscript.Parser","boot",0xd7acc586,"hscript.Parser.boot","hscript/Parser.hx",100,0x98735743)
HX_LOCAL_STACK_FRAME(_hx_pos_2fd3d36595bebf3d_101_boot,"hscript.Parser","boot",0xd7acc586,"hscript.Parser.boot","hscript/Parser.hx",101,0x98735743)
namespace hscript{

void Parser_obj::__construct(){
            	HX_GC_STACKFRAME(&_hx_pos_2fd3d36595bebf3d_46_new)
HXLINE(  89)		this->uid = 0;
HXLINE(  58)		this->preprocesorValues =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXLINE( 107)		this->line = 1;
HXLINE( 108)		this->opChars = HX_("+*/-=!><&|^%~",e2,ec,c4,dc);
HXLINE( 109)		this->identChars = HX_("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789_",e0,b5,3b,15);
HXLINE( 110)		::Array< ::Dynamic> priorities = ::Array_obj< ::Dynamic>::__new(11)->init(0,::Array_obj< ::String >::fromData( _hx_array_data_e9f29f9a_3,1))->init(1,::Array_obj< ::String >::fromData( _hx_array_data_e9f29f9a_4,2))->init(2,::Array_obj< ::String >::fromData( _hx_array_data_e9f29f9a_5,2))->init(3,::Array_obj< ::String >::fromData( _hx_array_data_e9f29f9a_6,3))->init(4,::Array_obj< ::String >::fromData( _hx_array_data_e9f29f9a_7,3))->init(5,::Array_obj< ::String >::fromData( _hx_array_data_e9f29f9a_8,6))->init(6,::Array_obj< ::String >::fromData( _hx_array_data_e9f29f9a_9,1))->init(7,::Array_obj< ::String >::fromData( _hx_array_data_e9f29f9a_10,1))->init(8,::Array_obj< ::String >::fromData( _hx_array_data_e9f29f9a_11,1))->init(9,::Array_obj< ::String >::fromData( _hx_array_data_e9f29f9a_12,13))->init(10,::Array_obj< ::String >::fromData( _hx_array_data_e9f29f9a_13,1));
HXLINE( 123)		this->opPriority =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXLINE( 124)		this->opRightAssoc =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXLINE( 125)		{
HXLINE( 125)			int _g = 0;
HXDLIN( 125)			int _g1 = priorities->length;
HXDLIN( 125)			while((_g < _g1)){
HXLINE( 125)				_g = (_g + 1);
HXDLIN( 125)				int i = (_g - 1);
HXLINE( 126)				{
HXLINE( 126)					int _g1 = 0;
HXDLIN( 126)					::Array< ::String > _g2 = priorities->__get(i).StaticCast< ::Array< ::String > >();
HXDLIN( 126)					while((_g1 < _g2->length)){
HXLINE( 126)						::String x = _g2->__get(_g1);
HXDLIN( 126)						_g1 = (_g1 + 1);
HXLINE( 127)						this->opPriority->set(x,i);
HXLINE( 128)						if ((i == 9)) {
HXLINE( 128)							this->opRightAssoc->set(x,true);
            						}
            					}
            				}
            			}
            		}
HXLINE( 130)		{
HXLINE( 130)			{
HXLINE( 130)				::String x = HX_("!",21,00,00,00);
HXLINE( 131)				{
HXLINE( 131)					int _hx_tmp;
HXDLIN( 131)					bool _hx_tmp1;
HXDLIN( 131)					if ((x != HX_("++",a0,25,00,00))) {
HXLINE( 131)						_hx_tmp1 = (x == HX_("--",60,27,00,00));
            					}
            					else {
HXLINE( 131)						_hx_tmp1 = true;
            					}
HXDLIN( 131)					if (_hx_tmp1) {
HXLINE( 131)						_hx_tmp = -1;
            					}
            					else {
HXLINE( 131)						_hx_tmp = -2;
            					}
HXDLIN( 131)					this->opPriority->set(x,_hx_tmp);
            				}
            			}
HXLINE( 130)			{
HXLINE( 130)				::String x1 = HX_("++",a0,25,00,00);
HXLINE( 131)				{
HXLINE( 131)					int _hx_tmp2;
HXDLIN( 131)					bool _hx_tmp3;
HXDLIN( 131)					if ((x1 != HX_("++",a0,25,00,00))) {
HXLINE( 131)						_hx_tmp3 = (x1 == HX_("--",60,27,00,00));
            					}
            					else {
HXLINE( 131)						_hx_tmp3 = true;
            					}
HXDLIN( 131)					if (_hx_tmp3) {
HXLINE( 131)						_hx_tmp2 = -1;
            					}
            					else {
HXLINE( 131)						_hx_tmp2 = -2;
            					}
HXDLIN( 131)					this->opPriority->set(x1,_hx_tmp2);
            				}
            			}
HXLINE( 130)			{
HXLINE( 130)				::String x2 = HX_("--",60,27,00,00);
HXLINE( 131)				{
HXLINE( 131)					int _hx_tmp4;
HXDLIN( 131)					bool _hx_tmp5;
HXDLIN( 131)					if ((x2 != HX_("++",a0,25,00,00))) {
HXLINE( 131)						_hx_tmp5 = (x2 == HX_("--",60,27,00,00));
            					}
            					else {
HXLINE( 131)						_hx_tmp5 = true;
            					}
HXDLIN( 131)					if (_hx_tmp5) {
HXLINE( 131)						_hx_tmp4 = -1;
            					}
            					else {
HXLINE( 131)						_hx_tmp4 = -2;
            					}
HXDLIN( 131)					this->opPriority->set(x2,_hx_tmp4);
            				}
            			}
HXLINE( 130)			{
HXLINE( 130)				::String x3 = HX_("~",7e,00,00,00);
HXLINE( 131)				{
HXLINE( 131)					int _hx_tmp6;
HXDLIN( 131)					bool _hx_tmp7;
HXDLIN( 131)					if ((x3 != HX_("++",a0,25,00,00))) {
HXLINE( 131)						_hx_tmp7 = (x3 == HX_("--",60,27,00,00));
            					}
            					else {
HXLINE( 131)						_hx_tmp7 = true;
            					}
HXDLIN( 131)					if (_hx_tmp7) {
HXLINE( 131)						_hx_tmp6 = -1;
            					}
            					else {
HXLINE( 131)						_hx_tmp6 = -2;
            					}
HXDLIN( 131)					this->opPriority->set(x3,_hx_tmp6);
            				}
            			}
            		}
            	}

Dynamic Parser_obj::__CreateEmpty() { return new Parser_obj; }

void *Parser_obj::_hx_vtable = 0;

Dynamic Parser_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< Parser_obj > _hx_result = new Parser_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Parser_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x1b857072;
}

int Parser_obj::get_currentPos(){
            	HX_STACKFRAME(&_hx_pos_2fd3d36595bebf3d_134_get_currentPos)
HXDLIN( 134)		return (this->readPos + this->offset);
            	}


HX_DEFINE_DYNAMIC_FUNC0(Parser_obj,get_currentPos,return )

void Parser_obj::error( ::hscript::Error err,int pmin,int pmax){
            	HX_STACKFRAME(&_hx_pos_2fd3d36595bebf3d_137_error)
HXDLIN( 137)		if (!(this->resumeErrors)) {
HXLINE( 141)			HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(err));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC3(Parser_obj,error,(void))

void Parser_obj::invalidChar(int c){
            	HX_STACKFRAME(&_hx_pos_2fd3d36595bebf3d_146_invalidChar)
HXDLIN( 146)		if (!(this->resumeErrors)) {
HXDLIN( 146)			HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::hscript::Error_obj::EInvalidChar(c)));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Parser_obj,invalidChar,(void))

void Parser_obj::initParser(::String origin,int pos){
            	HX_GC_STACKFRAME(&_hx_pos_2fd3d36595bebf3d_149_initParser)
HXLINE( 151)		this->preprocStack = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 159)		this->tokens =  ::haxe::ds::GenericStack_hscript_Token_obj::__alloc( HX_CTX );
HXLINE( 161)		this->offset = pos;
HXLINE( 162)		this->_hx_char = -1;
HXLINE( 163)		this->ops = ::Array_obj< bool >::__new();
HXLINE( 164)		this->idents = ::Array_obj< bool >::__new();
HXLINE( 165)		this->uid = 0;
HXLINE( 166)		{
HXLINE( 166)			int _g = 0;
HXDLIN( 166)			int _g1 = this->opChars.length;
HXDLIN( 166)			while((_g < _g1)){
HXLINE( 166)				_g = (_g + 1);
HXDLIN( 166)				int i = (_g - 1);
HXLINE( 167)				this->ops[( (int)(this->opChars.charCodeAt(i)) )] = true;
            			}
            		}
HXLINE( 168)		{
HXLINE( 168)			int _g2 = 0;
HXDLIN( 168)			int _g3 = this->identChars.length;
HXDLIN( 168)			while((_g2 < _g3)){
HXLINE( 168)				_g2 = (_g2 + 1);
HXDLIN( 168)				int i = (_g2 - 1);
HXLINE( 169)				this->idents[( (int)(this->identChars.charCodeAt(i)) )] = true;
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(Parser_obj,initParser,(void))

 ::hscript::Expr Parser_obj::parseString(::String s,::String __o_origin, ::Dynamic __o_position){
            		::String origin = __o_origin;
            		if (::hx::IsNull(__o_origin)) origin = HX_("hscript",73,8c,18,2c);
            		 ::Dynamic position = __o_position;
            		if (::hx::IsNull(__o_position)) position = 0;
            	HX_GC_STACKFRAME(&_hx_pos_2fd3d36595bebf3d_172_parseString)
HXLINE( 173)		this->initParser(origin,( (int)(position) ));
HXLINE( 174)		this->input = s;
HXLINE( 175)		this->readPos = 0;
HXLINE( 176)		::Array< ::Dynamic> a = ::Array_obj< ::Dynamic>::__new();
HXLINE( 177)		while(true){
HXLINE( 178)			 ::hscript::Token tk = this->token();
HXLINE( 179)			if (::hx::IsEq( tk,::hscript::Token_obj::TEof_dyn() )) {
HXLINE( 179)				goto _hx_goto_20;
            			}
HXLINE( 180)			{
HXLINE( 180)				 ::haxe::ds::GenericStack_hscript_Token _this = this->tokens;
HXDLIN( 180)				_this->head =  ::haxe::ds::GenericCell_hscript_Token_obj::__alloc( HX_CTX ,tk,_this->head);
            			}
HXLINE( 181)			this->parseFullExpr(a);
            		}
            		_hx_goto_20:;
HXLINE( 183)		if ((a->length == 1)) {
HXLINE( 183)			return a->__get(0).StaticCast<  ::hscript::Expr >();
            		}
            		else {
HXLINE( 183)			return ::hscript::Expr_obj::EBlock(a);
            		}
HXDLIN( 183)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC3(Parser_obj,parseString,return )

 ::Dynamic Parser_obj::unexpected( ::hscript::Token tk){
            	HX_STACKFRAME(&_hx_pos_2fd3d36595bebf3d_186_unexpected)
HXLINE( 187)		{
HXLINE( 187)			 ::hscript::Error err = ::hscript::Error_obj::EUnexpected(this->tokenString(tk));
HXDLIN( 187)			if (!(this->resumeErrors)) {
HXLINE( 187)				HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(err));
            			}
            		}
HXLINE( 188)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(Parser_obj,unexpected,return )

void Parser_obj::push( ::hscript::Token tk){
            	HX_GC_STACKFRAME(&_hx_pos_2fd3d36595bebf3d_197_push)
HXDLIN( 197)		 ::haxe::ds::GenericStack_hscript_Token _this = this->tokens;
HXDLIN( 197)		_this->head =  ::haxe::ds::GenericCell_hscript_Token_obj::__alloc( HX_CTX ,tk,_this->head);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Parser_obj,push,(void))

void Parser_obj::ensure( ::hscript::Token tk){
            	HX_STACKFRAME(&_hx_pos_2fd3d36595bebf3d_201_ensure)
HXLINE( 202)		 ::hscript::Token t = this->token();
HXLINE( 203)		if (::hx::IsNotEq( t,tk )) {
HXLINE( 203)			this->unexpected(t);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Parser_obj,ensure,(void))

void Parser_obj::ensureToken( ::hscript::Token tk){
            	HX_STACKFRAME(&_hx_pos_2fd3d36595bebf3d_206_ensureToken)
HXLINE( 207)		 ::hscript::Token t = this->token();
HXLINE( 208)		if (!(::Type_obj::enumEq(t,tk))) {
HXLINE( 208)			this->unexpected(t);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Parser_obj,ensureToken,(void))

bool Parser_obj::maybe( ::hscript::Token tk){
            	HX_GC_STACKFRAME(&_hx_pos_2fd3d36595bebf3d_211_maybe)
HXLINE( 212)		 ::hscript::Token t = this->token();
HXLINE( 213)		if (::Type_obj::enumEq(t,tk)) {
HXLINE( 214)			return true;
            		}
HXLINE( 215)		{
HXLINE( 215)			 ::haxe::ds::GenericStack_hscript_Token _this = this->tokens;
HXDLIN( 215)			_this->head =  ::haxe::ds::GenericCell_hscript_Token_obj::__alloc( HX_CTX ,t,_this->head);
            		}
HXLINE( 216)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Parser_obj,maybe,return )

::String Parser_obj::getIdent(){
            	HX_STACKFRAME(&_hx_pos_2fd3d36595bebf3d_219_getIdent)
HXLINE( 220)		 ::hscript::Token tk = this->token();
HXLINE( 221)		if (::hx::IsNull( tk )) {
HXLINE( 224)			this->unexpected(tk);
HXLINE( 225)			return null();
            		}
            		else {
HXLINE( 221)			if ((tk->_hx_getIndex() == 2)) {
HXLINE( 222)				::String id = tk->_hx_getString(0);
HXDLIN( 222)				return id;
            			}
            			else {
HXLINE( 224)				this->unexpected(tk);
HXLINE( 225)				return null();
            			}
            		}
HXLINE( 221)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Parser_obj,getIdent,return )

 ::hscript::Expr Parser_obj::expr( ::hscript::Expr e){
            	HX_STACKFRAME(&_hx_pos_2fd3d36595bebf3d_233_expr)
HXDLIN( 233)		return e;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Parser_obj,expr,return )

int Parser_obj::pmin( ::hscript::Expr e){
            	HX_STACKFRAME(&_hx_pos_2fd3d36595bebf3d_241_pmin)
HXDLIN( 241)		return 0;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Parser_obj,pmin,return )

int Parser_obj::pmax( ::hscript::Expr e){
            	HX_STACKFRAME(&_hx_pos_2fd3d36595bebf3d_249_pmax)
HXDLIN( 249)		return 0;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Parser_obj,pmax,return )

 ::hscript::Expr Parser_obj::mk( ::hscript::Expr e, ::Dynamic pmin, ::Dynamic pmax){
            	HX_STACKFRAME(&_hx_pos_2fd3d36595bebf3d_260_mk)
HXDLIN( 260)		return e;
            	}


HX_DEFINE_DYNAMIC_FUNC3(Parser_obj,mk,return )

bool Parser_obj::isBlock( ::hscript::Expr e){
            	HX_STACKFRAME(&_hx_pos_2fd3d36595bebf3d_264_isBlock)
HXLINE( 265)		if (::hx::IsNull( e )) {
HXLINE( 265)			return false;
            		}
HXLINE( 266)		switch((int)(e->_hx_getIndex())){
            			case (int)2: {
HXLINE( 269)				::String _g = e->_hx_getString(0);
HXDLIN( 269)				 ::hscript::Expr e1 = e->_hx_getObject(2).StaticCast<  ::hscript::Expr >();
HXDLIN( 269)				 ::hscript::CType t = e->_hx_getObject(1).StaticCast<  ::hscript::CType >();
HXDLIN( 269)				if (::hx::IsNotNull( e1 )) {
HXLINE( 269)					return this->isBlock(e1);
            				}
            				else {
HXLINE( 269)					if (::hx::IsNotNull( t )) {
HXLINE( 269)						if (::hx::IsNull( t )) {
HXLINE( 269)							return false;
            						}
            						else {
HXLINE( 269)							if ((t->_hx_getIndex() == 2)) {
HXLINE( 269)								::Array< ::Dynamic> _g = t->_hx_getObject(0).StaticCast< ::Array< ::Dynamic> >();
HXDLIN( 269)								return true;
            							}
            							else {
HXLINE( 269)								return false;
            							}
            						}
            					}
            					else {
HXLINE( 269)						return false;
            					}
            				}
            			}
            			break;
            			case (int)4: {
HXLINE( 267)				::Array< ::Dynamic> _g = e->_hx_getObject(0).StaticCast< ::Array< ::Dynamic> >();
HXDLIN( 267)				return true;
            			}
            			break;
            			case (int)6: {
HXLINE( 271)				 ::hscript::Expr _g = e->_hx_getObject(1).StaticCast<  ::hscript::Expr >();
HXDLIN( 271)				::String _g1 = e->_hx_getString(0);
HXDLIN( 271)				 ::hscript::Expr e1 = e->_hx_getObject(2).StaticCast<  ::hscript::Expr >();
HXDLIN( 271)				return this->isBlock(e1);
            			}
            			break;
            			case (int)7: {
HXLINE( 272)				::String _g = e->_hx_getString(0);
HXDLIN( 272)				 ::hscript::Expr e1 = e->_hx_getObject(2).StaticCast<  ::hscript::Expr >();
HXDLIN( 272)				bool prefix = e->_hx_getBool(1);
HXDLIN( 272)				if (!(prefix)) {
HXLINE( 272)					return this->isBlock(e1);
            				}
            				else {
HXLINE( 272)					return false;
            				}
            			}
            			break;
            			case (int)9: {
HXLINE( 270)				 ::hscript::Expr _g = e->_hx_getObject(0).StaticCast<  ::hscript::Expr >();
HXDLIN( 270)				 ::hscript::Expr e2 = e->_hx_getObject(2).StaticCast<  ::hscript::Expr >();
HXDLIN( 270)				 ::hscript::Expr e1 = e->_hx_getObject(1).StaticCast<  ::hscript::Expr >();
HXDLIN( 270)				if (::hx::IsNotNull( e2 )) {
HXLINE( 270)					return this->isBlock(e2);
            				}
            				else {
HXLINE( 270)					return this->isBlock(e1);
            				}
            			}
            			break;
            			case (int)10: {
HXLINE( 273)				 ::hscript::Expr _g = e->_hx_getObject(0).StaticCast<  ::hscript::Expr >();
HXDLIN( 273)				 ::hscript::Expr e1 = e->_hx_getObject(1).StaticCast<  ::hscript::Expr >();
HXDLIN( 273)				return this->isBlock(e1);
            			}
            			break;
            			case (int)11: {
HXLINE( 275)				 ::hscript::Expr _g = e->_hx_getObject(1).StaticCast<  ::hscript::Expr >();
HXDLIN( 275)				::String _g1 = e->_hx_getString(0);
HXDLIN( 275)				 ::hscript::Expr e1 = e->_hx_getObject(2).StaticCast<  ::hscript::Expr >();
HXDLIN( 275)				return this->isBlock(e1);
            			}
            			break;
            			case (int)14: {
HXLINE( 268)				 ::hscript::CType _g = e->_hx_getObject(3).StaticCast<  ::hscript::CType >();
HXDLIN( 268)				::String _g1 = e->_hx_getString(2);
HXDLIN( 268)				::Array< ::Dynamic> _g2 = e->_hx_getObject(0).StaticCast< ::Array< ::Dynamic> >();
HXDLIN( 268)				 ::hscript::Expr e1 = e->_hx_getObject(1).StaticCast<  ::hscript::Expr >();
HXDLIN( 268)				return this->isBlock(e1);
            			}
            			break;
            			case (int)15: {
HXLINE( 276)				 ::hscript::Expr e1 = e->_hx_getObject(0).StaticCast<  ::hscript::Expr >();
HXDLIN( 276)				if (::hx::IsNotNull( e1 )) {
HXLINE( 276)					return this->isBlock(e1);
            				}
            				else {
HXLINE( 276)					return false;
            				}
            			}
            			break;
            			case (int)20: {
HXLINE( 277)				 ::hscript::CType _g = e->_hx_getObject(2).StaticCast<  ::hscript::CType >();
HXDLIN( 277)				::String _g1 = e->_hx_getString(1);
HXDLIN( 277)				 ::hscript::Expr _g2 = e->_hx_getObject(0).StaticCast<  ::hscript::Expr >();
HXDLIN( 277)				 ::hscript::Expr e1 = e->_hx_getObject(3).StaticCast<  ::hscript::Expr >();
HXDLIN( 277)				return this->isBlock(e1);
            			}
            			break;
            			case (int)21: {
HXLINE( 267)				::Array< ::Dynamic> _g = e->_hx_getObject(0).StaticCast< ::Array< ::Dynamic> >();
HXDLIN( 267)				return true;
            			}
            			break;
            			case (int)23: {
HXLINE( 267)				 ::hscript::Expr _g = e->_hx_getObject(2).StaticCast<  ::hscript::Expr >();
HXDLIN( 267)				::Array< ::Dynamic> _g1 = e->_hx_getObject(1).StaticCast< ::Array< ::Dynamic> >();
HXDLIN( 267)				 ::hscript::Expr _g2 = e->_hx_getObject(0).StaticCast<  ::hscript::Expr >();
HXDLIN( 267)				return true;
            			}
            			break;
            			case (int)24: {
HXLINE( 274)				 ::hscript::Expr _g = e->_hx_getObject(0).StaticCast<  ::hscript::Expr >();
HXDLIN( 274)				 ::hscript::Expr e1 = e->_hx_getObject(1).StaticCast<  ::hscript::Expr >();
HXDLIN( 274)				return this->isBlock(e1);
            			}
            			break;
            			case (int)25: {
HXLINE( 278)				::Array< ::Dynamic> _g = e->_hx_getObject(1).StaticCast< ::Array< ::Dynamic> >();
HXDLIN( 278)				::String _g1 = e->_hx_getString(0);
HXDLIN( 278)				 ::hscript::Expr e1 = e->_hx_getObject(2).StaticCast<  ::hscript::Expr >();
HXDLIN( 278)				return this->isBlock(e1);
            			}
            			break;
            			default:{
HXLINE( 279)				return false;
            			}
            		}
HXLINE( 266)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Parser_obj,isBlock,return )

void Parser_obj::parseFullExpr(::Array< ::Dynamic> exprs){
            	HX_GC_STACKFRAME(&_hx_pos_2fd3d36595bebf3d_283_parseFullExpr)
HXLINE( 284)		 ::hscript::Expr e = this->parseExpr();
HXLINE( 285)		exprs->push(e);
HXLINE( 287)		 ::hscript::Token tk = this->token();
HXLINE( 289)		while(true){
HXLINE( 289)			bool _hx_tmp;
HXDLIN( 289)			bool _hx_tmp1;
HXDLIN( 289)			if (::hx::IsEq( tk,::hscript::Token_obj::TComma_dyn() )) {
HXLINE( 289)				_hx_tmp1 = ::hx::IsNotNull( e );
            			}
            			else {
HXLINE( 289)				_hx_tmp1 = false;
            			}
HXDLIN( 289)			if (_hx_tmp1) {
HXLINE( 289)				if ((e->_hx_getIndex() == 2)) {
HXLINE( 289)					 ::hscript::Expr _g = e->_hx_getObject(2).StaticCast<  ::hscript::Expr >();
HXDLIN( 289)					 ::hscript::CType _g1 = e->_hx_getObject(1).StaticCast<  ::hscript::CType >();
HXDLIN( 289)					::String _g2 = e->_hx_getString(0);
HXDLIN( 289)					_hx_tmp = true;
            				}
            				else {
HXLINE( 289)					_hx_tmp = false;
            				}
            			}
            			else {
HXLINE( 289)				_hx_tmp = false;
            			}
HXDLIN( 289)			if (!(_hx_tmp)) {
HXLINE( 289)				goto _hx_goto_33;
            			}
HXLINE( 290)			e = this->parseStructure(HX_("var",e7,de,59,00));
HXLINE( 291)			exprs->push(e);
HXLINE( 292)			tk = this->token();
            		}
            		_hx_goto_33:;
HXLINE( 295)		bool _hx_tmp;
HXDLIN( 295)		if (::hx::IsNotEq( tk,::hscript::Token_obj::TSemicolon_dyn() )) {
HXLINE( 295)			_hx_tmp = ::hx::IsNotEq( tk,::hscript::Token_obj::TEof_dyn() );
            		}
            		else {
HXLINE( 295)			_hx_tmp = false;
            		}
HXDLIN( 295)		if (_hx_tmp) {
HXLINE( 296)			if (this->isBlock(e)) {
HXLINE( 297)				 ::haxe::ds::GenericStack_hscript_Token _this = this->tokens;
HXDLIN( 297)				_this->head =  ::haxe::ds::GenericCell_hscript_Token_obj::__alloc( HX_CTX ,tk,_this->head);
            			}
            			else {
HXLINE( 299)				this->unexpected(tk);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Parser_obj,parseFullExpr,(void))

 ::hscript::Expr Parser_obj::parseObject( ::Dynamic p1){
            	HX_STACKFRAME(&_hx_pos_2fd3d36595bebf3d_303_parseObject)
HXLINE( 305)		::Array< ::Dynamic> fl = ::Array_obj< ::Dynamic>::__new();
HXLINE( 306)		while(true){
HXLINE( 307)			 ::hscript::Token tk = this->token();
HXLINE( 308)			::String id = null();
HXLINE( 309)			if (::hx::IsNull( tk )) {
HXLINE( 321)				this->unexpected(tk);
HXLINE( 322)				goto _hx_goto_35;
            			}
            			else {
HXLINE( 309)				switch((int)(tk->_hx_getIndex())){
            					case (int)1: {
HXLINE( 311)						 ::hscript::Const c = tk->_hx_getObject(0).StaticCast<  ::hscript::Const >();
HXDLIN( 311)						{
HXLINE( 312)							if (!(this->allowJSON)) {
HXLINE( 313)								this->unexpected(tk);
            							}
HXLINE( 314)							if ((c->_hx_getIndex() == 2)) {
HXLINE( 315)								::String s = c->_hx_getString(0);
HXDLIN( 315)								id = s;
            							}
            							else {
HXLINE( 316)								this->unexpected(tk);
            							}
            						}
            					}
            					break;
            					case (int)2: {
HXLINE( 310)						::String i = tk->_hx_getString(0);
HXDLIN( 310)						id = i;
            					}
            					break;
            					case (int)7: {
HXLINE( 319)						goto _hx_goto_35;
            					}
            					break;
            					default:{
HXLINE( 321)						this->unexpected(tk);
HXLINE( 322)						goto _hx_goto_35;
            					}
            				}
            			}
HXLINE( 324)			{
HXLINE( 324)				 ::hscript::Token t = this->token();
HXDLIN( 324)				if (::hx::IsNotEq( t,::hscript::Token_obj::TDoubleDot_dyn() )) {
HXLINE( 324)					this->unexpected(t);
            				}
            			}
HXLINE( 325)			fl->push( ::Dynamic(::hx::Anon_obj::Create(2)
            				->setFixed(0,HX_("e",65,00,00,00),this->parseExpr())
            				->setFixed(1,HX_("name",4b,72,ff,48),id)));
HXLINE( 326)			tk = this->token();
HXLINE( 327)			if (::hx::IsNull( tk )) {
HXLINE( 332)				this->unexpected(tk);
            			}
            			else {
HXLINE( 327)				switch((int)(tk->_hx_getIndex())){
            					case (int)7: {
HXLINE( 329)						goto _hx_goto_35;
            					}
            					break;
            					case (int)10: {
            					}
            					break;
            					default:{
HXLINE( 332)						this->unexpected(tk);
            					}
            				}
            			}
            		}
            		_hx_goto_35:;
HXLINE( 335)		return this->parseExprNext(::hscript::Expr_obj::EObject(fl));
            	}


HX_DEFINE_DYNAMIC_FUNC1(Parser_obj,parseObject,return )

 ::hscript::Expr Parser_obj::parseExpr(){
            	HX_GC_STACKFRAME(&_hx_pos_2fd3d36595bebf3d_338_parseExpr)
HXLINE( 339)		 ::hscript::Token tk = this->token();
HXLINE( 343)		if (::hx::IsNull( tk )) {
HXLINE( 473)			return this->unexpected(tk);
            		}
            		else {
HXLINE( 343)			switch((int)(tk->_hx_getIndex())){
            				case (int)1: {
HXLINE( 349)					 ::hscript::Const c = tk->_hx_getObject(0).StaticCast<  ::hscript::Const >();
HXLINE( 350)					return this->parseExprNext(::hscript::Expr_obj::EConst(c));
            				}
            				break;
            				case (int)2: {
HXLINE( 344)					::String id = tk->_hx_getString(0);
HXLINE( 345)					 ::hscript::Expr e = this->parseStructure(id);
HXLINE( 346)					if (::hx::IsNull( e )) {
HXLINE( 347)						e = ::hscript::Expr_obj::EIdent(id);
            					}
HXLINE( 348)					return this->parseExprNext(e);
            				}
            				break;
            				case (int)3: {
HXLINE( 428)					::String op = tk->_hx_getString(0);
HXLINE( 429)					if ((op == HX_("-",2d,00,00,00))) {
HXLINE( 430)						int start = 0;
HXLINE( 431)						 ::hscript::Expr e = this->parseExpr();
HXLINE( 432)						if (::hx::IsNull( e )) {
HXLINE( 433)							return this->makeUnop(op,e);
            						}
HXLINE( 434)						if ((e->_hx_getIndex() == 0)) {
HXLINE( 437)							 ::hscript::Const _g = e->_hx_getObject(0).StaticCast<  ::hscript::Const >();
HXDLIN( 437)							switch((int)(_g->_hx_getIndex())){
            								case (int)0: {
HXLINE( 435)									int i = _g->_hx_getInt(0);
HXLINE( 436)									return ::hscript::Expr_obj::EConst(::hscript::Const_obj::CInt(-(i)));
            								}
            								break;
            								case (int)1: {
HXLINE( 437)									Float f = _g->_hx_getFloat(0);
HXLINE( 438)									return ::hscript::Expr_obj::EConst(::hscript::Const_obj::CFloat(-(f)));
            								}
            								break;
            								default:{
HXLINE( 440)									return this->makeUnop(op,e);
            								}
            							}
            						}
            						else {
HXLINE( 440)							return this->makeUnop(op,e);
            						}
            					}
HXLINE( 443)					if (::hx::IsLess( this->opPriority->get(op),0 )) {
HXLINE( 444)						return this->makeUnop(op,this->parseExpr());
            					}
HXLINE( 445)					return this->unexpected(tk);
            				}
            				break;
            				case (int)4: {
HXLINE( 352)					tk = this->token();
HXLINE( 353)					if (::hx::IsEq( tk,::hscript::Token_obj::TPClose_dyn() )) {
HXLINE( 354)						{
HXLINE( 354)							 ::hscript::Token t = this->token();
HXDLIN( 354)							if (!(::Type_obj::enumEq(t,::hscript::Token_obj::TOp(HX_("->",71,27,00,00))))) {
HXLINE( 354)								this->unexpected(t);
            							}
            						}
HXLINE( 355)						 ::hscript::Expr eret = this->parseExpr();
HXLINE( 356)						return ::hscript::Expr_obj::EFunction(::Array_obj< ::Dynamic>::__new(0),::hscript::Expr_obj::EReturn(eret),null(),null());
            					}
HXLINE( 358)					{
HXLINE( 358)						 ::haxe::ds::GenericStack_hscript_Token _this = this->tokens;
HXDLIN( 358)						_this->head =  ::haxe::ds::GenericCell_hscript_Token_obj::__alloc( HX_CTX ,tk,_this->head);
            					}
HXLINE( 359)					 ::hscript::Expr e = this->parseExpr();
HXLINE( 360)					tk = this->token();
HXLINE( 361)					if (::hx::IsNotNull( tk )) {
HXLINE( 361)						switch((int)(tk->_hx_getIndex())){
            							case (int)5: {
HXLINE( 363)								return this->parseExprNext(::hscript::Expr_obj::EParent(e));
            							}
            							break;
            							case (int)10: {
HXLINE( 378)								if ((e->_hx_getIndex() == 1)) {
HXLINE( 379)									::String v = e->_hx_getString(0);
HXDLIN( 379)									return this->parseLambda(::Array_obj< ::Dynamic>::__new(1)->init(0, ::Dynamic(::hx::Anon_obj::Create(1)
            										->setFixed(0,HX_("name",4b,72,ff,48),v))),0);
            								}
            							}
            							break;
            							case (int)15: {
HXLINE( 365)								 ::hscript::CType t = this->parseType();
HXLINE( 366)								tk = this->token();
HXLINE( 367)								if (::hx::IsNotNull( tk )) {
HXLINE( 367)									switch((int)(tk->_hx_getIndex())){
            										case (int)5: {
HXLINE( 369)											return this->parseExprNext(::hscript::Expr_obj::ECheckType(e,t));
            										}
            										break;
            										case (int)10: {
HXLINE( 371)											if ((e->_hx_getIndex() == 1)) {
HXLINE( 372)												::String v = e->_hx_getString(0);
HXDLIN( 372)												return this->parseLambda(::Array_obj< ::Dynamic>::__new(1)->init(0, ::Dynamic(::hx::Anon_obj::Create(2)
            													->setFixed(0,HX_("t",74,00,00,00),t)
            													->setFixed(1,HX_("name",4b,72,ff,48),v))),0);
            											}
            										}
            										break;
            										default:{
            										}
            									}
            								}
            							}
            							break;
            							default:{
            							}
            						}
            					}
HXLINE( 384)					return this->unexpected(tk);
            				}
            				break;
            				case (int)6: {
HXLINE( 386)					tk = this->token();
HXLINE( 387)					if (::hx::IsNull( tk )) {
HXLINE( 417)						 ::haxe::ds::GenericStack_hscript_Token _this = this->tokens;
HXDLIN( 417)						_this->head =  ::haxe::ds::GenericCell_hscript_Token_obj::__alloc( HX_CTX ,tk,_this->head);
            					}
            					else {
HXLINE( 387)						switch((int)(tk->_hx_getIndex())){
            							case (int)1: {
HXLINE( 399)								 ::hscript::Const c = tk->_hx_getObject(0).StaticCast<  ::hscript::Const >();
HXLINE( 400)								if (this->allowJSON) {
HXLINE( 401)									if ((c->_hx_getIndex() == 2)) {
HXLINE( 402)										::String _g = c->_hx_getString(0);
HXDLIN( 402)										{
HXLINE( 403)											 ::hscript::Token tk2 = this->token();
HXLINE( 404)											{
HXLINE( 404)												 ::haxe::ds::GenericStack_hscript_Token _this = this->tokens;
HXDLIN( 404)												_this->head =  ::haxe::ds::GenericCell_hscript_Token_obj::__alloc( HX_CTX ,tk2,_this->head);
            											}
HXLINE( 405)											{
HXLINE( 405)												 ::haxe::ds::GenericStack_hscript_Token _this1 = this->tokens;
HXDLIN( 405)												_this1->head =  ::haxe::ds::GenericCell_hscript_Token_obj::__alloc( HX_CTX ,tk,_this1->head);
            											}
HXLINE( 406)											if (::hx::IsNotNull( tk2 )) {
HXLINE( 406)												if ((tk2->_hx_getIndex() == 15)) {
HXLINE( 408)													return this->parseExprNext(this->parseObject(0));
            												}
            											}
            										}
            									}
            									else {
HXLINE( 412)										 ::haxe::ds::GenericStack_hscript_Token _this = this->tokens;
HXDLIN( 412)										_this->head =  ::haxe::ds::GenericCell_hscript_Token_obj::__alloc( HX_CTX ,tk,_this->head);
            									}
            								}
            								else {
HXLINE( 415)									 ::haxe::ds::GenericStack_hscript_Token _this = this->tokens;
HXDLIN( 415)									_this->head =  ::haxe::ds::GenericCell_hscript_Token_obj::__alloc( HX_CTX ,tk,_this->head);
            								}
            							}
            							break;
            							case (int)2: {
HXLINE( 390)								::String _g = tk->_hx_getString(0);
HXDLIN( 390)								{
HXLINE( 391)									 ::hscript::Token tk2 = this->token();
HXLINE( 392)									{
HXLINE( 392)										 ::haxe::ds::GenericStack_hscript_Token _this = this->tokens;
HXDLIN( 392)										_this->head =  ::haxe::ds::GenericCell_hscript_Token_obj::__alloc( HX_CTX ,tk2,_this->head);
            									}
HXLINE( 393)									{
HXLINE( 393)										 ::haxe::ds::GenericStack_hscript_Token _this1 = this->tokens;
HXDLIN( 393)										_this1->head =  ::haxe::ds::GenericCell_hscript_Token_obj::__alloc( HX_CTX ,tk,_this1->head);
            									}
HXLINE( 394)									if (::hx::IsNotNull( tk2 )) {
HXLINE( 394)										if ((tk2->_hx_getIndex() == 15)) {
HXLINE( 396)											return this->parseExprNext(this->parseObject(0));
            										}
            									}
            								}
            							}
            							break;
            							case (int)7: {
HXLINE( 389)								return this->parseExprNext(::hscript::Expr_obj::EObject(::Array_obj< ::Dynamic>::__new(0)));
            							}
            							break;
            							default:{
HXLINE( 417)								 ::haxe::ds::GenericStack_hscript_Token _this = this->tokens;
HXDLIN( 417)								_this->head =  ::haxe::ds::GenericCell_hscript_Token_obj::__alloc( HX_CTX ,tk,_this->head);
            							}
            						}
            					}
HXLINE( 419)					::Array< ::Dynamic> a = ::Array_obj< ::Dynamic>::__new();
HXLINE( 420)					while(true){
HXLINE( 421)						this->parseFullExpr(a);
HXLINE( 422)						tk = this->token();
HXLINE( 423)						bool _hx_tmp;
HXDLIN( 423)						if (::hx::IsNotEq( tk,::hscript::Token_obj::TBrClose_dyn() )) {
HXLINE( 423)							if (this->resumeErrors) {
HXLINE( 423)								_hx_tmp = ::hx::IsEq( tk,::hscript::Token_obj::TEof_dyn() );
            							}
            							else {
HXLINE( 423)								_hx_tmp = false;
            							}
            						}
            						else {
HXLINE( 423)							_hx_tmp = true;
            						}
HXDLIN( 423)						if (_hx_tmp) {
HXLINE( 424)							goto _hx_goto_37;
            						}
HXLINE( 425)						{
HXLINE( 425)							 ::haxe::ds::GenericStack_hscript_Token _this = this->tokens;
HXDLIN( 425)							_this->head =  ::haxe::ds::GenericCell_hscript_Token_obj::__alloc( HX_CTX ,tk,_this->head);
            						}
            					}
            					_hx_goto_37:;
HXLINE( 427)					return ::hscript::Expr_obj::EBlock(a);
            				}
            				break;
            				case (int)12: {
HXLINE( 447)					::Array< ::Dynamic> a = ::Array_obj< ::Dynamic>::__new();
HXLINE( 448)					tk = this->token();
HXLINE( 449)					while(true){
HXLINE( 449)						bool _hx_tmp;
HXDLIN( 449)						if (::hx::IsNotEq( tk,::hscript::Token_obj::TBkClose_dyn() )) {
HXLINE( 449)							if (this->resumeErrors) {
HXLINE( 449)								_hx_tmp = ::hx::IsNotEq( tk,::hscript::Token_obj::TEof_dyn() );
            							}
            							else {
HXLINE( 449)								_hx_tmp = true;
            							}
            						}
            						else {
HXLINE( 449)							_hx_tmp = false;
            						}
HXDLIN( 449)						if (!(_hx_tmp)) {
HXLINE( 449)							goto _hx_goto_38;
            						}
HXLINE( 450)						{
HXLINE( 450)							 ::haxe::ds::GenericStack_hscript_Token _this = this->tokens;
HXDLIN( 450)							_this->head =  ::haxe::ds::GenericCell_hscript_Token_obj::__alloc( HX_CTX ,tk,_this->head);
            						}
HXLINE( 451)						a->push(this->parseExpr());
HXLINE( 452)						tk = this->token();
HXLINE( 453)						if (::hx::IsEq( tk,::hscript::Token_obj::TComma_dyn() )) {
HXLINE( 454)							tk = this->token();
            						}
            					}
            					_hx_goto_38:;
HXLINE( 456)					bool _hx_tmp;
HXDLIN( 456)					if ((a->length == 1)) {
HXLINE( 456)						_hx_tmp = ::hx::IsNotNull( a->__get(0).StaticCast<  ::hscript::Expr >() );
            					}
            					else {
HXLINE( 456)						_hx_tmp = false;
            					}
HXDLIN( 456)					if (_hx_tmp) {
HXLINE( 457)						 ::hscript::Expr _g = a->__get(0).StaticCast<  ::hscript::Expr >();
HXDLIN( 457)						switch((int)(_g->_hx_getIndex())){
            							case (int)10: {
HXLINE( 458)								 ::hscript::Expr _g1 = _g->_hx_getObject(1).StaticCast<  ::hscript::Expr >();
HXDLIN( 458)								 ::hscript::Expr _g2 = _g->_hx_getObject(0).StaticCast<  ::hscript::Expr >();
HXLINE( 459)								::String tmp = (HX_("__a_",fe,af,13,3f) + this->uid++);
HXLINE( 460)								 ::hscript::Expr e = ::hscript::Expr_obj::EBlock(::Array_obj< ::Dynamic>::__new(3)->init(0,::hscript::Expr_obj::EVar(tmp,null(),::hscript::Expr_obj::EArrayDecl(::Array_obj< ::Dynamic>::__new(0))))->init(1,this->mapCompr(tmp,a->__get(0).StaticCast<  ::hscript::Expr >()))->init(2,::hscript::Expr_obj::EIdent(tmp)));
HXLINE( 465)								return this->parseExprNext(e);
            							}
            							break;
            							case (int)11: {
HXLINE( 458)								 ::hscript::Expr _g1 = _g->_hx_getObject(2).StaticCast<  ::hscript::Expr >();
HXDLIN( 458)								 ::hscript::Expr _g2 = _g->_hx_getObject(1).StaticCast<  ::hscript::Expr >();
HXDLIN( 458)								::String _g3 = _g->_hx_getString(0);
HXLINE( 459)								::String tmp = (HX_("__a_",fe,af,13,3f) + this->uid++);
HXLINE( 460)								 ::hscript::Expr e = ::hscript::Expr_obj::EBlock(::Array_obj< ::Dynamic>::__new(3)->init(0,::hscript::Expr_obj::EVar(tmp,null(),::hscript::Expr_obj::EArrayDecl(::Array_obj< ::Dynamic>::__new(0))))->init(1,this->mapCompr(tmp,a->__get(0).StaticCast<  ::hscript::Expr >()))->init(2,::hscript::Expr_obj::EIdent(tmp)));
HXLINE( 465)								return this->parseExprNext(e);
            							}
            							break;
            							case (int)24: {
HXLINE( 458)								 ::hscript::Expr _g1 = _g->_hx_getObject(1).StaticCast<  ::hscript::Expr >();
HXDLIN( 458)								 ::hscript::Expr _g2 = _g->_hx_getObject(0).StaticCast<  ::hscript::Expr >();
HXLINE( 459)								::String tmp = (HX_("__a_",fe,af,13,3f) + this->uid++);
HXLINE( 460)								 ::hscript::Expr e = ::hscript::Expr_obj::EBlock(::Array_obj< ::Dynamic>::__new(3)->init(0,::hscript::Expr_obj::EVar(tmp,null(),::hscript::Expr_obj::EArrayDecl(::Array_obj< ::Dynamic>::__new(0))))->init(1,this->mapCompr(tmp,a->__get(0).StaticCast<  ::hscript::Expr >()))->init(2,::hscript::Expr_obj::EIdent(tmp)));
HXLINE( 465)								return this->parseExprNext(e);
            							}
            							break;
            							default:{
            							}
            						}
            					}
HXLINE( 468)					return this->parseExprNext(::hscript::Expr_obj::EArrayDecl(a));
            				}
            				break;
            				case (int)16: {
HXLINE( 469)					::String id = tk->_hx_getString(0);
HXDLIN( 469)					if (this->allowMetadata) {
HXLINE( 470)						::Array< ::Dynamic> args = this->parseMetaArgs();
HXLINE( 471)						return ::hscript::Expr_obj::EMeta(id,args,this->parseExpr());
            					}
            					else {
HXLINE( 473)						return this->unexpected(tk);
            					}
            				}
            				break;
            				default:{
HXLINE( 473)					return this->unexpected(tk);
            				}
            			}
            		}
HXLINE( 343)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Parser_obj,parseExpr,return )

 ::hscript::Expr Parser_obj::parseLambda(::Array< ::Dynamic> args, ::Dynamic pmin){
            	HX_STACKFRAME(&_hx_pos_2fd3d36595bebf3d_477_parseLambda)
HXLINE( 478)		while(true){
HXLINE( 479)			::String id = this->getIdent();
HXLINE( 480)			 ::hscript::CType t;
HXDLIN( 480)			if (this->maybe(::hscript::Token_obj::TDoubleDot_dyn())) {
HXLINE( 480)				t = this->parseType();
            			}
            			else {
HXLINE( 480)				t = null();
            			}
HXLINE( 481)			args->push( ::Dynamic(::hx::Anon_obj::Create(2)
            				->setFixed(0,HX_("t",74,00,00,00),t)
            				->setFixed(1,HX_("name",4b,72,ff,48),id)));
HXLINE( 482)			 ::hscript::Token tk = this->token();
HXLINE( 483)			if (::hx::IsNull( tk )) {
HXLINE( 488)				this->unexpected(tk);
HXLINE( 489)				goto _hx_goto_40;
            			}
            			else {
HXLINE( 483)				switch((int)(tk->_hx_getIndex())){
            					case (int)5: {
HXLINE( 486)						goto _hx_goto_40;
            					}
            					break;
            					case (int)10: {
            					}
            					break;
            					default:{
HXLINE( 488)						this->unexpected(tk);
HXLINE( 489)						goto _hx_goto_40;
            					}
            				}
            			}
            		}
            		_hx_goto_40:;
HXLINE( 492)		{
HXLINE( 492)			 ::hscript::Token t = this->token();
HXDLIN( 492)			if (!(::Type_obj::enumEq(t,::hscript::Token_obj::TOp(HX_("->",71,27,00,00))))) {
HXLINE( 492)				this->unexpected(t);
            			}
            		}
HXLINE( 493)		 ::hscript::Expr eret = this->parseExpr();
HXLINE( 494)		return ::hscript::Expr_obj::EFunction(args,::hscript::Expr_obj::EReturn(eret),null(),null());
            	}


HX_DEFINE_DYNAMIC_FUNC2(Parser_obj,parseLambda,return )

::Array< ::Dynamic> Parser_obj::parseMetaArgs(){
            	HX_GC_STACKFRAME(&_hx_pos_2fd3d36595bebf3d_497_parseMetaArgs)
HXLINE( 498)		 ::hscript::Token tk = this->token();
HXLINE( 499)		if (::hx::IsNotEq( tk,::hscript::Token_obj::TPOpen_dyn() )) {
HXLINE( 500)			{
HXLINE( 500)				 ::haxe::ds::GenericStack_hscript_Token _this = this->tokens;
HXDLIN( 500)				_this->head =  ::haxe::ds::GenericCell_hscript_Token_obj::__alloc( HX_CTX ,tk,_this->head);
            			}
HXLINE( 501)			return null();
            		}
HXLINE( 503)		::Array< ::Dynamic> args = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 504)		tk = this->token();
HXLINE( 505)		if (::hx::IsNotEq( tk,::hscript::Token_obj::TPClose_dyn() )) {
HXLINE( 506)			{
HXLINE( 506)				 ::haxe::ds::GenericStack_hscript_Token _this = this->tokens;
HXDLIN( 506)				_this->head =  ::haxe::ds::GenericCell_hscript_Token_obj::__alloc( HX_CTX ,tk,_this->head);
            			}
HXLINE( 507)			while(true){
HXLINE( 508)				args->push(this->parseExpr());
HXLINE( 509)				{
HXLINE( 509)					 ::hscript::Token _g = this->token();
HXDLIN( 509)					if (::hx::IsNull( _g )) {
HXLINE( 513)						 ::hscript::Token tk = _g;
HXLINE( 514)						this->unexpected(tk);
            					}
            					else {
HXLINE( 509)						switch((int)(_g->_hx_getIndex())){
            							case (int)5: {
HXLINE( 512)								goto _hx_goto_42;
            							}
            							break;
            							case (int)10: {
            							}
            							break;
            							default:{
HXLINE( 513)								 ::hscript::Token tk = _g;
HXLINE( 514)								this->unexpected(tk);
            							}
            						}
            					}
            				}
            			}
            			_hx_goto_42:;
            		}
HXLINE( 518)		return args;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Parser_obj,parseMetaArgs,return )

 ::hscript::Expr Parser_obj::mapCompr(::String tmp, ::hscript::Expr e){
            	HX_STACKFRAME(&_hx_pos_2fd3d36595bebf3d_521_mapCompr)
HXLINE( 522)		if (::hx::IsNull( e )) {
HXLINE( 522)			return null();
            		}
HXLINE( 523)		 ::hscript::Expr edef;
HXDLIN( 523)		switch((int)(e->_hx_getIndex())){
            			case (int)3: {
HXLINE( 534)				 ::hscript::Expr e2 = e->_hx_getObject(0).StaticCast<  ::hscript::Expr >();
HXLINE( 523)				edef = ::hscript::Expr_obj::EParent(this->mapCompr(tmp,e2));
            			}
            			break;
            			case (int)4: {
HXLINE( 532)				::Array< ::Dynamic> _g = e->_hx_getObject(0).StaticCast< ::Array< ::Dynamic> >();
HXDLIN( 532)				if ((_g->length == 1)) {
HXLINE( 532)					 ::hscript::Expr e = _g->__get(0).StaticCast<  ::hscript::Expr >();
HXLINE( 523)					edef = ::hscript::Expr_obj::EBlock(::Array_obj< ::Dynamic>::__new(1)->init(0,this->mapCompr(tmp,e)));
            				}
            				else {
HXLINE( 523)					edef = ::hscript::Expr_obj::ECall(::hscript::Expr_obj::EField(::hscript::Expr_obj::EIdent(tmp),HX_("push",da,11,61,4a)),::Array_obj< ::Dynamic>::__new(1)->init(0,e));
            				}
            			}
            			break;
            			case (int)9: {
HXLINE( 530)				 ::hscript::Expr e2 = e->_hx_getObject(2).StaticCast<  ::hscript::Expr >();
HXDLIN( 530)				 ::hscript::Expr e1 = e->_hx_getObject(1).StaticCast<  ::hscript::Expr >();
HXDLIN( 530)				 ::hscript::Expr cond = e->_hx_getObject(0).StaticCast<  ::hscript::Expr >();
HXDLIN( 530)				if (::hx::IsNull( e2 )) {
HXLINE( 523)					edef = ::hscript::Expr_obj::EIf(cond,this->mapCompr(tmp,e1),null());
            				}
            				else {
HXLINE( 523)					edef = ::hscript::Expr_obj::ECall(::hscript::Expr_obj::EField(::hscript::Expr_obj::EIdent(tmp),HX_("push",da,11,61,4a)),::Array_obj< ::Dynamic>::__new(1)->init(0,e));
            				}
            			}
            			break;
            			case (int)10: {
HXLINE( 526)				 ::hscript::Expr e2 = e->_hx_getObject(1).StaticCast<  ::hscript::Expr >();
HXDLIN( 526)				 ::hscript::Expr cond = e->_hx_getObject(0).StaticCast<  ::hscript::Expr >();
HXLINE( 523)				edef = ::hscript::Expr_obj::EWhile(cond,this->mapCompr(tmp,e2));
            			}
            			break;
            			case (int)11: {
HXLINE( 524)				 ::hscript::Expr e2 = e->_hx_getObject(2).StaticCast<  ::hscript::Expr >();
HXDLIN( 524)				 ::hscript::Expr it = e->_hx_getObject(1).StaticCast<  ::hscript::Expr >();
HXDLIN( 524)				::String v = e->_hx_getString(0);
HXLINE( 523)				edef = ::hscript::Expr_obj::EFor(v,it,this->mapCompr(tmp,e2));
            			}
            			break;
            			case (int)24: {
HXLINE( 528)				 ::hscript::Expr e2 = e->_hx_getObject(1).StaticCast<  ::hscript::Expr >();
HXDLIN( 528)				 ::hscript::Expr cond = e->_hx_getObject(0).StaticCast<  ::hscript::Expr >();
HXLINE( 523)				edef = ::hscript::Expr_obj::EDoWhile(cond,this->mapCompr(tmp,e2));
            			}
            			break;
            			default:{
HXLINE( 523)				edef = ::hscript::Expr_obj::ECall(::hscript::Expr_obj::EField(::hscript::Expr_obj::EIdent(tmp),HX_("push",da,11,61,4a)),::Array_obj< ::Dynamic>::__new(1)->init(0,e));
            			}
            		}
HXLINE( 539)		return edef;
            	}


HX_DEFINE_DYNAMIC_FUNC2(Parser_obj,mapCompr,return )

 ::hscript::Expr Parser_obj::makeUnop(::String op, ::hscript::Expr e){
            	HX_STACKFRAME(&_hx_pos_2fd3d36595bebf3d_542_makeUnop)
HXLINE( 543)		bool _hx_tmp;
HXDLIN( 543)		if (::hx::IsNull( e )) {
HXLINE( 543)			_hx_tmp = this->resumeErrors;
            		}
            		else {
HXLINE( 543)			_hx_tmp = false;
            		}
HXDLIN( 543)		if (_hx_tmp) {
HXLINE( 544)			return null();
            		}
HXLINE( 545)		switch((int)(e->_hx_getIndex())){
            			case (int)6: {
HXLINE( 546)				 ::hscript::Expr e2 = e->_hx_getObject(2).StaticCast<  ::hscript::Expr >();
HXDLIN( 546)				 ::hscript::Expr e1 = e->_hx_getObject(1).StaticCast<  ::hscript::Expr >();
HXDLIN( 546)				::String bop = e->_hx_getString(0);
HXDLIN( 546)				return ::hscript::Expr_obj::EBinop(bop,this->makeUnop(op,e1),e2);
            			}
            			break;
            			case (int)22: {
HXLINE( 547)				 ::hscript::Expr e3 = e->_hx_getObject(2).StaticCast<  ::hscript::Expr >();
HXDLIN( 547)				 ::hscript::Expr e2 = e->_hx_getObject(1).StaticCast<  ::hscript::Expr >();
HXDLIN( 547)				 ::hscript::Expr e1 = e->_hx_getObject(0).StaticCast<  ::hscript::Expr >();
HXDLIN( 547)				return ::hscript::Expr_obj::ETernary(this->makeUnop(op,e1),e2,e3);
            			}
            			break;
            			default:{
HXLINE( 548)				return ::hscript::Expr_obj::EUnop(op,true,e);
            			}
            		}
HXLINE( 545)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC2(Parser_obj,makeUnop,return )

 ::hscript::Expr Parser_obj::makeBinop(::String op, ::hscript::Expr e1, ::hscript::Expr e){
            	HX_STACKFRAME(&_hx_pos_2fd3d36595bebf3d_552_makeBinop)
HXLINE( 553)		bool _hx_tmp;
HXDLIN( 553)		if (::hx::IsNull( e )) {
HXLINE( 553)			_hx_tmp = this->resumeErrors;
            		}
            		else {
HXLINE( 553)			_hx_tmp = false;
            		}
HXDLIN( 553)		if (_hx_tmp) {
HXLINE( 554)			return ::hscript::Expr_obj::EBinop(op,e1,e);
            		}
HXLINE( 555)		switch((int)(e->_hx_getIndex())){
            			case (int)6: {
HXLINE( 556)				 ::hscript::Expr e3 = e->_hx_getObject(2).StaticCast<  ::hscript::Expr >();
HXDLIN( 556)				 ::hscript::Expr e2 = e->_hx_getObject(1).StaticCast<  ::hscript::Expr >();
HXDLIN( 556)				::String op2 = e->_hx_getString(0);
HXLINE( 557)				bool _hx_tmp;
HXDLIN( 557)				 ::Dynamic _hx_tmp1 = this->opPriority->get(op);
HXDLIN( 557)				if (::hx::IsLessEq( _hx_tmp1,this->opPriority->get(op2) )) {
HXLINE( 557)					_hx_tmp = !(this->opRightAssoc->exists(op));
            				}
            				else {
HXLINE( 557)					_hx_tmp = false;
            				}
HXDLIN( 557)				if (_hx_tmp) {
HXLINE( 558)					return ::hscript::Expr_obj::EBinop(op2,this->makeBinop(op,e1,e2),e3);
            				}
            				else {
HXLINE( 560)					return ::hscript::Expr_obj::EBinop(op,e1,e);
            				}
            			}
            			break;
            			case (int)22: {
HXLINE( 561)				 ::hscript::Expr e4 = e->_hx_getObject(2).StaticCast<  ::hscript::Expr >();
HXDLIN( 561)				 ::hscript::Expr e3 = e->_hx_getObject(1).StaticCast<  ::hscript::Expr >();
HXDLIN( 561)				 ::hscript::Expr e2 = e->_hx_getObject(0).StaticCast<  ::hscript::Expr >();
HXLINE( 562)				if (this->opRightAssoc->exists(op)) {
HXLINE( 563)					return ::hscript::Expr_obj::EBinop(op,e1,e);
            				}
            				else {
HXLINE( 565)					return ::hscript::Expr_obj::ETernary(this->makeBinop(op,e1,e2),e3,e4);
            				}
            			}
            			break;
            			default:{
HXLINE( 567)				return ::hscript::Expr_obj::EBinop(op,e1,e);
            			}
            		}
HXLINE( 555)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC3(Parser_obj,makeBinop,return )

 ::hscript::Expr Parser_obj::parseStructure(::String id){
            	HX_GC_STACKFRAME(&_hx_pos_2fd3d36595bebf3d_575_parseStructure)
HXDLIN( 575)		::String _hx_switch_0 = id;
            		if (  (_hx_switch_0==HX_("break",bf,24,ec,b8)) ){
HXLINE( 631)			return ::hscript::Expr_obj::EBreak_dyn();
HXDLIN( 631)			goto _hx_goto_47;
            		}
            		if (  (_hx_switch_0==HX_("continue",67,e0,c8,31)) ){
HXLINE( 632)			return ::hscript::Expr_obj::EContinue_dyn();
HXDLIN( 632)			goto _hx_goto_47;
            		}
            		if (  (_hx_switch_0==HX_("do",8b,57,00,00)) ){
HXLINE( 614)			 ::hscript::Expr e = this->parseExpr();
HXLINE( 615)			 ::hscript::Token tk = this->token();
HXLINE( 616)			if (::hx::IsNull( tk )) {
HXLINE( 619)				this->unexpected(tk);
            			}
            			else {
HXLINE( 616)				if ((tk->_hx_getIndex() == 2)) {
HXLINE( 618)					if ((tk->_hx_getString(0) != HX_("while",b1,43,bd,c9))) {
HXLINE( 619)						this->unexpected(tk);
            					}
            				}
            				else {
HXLINE( 619)					this->unexpected(tk);
            				}
            			}
HXLINE( 621)			 ::hscript::Expr econd = this->parseExpr();
HXLINE( 622)			return ::hscript::Expr_obj::EDoWhile(econd,e);
HXLINE( 613)			goto _hx_goto_47;
            		}
            		if (  (_hx_switch_0==HX_("else",b9,e4,14,43)) ){
HXLINE( 633)			return this->unexpected(::hscript::Token_obj::TId(id));
HXDLIN( 633)			goto _hx_goto_47;
            		}
            		if (  (_hx_switch_0==HX_("for",09,c7,4d,00)) ){
HXLINE( 624)			{
HXLINE( 624)				 ::hscript::Token t = this->token();
HXDLIN( 624)				if (::hx::IsNotEq( t,::hscript::Token_obj::TPOpen_dyn() )) {
HXLINE( 624)					this->unexpected(t);
            				}
            			}
HXLINE( 625)			::String vname = this->getIdent();
HXLINE( 626)			{
HXLINE( 626)				 ::hscript::Token t1 = this->token();
HXDLIN( 626)				if (!(::Type_obj::enumEq(t1,::hscript::Token_obj::TId(HX_("in",e5,5b,00,00))))) {
HXLINE( 626)					this->unexpected(t1);
            				}
            			}
HXLINE( 627)			 ::hscript::Expr eiter = this->parseExpr();
HXLINE( 628)			{
HXLINE( 628)				 ::hscript::Token t2 = this->token();
HXDLIN( 628)				if (::hx::IsNotEq( t2,::hscript::Token_obj::TPClose_dyn() )) {
HXLINE( 628)					this->unexpected(t2);
            				}
            			}
HXLINE( 629)			 ::hscript::Expr e = this->parseExpr();
HXLINE( 630)			return ::hscript::Expr_obj::EFor(vname,eiter,e);
HXLINE( 623)			goto _hx_goto_47;
            		}
            		if (  (_hx_switch_0==HX_("function",18,ab,52,14)) ){
HXLINE( 638)			 ::hscript::Token tk = this->token();
HXLINE( 639)			::String name = null();
HXLINE( 640)			if (::hx::IsNull( tk )) {
HXLINE( 642)				 ::haxe::ds::GenericStack_hscript_Token _this = this->tokens;
HXDLIN( 642)				_this->head =  ::haxe::ds::GenericCell_hscript_Token_obj::__alloc( HX_CTX ,tk,_this->head);
            			}
            			else {
HXLINE( 640)				if ((tk->_hx_getIndex() == 2)) {
HXLINE( 641)					::String id = tk->_hx_getString(0);
HXDLIN( 641)					name = id;
            				}
            				else {
HXLINE( 642)					 ::haxe::ds::GenericStack_hscript_Token _this = this->tokens;
HXDLIN( 642)					_this->head =  ::haxe::ds::GenericCell_hscript_Token_obj::__alloc( HX_CTX ,tk,_this->head);
            				}
            			}
HXLINE( 644)			 ::Dynamic inf = this->parseFunctionDecl();
HXLINE( 645)			return ::hscript::Expr_obj::EFunction( ::Dynamic(inf->__Field(HX_("args",5d,8d,74,40),::hx::paccDynamic)), ::Dynamic(inf->__Field(HX_("body",a2,7a,1b,41),::hx::paccDynamic)),name, ::Dynamic(inf->__Field(HX_("ret",61,d9,56,00),::hx::paccDynamic)));
HXLINE( 637)			goto _hx_goto_47;
            		}
            		if (  (_hx_switch_0==HX_("if",dd,5b,00,00)) ){
HXLINE( 577)			{
HXLINE( 577)				 ::hscript::Token t = this->token();
HXDLIN( 577)				if (::hx::IsNotEq( t,::hscript::Token_obj::TPOpen_dyn() )) {
HXLINE( 577)					this->unexpected(t);
            				}
            			}
HXLINE( 578)			 ::hscript::Expr cond = this->parseExpr();
HXLINE( 579)			{
HXLINE( 579)				 ::hscript::Token t1 = this->token();
HXDLIN( 579)				if (::hx::IsNotEq( t1,::hscript::Token_obj::TPClose_dyn() )) {
HXLINE( 579)					this->unexpected(t1);
            				}
            			}
HXLINE( 580)			 ::hscript::Expr e1 = this->parseExpr();
HXLINE( 581)			 ::hscript::Expr e2 = null();
HXLINE( 582)			bool semic = false;
HXLINE( 583)			 ::hscript::Token tk = this->token();
HXLINE( 584)			if (::hx::IsEq( tk,::hscript::Token_obj::TSemicolon_dyn() )) {
HXLINE( 585)				semic = true;
HXLINE( 586)				tk = this->token();
            			}
HXLINE( 588)			if (::Type_obj::enumEq(tk,::hscript::Token_obj::TId(HX_("else",b9,e4,14,43)))) {
HXLINE( 589)				e2 = this->parseExpr();
            			}
            			else {
HXLINE( 591)				{
HXLINE( 591)					 ::haxe::ds::GenericStack_hscript_Token _this = this->tokens;
HXDLIN( 591)					_this->head =  ::haxe::ds::GenericCell_hscript_Token_obj::__alloc( HX_CTX ,tk,_this->head);
            				}
HXLINE( 592)				if (semic) {
HXLINE( 592)					 ::haxe::ds::GenericStack_hscript_Token _this = this->tokens;
HXDLIN( 592)					_this->head =  ::haxe::ds::GenericCell_hscript_Token_obj::__alloc( HX_CTX ,::hscript::Token_obj::TSemicolon_dyn(),_this->head);
            				}
            			}
HXLINE( 594)			return ::hscript::Expr_obj::EIf(cond,e1,e2);
HXLINE( 576)			goto _hx_goto_47;
            		}
            		if (  (_hx_switch_0==HX_("inline",59,ca,3f,99)) ){
HXLINE( 635)			if (!(this->maybe(::hscript::Token_obj::TId(HX_("function",18,ab,52,14))))) {
HXLINE( 635)				this->unexpected(::hscript::Token_obj::TId(HX_("inline",59,ca,3f,99)));
            			}
HXLINE( 636)			return this->parseStructure(HX_("function",18,ab,52,14));
HXLINE( 634)			goto _hx_goto_47;
            		}
            		if (  (_hx_switch_0==HX_("new",60,d0,53,00)) ){
HXLINE( 652)			::Array< ::String > a = ::Array_obj< ::String >::__new();
HXLINE( 653)			a->push(this->getIdent());
HXLINE( 654)			while(true){
HXLINE( 655)				 ::hscript::Token tk = this->token();
HXLINE( 656)				if (::hx::IsNull( tk )) {
HXLINE( 662)					this->unexpected(tk);
HXLINE( 663)					goto _hx_goto_48;
            				}
            				else {
HXLINE( 656)					switch((int)(tk->_hx_getIndex())){
            						case (int)4: {
HXLINE( 660)							goto _hx_goto_48;
            						}
            						break;
            						case (int)8: {
HXLINE( 658)							a->push(this->getIdent());
            						}
            						break;
            						default:{
HXLINE( 662)							this->unexpected(tk);
HXLINE( 663)							goto _hx_goto_48;
            						}
            					}
            				}
            			}
            			_hx_goto_48:;
HXLINE( 666)			::Array< ::Dynamic> args = this->parseExprList(::hscript::Token_obj::TPClose_dyn());
HXLINE( 667)			return ::hscript::Expr_obj::ENew(a->join(HX_(".",2e,00,00,00)),args);
HXLINE( 651)			goto _hx_goto_47;
            		}
            		if (  (_hx_switch_0==HX_("return",b0,a4,2d,09)) ){
HXLINE( 647)			 ::hscript::Token tk = this->token();
HXLINE( 648)			{
HXLINE( 648)				 ::haxe::ds::GenericStack_hscript_Token _this = this->tokens;
HXDLIN( 648)				_this->head =  ::haxe::ds::GenericCell_hscript_Token_obj::__alloc( HX_CTX ,tk,_this->head);
            			}
HXLINE( 649)			 ::hscript::Expr e;
HXDLIN( 649)			if (::hx::IsEq( tk,::hscript::Token_obj::TSemicolon_dyn() )) {
HXLINE( 649)				e = null();
            			}
            			else {
HXLINE( 649)				e = this->parseExpr();
            			}
HXLINE( 650)			return ::hscript::Expr_obj::EReturn(e);
HXLINE( 646)			goto _hx_goto_47;
            		}
            		if (  (_hx_switch_0==HX_("switch",f4,49,79,c5)) ){
HXLINE( 686)			 ::hscript::Expr e = this->parseExpr();
HXLINE( 687)			 ::hscript::Expr def = null();
HXDLIN( 687)			::Array< ::Dynamic> cases = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 688)			{
HXLINE( 688)				 ::hscript::Token t = this->token();
HXDLIN( 688)				if (::hx::IsNotEq( t,::hscript::Token_obj::TBrOpen_dyn() )) {
HXLINE( 688)					this->unexpected(t);
            				}
            			}
HXLINE( 689)			while(true){
HXLINE( 690)				 ::hscript::Token tk = this->token();
HXLINE( 691)				if (::hx::IsNull( tk )) {
HXLINE( 753)					this->unexpected(tk);
HXLINE( 754)					goto _hx_goto_49;
            				}
            				else {
HXLINE( 691)					switch((int)(tk->_hx_getIndex())){
            						case (int)2: {
HXLINE( 728)							::String _hx_switch_1 = tk->_hx_getString(0);
            							if (  (_hx_switch_1==HX_("case",b0,1e,ba,41)) ){
HXLINE( 693)								 ::Dynamic c =  ::Dynamic(::hx::Anon_obj::Create(2)
            									->setFixed(0,HX_("expr",35,fd,1d,43),null())
            									->setFixed(1,HX_("values",e2,03,b7,4f),::Array_obj< ::Dynamic>::__new(0)));
HXLINE( 694)								cases->push(c);
HXLINE( 695)								while(true){
HXLINE( 696)									 ::hscript::Expr e = this->parseExpr();
HXLINE( 697)									( (::Array< ::Dynamic>)(c->__Field(HX_("values",e2,03,b7,4f),::hx::paccDynamic)) )->push(e);
HXLINE( 698)									tk = this->token();
HXLINE( 699)									if (::hx::IsNull( tk )) {
HXLINE( 705)										this->unexpected(tk);
HXLINE( 706)										goto _hx_goto_51;
            									}
            									else {
HXLINE( 699)										switch((int)(tk->_hx_getIndex())){
            											case (int)10: {
            											}
            											break;
            											case (int)15: {
HXLINE( 703)												goto _hx_goto_51;
            											}
            											break;
            											default:{
HXLINE( 705)												this->unexpected(tk);
HXLINE( 706)												goto _hx_goto_51;
            											}
            										}
            									}
            								}
            								_hx_goto_51:;
HXLINE( 709)								::Array< ::Dynamic> exprs = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 710)								while(true){
HXLINE( 711)									tk = this->token();
HXLINE( 712)									{
HXLINE( 712)										 ::haxe::ds::GenericStack_hscript_Token _this = this->tokens;
HXDLIN( 712)										_this->head =  ::haxe::ds::GenericCell_hscript_Token_obj::__alloc( HX_CTX ,tk,_this->head);
            									}
HXLINE( 713)									if (::hx::IsNull( tk )) {
HXLINE( 719)										this->parseFullExpr(exprs);
            									}
            									else {
HXLINE( 713)										switch((int)(tk->_hx_getIndex())){
            											case (int)0: {
HXLINE( 716)												if (this->resumeErrors) {
HXLINE( 717)													goto _hx_goto_52;
            												}
            												else {
HXLINE( 719)													this->parseFullExpr(exprs);
            												}
            											}
            											break;
            											case (int)2: {
HXLINE( 714)												::String _hx_switch_2 = tk->_hx_getString(0);
            												if (  (_hx_switch_2==HX_("case",b0,1e,ba,41)) ||  (_hx_switch_2==HX_("default",c1,d8,c3,9b)) ){
HXLINE( 715)													goto _hx_goto_52;
HXDLIN( 715)													goto _hx_goto_53;
            												}
            												/* default */{
HXLINE( 719)													this->parseFullExpr(exprs);
            												}
            												_hx_goto_53:;
            											}
            											break;
            											case (int)7: {
HXLINE( 715)												goto _hx_goto_52;
            											}
            											break;
            											default:{
HXLINE( 719)												this->parseFullExpr(exprs);
            											}
            										}
            									}
            								}
            								_hx_goto_52:;
HXLINE( 722)								 ::hscript::Expr _hx_tmp;
HXDLIN( 722)								if ((exprs->length == 1)) {
HXLINE( 722)									_hx_tmp = exprs->__get(0).StaticCast<  ::hscript::Expr >();
            								}
            								else {
HXLINE( 724)									if ((exprs->length == 0)) {
HXLINE( 722)										_hx_tmp = ::hscript::Expr_obj::EBlock(::Array_obj< ::Dynamic>::__new(0));
            									}
            									else {
HXLINE( 722)										_hx_tmp = ::hscript::Expr_obj::EBlock(exprs);
            									}
            								}
HXDLIN( 722)								c->__SetField(HX_("expr",35,fd,1d,43),_hx_tmp,::hx::paccDynamic);
HXLINE( 692)								goto _hx_goto_50;
            							}
            							if (  (_hx_switch_1==HX_("default",c1,d8,c3,9b)) ){
HXLINE( 729)								if (::hx::IsNotNull( def )) {
HXLINE( 729)									this->unexpected(tk);
            								}
HXLINE( 730)								{
HXLINE( 730)									 ::hscript::Token t = this->token();
HXDLIN( 730)									if (::hx::IsNotEq( t,::hscript::Token_obj::TDoubleDot_dyn() )) {
HXLINE( 730)										this->unexpected(t);
            									}
            								}
HXLINE( 731)								::Array< ::Dynamic> exprs = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 732)								while(true){
HXLINE( 733)									tk = this->token();
HXLINE( 734)									{
HXLINE( 734)										 ::haxe::ds::GenericStack_hscript_Token _this = this->tokens;
HXDLIN( 734)										_this->head =  ::haxe::ds::GenericCell_hscript_Token_obj::__alloc( HX_CTX ,tk,_this->head);
            									}
HXLINE( 735)									if (::hx::IsNull( tk )) {
HXLINE( 741)										this->parseFullExpr(exprs);
            									}
            									else {
HXLINE( 735)										switch((int)(tk->_hx_getIndex())){
            											case (int)0: {
HXLINE( 738)												if (this->resumeErrors) {
HXLINE( 739)													goto _hx_goto_54;
            												}
            												else {
HXLINE( 741)													this->parseFullExpr(exprs);
            												}
            											}
            											break;
            											case (int)2: {
HXLINE( 736)												::String _hx_switch_3 = tk->_hx_getString(0);
            												if (  (_hx_switch_3==HX_("case",b0,1e,ba,41)) ||  (_hx_switch_3==HX_("default",c1,d8,c3,9b)) ){
HXLINE( 737)													goto _hx_goto_54;
HXDLIN( 737)													goto _hx_goto_55;
            												}
            												/* default */{
HXLINE( 741)													this->parseFullExpr(exprs);
            												}
            												_hx_goto_55:;
            											}
            											break;
            											case (int)7: {
HXLINE( 737)												goto _hx_goto_54;
            											}
            											break;
            											default:{
HXLINE( 741)												this->parseFullExpr(exprs);
            											}
            										}
            									}
            								}
            								_hx_goto_54:;
HXLINE( 744)								if ((exprs->length == 1)) {
HXLINE( 745)									def = exprs->__get(0).StaticCast<  ::hscript::Expr >();
            								}
            								else {
HXLINE( 746)									if ((exprs->length == 0)) {
HXLINE( 747)										def = ::hscript::Expr_obj::EBlock(::Array_obj< ::Dynamic>::__new(0));
            									}
            									else {
HXLINE( 749)										def = ::hscript::Expr_obj::EBlock(exprs);
            									}
            								}
HXLINE( 728)								goto _hx_goto_50;
            							}
            							/* default */{
HXLINE( 753)								this->unexpected(tk);
HXLINE( 754)								goto _hx_goto_49;
            							}
            							_hx_goto_50:;
            						}
            						break;
            						case (int)7: {
HXLINE( 751)							goto _hx_goto_49;
            						}
            						break;
            						default:{
HXLINE( 753)							this->unexpected(tk);
HXLINE( 754)							goto _hx_goto_49;
            						}
            					}
            				}
            			}
            			_hx_goto_49:;
HXLINE( 757)			return ::hscript::Expr_obj::ESwitch(e,cases,def);
HXLINE( 685)			goto _hx_goto_47;
            		}
            		if (  (_hx_switch_0==HX_("throw",26,5d,90,0f)) ){
HXLINE( 669)			 ::hscript::Expr e = this->parseExpr();
HXLINE( 670)			return ::hscript::Expr_obj::EThrow(e);
HXLINE( 668)			goto _hx_goto_47;
            		}
            		if (  (_hx_switch_0==HX_("try",3b,69,58,00)) ){
HXLINE( 672)			 ::hscript::Expr e = this->parseExpr();
HXLINE( 673)			{
HXLINE( 673)				 ::hscript::Token t = this->token();
HXDLIN( 673)				if (!(::Type_obj::enumEq(t,::hscript::Token_obj::TId(HX_("catch",3b,7c,21,41))))) {
HXLINE( 673)					this->unexpected(t);
            				}
            			}
HXLINE( 674)			{
HXLINE( 674)				 ::hscript::Token t1 = this->token();
HXDLIN( 674)				if (::hx::IsNotEq( t1,::hscript::Token_obj::TPOpen_dyn() )) {
HXLINE( 674)					this->unexpected(t1);
            				}
            			}
HXLINE( 675)			::String vname = this->getIdent();
HXLINE( 676)			{
HXLINE( 676)				 ::hscript::Token t2 = this->token();
HXDLIN( 676)				if (::hx::IsNotEq( t2,::hscript::Token_obj::TDoubleDot_dyn() )) {
HXLINE( 676)					this->unexpected(t2);
            				}
            			}
HXLINE( 677)			 ::hscript::CType t3 = null();
HXLINE( 678)			if (this->allowTypes) {
HXLINE( 679)				t3 = this->parseType();
            			}
            			else {
HXLINE( 681)				 ::hscript::Token t = this->token();
HXDLIN( 681)				if (!(::Type_obj::enumEq(t,::hscript::Token_obj::TId(HX_("Dynamic",5f,c7,66,03))))) {
HXLINE( 681)					this->unexpected(t);
            				}
            			}
HXLINE( 682)			{
HXLINE( 682)				 ::hscript::Token t4 = this->token();
HXDLIN( 682)				if (::hx::IsNotEq( t4,::hscript::Token_obj::TPClose_dyn() )) {
HXLINE( 682)					this->unexpected(t4);
            				}
            			}
HXLINE( 683)			 ::hscript::Expr ec = this->parseExpr();
HXLINE( 684)			return ::hscript::Expr_obj::ETry(e,vname,t3,ec);
HXLINE( 671)			goto _hx_goto_47;
            		}
            		if (  (_hx_switch_0==HX_("var",e7,de,59,00)) ){
HXLINE( 596)			::String ident = this->getIdent();
HXLINE( 597)			 ::hscript::Token tk = this->token();
HXLINE( 598)			 ::hscript::CType t = null();
HXLINE( 599)			bool _hx_tmp;
HXDLIN( 599)			if (::hx::IsEq( tk,::hscript::Token_obj::TDoubleDot_dyn() )) {
HXLINE( 599)				_hx_tmp = this->allowTypes;
            			}
            			else {
HXLINE( 599)				_hx_tmp = false;
            			}
HXDLIN( 599)			if (_hx_tmp) {
HXLINE( 600)				t = this->parseType();
HXLINE( 601)				tk = this->token();
            			}
HXLINE( 603)			 ::hscript::Expr e = null();
HXLINE( 604)			if (::Type_obj::enumEq(tk,::hscript::Token_obj::TOp(HX_("=",3d,00,00,00)))) {
HXLINE( 605)				e = this->parseExpr();
            			}
            			else {
HXLINE( 607)				 ::haxe::ds::GenericStack_hscript_Token _this = this->tokens;
HXDLIN( 607)				_this->head =  ::haxe::ds::GenericCell_hscript_Token_obj::__alloc( HX_CTX ,tk,_this->head);
            			}
HXLINE( 608)			return ::hscript::Expr_obj::EVar(ident,t,e);
HXLINE( 595)			goto _hx_goto_47;
            		}
            		if (  (_hx_switch_0==HX_("while",b1,43,bd,c9)) ){
HXLINE( 610)			 ::hscript::Expr econd = this->parseExpr();
HXLINE( 611)			 ::hscript::Expr e = this->parseExpr();
HXLINE( 612)			return ::hscript::Expr_obj::EWhile(econd,e);
HXLINE( 609)			goto _hx_goto_47;
            		}
            		/* default */{
HXLINE( 759)			return null();
            		}
            		_hx_goto_47:;
HXLINE( 575)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(Parser_obj,parseStructure,return )

 ::hscript::Expr Parser_obj::parseExprNext( ::hscript::Expr e1){
            	HX_GC_STACKFRAME(&_hx_pos_2fd3d36595bebf3d_763_parseExprNext)
HXLINE( 764)		 ::hscript::Token tk = this->token();
HXLINE( 765)		if (::hx::IsNull( tk )) {
HXLINE( 819)			{
HXLINE( 819)				 ::haxe::ds::GenericStack_hscript_Token _this = this->tokens;
HXDLIN( 819)				_this->head =  ::haxe::ds::GenericCell_hscript_Token_obj::__alloc( HX_CTX ,tk,_this->head);
            			}
HXLINE( 820)			return e1;
            		}
            		else {
HXLINE( 765)			switch((int)(tk->_hx_getIndex())){
            				case (int)2: {
HXLINE( 790)					::String op = tk->_hx_getString(0);
HXDLIN( 790)					if ((op == HX_("is",ea,5b,00,00))) {
HXLINE( 791)						return this->makeBinop(op,e1,this->parseExpr());
            					}
            					else {
HXLINE( 819)						{
HXLINE( 819)							 ::haxe::ds::GenericStack_hscript_Token _this = this->tokens;
HXDLIN( 819)							_this->head =  ::haxe::ds::GenericCell_hscript_Token_obj::__alloc( HX_CTX ,tk,_this->head);
            						}
HXLINE( 820)						return e1;
            					}
            				}
            				break;
            				case (int)3: {
HXLINE( 766)					::String op = tk->_hx_getString(0);
HXLINE( 768)					if ((op == HX_("->",71,27,00,00))) {
HXLINE( 770)						switch((int)(e1->_hx_getIndex())){
            							case (int)1: {
HXLINE( 771)								::String i = e1->_hx_getString(0);
HXLINE( 772)								 ::hscript::Expr eret = this->parseExpr();
HXLINE( 773)								return ::hscript::Expr_obj::EFunction(::Array_obj< ::Dynamic>::__new(1)->init(0, ::Dynamic(::hx::Anon_obj::Create(1)
            									->setFixed(0,HX_("name",4b,72,ff,48),i))),::hscript::Expr_obj::EReturn(eret),null(),null());
            							}
            							break;
            							case (int)3: {
HXLINE( 771)								 ::hscript::Expr _hx_tmp = e1->_hx_getObject(0).StaticCast<  ::hscript::Expr >();
HXDLIN( 771)								if ((_hx_tmp->_hx_getIndex() == 1)) {
HXLINE( 771)									::String i = _hx_tmp->_hx_getString(0);
HXLINE( 772)									 ::hscript::Expr eret = this->parseExpr();
HXLINE( 773)									return ::hscript::Expr_obj::EFunction(::Array_obj< ::Dynamic>::__new(1)->init(0, ::Dynamic(::hx::Anon_obj::Create(1)
            										->setFixed(0,HX_("name",4b,72,ff,48),i))),::hscript::Expr_obj::EReturn(eret),null(),null());
            								}
            							}
            							break;
            							case (int)26: {
HXLINE( 774)								 ::hscript::Expr _hx_tmp = e1->_hx_getObject(0).StaticCast<  ::hscript::Expr >();
HXDLIN( 774)								if ((_hx_tmp->_hx_getIndex() == 1)) {
HXLINE( 774)									 ::hscript::CType t = e1->_hx_getObject(1).StaticCast<  ::hscript::CType >();
HXDLIN( 774)									::String i = _hx_tmp->_hx_getString(0);
HXLINE( 775)									 ::hscript::Expr eret = this->parseExpr();
HXLINE( 776)									return ::hscript::Expr_obj::EFunction(::Array_obj< ::Dynamic>::__new(1)->init(0, ::Dynamic(::hx::Anon_obj::Create(2)
            										->setFixed(0,HX_("t",74,00,00,00),t)
            										->setFixed(1,HX_("name",4b,72,ff,48),i))),::hscript::Expr_obj::EReturn(eret),null(),null());
            								}
            							}
            							break;
            							default:{
            							}
            						}
HXLINE( 779)						this->unexpected(tk);
            					}
HXLINE( 782)					if (::hx::IsEq( this->opPriority->get(op),-1 )) {
HXLINE( 783)						bool _hx_tmp;
HXDLIN( 783)						if (!(this->isBlock(e1))) {
HXLINE( 783)							if ((e1->_hx_getIndex() == 3)) {
HXLINE( 783)								 ::hscript::Expr _g = e1->_hx_getObject(0).StaticCast<  ::hscript::Expr >();
HXDLIN( 783)								_hx_tmp = true;
            							}
            							else {
HXLINE( 783)								_hx_tmp = false;
            							}
            						}
            						else {
HXLINE( 783)							_hx_tmp = true;
            						}
HXDLIN( 783)						if (_hx_tmp) {
HXLINE( 784)							{
HXLINE( 784)								 ::haxe::ds::GenericStack_hscript_Token _this = this->tokens;
HXDLIN( 784)								_this->head =  ::haxe::ds::GenericCell_hscript_Token_obj::__alloc( HX_CTX ,tk,_this->head);
            							}
HXLINE( 785)							return e1;
            						}
HXLINE( 787)						return this->parseExprNext(::hscript::Expr_obj::EUnop(op,false,e1));
            					}
HXLINE( 789)					return this->makeBinop(op,e1,this->parseExpr());
            				}
            				break;
            				case (int)4: {
HXLINE( 808)					return this->parseExprNext(::hscript::Expr_obj::ECall(e1,this->parseExprList(::hscript::Token_obj::TPClose_dyn())));
            				}
            				break;
            				case (int)8: {
HXLINE( 793)					::String field = this->getIdent();
HXLINE( 794)					return this->parseExprNext(::hscript::Expr_obj::EField(e1,field));
            				}
            				break;
            				case (int)9: {
HXLINE( 796)					::String field = this->getIdent();
HXLINE( 797)					::String tmp = (HX_("__a_",fe,af,13,3f) + this->uid++);
HXLINE( 798)					 ::hscript::Expr e = ::hscript::Expr_obj::EBlock(::Array_obj< ::Dynamic>::__new(2)->init(0,::hscript::Expr_obj::EVar(tmp,null(),e1))->init(1,::hscript::Expr_obj::ETernary(::hscript::Expr_obj::EBinop(HX_("==",60,35,00,00),::hscript::Expr_obj::EIdent(tmp),::hscript::Expr_obj::EIdent(HX_("null",87,9e,0e,49))),::hscript::Expr_obj::EIdent(HX_("null",87,9e,0e,49)),::hscript::Expr_obj::EField(::hscript::Expr_obj::EIdent(tmp),field))));
HXLINE( 806)					return this->parseExprNext(e);
            				}
            				break;
            				case (int)12: {
HXLINE( 810)					 ::hscript::Expr e2 = this->parseExpr();
HXLINE( 811)					{
HXLINE( 811)						 ::hscript::Token t = this->token();
HXDLIN( 811)						if (::hx::IsNotEq( t,::hscript::Token_obj::TBkClose_dyn() )) {
HXLINE( 811)							this->unexpected(t);
            						}
            					}
HXLINE( 812)					return this->parseExprNext(::hscript::Expr_obj::EArray(e1,e2));
            				}
            				break;
            				case (int)14: {
HXLINE( 814)					 ::hscript::Expr e2 = this->parseExpr();
HXLINE( 815)					{
HXLINE( 815)						 ::hscript::Token t = this->token();
HXDLIN( 815)						if (::hx::IsNotEq( t,::hscript::Token_obj::TDoubleDot_dyn() )) {
HXLINE( 815)							this->unexpected(t);
            						}
            					}
HXLINE( 816)					 ::hscript::Expr e3 = this->parseExpr();
HXLINE( 817)					return ::hscript::Expr_obj::ETernary(e1,e2,e3);
            				}
            				break;
            				default:{
HXLINE( 819)					{
HXLINE( 819)						 ::haxe::ds::GenericStack_hscript_Token _this = this->tokens;
HXDLIN( 819)						_this->head =  ::haxe::ds::GenericCell_hscript_Token_obj::__alloc( HX_CTX ,tk,_this->head);
            					}
HXLINE( 820)					return e1;
            				}
            			}
            		}
HXLINE( 765)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(Parser_obj,parseExprNext,return )

::Array< ::Dynamic> Parser_obj::parseFunctionArgs(){
            	HX_STACKFRAME(&_hx_pos_2fd3d36595bebf3d_824_parseFunctionArgs)
HXLINE( 825)		::Array< ::Dynamic> args = ::Array_obj< ::Dynamic>::__new();
HXLINE( 826)		 ::hscript::Token tk = this->token();
HXLINE( 827)		if (::hx::IsNotEq( tk,::hscript::Token_obj::TPClose_dyn() )) {
HXLINE( 828)			bool done = false;
HXLINE( 829)			while(!(done)){
HXLINE( 830)				::String name = null();
HXDLIN( 830)				bool opt = false;
HXLINE( 831)				if (::hx::IsNotNull( tk )) {
HXLINE( 831)					if ((tk->_hx_getIndex() == 14)) {
HXLINE( 833)						opt = true;
HXLINE( 834)						tk = this->token();
            					}
            				}
HXLINE( 837)				if (::hx::IsNull( tk )) {
HXLINE( 840)					this->unexpected(tk);
HXLINE( 841)					goto _hx_goto_58;
            				}
            				else {
HXLINE( 837)					if ((tk->_hx_getIndex() == 2)) {
HXLINE( 838)						::String id = tk->_hx_getString(0);
HXDLIN( 838)						name = id;
            					}
            					else {
HXLINE( 840)						this->unexpected(tk);
HXLINE( 841)						goto _hx_goto_58;
            					}
            				}
HXLINE( 843)				 ::Dynamic arg =  ::Dynamic(::hx::Anon_obj::Create(1)
            					->setFixed(0,HX_("name",4b,72,ff,48),name));
HXLINE( 844)				args->push(arg);
HXLINE( 845)				if (opt) {
HXLINE( 845)					arg->__SetField(HX_("opt",33,9c,54,00),true,::hx::paccDynamic);
            				}
HXLINE( 846)				if (this->allowTypes) {
HXLINE( 847)					if (this->maybe(::hscript::Token_obj::TDoubleDot_dyn())) {
HXLINE( 848)						arg->__SetField(HX_("t",74,00,00,00),this->parseType(),::hx::paccDynamic);
            					}
HXLINE( 849)					if (this->maybe(::hscript::Token_obj::TOp(HX_("=",3d,00,00,00)))) {
HXLINE( 850)						arg->__SetField(HX_("value",71,7f,b8,31),this->parseExpr(),::hx::paccDynamic);
            					}
            				}
HXLINE( 852)				tk = this->token();
HXLINE( 853)				if (::hx::IsNull( tk )) {
HXLINE( 859)					this->unexpected(tk);
            				}
            				else {
HXLINE( 853)					switch((int)(tk->_hx_getIndex())){
            						case (int)5: {
HXLINE( 857)							done = true;
            						}
            						break;
            						case (int)10: {
HXLINE( 855)							tk = this->token();
            						}
            						break;
            						default:{
HXLINE( 859)							this->unexpected(tk);
            						}
            					}
            				}
            			}
            			_hx_goto_58:;
            		}
HXLINE( 863)		return args;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Parser_obj,parseFunctionArgs,return )

 ::Dynamic Parser_obj::parseFunctionDecl(){
            	HX_GC_STACKFRAME(&_hx_pos_2fd3d36595bebf3d_866_parseFunctionDecl)
HXLINE( 867)		{
HXLINE( 867)			 ::hscript::Token t = this->token();
HXDLIN( 867)			if (::hx::IsNotEq( t,::hscript::Token_obj::TPOpen_dyn() )) {
HXLINE( 867)				this->unexpected(t);
            			}
            		}
HXLINE( 868)		::Array< ::Dynamic> args = this->parseFunctionArgs();
HXLINE( 869)		 ::hscript::CType ret = null();
HXLINE( 870)		if (this->allowTypes) {
HXLINE( 871)			 ::hscript::Token tk = this->token();
HXLINE( 872)			if (::hx::IsNotEq( tk,::hscript::Token_obj::TDoubleDot_dyn() )) {
HXLINE( 873)				 ::haxe::ds::GenericStack_hscript_Token _this = this->tokens;
HXDLIN( 873)				_this->head =  ::haxe::ds::GenericCell_hscript_Token_obj::__alloc( HX_CTX ,tk,_this->head);
            			}
            			else {
HXLINE( 875)				ret = this->parseType();
            			}
            		}
HXLINE( 877)		return  ::Dynamic(::hx::Anon_obj::Create(3)
            			->setFixed(0,HX_("ret",61,d9,56,00),ret)
            			->setFixed(1,HX_("args",5d,8d,74,40),args)
            			->setFixed(2,HX_("body",a2,7a,1b,41),this->parseExpr()));
            	}


HX_DEFINE_DYNAMIC_FUNC0(Parser_obj,parseFunctionDecl,return )

::Array< ::String > Parser_obj::parsePath(){
            	HX_GC_STACKFRAME(&_hx_pos_2fd3d36595bebf3d_880_parsePath)
HXLINE( 881)		::Array< ::String > path = ::Array_obj< ::String >::__new(1)->init(0,this->getIdent());
HXLINE( 882)		while(true){
HXLINE( 883)			 ::hscript::Token t = this->token();
HXLINE( 884)			if (::hx::IsNotEq( t,::hscript::Token_obj::TDot_dyn() )) {
HXLINE( 885)				{
HXLINE( 885)					 ::haxe::ds::GenericStack_hscript_Token _this = this->tokens;
HXDLIN( 885)					_this->head =  ::haxe::ds::GenericCell_hscript_Token_obj::__alloc( HX_CTX ,t,_this->head);
            				}
HXLINE( 886)				goto _hx_goto_61;
            			}
HXLINE( 888)			path->push(this->getIdent());
            		}
            		_hx_goto_61:;
HXLINE( 890)		return path;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Parser_obj,parsePath,return )

 ::hscript::CType Parser_obj::parseType(){
            	HX_GC_STACKFRAME(&_hx_pos_2fd3d36595bebf3d_893_parseType)
HXDLIN( 893)		 ::hscript::Parser _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE( 894)		 ::hscript::Token t = this->token();
HXLINE( 895)		if (::hx::IsNull( t )) {
HXLINE(1011)			return this->unexpected(t);
            		}
            		else {
HXLINE( 895)			switch((int)(t->_hx_getIndex())){
            				case (int)2: {
HXLINE( 896)					::String v = t->_hx_getString(0);
HXLINE( 897)					{
HXLINE( 897)						 ::haxe::ds::GenericStack_hscript_Token _this = this->tokens;
HXDLIN( 897)						_this->head =  ::haxe::ds::GenericCell_hscript_Token_obj::__alloc( HX_CTX ,t,_this->head);
            					}
HXLINE( 898)					::Array< ::String > path = this->parsePath();
HXLINE( 899)					::Array< ::Dynamic> params = null();
HXLINE( 900)					t = this->token();
HXLINE( 901)					if (::hx::IsNull( t )) {
HXLINE( 928)						 ::haxe::ds::GenericStack_hscript_Token _this = this->tokens;
HXDLIN( 928)						_this->head =  ::haxe::ds::GenericCell_hscript_Token_obj::__alloc( HX_CTX ,t,_this->head);
            					}
            					else {
HXLINE( 901)						if ((t->_hx_getIndex() == 3)) {
HXLINE( 902)							::String op = t->_hx_getString(0);
HXLINE( 903)							if ((op == HX_("<",3c,00,00,00))) {
HXLINE( 904)								params = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 905)								while(true){
HXLINE( 906)									params->push(this->parseType());
HXLINE( 907)									t = this->token();
HXLINE( 908)									if (::hx::IsNotNull( t )) {
HXLINE( 908)										switch((int)(t->_hx_getIndex())){
            											case (int)3: {
HXLINE( 910)												::String op = t->_hx_getString(0);
HXDLIN( 910)												{
HXLINE( 911)													if ((op == HX_(">",3e,00,00,00))) {
HXLINE( 911)														goto _hx_goto_63;
            													}
HXLINE( 912)													if (::hx::IsEq( op.charCodeAt(0),62 )) {
HXLINE( 916)														{
HXLINE( 916)															 ::haxe::ds::GenericStack_hscript_Token _this = this->tokens;
HXDLIN( 916)															 ::hscript::Token item = ::hscript::Token_obj::TOp(op.substr(1,null()));
HXDLIN( 916)															_this->head =  ::haxe::ds::GenericCell_hscript_Token_obj::__alloc( HX_CTX ,item,_this->head);
            														}
HXLINE( 918)														goto _hx_goto_63;
            													}
            												}
            											}
            											break;
            											case (int)10: {
HXLINE( 909)												continue;
            											}
            											break;
            											default:{
            											}
            										}
            									}
HXLINE( 922)									this->unexpected(t);
HXLINE( 923)									goto _hx_goto_63;
            								}
            								_hx_goto_63:;
            							}
            							else {
HXLINE( 926)								 ::haxe::ds::GenericStack_hscript_Token _this = this->tokens;
HXDLIN( 926)								_this->head =  ::haxe::ds::GenericCell_hscript_Token_obj::__alloc( HX_CTX ,t,_this->head);
            							}
            						}
            						else {
HXLINE( 928)							 ::haxe::ds::GenericStack_hscript_Token _this = this->tokens;
HXDLIN( 928)							_this->head =  ::haxe::ds::GenericCell_hscript_Token_obj::__alloc( HX_CTX ,t,_this->head);
            						}
            					}
HXLINE( 930)					return this->parseTypeNext(::hscript::CType_obj::CTPath(path,params));
            				}
            				break;
            				case (int)4: {
            					HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::hscript::Parser,_gthis) HXARGC(1)
            					 ::hscript::CType _hx_run(::Array< ::Dynamic> args){
            						HX_GC_STACKFRAME(&_hx_pos_2fd3d36595bebf3d_938_parseType)
HXLINE( 939)						{
HXLINE( 939)							 ::hscript::Token _g = _gthis->token();
HXDLIN( 939)							if (::hx::IsNull( _g )) {
HXLINE( 941)								 ::hscript::Token t = _g;
HXDLIN( 941)								_gthis->unexpected(t);
            							}
            							else {
HXLINE( 939)								if ((_g->_hx_getIndex() == 3)) {
HXLINE( 940)									if ((_g->_hx_getString(0) != HX_("->",71,27,00,00))) {
HXLINE( 941)										 ::hscript::Token t = _g;
HXDLIN( 941)										_gthis->unexpected(t);
            									}
            								}
            								else {
HXLINE( 941)									 ::hscript::Token t = _g;
HXDLIN( 941)									_gthis->unexpected(t);
            								}
            							}
            						}
HXLINE( 944)						return ::hscript::CType_obj::CTFun(args,_gthis->parseType());
            					}
            					HX_END_LOCAL_FUNC1(return)

HXLINE( 932)					 ::hscript::Token a = this->token();
HXDLIN( 932)					 ::hscript::Token b = this->token();
HXLINE( 935)					{
HXLINE( 935)						 ::haxe::ds::GenericStack_hscript_Token _this = this->tokens;
HXDLIN( 935)						_this->head =  ::haxe::ds::GenericCell_hscript_Token_obj::__alloc( HX_CTX ,b,_this->head);
            					}
HXLINE( 936)					{
HXLINE( 936)						 ::haxe::ds::GenericStack_hscript_Token _this1 = this->tokens;
HXDLIN( 936)						_this1->head =  ::haxe::ds::GenericCell_hscript_Token_obj::__alloc( HX_CTX ,a,_this1->head);
            					}
HXLINE( 938)					 ::Dynamic withReturn =  ::Dynamic(new _hx_Closure_0(_gthis));
HXLINE( 947)					if (::hx::IsNull( a )) {
HXLINE( 963)						 ::hscript::CType t = this->parseType();
HXLINE( 964)						 ::hscript::Token _g = this->token();
HXDLIN( 964)						if (::hx::IsNull( _g )) {
HXLINE( 976)							 ::hscript::Token t = _g;
HXDLIN( 976)							return this->unexpected(t);
            						}
            						else {
HXLINE( 964)							switch((int)(_g->_hx_getIndex())){
            								case (int)5: {
HXLINE( 975)									return this->parseTypeNext(::hscript::CType_obj::CTParent(t));
            								}
            								break;
            								case (int)10: {
HXLINE( 966)									::Array< ::Dynamic> args = ::Array_obj< ::Dynamic>::__new(1)->init(0,t);
HXLINE( 968)									while(true){
HXLINE( 969)										args->push(this->parseType());
HXLINE( 970)										if (!(this->maybe(::hscript::Token_obj::TComma_dyn()))) {
HXLINE( 970)											goto _hx_goto_64;
            										}
            									}
            									_hx_goto_64:;
HXLINE( 972)									{
HXLINE( 972)										 ::hscript::Token t1 = this->token();
HXDLIN( 972)										if (::hx::IsNotEq( t1,::hscript::Token_obj::TPClose_dyn() )) {
HXLINE( 972)											this->unexpected(t1);
            										}
            									}
HXLINE( 973)									return withReturn(args);
            								}
            								break;
            								default:{
HXLINE( 976)									 ::hscript::Token t = _g;
HXDLIN( 976)									return this->unexpected(t);
            								}
            							}
            						}
            					}
            					else {
HXLINE( 947)						switch((int)(a->_hx_getIndex())){
            							case (int)2: {
HXLINE( 948)								::String _g = a->_hx_getString(0);
HXLINE( 947)								if (::hx::IsNull( b )) {
HXLINE( 963)									 ::hscript::CType t = this->parseType();
HXLINE( 964)									 ::hscript::Token _g = this->token();
HXDLIN( 964)									if (::hx::IsNull( _g )) {
HXLINE( 976)										 ::hscript::Token t = _g;
HXDLIN( 976)										return this->unexpected(t);
            									}
            									else {
HXLINE( 964)										switch((int)(_g->_hx_getIndex())){
            											case (int)5: {
HXLINE( 975)												return this->parseTypeNext(::hscript::CType_obj::CTParent(t));
            											}
            											break;
            											case (int)10: {
HXLINE( 966)												::Array< ::Dynamic> args = ::Array_obj< ::Dynamic>::__new(1)->init(0,t);
HXLINE( 968)												while(true){
HXLINE( 969)													args->push(this->parseType());
HXLINE( 970)													if (!(this->maybe(::hscript::Token_obj::TComma_dyn()))) {
HXLINE( 970)														goto _hx_goto_66;
            													}
            												}
            												_hx_goto_66:;
HXLINE( 972)												{
HXLINE( 972)													 ::hscript::Token t1 = this->token();
HXDLIN( 972)													if (::hx::IsNotEq( t1,::hscript::Token_obj::TPClose_dyn() )) {
HXLINE( 972)														this->unexpected(t1);
            													}
            												}
HXLINE( 973)												return withReturn(args);
            											}
            											break;
            											default:{
HXLINE( 976)												 ::hscript::Token t = _g;
HXDLIN( 976)												return this->unexpected(t);
            											}
            										}
            									}
            								}
            								else {
HXLINE( 947)									if ((b->_hx_getIndex() == 15)) {
HXLINE( 950)										::Array< ::Dynamic> _g = ::Array_obj< ::Dynamic>::__new(0);
HXDLIN( 950)										{
HXLINE( 950)											int _g1 = 0;
HXDLIN( 950)											::Array< ::Dynamic> _g2 = this->parseFunctionArgs();
HXDLIN( 950)											while((_g1 < _g2->length)){
HXLINE( 950)												 ::Dynamic arg = _g2->__get(_g1);
HXDLIN( 950)												_g1 = (_g1 + 1);
HXLINE( 951)												{
HXLINE( 951)													 ::hscript::Expr _g3 = arg->__Field(HX_("value",71,7f,b8,31),::hx::paccDynamic);
HXLINE( 952)													if (::hx::IsNotNull( _g3 )) {
HXLINE( 953)														 ::hscript::Expr v = _g3;
HXLINE( 954)														if (!(this->resumeErrors)) {
HXLINE( 954)															HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::hscript::Error_obj::ECustom(HX_("Default values not allowed in function types",28,46,7a,e6))));
            														}
            													}
            												}
HXLINE( 957)												 ::hscript::CType _hx_tmp;
HXDLIN( 957)												if (( (bool)(arg->__Field(HX_("opt",33,9c,54,00),::hx::paccDynamic)) )) {
HXLINE( 957)													_hx_tmp = ::hscript::CType_obj::CTOpt( ::Dynamic(arg->__Field(HX_("t",74,00,00,00),::hx::paccDynamic)));
            												}
            												else {
HXLINE( 957)													_hx_tmp = arg->__Field(HX_("t",74,00,00,00),::hx::paccDynamic);
            												}
HXDLIN( 957)												_g->push(::hscript::CType_obj::CTNamed( ::Dynamic(arg->__Field(HX_("name",4b,72,ff,48),::hx::paccDynamic)),_hx_tmp));
            											}
            										}
HXLINE( 950)										::Array< ::Dynamic> args = _g;
HXLINE( 960)										return withReturn(args);
            									}
            									else {
HXLINE( 963)										 ::hscript::CType t = this->parseType();
HXLINE( 964)										 ::hscript::Token _g = this->token();
HXDLIN( 964)										if (::hx::IsNull( _g )) {
HXLINE( 976)											 ::hscript::Token t = _g;
HXDLIN( 976)											return this->unexpected(t);
            										}
            										else {
HXLINE( 964)											switch((int)(_g->_hx_getIndex())){
            												case (int)5: {
HXLINE( 975)													return this->parseTypeNext(::hscript::CType_obj::CTParent(t));
            												}
            												break;
            												case (int)10: {
HXLINE( 966)													::Array< ::Dynamic> args = ::Array_obj< ::Dynamic>::__new(1)->init(0,t);
HXLINE( 968)													while(true){
HXLINE( 969)														args->push(this->parseType());
HXLINE( 970)														if (!(this->maybe(::hscript::Token_obj::TComma_dyn()))) {
HXLINE( 970)															goto _hx_goto_68;
            														}
            													}
            													_hx_goto_68:;
HXLINE( 972)													{
HXLINE( 972)														 ::hscript::Token t1 = this->token();
HXDLIN( 972)														if (::hx::IsNotEq( t1,::hscript::Token_obj::TPClose_dyn() )) {
HXLINE( 972)															this->unexpected(t1);
            														}
            													}
HXLINE( 973)													return withReturn(args);
            												}
            												break;
            												default:{
HXLINE( 976)													 ::hscript::Token t = _g;
HXDLIN( 976)													return this->unexpected(t);
            												}
            											}
            										}
            									}
            								}
            							}
            							break;
            							case (int)5: {
HXLINE( 950)								::Array< ::Dynamic> _g = ::Array_obj< ::Dynamic>::__new(0);
HXDLIN( 950)								{
HXLINE( 950)									int _g1 = 0;
HXDLIN( 950)									::Array< ::Dynamic> _g2 = this->parseFunctionArgs();
HXDLIN( 950)									while((_g1 < _g2->length)){
HXLINE( 950)										 ::Dynamic arg = _g2->__get(_g1);
HXDLIN( 950)										_g1 = (_g1 + 1);
HXLINE( 951)										{
HXLINE( 951)											 ::hscript::Expr _g3 = arg->__Field(HX_("value",71,7f,b8,31),::hx::paccDynamic);
HXLINE( 952)											if (::hx::IsNotNull( _g3 )) {
HXLINE( 953)												 ::hscript::Expr v = _g3;
HXLINE( 954)												if (!(this->resumeErrors)) {
HXLINE( 954)													HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::hscript::Error_obj::ECustom(HX_("Default values not allowed in function types",28,46,7a,e6))));
            												}
            											}
            										}
HXLINE( 957)										 ::hscript::CType _hx_tmp;
HXDLIN( 957)										if (( (bool)(arg->__Field(HX_("opt",33,9c,54,00),::hx::paccDynamic)) )) {
HXLINE( 957)											_hx_tmp = ::hscript::CType_obj::CTOpt( ::Dynamic(arg->__Field(HX_("t",74,00,00,00),::hx::paccDynamic)));
            										}
            										else {
HXLINE( 957)											_hx_tmp = arg->__Field(HX_("t",74,00,00,00),::hx::paccDynamic);
            										}
HXDLIN( 957)										_g->push(::hscript::CType_obj::CTNamed( ::Dynamic(arg->__Field(HX_("name",4b,72,ff,48),::hx::paccDynamic)),_hx_tmp));
            									}
            								}
HXLINE( 950)								::Array< ::Dynamic> args = _g;
HXLINE( 960)								return withReturn(args);
            							}
            							break;
            							default:{
HXLINE( 963)								 ::hscript::CType t = this->parseType();
HXLINE( 964)								 ::hscript::Token _g = this->token();
HXDLIN( 964)								if (::hx::IsNull( _g )) {
HXLINE( 976)									 ::hscript::Token t = _g;
HXDLIN( 976)									return this->unexpected(t);
            								}
            								else {
HXLINE( 964)									switch((int)(_g->_hx_getIndex())){
            										case (int)5: {
HXLINE( 975)											return this->parseTypeNext(::hscript::CType_obj::CTParent(t));
            										}
            										break;
            										case (int)10: {
HXLINE( 966)											::Array< ::Dynamic> args = ::Array_obj< ::Dynamic>::__new(1)->init(0,t);
HXLINE( 968)											while(true){
HXLINE( 969)												args->push(this->parseType());
HXLINE( 970)												if (!(this->maybe(::hscript::Token_obj::TComma_dyn()))) {
HXLINE( 970)													goto _hx_goto_65;
            												}
            											}
            											_hx_goto_65:;
HXLINE( 972)											{
HXLINE( 972)												 ::hscript::Token t1 = this->token();
HXDLIN( 972)												if (::hx::IsNotEq( t1,::hscript::Token_obj::TPClose_dyn() )) {
HXLINE( 972)													this->unexpected(t1);
            												}
            											}
HXLINE( 973)											return withReturn(args);
            										}
            										break;
            										default:{
HXLINE( 976)											 ::hscript::Token t = _g;
HXDLIN( 976)											return this->unexpected(t);
            										}
            									}
            								}
            							}
            						}
            					}
            				}
            				break;
            				case (int)6: {
HXLINE( 980)					::Array< ::Dynamic> fields = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 981)					::Array< ::Dynamic> meta = null();
HXLINE( 982)					while(true){
HXLINE( 983)						t = this->token();
HXLINE( 984)						if (::hx::IsNull( t )) {
HXLINE(1005)							this->unexpected(t);
HXLINE(1006)							goto _hx_goto_70;
            						}
            						else {
HXLINE( 984)							switch((int)(t->_hx_getIndex())){
            								case (int)2: {
HXLINE( 992)									::String _g = t->_hx_getString(0);
HXDLIN( 992)									if ((_g == HX_("var",e7,de,59,00))) {
HXLINE( 987)										::String name = this->getIdent();
HXLINE( 988)										{
HXLINE( 988)											 ::hscript::Token t = this->token();
HXDLIN( 988)											if (::hx::IsNotEq( t,::hscript::Token_obj::TDoubleDot_dyn() )) {
HXLINE( 988)												this->unexpected(t);
            											}
            										}
HXLINE( 989)										fields->push( ::Dynamic(::hx::Anon_obj::Create(3)
            											->setFixed(0,HX_("t",74,00,00,00),this->parseType())
            											->setFixed(1,HX_("meta",c5,4a,59,48),meta)
            											->setFixed(2,HX_("name",4b,72,ff,48),name)));
HXLINE( 990)										meta = null();
HXLINE( 991)										{
HXLINE( 991)											 ::hscript::Token t1 = this->token();
HXDLIN( 991)											if (::hx::IsNotEq( t1,::hscript::Token_obj::TSemicolon_dyn() )) {
HXLINE( 991)												this->unexpected(t1);
            											}
            										}
            									}
            									else {
HXLINE( 992)										::String name = _g;
HXDLIN( 992)										{
HXLINE( 993)											{
HXLINE( 993)												 ::hscript::Token t1 = this->token();
HXDLIN( 993)												if (::hx::IsNotEq( t1,::hscript::Token_obj::TDoubleDot_dyn() )) {
HXLINE( 993)													this->unexpected(t1);
            												}
            											}
HXLINE( 994)											fields->push( ::Dynamic(::hx::Anon_obj::Create(3)
            												->setFixed(0,HX_("t",74,00,00,00),this->parseType())
            												->setFixed(1,HX_("meta",c5,4a,59,48),meta)
            												->setFixed(2,HX_("name",4b,72,ff,48),name)));
HXLINE( 995)											t = this->token();
HXLINE( 996)											if (::hx::IsNull( t )) {
HXLINE( 999)												this->unexpected(t);
            											}
            											else {
HXLINE( 996)												switch((int)(t->_hx_getIndex())){
            													case (int)7: {
HXLINE( 998)														goto _hx_goto_70;
            													}
            													break;
            													case (int)10: {
            													}
            													break;
            													default:{
HXLINE( 999)														this->unexpected(t);
            													}
            												}
            											}
            										}
            									}
            								}
            								break;
            								case (int)7: {
HXLINE( 985)									goto _hx_goto_70;
            								}
            								break;
            								case (int)16: {
HXLINE(1001)									::String name = t->_hx_getString(0);
HXDLIN(1001)									{
HXLINE(1002)										if (::hx::IsNull( meta )) {
HXLINE(1002)											meta = ::Array_obj< ::Dynamic>::__new(0);
            										}
HXLINE(1003)										meta->push( ::Dynamic(::hx::Anon_obj::Create(2)
            											->setFixed(0,HX_("params",46,fb,7a,ed),this->parseMetaArgs())
            											->setFixed(1,HX_("name",4b,72,ff,48),name)));
            									}
            								}
            								break;
            								default:{
HXLINE(1005)									this->unexpected(t);
HXLINE(1006)									goto _hx_goto_70;
            								}
            							}
            						}
            					}
            					_hx_goto_70:;
HXLINE(1009)					return this->parseTypeNext(::hscript::CType_obj::CTAnon(fields));
            				}
            				break;
            				default:{
HXLINE(1011)					return this->unexpected(t);
            				}
            			}
            		}
HXLINE( 895)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Parser_obj,parseType,return )

 ::hscript::CType Parser_obj::parseTypeNext( ::hscript::CType t){
            	HX_GC_STACKFRAME(&_hx_pos_2fd3d36595bebf3d_1015_parseTypeNext)
HXLINE(1016)		 ::hscript::Token tk = this->token();
HXLINE(1017)		if (::hx::IsNull( tk )) {
HXLINE(1024)			{
HXLINE(1024)				 ::haxe::ds::GenericStack_hscript_Token _this = this->tokens;
HXDLIN(1024)				_this->head =  ::haxe::ds::GenericCell_hscript_Token_obj::__alloc( HX_CTX ,tk,_this->head);
            			}
HXLINE(1025)			return t;
            		}
            		else {
HXLINE(1017)			if ((tk->_hx_getIndex() == 3)) {
HXLINE(1018)				::String op = tk->_hx_getString(0);
HXLINE(1019)				if ((op != HX_("->",71,27,00,00))) {
HXLINE(1020)					{
HXLINE(1020)						 ::haxe::ds::GenericStack_hscript_Token _this = this->tokens;
HXDLIN(1020)						_this->head =  ::haxe::ds::GenericCell_hscript_Token_obj::__alloc( HX_CTX ,tk,_this->head);
            					}
HXLINE(1021)					return t;
            				}
            			}
            			else {
HXLINE(1024)				{
HXLINE(1024)					 ::haxe::ds::GenericStack_hscript_Token _this = this->tokens;
HXDLIN(1024)					_this->head =  ::haxe::ds::GenericCell_hscript_Token_obj::__alloc( HX_CTX ,tk,_this->head);
            				}
HXLINE(1025)				return t;
            			}
            		}
HXLINE(1027)		 ::hscript::CType t2 = this->parseType();
HXLINE(1028)		if ((t2->_hx_getIndex() == 1)) {
HXLINE(1029)			 ::hscript::CType _g = t2->_hx_getObject(1).StaticCast<  ::hscript::CType >();
HXDLIN(1029)			::Array< ::Dynamic> args = t2->_hx_getObject(0).StaticCast< ::Array< ::Dynamic> >();
HXLINE(1030)			args->unshift(t);
HXLINE(1031)			return t2;
            		}
            		else {
HXLINE(1033)			return ::hscript::CType_obj::CTFun(::Array_obj< ::Dynamic>::__new(1)->init(0,t),t2);
            		}
HXLINE(1028)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(Parser_obj,parseTypeNext,return )

::Array< ::Dynamic> Parser_obj::parseExprList( ::hscript::Token etk){
            	HX_GC_STACKFRAME(&_hx_pos_2fd3d36595bebf3d_1037_parseExprList)
HXLINE(1038)		::Array< ::Dynamic> args = ::Array_obj< ::Dynamic>::__new();
HXLINE(1039)		 ::hscript::Token tk = this->token();
HXLINE(1040)		if (::hx::IsEq( tk,etk )) {
HXLINE(1041)			return args;
            		}
HXLINE(1042)		{
HXLINE(1042)			 ::haxe::ds::GenericStack_hscript_Token _this = this->tokens;
HXDLIN(1042)			_this->head =  ::haxe::ds::GenericCell_hscript_Token_obj::__alloc( HX_CTX ,tk,_this->head);
            		}
HXLINE(1043)		while(true){
HXLINE(1044)			args->push(this->parseExpr());
HXLINE(1045)			tk = this->token();
HXLINE(1046)			if (::hx::IsNull( tk )) {
HXLINE(1049)				if (::hx::IsEq( tk,etk )) {
HXLINE(1049)					goto _hx_goto_74;
            				}
HXLINE(1050)				this->unexpected(tk);
HXLINE(1051)				goto _hx_goto_74;
            			}
            			else {
HXLINE(1046)				if ((tk->_hx_getIndex() != 10)) {
HXLINE(1049)					if (::hx::IsEq( tk,etk )) {
HXLINE(1049)						goto _hx_goto_74;
            					}
HXLINE(1050)					this->unexpected(tk);
HXLINE(1051)					goto _hx_goto_74;
            				}
            			}
            		}
            		_hx_goto_74:;
HXLINE(1054)		return args;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Parser_obj,parseExprList,return )

::Array< ::Dynamic> Parser_obj::parseModule(::String content,::String __o_origin, ::Dynamic __o_position){
            		::String origin = __o_origin;
            		if (::hx::IsNull(__o_origin)) origin = HX_("hscript",73,8c,18,2c);
            		 ::Dynamic position = __o_position;
            		if (::hx::IsNull(__o_position)) position = 0;
            	HX_GC_STACKFRAME(&_hx_pos_2fd3d36595bebf3d_1059_parseModule)
HXLINE(1060)		this->initParser(origin,( (int)(position) ));
HXLINE(1061)		this->input = content;
HXLINE(1062)		this->readPos = 0;
HXLINE(1063)		this->allowTypes = true;
HXLINE(1064)		this->allowMetadata = true;
HXLINE(1065)		::Array< ::Dynamic> decls = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(1066)		while(true){
HXLINE(1067)			 ::hscript::Token tk = this->token();
HXLINE(1068)			if (::hx::IsEq( tk,::hscript::Token_obj::TEof_dyn() )) {
HXLINE(1068)				goto _hx_goto_76;
            			}
HXLINE(1069)			{
HXLINE(1069)				 ::haxe::ds::GenericStack_hscript_Token _this = this->tokens;
HXDLIN(1069)				_this->head =  ::haxe::ds::GenericCell_hscript_Token_obj::__alloc( HX_CTX ,tk,_this->head);
            			}
HXLINE(1070)			decls->push(this->parseModuleDecl());
            		}
            		_hx_goto_76:;
HXLINE(1072)		return decls;
            	}


HX_DEFINE_DYNAMIC_FUNC3(Parser_obj,parseModule,return )

::Array< ::Dynamic> Parser_obj::parseMetadata(){
            	HX_GC_STACKFRAME(&_hx_pos_2fd3d36595bebf3d_1075_parseMetadata)
HXLINE(1076)		::Array< ::Dynamic> meta = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(1077)		while(true){
HXLINE(1078)			 ::hscript::Token tk = this->token();
HXLINE(1079)			if (::hx::IsNull( tk )) {
HXLINE(1083)				{
HXLINE(1083)					 ::haxe::ds::GenericStack_hscript_Token _this = this->tokens;
HXDLIN(1083)					_this->head =  ::haxe::ds::GenericCell_hscript_Token_obj::__alloc( HX_CTX ,tk,_this->head);
            				}
HXLINE(1084)				goto _hx_goto_78;
            			}
            			else {
HXLINE(1079)				if ((tk->_hx_getIndex() == 16)) {
HXLINE(1080)					::String name = tk->_hx_getString(0);
HXLINE(1081)					meta->push( ::Dynamic(::hx::Anon_obj::Create(2)
            						->setFixed(0,HX_("params",46,fb,7a,ed),this->parseMetaArgs())
            						->setFixed(1,HX_("name",4b,72,ff,48),name)));
            				}
            				else {
HXLINE(1083)					{
HXLINE(1083)						 ::haxe::ds::GenericStack_hscript_Token _this = this->tokens;
HXDLIN(1083)						_this->head =  ::haxe::ds::GenericCell_hscript_Token_obj::__alloc( HX_CTX ,tk,_this->head);
            					}
HXLINE(1084)					goto _hx_goto_78;
            				}
            			}
            		}
            		_hx_goto_78:;
HXLINE(1087)		return meta;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Parser_obj,parseMetadata,return )

 ::Dynamic Parser_obj::parseParams(){
            	HX_STACKFRAME(&_hx_pos_2fd3d36595bebf3d_1090_parseParams)
HXLINE(1091)		if (this->maybe(::hscript::Token_obj::TOp(HX_("<",3c,00,00,00)))) {
HXLINE(1092)			if (!(this->resumeErrors)) {
HXLINE(1092)				HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::hscript::Error_obj::EInvalidOp(HX_("Unsupported class type parameters",9d,ae,a3,50))));
            			}
            		}
HXLINE(1093)		return  ::Dynamic(::hx::Anon_obj::Create(0));
            	}


HX_DEFINE_DYNAMIC_FUNC0(Parser_obj,parseParams,return )

 ::hscript::ModuleDecl Parser_obj::parseModuleDecl(){
            	HX_GC_STACKFRAME(&_hx_pos_2fd3d36595bebf3d_1096_parseModuleDecl)
HXLINE(1097)		::Array< ::Dynamic> meta = this->parseMetadata();
HXLINE(1098)		::String ident = this->getIdent();
HXLINE(1099)		bool isPrivate = false;
HXDLIN(1099)		bool isExtern = false;
HXLINE(1100)		while(true){
HXLINE(1101)			::String _hx_switch_0 = ident;
            			if (  (_hx_switch_0==HX_("extern",60,d5,1a,c7)) ){
HXLINE(1105)				isExtern = true;
HXDLIN(1105)				goto _hx_goto_82;
            			}
            			if (  (_hx_switch_0==HX_("private",03,2d,6f,89)) ){
HXLINE(1103)				isPrivate = true;
HXDLIN(1103)				goto _hx_goto_82;
            			}
            			/* default */{
HXLINE(1107)				goto _hx_goto_81;
            			}
            			_hx_goto_82:;
HXLINE(1109)			ident = this->getIdent();
            		}
            		_hx_goto_81:;
HXLINE(1111)		::String _hx_switch_1 = ident;
            		if (  (_hx_switch_1==HX_("class",38,78,58,48)) ){
HXLINE(1138)			::String name = this->getIdent();
HXLINE(1139)			 ::Dynamic params = this->parseParams();
HXLINE(1140)			 ::hscript::CType extend = null();
HXLINE(1141)			::Array< ::Dynamic> implement = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(1143)			while(true){
HXLINE(1144)				 ::hscript::Token t = this->token();
HXLINE(1145)				if (::hx::IsNull( t )) {
HXLINE(1151)					{
HXLINE(1151)						 ::haxe::ds::GenericStack_hscript_Token _this = this->tokens;
HXDLIN(1151)						_this->head =  ::haxe::ds::GenericCell_hscript_Token_obj::__alloc( HX_CTX ,t,_this->head);
            					}
HXLINE(1152)					goto _hx_goto_84;
            				}
            				else {
HXLINE(1145)					if ((t->_hx_getIndex() == 2)) {
HXLINE(1148)						::String _hx_switch_2 = t->_hx_getString(0);
            						if (  (_hx_switch_2==HX_("extends",59,cd,5c,70)) ){
HXLINE(1147)							extend = this->parseType();
HXDLIN(1147)							goto _hx_goto_85;
            						}
            						if (  (_hx_switch_2==HX_("implements",70,fd,43,a8)) ){
HXLINE(1149)							implement->push(this->parseType());
HXDLIN(1149)							goto _hx_goto_85;
            						}
            						/* default */{
HXLINE(1151)							{
HXLINE(1151)								 ::haxe::ds::GenericStack_hscript_Token _this = this->tokens;
HXDLIN(1151)								_this->head =  ::haxe::ds::GenericCell_hscript_Token_obj::__alloc( HX_CTX ,t,_this->head);
            							}
HXLINE(1152)							goto _hx_goto_84;
            						}
            						_hx_goto_85:;
            					}
            					else {
HXLINE(1151)						{
HXLINE(1151)							 ::haxe::ds::GenericStack_hscript_Token _this = this->tokens;
HXDLIN(1151)							_this->head =  ::haxe::ds::GenericCell_hscript_Token_obj::__alloc( HX_CTX ,t,_this->head);
            						}
HXLINE(1152)						goto _hx_goto_84;
            					}
            				}
            			}
            			_hx_goto_84:;
HXLINE(1156)			::Array< ::Dynamic> fields = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(1157)			{
HXLINE(1157)				 ::hscript::Token t = this->token();
HXDLIN(1157)				if (::hx::IsNotEq( t,::hscript::Token_obj::TBrOpen_dyn() )) {
HXLINE(1157)					this->unexpected(t);
            				}
            			}
HXLINE(1158)			while(!(this->maybe(::hscript::Token_obj::TBrClose_dyn()))){
HXLINE(1159)				fields->push(this->parseField());
            			}
HXLINE(1161)			return ::hscript::ModuleDecl_obj::DClass( ::Dynamic(::hx::Anon_obj::Create(8)
            				->setFixed(0,HX_("fields",79,8e,8e,80),fields)
            				->setFixed(1,HX_("isPrivate",39,aa,6d,8d),isPrivate)
            				->setFixed(2,HX_("implement",a3,71,3f,af),implement)
            				->setFixed(3,HX_("extend",da,d1,1a,c7),extend)
            				->setFixed(4,HX_("params",46,fb,7a,ed),params)
            				->setFixed(5,HX_("isExtern",ea,70,84,1f),isExtern)
            				->setFixed(6,HX_("meta",c5,4a,59,48),meta)
            				->setFixed(7,HX_("name",4b,72,ff,48),name)));
HXLINE(1137)			goto _hx_goto_83;
            		}
            		if (  (_hx_switch_1==HX_("import",65,a1,82,08)) ){
HXLINE(1117)			::Array< ::String > path = ::Array_obj< ::String >::__new(1)->init(0,this->getIdent());
HXLINE(1118)			bool star = false;
HXLINE(1119)			while(true){
HXLINE(1120)				 ::hscript::Token t = this->token();
HXLINE(1121)				if (::hx::IsNotEq( t,::hscript::Token_obj::TDot_dyn() )) {
HXLINE(1122)					{
HXLINE(1122)						 ::haxe::ds::GenericStack_hscript_Token _this = this->tokens;
HXDLIN(1122)						_this->head =  ::haxe::ds::GenericCell_hscript_Token_obj::__alloc( HX_CTX ,t,_this->head);
            					}
HXLINE(1123)					goto _hx_goto_87;
            				}
HXLINE(1125)				t = this->token();
HXLINE(1126)				if (::hx::IsNull( t )) {
HXLINE(1132)					this->unexpected(t);
            				}
            				else {
HXLINE(1126)					switch((int)(t->_hx_getIndex())){
            						case (int)2: {
HXLINE(1127)							::String id = t->_hx_getString(0);
HXLINE(1128)							path->push(id);
            						}
            						break;
            						case (int)3: {
HXLINE(1129)							if ((t->_hx_getString(0) == HX_("*",2a,00,00,00))) {
HXLINE(1130)								star = true;
            							}
            							else {
HXLINE(1132)								this->unexpected(t);
            							}
            						}
            						break;
            						default:{
HXLINE(1132)							this->unexpected(t);
            						}
            					}
            				}
            			}
            			_hx_goto_87:;
HXLINE(1135)			{
HXLINE(1135)				 ::hscript::Token t = this->token();
HXDLIN(1135)				if (::hx::IsNotEq( t,::hscript::Token_obj::TSemicolon_dyn() )) {
HXLINE(1135)					this->unexpected(t);
            				}
            			}
HXLINE(1136)			return ::hscript::ModuleDecl_obj::DImport(path,star);
HXLINE(1116)			goto _hx_goto_83;
            		}
            		if (  (_hx_switch_1==HX_("package",86,2b,b1,41)) ){
HXLINE(1113)			::Array< ::String > path = this->parsePath();
HXLINE(1114)			{
HXLINE(1114)				 ::hscript::Token t = this->token();
HXDLIN(1114)				if (::hx::IsNotEq( t,::hscript::Token_obj::TSemicolon_dyn() )) {
HXLINE(1114)					this->unexpected(t);
            				}
            			}
HXLINE(1115)			return ::hscript::ModuleDecl_obj::DPackage(path);
HXLINE(1112)			goto _hx_goto_83;
            		}
            		if (  (_hx_switch_1==HX_("typedef",4b,37,d8,f8)) ){
HXLINE(1172)			::String name = this->getIdent();
HXLINE(1173)			 ::Dynamic params = this->parseParams();
HXLINE(1174)			{
HXLINE(1174)				 ::hscript::Token t = this->token();
HXDLIN(1174)				if (!(::Type_obj::enumEq(t,::hscript::Token_obj::TOp(HX_("=",3d,00,00,00))))) {
HXLINE(1174)					this->unexpected(t);
            				}
            			}
HXLINE(1175)			 ::hscript::CType t1 = this->parseType();
HXLINE(1176)			return ::hscript::ModuleDecl_obj::DTypedef( ::Dynamic(::hx::Anon_obj::Create(5)
            				->setFixed(0,HX_("isPrivate",39,aa,6d,8d),isPrivate)
            				->setFixed(1,HX_("params",46,fb,7a,ed),params)
            				->setFixed(2,HX_("t",74,00,00,00),t1)
            				->setFixed(3,HX_("meta",c5,4a,59,48),meta)
            				->setFixed(4,HX_("name",4b,72,ff,48),name)));
HXLINE(1171)			goto _hx_goto_83;
            		}
            		/* default */{
HXLINE(1184)			this->unexpected(::hscript::Token_obj::TId(ident));
            		}
            		_hx_goto_83:;
HXLINE(1186)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Parser_obj,parseModuleDecl,return )

 ::Dynamic Parser_obj::parseField(){
            	HX_STACKFRAME(&_hx_pos_2fd3d36595bebf3d_1189_parseField)
HXLINE(1190)		::Array< ::Dynamic> meta = this->parseMetadata();
HXLINE(1191)		::Array< ::Dynamic> access = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(1192)		while(true){
HXLINE(1193)			::String id = this->getIdent();
HXLINE(1194)			::String _hx_switch_0 = id;
            			if (  (_hx_switch_0==HX_("function",18,ab,52,14)) ){
HXLINE(1208)				::String name = this->getIdent();
HXLINE(1209)				 ::Dynamic inf = this->parseFunctionDecl();
HXLINE(1210)				return  ::Dynamic(::hx::Anon_obj::Create(4)
            					->setFixed(0,HX_("access",a4,95,06,0b),access)
            					->setFixed(1,HX_("kind",54,e1,09,47),::hscript::FieldKind_obj::KFunction( ::Dynamic(::hx::Anon_obj::Create(3)
            						->setFixed(0,HX_("ret",61,d9,56,00), ::Dynamic(inf->__Field(HX_("ret",61,d9,56,00),::hx::paccDynamic)))
            						->setFixed(1,HX_("args",5d,8d,74,40), ::Dynamic(inf->__Field(HX_("args",5d,8d,74,40),::hx::paccDynamic)))
            						->setFixed(2,HX_("expr",35,fd,1d,43), ::Dynamic(inf->__Field(HX_("body",a2,7a,1b,41),::hx::paccDynamic))))))
            					->setFixed(2,HX_("meta",c5,4a,59,48),meta)
            					->setFixed(3,HX_("name",4b,72,ff,48),name));
HXLINE(1207)				goto _hx_goto_90;
            			}
            			if (  (_hx_switch_0==HX_("inline",59,ca,3f,99)) ){
HXLINE(1202)				access->push(::hscript::FieldAccess_obj::AInline_dyn());
HXDLIN(1202)				goto _hx_goto_90;
            			}
            			if (  (_hx_switch_0==HX_("macro",0c,70,16,03)) ){
HXLINE(1206)				access->push(::hscript::FieldAccess_obj::AMacro_dyn());
HXDLIN(1206)				goto _hx_goto_90;
            			}
            			if (  (_hx_switch_0==HX_("override",4c,22,28,49)) ){
HXLINE(1196)				access->push(::hscript::FieldAccess_obj::AOverride_dyn());
HXDLIN(1196)				goto _hx_goto_90;
            			}
            			if (  (_hx_switch_0==HX_("private",03,2d,6f,89)) ){
HXLINE(1200)				access->push(::hscript::FieldAccess_obj::APrivate_dyn());
HXDLIN(1200)				goto _hx_goto_90;
            			}
            			if (  (_hx_switch_0==HX_("public",a9,80,f3,66)) ){
HXLINE(1198)				access->push(::hscript::FieldAccess_obj::APublic_dyn());
HXDLIN(1198)				goto _hx_goto_90;
            			}
            			if (  (_hx_switch_0==HX_("static",ae,dc,fb,05)) ){
HXLINE(1204)				access->push(::hscript::FieldAccess_obj::AStatic_dyn());
HXDLIN(1204)				goto _hx_goto_90;
            			}
            			if (  (_hx_switch_0==HX_("var",e7,de,59,00)) ){
HXLINE(1221)				::String name = this->getIdent();
HXLINE(1222)				::String get = null();
HXDLIN(1222)				::String set = null();
HXLINE(1223)				if (this->maybe(::hscript::Token_obj::TPOpen_dyn())) {
HXLINE(1224)					get = this->getIdent();
HXLINE(1225)					{
HXLINE(1225)						 ::hscript::Token t = this->token();
HXDLIN(1225)						if (::hx::IsNotEq( t,::hscript::Token_obj::TComma_dyn() )) {
HXLINE(1225)							this->unexpected(t);
            						}
            					}
HXLINE(1226)					set = this->getIdent();
HXLINE(1227)					{
HXLINE(1227)						 ::hscript::Token t1 = this->token();
HXDLIN(1227)						if (::hx::IsNotEq( t1,::hscript::Token_obj::TPClose_dyn() )) {
HXLINE(1227)							this->unexpected(t1);
            						}
            					}
            				}
HXLINE(1229)				 ::hscript::CType type;
HXDLIN(1229)				if (this->maybe(::hscript::Token_obj::TDoubleDot_dyn())) {
HXLINE(1229)					type = this->parseType();
            				}
            				else {
HXLINE(1229)					type = null();
            				}
HXLINE(1230)				 ::hscript::Expr expr;
HXDLIN(1230)				if (this->maybe(::hscript::Token_obj::TOp(HX_("=",3d,00,00,00)))) {
HXLINE(1230)					expr = this->parseExpr();
            				}
            				else {
HXLINE(1230)					expr = null();
            				}
HXLINE(1232)				if (::hx::IsNotNull( expr )) {
HXLINE(1233)					if (this->isBlock(expr)) {
HXLINE(1234)						this->maybe(::hscript::Token_obj::TSemicolon_dyn());
            					}
            					else {
HXLINE(1236)						 ::hscript::Token t = this->token();
HXDLIN(1236)						if (::hx::IsNotEq( t,::hscript::Token_obj::TSemicolon_dyn() )) {
HXLINE(1236)							this->unexpected(t);
            						}
            					}
            				}
            				else {
HXLINE(1237)					bool _hx_tmp;
HXDLIN(1237)					if (::hx::IsNotNull( type )) {
HXLINE(1237)						if (::hx::IsNull( type )) {
HXLINE(1237)							_hx_tmp = false;
            						}
            						else {
HXLINE(1237)							if ((type->_hx_getIndex() == 2)) {
HXLINE(1237)								::Array< ::Dynamic> _g = type->_hx_getObject(0).StaticCast< ::Array< ::Dynamic> >();
HXDLIN(1237)								_hx_tmp = true;
            							}
            							else {
HXLINE(1237)								_hx_tmp = false;
            							}
            						}
            					}
            					else {
HXLINE(1237)						_hx_tmp = false;
            					}
HXDLIN(1237)					if (_hx_tmp) {
HXLINE(1238)						this->maybe(::hscript::Token_obj::TSemicolon_dyn());
            					}
            					else {
HXLINE(1240)						 ::hscript::Token t = this->token();
HXDLIN(1240)						if (::hx::IsNotEq( t,::hscript::Token_obj::TSemicolon_dyn() )) {
HXLINE(1240)							this->unexpected(t);
            						}
            					}
            				}
HXLINE(1242)				return  ::Dynamic(::hx::Anon_obj::Create(4)
            					->setFixed(0,HX_("access",a4,95,06,0b),access)
            					->setFixed(1,HX_("kind",54,e1,09,47),::hscript::FieldKind_obj::KVar( ::Dynamic(::hx::Anon_obj::Create(4)
            						->setFixed(0,HX_("get",96,80,4e,00),get)
            						->setFixed(1,HX_("set",a2,9b,57,00),set)
            						->setFixed(2,HX_("expr",35,fd,1d,43),expr)
            						->setFixed(3,HX_("type",ba,f2,08,4d),type))))
            					->setFixed(2,HX_("meta",c5,4a,59,48),meta)
            					->setFixed(3,HX_("name",4b,72,ff,48),name));
HXLINE(1220)				goto _hx_goto_90;
            			}
            			/* default */{
HXLINE(1254)				this->unexpected(::hscript::Token_obj::TId(id));
HXLINE(1255)				goto _hx_goto_89;
            			}
            			_hx_goto_90:;
            		}
            		_hx_goto_89:;
HXLINE(1258)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Parser_obj,parseField,return )

int Parser_obj::readChar(){
            	HX_STACKFRAME(&_hx_pos_2fd3d36595bebf3d_1264_readChar)
HXDLIN(1264)		return this->input.cca(this->readPos++);
            	}


HX_DEFINE_DYNAMIC_FUNC0(Parser_obj,readChar,return )

::String Parser_obj::readString(int until){
            	HX_GC_STACKFRAME(&_hx_pos_2fd3d36595bebf3d_1267_readString)
HXLINE(1268)		int c = 0;
HXLINE(1269)		 ::StringBuf b =  ::StringBuf_obj::__alloc( HX_CTX );
HXLINE(1270)		bool esc = false;
HXLINE(1271)		int old = this->line;
HXLINE(1272)		::String s = this->input;
HXLINE(1276)		while(true){
HXLINE(1277)			int c = this->input.cca(this->readPos++);
HXLINE(1278)			if ((c == 0)) {
HXLINE(1279)				this->line = old;
HXLINE(1280)				if (!(this->resumeErrors)) {
HXLINE(1280)					HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::hscript::Error_obj::EUnterminatedString_dyn()));
            				}
HXLINE(1281)				goto _hx_goto_93;
            			}
HXLINE(1283)			if (esc) {
HXLINE(1284)				esc = false;
HXLINE(1285)				switch((int)(c)){
            					case (int)34: case (int)39: case (int)92: {
HXLINE(1289)						if ((c >= 127)) {
HXLINE(1289)							::String x = ::String::fromCharCode(c);
HXDLIN(1289)							if (::hx::IsNotNull( b->charBuf )) {
HXLINE(1289)								b->flush();
            							}
HXDLIN(1289)							if (::hx::IsNull( b->b )) {
HXLINE(1289)								b->b = ::Array_obj< ::String >::__new(1)->init(0,::Std_obj::string(x));
            							}
            							else {
HXLINE(1289)								::Array< ::String > b1 = b->b;
HXDLIN(1289)								b1->push(::Std_obj::string(x));
            							}
            						}
            						else {
HXLINE(1289)							if (::hx::IsNull( b->charBuf )) {
HXLINE(1289)								b->charBuf = ::Array_obj< char >::__new();
            							}
HXDLIN(1289)							b->charBuf->push(c);
            						}
            					}
            					break;
            					case (int)47: {
HXLINE(1290)						if (this->allowJSON) {
HXLINE(1290)							if ((c >= 127)) {
HXLINE(1290)								::String x = ::String::fromCharCode(c);
HXDLIN(1290)								if (::hx::IsNotNull( b->charBuf )) {
HXLINE(1290)									b->flush();
            								}
HXDLIN(1290)								if (::hx::IsNull( b->b )) {
HXLINE(1290)									b->b = ::Array_obj< ::String >::__new(1)->init(0,::Std_obj::string(x));
            								}
            								else {
HXLINE(1290)									::Array< ::String > b1 = b->b;
HXDLIN(1290)									b1->push(::Std_obj::string(x));
            								}
            							}
            							else {
HXLINE(1290)								if (::hx::IsNull( b->charBuf )) {
HXLINE(1290)									b->charBuf = ::Array_obj< char >::__new();
            								}
HXDLIN(1290)								b->charBuf->push(c);
            							}
            						}
            						else {
HXLINE(1290)							this->invalidChar(c);
            						}
            					}
            					break;
            					case (int)110: {
HXLINE(1286)						if (::hx::IsNull( b->charBuf )) {
HXLINE(1286)							b->charBuf = ::Array_obj< char >::__new();
            						}
HXDLIN(1286)						b->charBuf->push(10);
            					}
            					break;
            					case (int)114: {
HXLINE(1287)						if (::hx::IsNull( b->charBuf )) {
HXLINE(1287)							b->charBuf = ::Array_obj< char >::__new();
            						}
HXDLIN(1287)						b->charBuf->push(13);
            					}
            					break;
            					case (int)116: {
HXLINE(1288)						if (::hx::IsNull( b->charBuf )) {
HXLINE(1288)							b->charBuf = ::Array_obj< char >::__new();
            						}
HXDLIN(1288)						b->charBuf->push(9);
            					}
            					break;
            					case (int)117: {
HXLINE(1292)						if (!(this->allowJSON)) {
HXLINE(1292)							this->invalidChar(c);
            						}
HXLINE(1293)						int k = 0;
HXLINE(1294)						{
HXLINE(1294)							int _g = 0;
HXDLIN(1294)							while((_g < 4)){
HXLINE(1294)								_g = (_g + 1);
HXDLIN(1294)								int i = (_g - 1);
HXLINE(1295)								k = (k << 4);
HXLINE(1296)								int _hx_char = this->input.cca(this->readPos++);
HXLINE(1297)								switch((int)(_hx_char)){
            									case (int)48: case (int)49: case (int)50: case (int)51: case (int)52: case (int)53: case (int)54: case (int)55: case (int)56: case (int)57: {
HXLINE(1299)										k = (k + (_hx_char - 48));
            									}
            									break;
            									case (int)65: case (int)66: case (int)67: case (int)68: case (int)69: case (int)70: {
HXLINE(1301)										k = (k + (_hx_char - 55));
            									}
            									break;
            									case (int)97: case (int)98: case (int)99: case (int)100: case (int)101: case (int)102: {
HXLINE(1303)										k = (k + (_hx_char - 87));
            									}
            									break;
            									default:{
HXLINE(1305)										if ((_hx_char == 0)) {
HXLINE(1306)											this->line = old;
HXLINE(1307)											if (!(this->resumeErrors)) {
HXLINE(1307)												HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::hscript::Error_obj::EUnterminatedString_dyn()));
            											}
            										}
HXLINE(1309)										this->invalidChar(_hx_char);
            									}
            								}
            							}
            						}
HXLINE(1312)						if ((k >= 127)) {
HXLINE(1312)							::String x = ::String::fromCharCode(k);
HXDLIN(1312)							if (::hx::IsNotNull( b->charBuf )) {
HXLINE(1312)								b->flush();
            							}
HXDLIN(1312)							if (::hx::IsNull( b->b )) {
HXLINE(1312)								b->b = ::Array_obj< ::String >::__new(1)->init(0,::Std_obj::string(x));
            							}
            							else {
HXLINE(1312)								::Array< ::String > b1 = b->b;
HXDLIN(1312)								b1->push(::Std_obj::string(x));
            							}
            						}
            						else {
HXLINE(1312)							if (::hx::IsNull( b->charBuf )) {
HXLINE(1312)								b->charBuf = ::Array_obj< char >::__new();
            							}
HXDLIN(1312)							b->charBuf->push(k);
            						}
            					}
            					break;
            					default:{
HXLINE(1313)						this->invalidChar(c);
            					}
            				}
            			}
            			else {
HXLINE(1315)				if ((c == 92)) {
HXLINE(1316)					esc = true;
            				}
            				else {
HXLINE(1317)					if ((c == until)) {
HXLINE(1318)						goto _hx_goto_93;
            					}
            					else {
HXLINE(1320)						if ((c == 10)) {
HXLINE(1320)							this->line++;
            						}
HXLINE(1321)						if ((c >= 127)) {
HXLINE(1321)							::String x = ::String::fromCharCode(c);
HXDLIN(1321)							if (::hx::IsNotNull( b->charBuf )) {
HXLINE(1321)								b->flush();
            							}
HXDLIN(1321)							if (::hx::IsNull( b->b )) {
HXLINE(1321)								b->b = ::Array_obj< ::String >::__new(1)->init(0,::Std_obj::string(x));
            							}
            							else {
HXLINE(1321)								::Array< ::String > b1 = b->b;
HXDLIN(1321)								b1->push(::Std_obj::string(x));
            							}
            						}
            						else {
HXLINE(1321)							if (::hx::IsNull( b->charBuf )) {
HXLINE(1321)								b->charBuf = ::Array_obj< char >::__new();
            							}
HXDLIN(1321)							b->charBuf->push(c);
            						}
            					}
            				}
            			}
            		}
            		_hx_goto_93:;
HXLINE(1324)		return b->toString();
            	}


HX_DEFINE_DYNAMIC_FUNC1(Parser_obj,readString,return )

 ::hscript::Token Parser_obj::token(){
            	HX_GC_STACKFRAME(&_hx_pos_2fd3d36595bebf3d_1327_token)
HXLINE(1345)		if (::hx::IsNotNull( this->tokens->head )) {
HXLINE(1346)			 ::haxe::ds::GenericStack_hscript_Token _this = this->tokens;
HXDLIN(1346)			 ::haxe::ds::GenericCell_hscript_Token k = _this->head;
HXDLIN(1346)			if (::hx::IsNull( k )) {
HXLINE(1346)				return null();
            			}
            			else {
HXLINE(1346)				_this->head = k->next;
HXDLIN(1346)				return k->elt;
            			}
            		}
HXLINE(1348)		int _hx_char;
HXLINE(1349)		if ((this->_hx_char < 0)) {
HXLINE(1350)			_hx_char = this->input.cca(this->readPos++);
            		}
            		else {
HXLINE(1352)			_hx_char = this->_hx_char;
HXLINE(1353)			this->_hx_char = -1;
            		}
HXLINE(1355)		while(true){
HXLINE(1356)			if ((_hx_char == 0)) {
HXLINE(1357)				this->_hx_char = _hx_char;
HXLINE(1358)				return ::hscript::Token_obj::TEof_dyn();
            			}
HXLINE(1360)			switch((int)(_hx_char)){
            				case (int)0: {
HXLINE(1362)					return ::hscript::Token_obj::TEof_dyn();
            				}
            				break;
            				case (int)10: {
HXLINE(1367)					this->line++;
            				}
            				break;
            				case (int)9: case (int)13: case (int)32: {
            				}
            				break;
            				case (int)35: {
HXLINE(1498)					_hx_char = this->input.cca(this->readPos++);
HXLINE(1499)					if (this->idents->__get(_hx_char)) {
HXLINE(1500)						::String id = ::String::fromCharCode(_hx_char);
HXLINE(1501)						while(true){
HXLINE(1502)							_hx_char = this->input.cca(this->readPos++);
HXLINE(1503)							if (!(this->idents->__get(_hx_char))) {
HXLINE(1504)								this->_hx_char = _hx_char;
HXLINE(1505)								return this->preprocess(id);
            							}
HXLINE(1507)							id = (id + ::String::fromCharCode(_hx_char));
            						}
            					}
HXLINE(1510)					this->invalidChar(_hx_char);
            				}
            				break;
            				case (int)34: case (int)39: {
HXLINE(1467)					return ::hscript::Token_obj::TConst(::hscript::Const_obj::CString(this->readString(_hx_char)));
            				}
            				break;
            				case (int)40: {
HXLINE(1434)					return ::hscript::Token_obj::TPOpen_dyn();
            				}
            				break;
            				case (int)41: {
HXLINE(1435)					return ::hscript::Token_obj::TPClose_dyn();
            				}
            				break;
            				case (int)44: {
HXLINE(1436)					return ::hscript::Token_obj::TComma_dyn();
            				}
            				break;
            				case (int)46: {
HXLINE(1438)					_hx_char = this->input.cca(this->readPos++);
HXLINE(1439)					switch((int)(_hx_char)){
            						case (int)46: {
HXLINE(1455)							_hx_char = this->input.cca(this->readPos++);
HXLINE(1456)							if ((_hx_char != 46)) {
HXLINE(1457)								this->invalidChar(_hx_char);
            							}
HXLINE(1458)							return ::hscript::Token_obj::TOp(HX_("...",ee,0f,23,00));
            						}
            						break;
            						case (int)48: case (int)49: case (int)50: case (int)51: case (int)52: case (int)53: case (int)54: case (int)55: case (int)56: case (int)57: {
HXLINE(1441)							int n = (_hx_char - 48);
HXLINE(1442)							int exp = 1;
HXLINE(1443)							while(true){
HXLINE(1444)								_hx_char = this->input.cca(this->readPos++);
HXLINE(1445)								exp = (exp * 10);
HXLINE(1446)								switch((int)(_hx_char)){
            									case (int)48: case (int)49: case (int)50: case (int)51: case (int)52: case (int)53: case (int)54: case (int)55: case (int)56: case (int)57: {
HXLINE(1448)										n = ((n * 10) + (_hx_char - 48));
            									}
            									break;
            									default:{
HXLINE(1450)										this->_hx_char = _hx_char;
HXLINE(1451)										return ::hscript::Token_obj::TConst(::hscript::Const_obj::CFloat((( (Float)(n) ) / ( (Float)(exp) ))));
            									}
            								}
            							}
            						}
            						break;
            						default:{
HXLINE(1460)							this->_hx_char = _hx_char;
HXLINE(1461)							return ::hscript::Token_obj::TDot_dyn();
            						}
            					}
            				}
            				break;
            				case (int)48: case (int)49: case (int)50: case (int)51: case (int)52: case (int)53: case (int)54: case (int)55: case (int)56: case (int)57: {
HXLINE(1372)					Float n = (( (Float)((_hx_char - 48)) ) * ((Float)1.0));
HXLINE(1373)					Float exp = ((Float)0.);
HXLINE(1374)					while(true){
HXLINE(1375)						_hx_char = this->input.cca(this->readPos++);
HXLINE(1376)						exp = (exp * ( (Float)(10) ));
HXLINE(1377)						switch((int)(_hx_char)){
            							case (int)46: {
HXLINE(1398)								if ((exp > 0)) {
HXLINE(1400)									bool _hx_tmp;
HXDLIN(1400)									if ((exp == 10)) {
HXLINE(1400)										_hx_tmp = (this->input.cca(this->readPos++) == 46);
            									}
            									else {
HXLINE(1400)										_hx_tmp = false;
            									}
HXDLIN(1400)									if (_hx_tmp) {
HXLINE(1401)										{
HXLINE(1401)											 ::haxe::ds::GenericStack_hscript_Token _this = this->tokens;
HXDLIN(1401)											_this->head =  ::haxe::ds::GenericCell_hscript_Token_obj::__alloc( HX_CTX ,::hscript::Token_obj::TOp(HX_("...",ee,0f,23,00)),_this->head);
            										}
HXLINE(1402)										int i = ::Std_obj::_hx_int(n);
HXLINE(1403)										 ::hscript::Const _hx_tmp;
HXDLIN(1403)										if ((i == n)) {
HXLINE(1403)											_hx_tmp = ::hscript::Const_obj::CInt(i);
            										}
            										else {
HXLINE(1403)											_hx_tmp = ::hscript::Const_obj::CFloat(n);
            										}
HXDLIN(1403)										return ::hscript::Token_obj::TConst(_hx_tmp);
            									}
HXLINE(1405)									this->invalidChar(_hx_char);
            								}
HXLINE(1407)								exp = ((Float)1.);
            							}
            							break;
            							case (int)48: case (int)49: case (int)50: case (int)51: case (int)52: case (int)53: case (int)54: case (int)55: case (int)56: case (int)57: {
HXLINE(1379)								n = ((n * ( (Float)(10) )) + (_hx_char - 48));
            							}
            							break;
            							case (int)69: case (int)101: {
HXLINE(1381)								 ::hscript::Token tk = this->token();
HXLINE(1382)								 ::Dynamic pow = null();
HXLINE(1383)								if (::hx::IsNull( tk )) {
HXLINE(1392)									 ::haxe::ds::GenericStack_hscript_Token _this = this->tokens;
HXDLIN(1392)									_this->head =  ::haxe::ds::GenericCell_hscript_Token_obj::__alloc( HX_CTX ,tk,_this->head);
            								}
            								else {
HXLINE(1383)									switch((int)(tk->_hx_getIndex())){
            										case (int)1: {
HXLINE(1384)											 ::hscript::Const _g = tk->_hx_getObject(0).StaticCast<  ::hscript::Const >();
HXDLIN(1384)											if ((_g->_hx_getIndex() == 0)) {
HXLINE(1384)												int e = _g->_hx_getInt(0);
HXDLIN(1384)												pow = e;
            											}
            											else {
HXLINE(1392)												 ::haxe::ds::GenericStack_hscript_Token _this = this->tokens;
HXDLIN(1392)												_this->head =  ::haxe::ds::GenericCell_hscript_Token_obj::__alloc( HX_CTX ,tk,_this->head);
            											}
            										}
            										break;
            										case (int)3: {
HXLINE(1385)											if ((tk->_hx_getString(0) == HX_("-",2d,00,00,00))) {
HXLINE(1386)												tk = this->token();
HXLINE(1387)												if (::hx::IsNull( tk )) {
HXLINE(1389)													 ::haxe::ds::GenericStack_hscript_Token _this = this->tokens;
HXDLIN(1389)													_this->head =  ::haxe::ds::GenericCell_hscript_Token_obj::__alloc( HX_CTX ,tk,_this->head);
            												}
            												else {
HXLINE(1387)													if ((tk->_hx_getIndex() == 1)) {
HXLINE(1388)														 ::hscript::Const _g = tk->_hx_getObject(0).StaticCast<  ::hscript::Const >();
HXDLIN(1388)														if ((_g->_hx_getIndex() == 0)) {
HXLINE(1388)															int e = _g->_hx_getInt(0);
HXDLIN(1388)															pow = -(e);
            														}
            														else {
HXLINE(1389)															 ::haxe::ds::GenericStack_hscript_Token _this = this->tokens;
HXDLIN(1389)															_this->head =  ::haxe::ds::GenericCell_hscript_Token_obj::__alloc( HX_CTX ,tk,_this->head);
            														}
            													}
            													else {
HXLINE(1389)														 ::haxe::ds::GenericStack_hscript_Token _this = this->tokens;
HXDLIN(1389)														_this->head =  ::haxe::ds::GenericCell_hscript_Token_obj::__alloc( HX_CTX ,tk,_this->head);
            													}
            												}
            											}
            											else {
HXLINE(1392)												 ::haxe::ds::GenericStack_hscript_Token _this = this->tokens;
HXDLIN(1392)												_this->head =  ::haxe::ds::GenericCell_hscript_Token_obj::__alloc( HX_CTX ,tk,_this->head);
            											}
            										}
            										break;
            										default:{
HXLINE(1392)											 ::haxe::ds::GenericStack_hscript_Token _this = this->tokens;
HXDLIN(1392)											_this->head =  ::haxe::ds::GenericCell_hscript_Token_obj::__alloc( HX_CTX ,tk,_this->head);
            										}
            									}
            								}
HXLINE(1394)								if (::hx::IsNull( pow )) {
HXLINE(1395)									this->invalidChar(_hx_char);
            								}
HXLINE(1396)								return ::hscript::Token_obj::TConst(::hscript::Const_obj::CFloat((((::Math_obj::pow(( (Float)(10) ),( (Float)(pow) )) / exp) * n) * ( (Float)(10) ))));
            							}
            							break;
            							case (int)120: {
HXLINE(1409)								bool _hx_tmp;
HXDLIN(1409)								if (!((n > 0))) {
HXLINE(1409)									_hx_tmp = (exp > 0);
            								}
            								else {
HXLINE(1409)									_hx_tmp = true;
            								}
HXDLIN(1409)								if (_hx_tmp) {
HXLINE(1410)									this->invalidChar(_hx_char);
            								}
HXLINE(1412)								int n1 = 0;
HXLINE(1413)								while(true){
HXLINE(1414)									_hx_char = this->input.cca(this->readPos++);
HXLINE(1415)									switch((int)(_hx_char)){
            										case (int)48: case (int)49: case (int)50: case (int)51: case (int)52: case (int)53: case (int)54: case (int)55: case (int)56: case (int)57: {
HXLINE(1417)											n1 = (((n1 << 4) + _hx_char) - 48);
            										}
            										break;
            										case (int)65: case (int)66: case (int)67: case (int)68: case (int)69: case (int)70: {
HXLINE(1419)											n1 = ((n1 << 4) + (_hx_char - 55));
            										}
            										break;
            										case (int)97: case (int)98: case (int)99: case (int)100: case (int)101: case (int)102: {
HXLINE(1421)											n1 = ((n1 << 4) + (_hx_char - 87));
            										}
            										break;
            										default:{
HXLINE(1423)											this->_hx_char = _hx_char;
HXLINE(1424)											return ::hscript::Token_obj::TConst(::hscript::Const_obj::CInt(n1));
            										}
            									}
            								}
            							}
            							break;
            							default:{
HXLINE(1428)								this->_hx_char = _hx_char;
HXLINE(1429)								int i = ::Std_obj::_hx_int(n);
HXLINE(1430)								 ::hscript::Const _hx_tmp;
HXDLIN(1430)								if ((exp > 0)) {
HXLINE(1430)									_hx_tmp = ::hscript::Const_obj::CFloat(((n * ( (Float)(10) )) / exp));
            								}
            								else {
HXLINE(1430)									if ((i == n)) {
HXLINE(1430)										_hx_tmp = ::hscript::Const_obj::CInt(i);
            									}
            									else {
HXLINE(1430)										_hx_tmp = ::hscript::Const_obj::CFloat(n);
            									}
            								}
HXDLIN(1430)								return ::hscript::Token_obj::TConst(_hx_tmp);
            							}
            						}
            					}
            				}
            				break;
            				case (int)58: {
HXLINE(1474)					return ::hscript::Token_obj::TDoubleDot_dyn();
            				}
            				break;
            				case (int)59: {
HXLINE(1433)					return ::hscript::Token_obj::TSemicolon_dyn();
            				}
            				break;
            				case (int)61: {
HXLINE(1476)					_hx_char = this->input.cca(this->readPos++);
HXLINE(1477)					if ((_hx_char == 61)) {
HXLINE(1478)						return ::hscript::Token_obj::TOp(HX_("==",60,35,00,00));
            					}
            					else {
HXLINE(1479)						if ((_hx_char == 62)) {
HXLINE(1480)							return ::hscript::Token_obj::TOp(HX_("=>",61,35,00,00));
            						}
            					}
HXLINE(1481)					this->_hx_char = _hx_char;
HXLINE(1482)					return ::hscript::Token_obj::TOp(HX_("=",3d,00,00,00));
            				}
            				break;
            				case (int)63: {
HXLINE(1469)					_hx_char = this->input.cca(this->readPos++);
HXLINE(1470)					if ((_hx_char == 46)) {
HXLINE(1471)						return ::hscript::Token_obj::TQuestionDot_dyn();
            					}
HXLINE(1472)					this->_hx_char = _hx_char;
HXLINE(1473)					return ::hscript::Token_obj::TQuestion_dyn();
            				}
            				break;
            				case (int)64: {
HXLINE(1484)					_hx_char = this->input.cca(this->readPos++);
HXLINE(1485)					bool _hx_tmp;
HXDLIN(1485)					if (!(this->idents->__get(_hx_char))) {
HXLINE(1485)						_hx_tmp = (_hx_char == 58);
            					}
            					else {
HXLINE(1485)						_hx_tmp = true;
            					}
HXDLIN(1485)					if (_hx_tmp) {
HXLINE(1486)						::String id = ::String::fromCharCode(_hx_char);
HXLINE(1487)						while(true){
HXLINE(1488)							_hx_char = this->input.cca(this->readPos++);
HXLINE(1489)							if (!(this->idents->__get(_hx_char))) {
HXLINE(1490)								this->_hx_char = _hx_char;
HXLINE(1491)								return ::hscript::Token_obj::TMeta(id);
            							}
HXLINE(1493)							id = (id + ::String::fromCharCode(_hx_char));
            						}
            					}
HXLINE(1496)					this->invalidChar(_hx_char);
            				}
            				break;
            				case (int)91: {
HXLINE(1465)					return ::hscript::Token_obj::TBkOpen_dyn();
            				}
            				break;
            				case (int)93: {
HXLINE(1466)					return ::hscript::Token_obj::TBkClose_dyn();
            				}
            				break;
            				case (int)123: {
HXLINE(1463)					return ::hscript::Token_obj::TBrOpen_dyn();
            				}
            				break;
            				case (int)125: {
HXLINE(1464)					return ::hscript::Token_obj::TBrClose_dyn();
            				}
            				break;
            				default:{
HXLINE(1512)					if (this->ops->__get(_hx_char)) {
HXLINE(1513)						::String op = ::String::fromCharCode(_hx_char);
HXLINE(1514)						while(true){
HXLINE(1515)							_hx_char = this->input.cca(this->readPos++);
HXLINE(1516)							if ((_hx_char == 0)) {
HXLINE(1516)								_hx_char = 0;
            							}
HXLINE(1517)							if (!(this->ops->__get(_hx_char))) {
HXLINE(1518)								this->_hx_char = _hx_char;
HXLINE(1519)								return ::hscript::Token_obj::TOp(op);
            							}
HXLINE(1521)							::String pop = op;
HXLINE(1522)							op = (op + ::String::fromCharCode(_hx_char));
HXLINE(1523)							bool _hx_tmp;
HXDLIN(1523)							if (!(this->opPriority->exists(op))) {
HXLINE(1523)								_hx_tmp = this->opPriority->exists(pop);
            							}
            							else {
HXLINE(1523)								_hx_tmp = false;
            							}
HXDLIN(1523)							if (_hx_tmp) {
HXLINE(1524)								bool _hx_tmp;
HXDLIN(1524)								if ((op != HX_("//",20,29,00,00))) {
HXLINE(1524)									_hx_tmp = (op == HX_("/*",1b,29,00,00));
            								}
            								else {
HXLINE(1524)									_hx_tmp = true;
            								}
HXDLIN(1524)								if (_hx_tmp) {
HXLINE(1525)									return this->tokenComment(op,_hx_char);
            								}
HXLINE(1526)								this->_hx_char = _hx_char;
HXLINE(1527)								return ::hscript::Token_obj::TOp(pop);
            							}
            						}
            					}
HXLINE(1531)					if (this->idents->__get(_hx_char)) {
HXLINE(1532)						::String id = ::String::fromCharCode(_hx_char);
HXLINE(1533)						while(true){
HXLINE(1534)							_hx_char = this->input.cca(this->readPos++);
HXLINE(1535)							if ((_hx_char == 0)) {
HXLINE(1535)								_hx_char = 0;
            							}
HXLINE(1536)							if (!(this->idents->__get(_hx_char))) {
HXLINE(1537)								this->_hx_char = _hx_char;
HXLINE(1538)								return ::hscript::Token_obj::TId(id);
            							}
HXLINE(1540)							id = (id + ::String::fromCharCode(_hx_char));
            						}
            					}
HXLINE(1543)					this->invalidChar(_hx_char);
            				}
            			}
HXLINE(1545)			_hx_char = this->input.cca(this->readPos++);
            		}
HXLINE(1355)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Parser_obj,token,return )

 ::Dynamic Parser_obj::preprocValue(::String id){
            	HX_STACKFRAME(&_hx_pos_2fd3d36595bebf3d_1551_preprocValue)
HXDLIN(1551)		return this->preprocesorValues->get(id);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Parser_obj,preprocValue,return )

 ::hscript::Expr Parser_obj::parsePreproCond(){
            	HX_GC_STACKFRAME(&_hx_pos_2fd3d36595bebf3d_1556_parsePreproCond)
HXLINE(1557)		 ::hscript::Token tk = this->token();
HXLINE(1558)		if (::hx::IsNull( tk )) {
HXLINE(1567)			return this->unexpected(tk);
            		}
            		else {
HXLINE(1558)			switch((int)(tk->_hx_getIndex())){
            				case (int)2: {
HXLINE(1562)					::String id = tk->_hx_getString(0);
HXLINE(1563)					return ::hscript::Expr_obj::EIdent(id);
            				}
            				break;
            				case (int)3: {
HXLINE(1564)					if ((tk->_hx_getString(0) == HX_("!",21,00,00,00))) {
HXLINE(1565)						return ::hscript::Expr_obj::EUnop(HX_("!",21,00,00,00),true,this->parsePreproCond());
            					}
            					else {
HXLINE(1567)						return this->unexpected(tk);
            					}
            				}
            				break;
            				case (int)4: {
HXLINE(1560)					{
HXLINE(1560)						 ::haxe::ds::GenericStack_hscript_Token _this = this->tokens;
HXDLIN(1560)						_this->head =  ::haxe::ds::GenericCell_hscript_Token_obj::__alloc( HX_CTX ,::hscript::Token_obj::TPOpen_dyn(),_this->head);
            					}
HXLINE(1561)					return this->parseExpr();
            				}
            				break;
            				default:{
HXLINE(1567)					return this->unexpected(tk);
            				}
            			}
            		}
HXLINE(1558)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Parser_obj,parsePreproCond,return )

bool Parser_obj::evalPreproCond( ::hscript::Expr e){
            	HX_STACKFRAME(&_hx_pos_2fd3d36595bebf3d_1572_evalPreproCond)
HXDLIN(1572)		switch((int)(e->_hx_getIndex())){
            			case (int)1: {
HXLINE(1573)				::String id = e->_hx_getString(0);
HXLINE(1574)				return ::hx::IsNotNull( this->preprocValue(id) );
            			}
            			break;
            			case (int)3: {
HXLINE(1577)				 ::hscript::Expr e1 = e->_hx_getObject(0).StaticCast<  ::hscript::Expr >();
HXLINE(1578)				return this->evalPreproCond(e1);
            			}
            			break;
            			case (int)6: {
HXLINE(1581)				 ::hscript::Expr _g = e->_hx_getObject(2).StaticCast<  ::hscript::Expr >();
HXDLIN(1581)				 ::hscript::Expr _g1 = e->_hx_getObject(1).StaticCast<  ::hscript::Expr >();
HXDLIN(1581)				::String _hx_switch_0 = e->_hx_getString(0);
            				if (  (_hx_switch_0==HX_("&&",40,21,00,00)) ){
HXLINE(1579)					 ::hscript::Expr e2 = _g;
HXDLIN(1579)					 ::hscript::Expr e1 = _g1;
HXLINE(1580)					if (this->evalPreproCond(e1)) {
HXLINE(1580)						return this->evalPreproCond(e2);
            					}
            					else {
HXLINE(1580)						return false;
            					}
HXLINE(1579)					goto _hx_goto_107;
            				}
            				if (  (_hx_switch_0==HX_("||",80,6c,00,00)) ){
HXLINE(1581)					 ::hscript::Expr e2 = _g;
HXDLIN(1581)					 ::hscript::Expr e1 = _g1;
HXLINE(1582)					if (!(this->evalPreproCond(e1))) {
HXLINE(1582)						return this->evalPreproCond(e2);
            					}
            					else {
HXLINE(1582)						return true;
            					}
HXLINE(1581)					goto _hx_goto_107;
            				}
            				/* default */{
HXLINE(1584)					{
HXLINE(1584)						 ::hscript::Error err = ::hscript::Error_obj::EInvalidPreprocessor((HX_("Can't eval ",01,17,bf,09) + ::Type_obj::enumConstructor(e)));
HXDLIN(1584)						int pmin = (this->readPos + this->offset);
HXDLIN(1584)						int pmax = (this->readPos + this->offset);
HXDLIN(1584)						if (!(this->resumeErrors)) {
HXLINE(1584)							HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(err));
            						}
            					}
HXLINE(1585)					return false;
            				}
            				_hx_goto_107:;
            			}
            			break;
            			case (int)7: {
HXLINE(1575)				bool _g = e->_hx_getBool(1);
HXDLIN(1575)				if ((e->_hx_getString(0) == HX_("!",21,00,00,00))) {
HXLINE(1575)					 ::hscript::Expr e1 = e->_hx_getObject(2).StaticCast<  ::hscript::Expr >();
HXLINE(1576)					return !(this->evalPreproCond(e1));
            				}
            				else {
HXLINE(1584)					{
HXLINE(1584)						 ::hscript::Error err = ::hscript::Error_obj::EInvalidPreprocessor((HX_("Can't eval ",01,17,bf,09) + ::Type_obj::enumConstructor(e)));
HXDLIN(1584)						int pmin = (this->readPos + this->offset);
HXDLIN(1584)						int pmax = (this->readPos + this->offset);
HXDLIN(1584)						if (!(this->resumeErrors)) {
HXLINE(1584)							HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(err));
            						}
            					}
HXLINE(1585)					return false;
            				}
            			}
            			break;
            			default:{
HXLINE(1584)				{
HXLINE(1584)					 ::hscript::Error err = ::hscript::Error_obj::EInvalidPreprocessor((HX_("Can't eval ",01,17,bf,09) + ::Type_obj::enumConstructor(e)));
HXDLIN(1584)					int pmin = (this->readPos + this->offset);
HXDLIN(1584)					int pmax = (this->readPos + this->offset);
HXDLIN(1584)					if (!(this->resumeErrors)) {
HXLINE(1584)						HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(err));
            					}
            				}
HXLINE(1585)				return false;
            			}
            		}
HXLINE(1572)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Parser_obj,evalPreproCond,return )

 ::hscript::Token Parser_obj::preprocess(::String id){
            	HX_STACKFRAME(&_hx_pos_2fd3d36595bebf3d_1590_preprocess)
HXDLIN(1590)		::String _hx_switch_0 = id;
            		if (  (_hx_switch_0==HX_("else",b9,e4,14,43)) ||  (_hx_switch_0==HX_("elseif",d6,a0,a2,dd)) ){
HXLINE(1600)			if ((this->preprocStack->length > 0)) {
HXLINE(1601)				if (( (bool)(this->preprocStack->__get((this->preprocStack->length - 1))->__Field(HX_("r",72,00,00,00),::hx::paccDynamic)) )) {
HXLINE(1602)					this->preprocStack->__get((this->preprocStack->length - 1))->__SetField(HX_("r",72,00,00,00),false,::hx::paccDynamic);
HXLINE(1603)					this->skipTokens();
HXLINE(1604)					return this->token();
            				}
            				else {
HXLINE(1605)					if ((id == HX_("else",b9,e4,14,43))) {
HXLINE(1606)						this->preprocStack->pop();
HXLINE(1607)						this->preprocStack->push( ::Dynamic(::hx::Anon_obj::Create(1)
            							->setFixed(0,HX_("r",72,00,00,00),true)));
HXLINE(1608)						return this->token();
            					}
            					else {
HXLINE(1611)						this->preprocStack->pop();
HXLINE(1612)						return this->preprocess(HX_("if",dd,5b,00,00));
            					}
            				}
            			}
            			else {
HXLINE(1618)				return ::hscript::Token_obj::TPrepro(id);
            			}
HXLINE(1600)			goto _hx_goto_109;
            		}
            		if (  (_hx_switch_0==HX_("end",db,03,4d,00)) ){
HXLINE(1614)			if ((this->preprocStack->length > 0)) {
HXLINE(1615)				this->preprocStack->pop();
HXLINE(1616)				return this->token();
            			}
            			else {
HXLINE(1618)				return ::hscript::Token_obj::TPrepro(id);
            			}
HXLINE(1614)			goto _hx_goto_109;
            		}
            		if (  (_hx_switch_0==HX_("if",dd,5b,00,00)) ){
HXLINE(1592)			 ::hscript::Expr e = this->parsePreproCond();
HXLINE(1593)			if (this->evalPreproCond(e)) {
HXLINE(1594)				this->preprocStack->push( ::Dynamic(::hx::Anon_obj::Create(1)
            					->setFixed(0,HX_("r",72,00,00,00),true)));
HXLINE(1595)				return this->token();
            			}
HXLINE(1597)			this->preprocStack->push( ::Dynamic(::hx::Anon_obj::Create(1)
            				->setFixed(0,HX_("r",72,00,00,00),false)));
HXLINE(1598)			this->skipTokens();
HXLINE(1599)			return this->token();
HXLINE(1591)			goto _hx_goto_109;
            		}
            		/* default */{
HXLINE(1618)			return ::hscript::Token_obj::TPrepro(id);
            		}
            		_hx_goto_109:;
HXLINE(1590)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(Parser_obj,preprocess,return )

void Parser_obj::skipTokens(){
            	HX_GC_STACKFRAME(&_hx_pos_2fd3d36595bebf3d_1622_skipTokens)
HXLINE(1623)		int spos = (this->preprocStack->length - 1);
HXLINE(1624)		 ::Dynamic obj = this->preprocStack->__get(spos);
HXLINE(1625)		int pos = (this->readPos + this->offset);
HXLINE(1626)		while(true){
HXLINE(1627)			 ::hscript::Token tk = this->token();
HXLINE(1628)			if (::hx::IsEq( tk,::hscript::Token_obj::TEof_dyn() )) {
HXLINE(1629)				if (!(this->resumeErrors)) {
HXLINE(1629)					HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::hscript::Error_obj::EInvalidPreprocessor(HX_("Unclosed",e5,94,4a,ea))));
            				}
            			}
HXLINE(1630)			if (::hx::IsNotEq( this->preprocStack->__get(spos),obj )) {
HXLINE(1631)				{
HXLINE(1631)					 ::haxe::ds::GenericStack_hscript_Token _this = this->tokens;
HXDLIN(1631)					_this->head =  ::haxe::ds::GenericCell_hscript_Token_obj::__alloc( HX_CTX ,tk,_this->head);
            				}
HXLINE(1632)				goto _hx_goto_111;
            			}
            		}
            		_hx_goto_111:;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Parser_obj,skipTokens,(void))

 ::hscript::Token Parser_obj::tokenComment(::String op,int _hx_char){
            	HX_STACKFRAME(&_hx_pos_2fd3d36595bebf3d_1637_tokenComment)
HXLINE(1638)		 ::Dynamic c = op.charCodeAt(1);
HXLINE(1639)		::String s = this->input;
HXLINE(1640)		if (::hx::IsEq( c,47 )) {
HXLINE(1641)			while(true){
HXLINE(1641)				bool _hx_tmp;
HXDLIN(1641)				if ((_hx_char != 13)) {
HXLINE(1641)					_hx_tmp = (_hx_char != 10);
            				}
            				else {
HXLINE(1641)					_hx_tmp = false;
            				}
HXDLIN(1641)				if (!(_hx_tmp)) {
HXLINE(1641)					goto _hx_goto_113;
            				}
HXLINE(1642)				_hx_char = this->input.cca(this->readPos++);
HXLINE(1643)				if ((_hx_char == 0)) {
HXLINE(1643)					goto _hx_goto_113;
            				}
            			}
            			_hx_goto_113:;
HXLINE(1645)			this->_hx_char = _hx_char;
HXLINE(1646)			return this->token();
            		}
HXLINE(1648)		if (::hx::IsEq( c,42 )) {
HXLINE(1649)			int old = this->line;
HXLINE(1650)			if ((op == HX_("/**/",a0,0a,31,1f))) {
HXLINE(1651)				this->_hx_char = _hx_char;
HXLINE(1652)				return this->token();
            			}
HXLINE(1654)			while(true){
HXLINE(1655)				while((_hx_char != 42)){
HXLINE(1656)					if ((_hx_char == 10)) {
HXLINE(1656)						this->line++;
            					}
HXLINE(1657)					_hx_char = this->input.cca(this->readPos++);
HXLINE(1658)					if ((_hx_char == 0)) {
HXLINE(1659)						this->line = old;
HXLINE(1660)						if (!(this->resumeErrors)) {
HXLINE(1660)							HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::hscript::Error_obj::EUnterminatedComment_dyn()));
            						}
HXLINE(1661)						goto _hx_goto_115;
            					}
            				}
            				_hx_goto_115:;
HXLINE(1664)				_hx_char = this->input.cca(this->readPos++);
HXLINE(1665)				if ((_hx_char == 0)) {
HXLINE(1666)					this->line = old;
HXLINE(1667)					if (!(this->resumeErrors)) {
HXLINE(1667)						HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::hscript::Error_obj::EUnterminatedComment_dyn()));
            					}
HXLINE(1668)					goto _hx_goto_114;
            				}
HXLINE(1670)				if ((_hx_char == 47)) {
HXLINE(1671)					goto _hx_goto_114;
            				}
            			}
            			_hx_goto_114:;
HXLINE(1673)			return this->token();
            		}
HXLINE(1675)		this->_hx_char = _hx_char;
HXLINE(1676)		return ::hscript::Token_obj::TOp(op);
            	}


HX_DEFINE_DYNAMIC_FUNC2(Parser_obj,tokenComment,return )

::String Parser_obj::constString( ::hscript::Const c){
            	HX_STACKFRAME(&_hx_pos_2fd3d36595bebf3d_1680_constString)
HXDLIN(1680)		switch((int)(c->_hx_getIndex())){
            			case (int)0: {
HXLINE(1681)				int v = c->_hx_getInt(0);
HXDLIN(1681)				return ::Std_obj::string(v);
            			}
            			break;
            			case (int)1: {
HXLINE(1682)				Float f = c->_hx_getFloat(0);
HXDLIN(1682)				return ::Std_obj::string(f);
            			}
            			break;
            			case (int)2: {
HXLINE(1683)				::String s = c->_hx_getString(0);
HXDLIN(1683)				return s;
            			}
            			break;
            		}
HXLINE(1680)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(Parser_obj,constString,return )

::String Parser_obj::tokenString( ::hscript::Token t){
            	HX_STACKFRAME(&_hx_pos_2fd3d36595bebf3d_1688_tokenString)
HXDLIN(1688)		switch((int)(t->_hx_getIndex())){
            			case (int)0: {
HXLINE(1689)				return HX_("<eof>",3e,ee,21,cf);
            			}
            			break;
            			case (int)1: {
HXLINE(1690)				 ::hscript::Const c = t->_hx_getObject(0).StaticCast<  ::hscript::Const >();
HXDLIN(1690)				return this->constString(c);
            			}
            			break;
            			case (int)2: {
HXLINE(1691)				::String s = t->_hx_getString(0);
HXDLIN(1691)				return s;
            			}
            			break;
            			case (int)3: {
HXLINE(1692)				::String s = t->_hx_getString(0);
HXDLIN(1692)				return s;
            			}
            			break;
            			case (int)4: {
HXLINE(1693)				return HX_("(",28,00,00,00);
            			}
            			break;
            			case (int)5: {
HXLINE(1694)				return HX_(")",29,00,00,00);
            			}
            			break;
            			case (int)6: {
HXLINE(1695)				return HX_("{",7b,00,00,00);
            			}
            			break;
            			case (int)7: {
HXLINE(1696)				return HX_("}",7d,00,00,00);
            			}
            			break;
            			case (int)8: {
HXLINE(1697)				return HX_(".",2e,00,00,00);
            			}
            			break;
            			case (int)9: {
HXLINE(1698)				return HX_("?.",0f,37,00,00);
            			}
            			break;
            			case (int)10: {
HXLINE(1699)				return HX_(",",2c,00,00,00);
            			}
            			break;
            			case (int)11: {
HXLINE(1700)				return HX_(";",3b,00,00,00);
            			}
            			break;
            			case (int)12: {
HXLINE(1701)				return HX_("[",5b,00,00,00);
            			}
            			break;
            			case (int)13: {
HXLINE(1702)				return HX_("]",5d,00,00,00);
            			}
            			break;
            			case (int)14: {
HXLINE(1703)				return HX_("?",3f,00,00,00);
            			}
            			break;
            			case (int)15: {
HXLINE(1704)				return HX_(":",3a,00,00,00);
            			}
            			break;
            			case (int)16: {
HXLINE(1705)				::String id = t->_hx_getString(0);
HXDLIN(1705)				return (HX_("@",40,00,00,00) + id);
            			}
            			break;
            			case (int)17: {
HXLINE(1706)				::String id = t->_hx_getString(0);
HXDLIN(1706)				return (HX_("#",23,00,00,00) + id);
            			}
            			break;
            		}
HXLINE(1688)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(Parser_obj,tokenString,return )

int Parser_obj::p1;

int Parser_obj::tokenMin;

int Parser_obj::tokenMax;


::hx::ObjectPtr< Parser_obj > Parser_obj::__new() {
	::hx::ObjectPtr< Parser_obj > __this = new Parser_obj();
	__this->__construct();
	return __this;
}

::hx::ObjectPtr< Parser_obj > Parser_obj::__alloc(::hx::Ctx *_hx_ctx) {
	Parser_obj *__this = (Parser_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(Parser_obj), true, "hscript.Parser"));
	*(void **)__this = Parser_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

Parser_obj::Parser_obj()
{
}

void Parser_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Parser);
	HX_MARK_MEMBER_NAME(line,"line");
	HX_MARK_MEMBER_NAME(opChars,"opChars");
	HX_MARK_MEMBER_NAME(identChars,"identChars");
	HX_MARK_MEMBER_NAME(opPriority,"opPriority");
	HX_MARK_MEMBER_NAME(opRightAssoc,"opRightAssoc");
	HX_MARK_MEMBER_NAME(preprocesorValues,"preprocesorValues");
	HX_MARK_MEMBER_NAME(allowJSON,"allowJSON");
	HX_MARK_MEMBER_NAME(allowTypes,"allowTypes");
	HX_MARK_MEMBER_NAME(allowMetadata,"allowMetadata");
	HX_MARK_MEMBER_NAME(resumeErrors,"resumeErrors");
	HX_MARK_MEMBER_NAME(input,"input");
	HX_MARK_MEMBER_NAME(readPos,"readPos");
	HX_MARK_MEMBER_NAME(offset,"offset");
	HX_MARK_MEMBER_NAME(_hx_char,"char");
	HX_MARK_MEMBER_NAME(ops,"ops");
	HX_MARK_MEMBER_NAME(idents,"idents");
	HX_MARK_MEMBER_NAME(uid,"uid");
	HX_MARK_MEMBER_NAME(tokens,"tokens");
	HX_MARK_MEMBER_NAME(preprocStack,"preprocStack");
	HX_MARK_END_CLASS();
}

void Parser_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(line,"line");
	HX_VISIT_MEMBER_NAME(opChars,"opChars");
	HX_VISIT_MEMBER_NAME(identChars,"identChars");
	HX_VISIT_MEMBER_NAME(opPriority,"opPriority");
	HX_VISIT_MEMBER_NAME(opRightAssoc,"opRightAssoc");
	HX_VISIT_MEMBER_NAME(preprocesorValues,"preprocesorValues");
	HX_VISIT_MEMBER_NAME(allowJSON,"allowJSON");
	HX_VISIT_MEMBER_NAME(allowTypes,"allowTypes");
	HX_VISIT_MEMBER_NAME(allowMetadata,"allowMetadata");
	HX_VISIT_MEMBER_NAME(resumeErrors,"resumeErrors");
	HX_VISIT_MEMBER_NAME(input,"input");
	HX_VISIT_MEMBER_NAME(readPos,"readPos");
	HX_VISIT_MEMBER_NAME(offset,"offset");
	HX_VISIT_MEMBER_NAME(_hx_char,"char");
	HX_VISIT_MEMBER_NAME(ops,"ops");
	HX_VISIT_MEMBER_NAME(idents,"idents");
	HX_VISIT_MEMBER_NAME(uid,"uid");
	HX_VISIT_MEMBER_NAME(tokens,"tokens");
	HX_VISIT_MEMBER_NAME(preprocStack,"preprocStack");
}

::hx::Val Parser_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"mk") ) { return ::hx::Val( mk_dyn() ); }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"ops") ) { return ::hx::Val( ops ); }
		if (HX_FIELD_EQ(inName,"uid") ) { return ::hx::Val( uid ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"line") ) { return ::hx::Val( line ); }
		if (HX_FIELD_EQ(inName,"char") ) { return ::hx::Val( _hx_char ); }
		if (HX_FIELD_EQ(inName,"push") ) { return ::hx::Val( push_dyn() ); }
		if (HX_FIELD_EQ(inName,"expr") ) { return ::hx::Val( expr_dyn() ); }
		if (HX_FIELD_EQ(inName,"pmin") ) { return ::hx::Val( pmin_dyn() ); }
		if (HX_FIELD_EQ(inName,"pmax") ) { return ::hx::Val( pmax_dyn() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"input") ) { return ::hx::Val( input ); }
		if (HX_FIELD_EQ(inName,"error") ) { return ::hx::Val( error_dyn() ); }
		if (HX_FIELD_EQ(inName,"maybe") ) { return ::hx::Val( maybe_dyn() ); }
		if (HX_FIELD_EQ(inName,"token") ) { return ::hx::Val( token_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"offset") ) { return ::hx::Val( offset ); }
		if (HX_FIELD_EQ(inName,"idents") ) { return ::hx::Val( idents ); }
		if (HX_FIELD_EQ(inName,"tokens") ) { return ::hx::Val( tokens ); }
		if (HX_FIELD_EQ(inName,"ensure") ) { return ::hx::Val( ensure_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"opChars") ) { return ::hx::Val( opChars ); }
		if (HX_FIELD_EQ(inName,"readPos") ) { return ::hx::Val( readPos ); }
		if (HX_FIELD_EQ(inName,"isBlock") ) { return ::hx::Val( isBlock_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"getIdent") ) { return ::hx::Val( getIdent_dyn() ); }
		if (HX_FIELD_EQ(inName,"mapCompr") ) { return ::hx::Val( mapCompr_dyn() ); }
		if (HX_FIELD_EQ(inName,"makeUnop") ) { return ::hx::Val( makeUnop_dyn() ); }
		if (HX_FIELD_EQ(inName,"readChar") ) { return ::hx::Val( readChar_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"allowJSON") ) { return ::hx::Val( allowJSON ); }
		if (HX_FIELD_EQ(inName,"parseExpr") ) { return ::hx::Val( parseExpr_dyn() ); }
		if (HX_FIELD_EQ(inName,"makeBinop") ) { return ::hx::Val( makeBinop_dyn() ); }
		if (HX_FIELD_EQ(inName,"parsePath") ) { return ::hx::Val( parsePath_dyn() ); }
		if (HX_FIELD_EQ(inName,"parseType") ) { return ::hx::Val( parseType_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"identChars") ) { return ::hx::Val( identChars ); }
		if (HX_FIELD_EQ(inName,"opPriority") ) { return ::hx::Val( opPriority ); }
		if (HX_FIELD_EQ(inName,"allowTypes") ) { return ::hx::Val( allowTypes ); }
		if (HX_FIELD_EQ(inName,"currentPos") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_currentPos() ); }
		if (HX_FIELD_EQ(inName,"initParser") ) { return ::hx::Val( initParser_dyn() ); }
		if (HX_FIELD_EQ(inName,"unexpected") ) { return ::hx::Val( unexpected_dyn() ); }
		if (HX_FIELD_EQ(inName,"parseField") ) { return ::hx::Val( parseField_dyn() ); }
		if (HX_FIELD_EQ(inName,"readString") ) { return ::hx::Val( readString_dyn() ); }
		if (HX_FIELD_EQ(inName,"preprocess") ) { return ::hx::Val( preprocess_dyn() ); }
		if (HX_FIELD_EQ(inName,"skipTokens") ) { return ::hx::Val( skipTokens_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"invalidChar") ) { return ::hx::Val( invalidChar_dyn() ); }
		if (HX_FIELD_EQ(inName,"parseString") ) { return ::hx::Val( parseString_dyn() ); }
		if (HX_FIELD_EQ(inName,"ensureToken") ) { return ::hx::Val( ensureToken_dyn() ); }
		if (HX_FIELD_EQ(inName,"parseObject") ) { return ::hx::Val( parseObject_dyn() ); }
		if (HX_FIELD_EQ(inName,"parseLambda") ) { return ::hx::Val( parseLambda_dyn() ); }
		if (HX_FIELD_EQ(inName,"parseModule") ) { return ::hx::Val( parseModule_dyn() ); }
		if (HX_FIELD_EQ(inName,"parseParams") ) { return ::hx::Val( parseParams_dyn() ); }
		if (HX_FIELD_EQ(inName,"constString") ) { return ::hx::Val( constString_dyn() ); }
		if (HX_FIELD_EQ(inName,"tokenString") ) { return ::hx::Val( tokenString_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"opRightAssoc") ) { return ::hx::Val( opRightAssoc ); }
		if (HX_FIELD_EQ(inName,"resumeErrors") ) { return ::hx::Val( resumeErrors ); }
		if (HX_FIELD_EQ(inName,"preprocValue") ) { return ::hx::Val( preprocValue_dyn() ); }
		if (HX_FIELD_EQ(inName,"preprocStack") ) { return ::hx::Val( preprocStack ); }
		if (HX_FIELD_EQ(inName,"tokenComment") ) { return ::hx::Val( tokenComment_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"allowMetadata") ) { return ::hx::Val( allowMetadata ); }
		if (HX_FIELD_EQ(inName,"parseFullExpr") ) { return ::hx::Val( parseFullExpr_dyn() ); }
		if (HX_FIELD_EQ(inName,"parseMetaArgs") ) { return ::hx::Val( parseMetaArgs_dyn() ); }
		if (HX_FIELD_EQ(inName,"parseExprNext") ) { return ::hx::Val( parseExprNext_dyn() ); }
		if (HX_FIELD_EQ(inName,"parseTypeNext") ) { return ::hx::Val( parseTypeNext_dyn() ); }
		if (HX_FIELD_EQ(inName,"parseExprList") ) { return ::hx::Val( parseExprList_dyn() ); }
		if (HX_FIELD_EQ(inName,"parseMetadata") ) { return ::hx::Val( parseMetadata_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"get_currentPos") ) { return ::hx::Val( get_currentPos_dyn() ); }
		if (HX_FIELD_EQ(inName,"parseStructure") ) { return ::hx::Val( parseStructure_dyn() ); }
		if (HX_FIELD_EQ(inName,"evalPreproCond") ) { return ::hx::Val( evalPreproCond_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"parseModuleDecl") ) { return ::hx::Val( parseModuleDecl_dyn() ); }
		if (HX_FIELD_EQ(inName,"parsePreproCond") ) { return ::hx::Val( parsePreproCond_dyn() ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"preprocesorValues") ) { return ::hx::Val( preprocesorValues ); }
		if (HX_FIELD_EQ(inName,"parseFunctionArgs") ) { return ::hx::Val( parseFunctionArgs_dyn() ); }
		if (HX_FIELD_EQ(inName,"parseFunctionDecl") ) { return ::hx::Val( parseFunctionDecl_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val Parser_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"ops") ) { ops=inValue.Cast< ::Array< bool > >(); return inValue; }
		if (HX_FIELD_EQ(inName,"uid") ) { uid=inValue.Cast< int >(); return inValue; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"line") ) { line=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"char") ) { _hx_char=inValue.Cast< int >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"input") ) { input=inValue.Cast< ::String >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"offset") ) { offset=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"idents") ) { idents=inValue.Cast< ::Array< bool > >(); return inValue; }
		if (HX_FIELD_EQ(inName,"tokens") ) { tokens=inValue.Cast<  ::haxe::ds::GenericStack_hscript_Token >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"opChars") ) { opChars=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"readPos") ) { readPos=inValue.Cast< int >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"allowJSON") ) { allowJSON=inValue.Cast< bool >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"identChars") ) { identChars=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"opPriority") ) { opPriority=inValue.Cast<  ::haxe::ds::StringMap >(); return inValue; }
		if (HX_FIELD_EQ(inName,"allowTypes") ) { allowTypes=inValue.Cast< bool >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"opRightAssoc") ) { opRightAssoc=inValue.Cast<  ::haxe::ds::StringMap >(); return inValue; }
		if (HX_FIELD_EQ(inName,"resumeErrors") ) { resumeErrors=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"preprocStack") ) { preprocStack=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"allowMetadata") ) { allowMetadata=inValue.Cast< bool >(); return inValue; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"preprocesorValues") ) { preprocesorValues=inValue.Cast<  ::haxe::ds::StringMap >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Parser_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("line",f4,17,b3,47));
	outFields->push(HX_("opChars",fc,f3,a7,a8));
	outFields->push(HX_("identChars",cd,23,3f,ee));
	outFields->push(HX_("opPriority",a5,21,d8,3e));
	outFields->push(HX_("opRightAssoc",9a,d1,fe,02));
	outFields->push(HX_("preprocesorValues",4c,e2,81,ce));
	outFields->push(HX_("allowJSON",31,27,44,b1));
	outFields->push(HX_("allowTypes",30,2b,97,45));
	outFields->push(HX_("allowMetadata",18,79,d4,10));
	outFields->push(HX_("resumeErrors",38,61,37,31));
	outFields->push(HX_("input",0a,c4,1d,be));
	outFields->push(HX_("readPos",de,03,cf,02));
	outFields->push(HX_("offset",93,97,3f,60));
	outFields->push(HX_("currentPos",db,22,30,c7));
	outFields->push(HX_("char",d6,5e,bf,41));
	outFields->push(HX_("ops",32,9c,54,00));
	outFields->push(HX_("idents",83,4f,a1,d2));
	outFields->push(HX_("uid",90,23,59,00));
	outFields->push(HX_("tokens",5a,17,e7,91));
	outFields->push(HX_("preprocStack",4f,d3,9d,7a));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo Parser_obj_sMemberStorageInfo[] = {
	{::hx::fsInt,(int)offsetof(Parser_obj,line),HX_("line",f4,17,b3,47)},
	{::hx::fsString,(int)offsetof(Parser_obj,opChars),HX_("opChars",fc,f3,a7,a8)},
	{::hx::fsString,(int)offsetof(Parser_obj,identChars),HX_("identChars",cd,23,3f,ee)},
	{::hx::fsObject /*  ::haxe::ds::StringMap */ ,(int)offsetof(Parser_obj,opPriority),HX_("opPriority",a5,21,d8,3e)},
	{::hx::fsObject /*  ::haxe::ds::StringMap */ ,(int)offsetof(Parser_obj,opRightAssoc),HX_("opRightAssoc",9a,d1,fe,02)},
	{::hx::fsObject /*  ::haxe::ds::StringMap */ ,(int)offsetof(Parser_obj,preprocesorValues),HX_("preprocesorValues",4c,e2,81,ce)},
	{::hx::fsBool,(int)offsetof(Parser_obj,allowJSON),HX_("allowJSON",31,27,44,b1)},
	{::hx::fsBool,(int)offsetof(Parser_obj,allowTypes),HX_("allowTypes",30,2b,97,45)},
	{::hx::fsBool,(int)offsetof(Parser_obj,allowMetadata),HX_("allowMetadata",18,79,d4,10)},
	{::hx::fsBool,(int)offsetof(Parser_obj,resumeErrors),HX_("resumeErrors",38,61,37,31)},
	{::hx::fsString,(int)offsetof(Parser_obj,input),HX_("input",0a,c4,1d,be)},
	{::hx::fsInt,(int)offsetof(Parser_obj,readPos),HX_("readPos",de,03,cf,02)},
	{::hx::fsInt,(int)offsetof(Parser_obj,offset),HX_("offset",93,97,3f,60)},
	{::hx::fsInt,(int)offsetof(Parser_obj,_hx_char),HX_("char",d6,5e,bf,41)},
	{::hx::fsObject /* ::Array< bool > */ ,(int)offsetof(Parser_obj,ops),HX_("ops",32,9c,54,00)},
	{::hx::fsObject /* ::Array< bool > */ ,(int)offsetof(Parser_obj,idents),HX_("idents",83,4f,a1,d2)},
	{::hx::fsInt,(int)offsetof(Parser_obj,uid),HX_("uid",90,23,59,00)},
	{::hx::fsObject /*  ::haxe::ds::GenericStack_hscript_Token */ ,(int)offsetof(Parser_obj,tokens),HX_("tokens",5a,17,e7,91)},
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(Parser_obj,preprocStack),HX_("preprocStack",4f,d3,9d,7a)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo Parser_obj_sStaticStorageInfo[] = {
	{::hx::fsInt,(void *) &Parser_obj::p1,HX_("p1",c1,61,00,00)},
	{::hx::fsInt,(void *) &Parser_obj::tokenMin,HX_("tokenMin",19,a8,42,2b)},
	{::hx::fsInt,(void *) &Parser_obj::tokenMax,HX_("tokenMax",2b,a1,42,2b)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static ::String Parser_obj_sMemberFields[] = {
	HX_("line",f4,17,b3,47),
	HX_("opChars",fc,f3,a7,a8),
	HX_("identChars",cd,23,3f,ee),
	HX_("opPriority",a5,21,d8,3e),
	HX_("opRightAssoc",9a,d1,fe,02),
	HX_("preprocesorValues",4c,e2,81,ce),
	HX_("allowJSON",31,27,44,b1),
	HX_("allowTypes",30,2b,97,45),
	HX_("allowMetadata",18,79,d4,10),
	HX_("resumeErrors",38,61,37,31),
	HX_("input",0a,c4,1d,be),
	HX_("readPos",de,03,cf,02),
	HX_("offset",93,97,3f,60),
	HX_("char",d6,5e,bf,41),
	HX_("ops",32,9c,54,00),
	HX_("idents",83,4f,a1,d2),
	HX_("uid",90,23,59,00),
	HX_("tokens",5a,17,e7,91),
	HX_("get_currentPos",24,ab,25,3d),
	HX_("error",c8,cb,29,73),
	HX_("invalidChar",6d,ad,ce,a9),
	HX_("initParser",0f,f8,cd,f1),
	HX_("parseString",64,d5,6c,8c),
	HX_("unexpected",d1,15,f4,c5),
	HX_("push",da,11,61,4a),
	HX_("ensure",be,f5,7b,04),
	HX_("ensureToken",5b,6c,33,ec),
	HX_("maybe",a8,13,27,03),
	HX_("getIdent",7a,52,50,17),
	HX_("expr",35,fd,1d,43),
	HX_("pmin",22,f7,5a,4a),
	HX_("pmax",34,f0,5a,4a),
	HX_("mk",5e,5f,00,00),
	HX_("isBlock",03,19,82,51),
	HX_("parseFullExpr",b7,bd,60,9c),
	HX_("parseObject",52,2b,7c,90),
	HX_("parseExpr",08,4f,c4,ca),
	HX_("parseLambda",9a,df,fc,cb),
	HX_("parseMetaArgs",15,82,33,6e),
	HX_("mapCompr",47,a4,9f,c1),
	HX_("makeUnop",c8,c4,47,44),
	HX_("makeBinop",da,90,98,86),
	HX_("parseStructure",80,85,70,8b),
	HX_("parseExprNext",1b,24,a8,f3),
	HX_("parseFunctionArgs",68,ad,48,04),
	HX_("parseFunctionDecl",75,70,3a,06),
	HX_("parsePath",78,37,f8,d1),
	HX_("parseType",8d,44,af,d4),
	HX_("parseTypeNext",20,c0,fc,fa),
	HX_("parseExprList",86,bb,58,f2),
	HX_("parseModule",3f,e1,0f,3c),
	HX_("parseMetadata",c2,1e,49,85),
	HX_("parseParams",d9,a7,b7,68),
	HX_("parseModuleDecl",49,69,92,8b),
	HX_("parseField",87,db,74,2a),
	HX_("readChar",4c,39,b7,69),
	HX_("readString",c7,0c,ac,0a),
	HX_("token",f9,82,2b,14),
	HX_("preprocValue",78,eb,4a,28),
	HX_("preprocStack",4f,d3,9d,7a),
	HX_("parsePreproCond",ff,8c,11,d6),
	HX_("evalPreproCond",a8,25,52,b0),
	HX_("preprocess",ac,dc,46,92),
	HX_("skipTokens",39,0b,eb,f9),
	HX_("tokenComment",66,60,fb,25),
	HX_("constString",94,42,30,a9),
	HX_("tokenString",aa,20,de,a4),
	::String(null()) };

static void Parser_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Parser_obj::p1,"p1");
	HX_MARK_MEMBER_NAME(Parser_obj::tokenMin,"tokenMin");
	HX_MARK_MEMBER_NAME(Parser_obj::tokenMax,"tokenMax");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Parser_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Parser_obj::p1,"p1");
	HX_VISIT_MEMBER_NAME(Parser_obj::tokenMin,"tokenMin");
	HX_VISIT_MEMBER_NAME(Parser_obj::tokenMax,"tokenMax");
};

#endif

::hx::Class Parser_obj::__mClass;

static ::String Parser_obj_sStaticFields[] = {
	HX_("p1",c1,61,00,00),
	HX_("tokenMin",19,a8,42,2b),
	HX_("tokenMax",2b,a1,42,2b),
	::String(null())
};

void Parser_obj::__register()
{
	Parser_obj _hx_dummy;
	Parser_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("hscript.Parser",9a,9f,f2,e9);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Parser_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(Parser_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(Parser_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< Parser_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Parser_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Parser_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Parser_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void Parser_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_2fd3d36595bebf3d_99_boot)
HXDLIN(  99)		p1 = 0;
            	}
{
            	HX_STACKFRAME(&_hx_pos_2fd3d36595bebf3d_100_boot)
HXDLIN( 100)		tokenMin = 0;
            	}
{
            	HX_STACKFRAME(&_hx_pos_2fd3d36595bebf3d_101_boot)
HXDLIN( 101)		tokenMax = 0;
            	}
}

} // end namespace hscript
